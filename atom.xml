<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SomnambulistOfChina</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-08T15:11:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SomnambulistOfChina</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot框架</title>
    <link href="http://yoursite.com/2018/04/21/72.%20SpringBoot%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/04/21/72. SpringBoot框架/</id>
    <published>2018-04-20T16:00:00.000Z</published>
    <updated>2019-06-08T15:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Spring-Boot-介绍"><a href="#第一章-Spring-Boot-介绍" class="headerlink" title="第一章 Spring Boot 介绍"></a>第一章 Spring Boot 介绍</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。习惯优于配置</p><h2 id="1-2-为什么使用Spring-Boot"><a href="#1-2-为什么使用Spring-Boot" class="headerlink" title="1.2 为什么使用Spring Boot"></a>1.2 为什么使用Spring Boot</h2><p>J2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大。</p><h2 id="1-3-Spring-Boot是什么"><a href="#1-3-Spring-Boot是什么" class="headerlink" title="1.3 Spring Boot是什么"></a>1.3 Spring Boot是什么</h2><ul><li>一站式整合所有应用框架的框架；并且完美整合Spring技术栈； <a href="https://spring.io/projects" target="_blank" rel="noopener">https://spring.io/projects</a> </li><li>Spring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用</li></ul><h2 id="1-4-Spring-boot-优点"><a href="#1-4-Spring-boot-优点" class="headerlink" title="1.4 Spring boot 优点"></a>1.4 Spring boot 优点</h2><ul><li>快速创建独立运行的Spring项目以及与主流框架集成</li><li>使用嵌入式的Servlet容器，应用无需打成WAR包</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置XML，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控</li><li>与云计算的天然集成</li></ul><h2 id="1-5-环境要求"><a href="#1-5-环境要求" class="headerlink" title="1.5 环境要求"></a>1.5 环境要求</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.0.7.RELEASE/reference/htmlsingle/#getting-started-system-requirements" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.7.RELEASE/reference/htmlsingle/#getting-started-system-requirements</a></p><p><img src="https://i.loli.net/2019/05/29/5ceddb3161f2922073.jpg" alt></p><h1 id="第二章-项目架构-单体应用"><a href="#第二章-项目架构-单体应用" class="headerlink" title="第二章 项目架构-单体应用"></a>第二章 项目架构-单体应用</h1><h2 id="2-1-单体应用"><a href="#2-1-单体应用" class="headerlink" title="2.1 单体应用"></a>2.1 单体应用</h2><p><img src="https://i.loli.net/2019/05/29/5ceddb3165e6764907.jpg" alt></p><h2 id="2-2-单体应用（monolith-application）"><a href="#2-2-单体应用（monolith-application）" class="headerlink" title="2.2 单体应用（monolith application）"></a>2.2 单体应用（monolith application）</h2><ul><li>就是将应用程序的所有功能都打包成一个独立的单元，可以是 JAR、WAR、EAR 或其它归档格式。</li><li>package -Dmaven.test.skip=true</li></ul><h2 id="2-3-单体应用有如下优点："><a href="#2-3-单体应用有如下优点：" class="headerlink" title="2.3 单体应用有如下优点："></a>2.3 单体应用有如下优点：</h2><ul><li>为人所熟知：现有的大部分工具、应用服务器、框架和脚本都是这种应用程序；</li><li>IDE友好：像 NetBeans、Eclipse、IntelliJ 这些开发环境都是针对开发、部署、调试这样的单个应用而设计的；</li><li>便于共享：单个归档文件包含所有功能，便于在团队之间以及不同的部署阶段之间共享；</li><li>易于测试：单体应用一旦部署，所有的服务或特性就都可以使用了，这简化了测试过程，因为没有额外的依赖，每项测试都可以在部署完成后立刻开始；</li><li>容易部署：只需将单个归档文件复制到单个目录下。</li></ul><h2 id="2-4-单体应用的一些不足："><a href="#2-4-单体应用的一些不足：" class="headerlink" title="2.4 单体应用的一些不足："></a>2.4 单体应用的一些不足：</h2><ul><li>不够灵活：对应用程序做任何细微的修改都需要将整个应用程序重新构建、重新部署。开发人员需要等到整个应用程序部署完成后才能看到变化。如果多个开发人员共同开发一个应用程序，那么还要等待其他开发人员完成了各自的开发。这降低了团队的灵活性和功能交付频率；</li><li>妨碍持续交付：单体应用可能会比较大，构建和部署时间也相应地比较长，不利于频繁部署，阻碍持续交付。在移动应用开发中，这个问题会显得尤为严重；</li><li>受技术栈限制：对于这类应用，技术是在开发之前经过慎重评估后选定的，每个团队成员都必须使用相同的开发语言、持久化存储及消息系统，而且要使用类似的工具，无法根据具体的场景做出其它选择；</li><li>技术债务：“不坏不修（Not broken，don’t fix）”，这在软件开发中非常常见，单体应用尤其如此。系统设计或写好的代码难以修改，因为应用程序的其它部分可能会以意料之外的方式使用它。随着时间推移、人员更迭，这必然会增加应用程序的技术债务。 </li></ul><h1 id="第三章-项目架构-微服务"><a href="#第三章-项目架构-微服务" class="headerlink" title="第三章 项目架构-微服务"></a>第三章 项目架构-微服务</h1><h2 id="3-1-微服务"><a href="#3-1-微服务" class="headerlink" title="3.1 微服务"></a>3.1 微服务</h2><p><img src="https://i.loli.net/2019/05/29/5ceddb3197e5051871.jpg" alt></p><h2 id="3-2-微服务的样子"><a href="#3-2-微服务的样子" class="headerlink" title="3.2 微服务的样子"></a>3.2 微服务的样子</h2><p><a href="https://www.martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">https://www.martinfowler.com/articles/microservices.html</a> 微服务microservices</p><p><a href="http://blog.cuicc.com/blog/2015/07/22/microservices/" target="_blank" rel="noopener">http://blog.cuicc.com/blog/2015/07/22/microservices/</a></p><p><img src="https://i.loli.net/2019/05/29/5ceddb450c0b616343.jpg" alt></p><p>简而言之，微服务架构是一种将单应用程序作为一套小型服务开发的方法，每种应用程序都在其自己的进程中运行，并与轻量级机制（通常是HTTP资源的API）进行通信。这些服务是围绕业务功能构建的，可以通过全自动部署机制进行独立部署。这些服务的集中化管理已经是最少的，它们可以用不同的编程语言编写，并使用不同的数据存储技术。</p><p><img src="https://i.loli.net/2019/05/29/5ceddb3198aa299657.jpg" alt></p><h2 id="3-3-Spring官网"><a href="#3-3-Spring官网" class="headerlink" title="3.3 Spring官网"></a>3.3 Spring官网</h2><p><img src="https://i.loli.net/2019/05/29/5ceddb317edff89370.jpg" alt></p><h1 id="第四章-SpringBoot-HelloWorld初体验"><a href="#第四章-SpringBoot-HelloWorld初体验" class="headerlink" title="第四章 SpringBoot-HelloWorld初体验"></a>第四章 SpringBoot-HelloWorld初体验</h1><p>如何完成  页面发送/hello 请求，服务器响应 “OK” 字符串;  </p><h2 id="4-1-创建maven工程"><a href="#4-1-创建maven工程" class="headerlink" title="4.1 创建maven工程"></a>4.1 创建maven工程</h2><h2 id="4-2-引入如下依赖"><a href="#4-2-引入如下依赖" class="headerlink" title="4.2 引入如下依赖"></a>4.2 引入如下依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Inherit defaults from Spring Boot --&gt;</span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;!-- Add typical dependencies for a web application --&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3-增加控制器"><a href="#4-3-增加控制器" class="headerlink" title="4.3 增加控制器"></a>4.3 增加控制器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">@ResponseBody</span><br><span class="line">@GetMapping(&quot;/hello&quot;)</span><br><span class="line">public String handle01()&#123;</span><br><span class="line">return &quot;OK!+哈哈&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-编写主程序"><a href="#4-4-编写主程序" class="headerlink" title="4.4 编写主程序"></a>4.4 编写主程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class MainApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//Spring应用跑起来...</span><br><span class="line">SpringApplication.run(MainApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-运行访问"><a href="#4-5-运行访问" class="headerlink" title="4.5 运行访问"></a>4.5 运行访问</h2><p><a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><h1 id="第五章-SpringBoot-原理-简化依赖和配置"><a href="#第五章-SpringBoot-原理-简化依赖和配置" class="headerlink" title="第五章 SpringBoot-原理-简化依赖和配置"></a>第五章 SpringBoot-原理-简化依赖和配置</h1><h2 id="5-1-依赖管理"><a href="#5-1-依赖管理" class="headerlink" title="5.1 依赖管理"></a>5.1 依赖管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.atguigu&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-01&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 用来做依赖管理，几乎将我们用到的所有的依赖的版本都声明好了；版本仲裁中心 --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.7.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- </span><br><span class="line">spring-boot-starter-xxx：springboot提供了大量的starter模块---场景启动器；</span><br><span class="line">1）、我们现在开发web程序就引用web场景spring-boot-starter-web;主要含有springmvc,tomcat(内置服务器)</span><br><span class="line">SpringBoot自定引入这个场景所需要的所有依赖；</span><br><span class="line">2）、所有支持的场合都在这里</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 引入springboot插件；打包插件 --&gt;</span><br><span class="line">    &lt;!-- &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt; </span><br><span class="line">--&gt; </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="5-2-核心jar包"><a href="#5-2-核心jar包" class="headerlink" title="5.2 核心jar包"></a>5.2 核心jar包</h2><p><img src="https://i.loli.net/2019/05/29/5ceddb314745042295.jpg" alt></p><p><img src="https://i.loli.net/2019/05/29/5ceddb314772d34839.jpg" alt></p><p><img src="https://i.loli.net/2019/05/29/5ceddb314793e10835.jpg" alt></p><p>一套框架<br>所有日志都通过 slf4j</p><h2 id="5-3-源码"><a href="#5-3-源码" class="headerlink" title="5.3 源码"></a>5.3 源码</h2><p><img src="https://i.loli.net/2019/05/29/5ceddb4516e8c22386.jpg" alt></p><p>选择性导入  springboot中重要的底层方法</p><p><img src="https://i.loli.net/2019/05/29/5ceddb451d4af78248.jpg" alt></p><p><img src="https://i.loli.net/2019/05/29/5ceddb45304a050111.jpg" alt></p><p>结论: 有119个配置类</p><h1 id="第六章-SpringBoot-原理-简化部署"><a href="#第六章-SpringBoot-原理-简化部署" class="headerlink" title="第六章 SpringBoot-原理-简化部署"></a>第六章 SpringBoot-原理-简化部署</h1><h2 id="6-1-引入springboot插件"><a href="#6-1-引入springboot插件" class="headerlink" title="6.1 引入springboot插件"></a>6.1 引入springboot插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入springboot插件；打包插件 --&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2打包：package"><a href="#6-2打包：package" class="headerlink" title="6.2打包：package"></a>6.2打包：package</h2><p>mac 项目路径下运行    mvn install 打jar包<br>win下  mvn package</p><h2 id="6-3-java-jar"><a href="#6-3-java-jar" class="headerlink" title="6.3 java -jar"></a>6.3 java -jar</h2><p>测试 运行:  java -jar jar 包名<br>然后 网站输入 <a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><h2 id="6-4-修改端口号"><a href="#6-4-修改端口号" class="headerlink" title="6.4 修改端口号"></a>6.4 修改端口号</h2><h3 id="方式1-官方推荐"><a href="#方式1-官方推荐" class="headerlink" title="方式1(官方推荐)"></a>方式1(官方推荐)</h3><p>新建普通file文件  改名 位置和名字都是固定的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[application](/media/application.yml)</span><br></pre></td></tr></table></figure><p>写(注意 冒号后面有空格)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 7000</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/05/29/5ceddb44cb93b26516.jpg" alt></p><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[application](/media/application.properties)</span><br></pre></td></tr></table></figure><p>路径下 写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8090</span><br></pre></td></tr></table></figure></p><p>然后网站输入 <a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></p><p><img src="https://i.loli.net/2019/05/29/5ceddb44e58dc54610.jpg" alt></p><h1 id="第七章-快速创建SpringBoot应用"><a href="#第七章-快速创建SpringBoot应用" class="headerlink" title="第七章 快速创建SpringBoot应用"></a>第七章 快速创建SpringBoot应用</h1><h2 id="7-1-创建Spring-Starter-Project-必须联网创建"><a href="#7-1-创建Spring-Starter-Project-必须联网创建" class="headerlink" title="7.1 创建Spring Starter Project; 必须联网创建"></a>7.1 创建Spring Starter Project; 必须联网创建</h2><p><img src="https://i.loli.net/2019/05/29/5ceddb316d95584809.jpg" alt></p><h2 id="7-2-选择版本，引入需要的依赖"><a href="#7-2-选择版本，引入需要的依赖" class="headerlink" title="7.2 选择版本，引入需要的依赖"></a>7.2 选择版本，引入需要的依赖</h2><p><img src="https://i.loli.net/2019/05/29/5ceddb44c13d450575.jpg" alt></p><h2 id="7-3-项目结构"><a href="#7-3-项目结构" class="headerlink" title="7.3 项目结构"></a>7.3 项目结构</h2><ul><li>自动生成主程序类，用于启动项目</li><li>自动生成静态资源目录及属性配置文件</li><li>自动生成测试类</li><li>自动增加pom.xml相关依赖配置</li></ul><h2 id="7-4-增加控制器类"><a href="#7-4-增加控制器类" class="headerlink" title="7.4 增加控制器类"></a>7.4 增加控制器类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line">//@ResponseBody</span><br><span class="line">//@Controller</span><br><span class="line"> </span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;        </span><br><span class="line"> </span><br><span class="line">@GetMapping(&quot;/hello&quot;)</span><br><span class="line">public String handle01()&#123;</span><br><span class="line">return &quot;OK!+哈哈&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-5-运行测试"><a href="#7-5-运行测试" class="headerlink" title="7.5 运行测试"></a>7.5 运行测试</h2><ul><li><a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></li><li>在static文件下下存放java.jpg图片， <a href="http://localhost:8080/java.jpg" target="_blank" rel="noopener">http://localhost:8080/java.jpg</a></li><li>在application.properties设置</li><li>端口，server.port=8081， <a href="http://localhost:8081/hello" target="_blank" rel="noopener">http://localhost:8081/hello</a></li><li>上下文路径，server.servlet.context-path=/a ，<a href="http://localhost:8081/a/hello" target="_blank" rel="noopener">http://localhost:8081/a/hello</a></li><li>server.session.timeout=60</li><li>server.tomcat.max-threads=800</li><li>server.tomcat.uri-encoding=UTF-8</li></ul><h1 id="第八章-SpringBoot-yml配置文件"><a href="#第八章-SpringBoot-yml配置文件" class="headerlink" title="第八章 SpringBoot-yml配置文件"></a>第八章 SpringBoot-yml配置文件</h1><h2 id="8-1-配置文件"><a href="#8-1-配置文件" class="headerlink" title="8.1 配置文件"></a>8.1 配置文件</h2><ul><li>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</li><li>application.properties</li><li>application.yml<ul><li>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给自动配置好；</li><li>YAML（YAML Ain’t Markup Language）</li><li>YAML A Markup Language：是一个标记语言</li><li>YAML isn’t Markup Language：不是一个标记语言；</li></ul></li></ul><ul><li>标记语言：<ul><li>以前的配置文件；大多都使用的是 xxxx.xml文件；</li><li>YAML：以数据为中心，比json、xml等更适合做配置文件；</li><li>YAML：配置例子</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">port: 8081</span><br></pre></td></tr></table></figure><ul><li>XML：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">&lt;port&gt;8081&lt;/port&gt;</span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure><h2 id="8-2-YAML语法"><a href="#8-2-YAML语法" class="headerlink" title="8.2 YAML语法"></a>8.2 YAML语法</h2><h3 id="8-2-1-YAML基本语法"><a href="#8-2-1-YAML基本语法" class="headerlink" title="8.2.1 YAML基本语法"></a>8.2.1 YAML基本语法</h3><ul><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可<br>大小写敏感</li></ul><h3 id="8-2-2-YAML-支持的三种数据结构"><a href="#8-2-2-YAML-支持的三种数据结构" class="headerlink" title="8.2.2 YAML 支持的三种数据结构"></a>8.2.2 YAML 支持的三种数据结构</h3><ul><li>对象：键值对的集合</li><li>数组：一组按次序排列的值</li><li>字面量：单个的、不可再分的值<h2 id="8-3-值的写法"><a href="#8-3-值的写法" class="headerlink" title="8.3 值的写法"></a>8.3 值的写法</h2><h3 id="8-3-1-字面量：普通的值（数字，字符串，布尔）"><a href="#8-3-1-字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="8.3.1 字面量：普通的值（数字，字符串，布尔）"></a>8.3.1 字面量：普通的值（数字，字符串，布尔）</h3></li><li>k: v：字面直接来写；</li><li>字符串默认不用加上单引号或者双引号；</li><li>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</li><li>name: “zhangsan \n lisi”：输出；zhangsan 换行 lisi</li><li>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</li><li>name: ‘zhangsan \n lisi’：输出；zhangsan \n lisi</li></ul><h3 id="8-3-2-对象、Map（属性和值）（键值对）："><a href="#8-3-2-对象、Map（属性和值）（键值对）：" class="headerlink" title="8.3.2 对象、Map（属性和值）（键值对）："></a>8.3.2 对象、Map（属性和值）（键值对）：</h3><ul><li>k: v：在下一行来写对象的属性和值的关系；注意缩进</li><li>对象还是k: v的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">friends:</span><br><span class="line">lastName: zhangsan</span><br><span class="line">age: 20</span><br></pre></td></tr></table></figure><ul><li>另一种书写方式-行内写法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">friends: &#123;lastName: zhangsan,age: 18&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-3-数组（List、Set）"><a href="#8-3-3-数组（List、Set）" class="headerlink" title="8.3.3 数组（List、Set）"></a>8.3.3 数组（List、Set）</h2><p>用- 值表示数组中的一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pets:</span><br><span class="line">‐ cat</span><br><span class="line">‐ dog</span><br><span class="line">‐ pig</span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pets: [cat,dog,pig]</span><br></pre></td></tr></table></figure><h1 id="第九章-SpringBoot-自动配置原理"><a href="#第九章-SpringBoot-自动配置原理" class="headerlink" title="第九章 SpringBoot-自动配置原理"></a>第九章 SpringBoot-自动配置原理</h1><p>9.1 自动配置原理</p><ul><li><p>SpringBoot所有的东西都自动配置好了；<br>1）、<code>spring-boot-autoconfigure-2.0.7.RELEASE.jar</code>（自动配置包）<br>2）、好多的场景全部自动配置好</p></li><li><p>自动配置原理：<br>1）、主程序类标注了<code>@SpringBootApplication</code>注解相当于标注了<code>@EnableAutoConfiguration</code><br>2）、<code>@EnableAutoConfiguration</code> 开启SpringBoot的自动配置功能</p></li><li><p>就会自动的将所有的自动配置类导进来<br>如：<code>HttpEncodingAutoConfiguration</code>（http编码的自动配置）<br>1）、<code>@ConditionalOnXX</code>根据当前系统环境判断我这个类的所有配置是否需要生效<br>2）、会发现这些配置类中使用@Bean给容器中放了好多组件，这些组件就生效；<br>3）、这些组件会从一个类中（配置文件属性值的封装类）获取到它应该使用的值是什么。比如<code>HttpEncodingProperties</code>获取charset<br>4）、这写配置文件值的封装类都是和配置文件一一绑定<br><code>@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)HttpEncodingProperties</code></p></li><li>使用心得：<br>1）、SpringBoot帮我们配好了所有的场景<br>2）、SpringBoot中会有很多的 <code>xxxxAutoConfigurarion</code>（帮我们给容器中自动配好组件）<br>3）、<code>xxxxAutoConfigurarion</code>给容器中配组件的时候，组件默认的属性一般都是从 xxxProperties中获取这些属性的值<br>4）、<code>xxxProperties</code> 是和配置文件绑定的（属性一一对应）<br>5）、我们改掉这些默认配置即可；<br>6）、如果默认的组件我们不用；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">@ConditionalOnMissingBean：容器中没这个组件</span><br><span class="line">public InternalResourceViewResolver defaultViewResolver()</span><br><span class="line">SpringBoot的一个最大策略：自定义组件用自己的，否则，使用默认的。</span><br></pre></td></tr></table></figure><h2 id="9-2-自定义配置类"><a href="#9-2-自定义配置类" class="headerlink" title="9.2 自定义配置类"></a>9.2 自定义配置类</h2><p>视图解析需要将thymeleaf模块引入项目中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">@Bean</span><br><span class="line">public InternalResourceViewResolver internalResourceViewResolver()&#123;</span><br><span class="line">InternalResourceViewResolver resolver = new InternalResourceViewResolver();</span><br><span class="line">resolver.setPrefix(&quot;/templates/&quot;);</span><br><span class="line">resolver.setSuffix(&quot;.html&quot;);</span><br><span class="line">return resolver;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十章-SpringBoot-整合mybatis-配置版"><a href="#第十章-SpringBoot-整合mybatis-配置版" class="headerlink" title="第十章 SpringBoot-整合mybatis-配置版"></a>第十章 SpringBoot-整合mybatis-配置版</h1><p><img src="https://i.loli.net/2019/05/29/5ceddb319a55017017.jpg" alt></p><h2 id="10-1-创建Spring-Starter-Project"><a href="#10-1-创建Spring-Starter-Project" class="headerlink" title="10.1 创建Spring Starter Project"></a>10.1 创建Spring Starter Project</h2><p>增加<code>web,jdbc,mybatis,mysql</code>相关组件</p><h2 id="10-2-增加application-yml"><a href="#10-2-增加application-yml" class="headerlink" title="10.2 增加application.yml"></a>10.2 增加application.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql://192.168.137.3:3306/atcrowdfunding?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis/mybatis-config.xml</span><br><span class="line">  mapper-locations: classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure><h2 id="10-3-增加实体类：TAdmin"><a href="#10-3-增加实体类：TAdmin" class="headerlink" title="10.3 增加实体类：TAdmin"></a>10.3 增加实体类：TAdmin</h2><h2 id="10-4-增加Mapper接口"><a href="#10-4-增加Mapper接口" class="headerlink" title="10.4 增加Mapper接口"></a>10.4 增加Mapper接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface AdminMapper &#123;</span><br><span class="line">public TAdmin getAdminById(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5-增加映射配置文件"><a href="#10-5-增加映射配置文件" class="headerlink" title="10.5 增加映射配置文件"></a>10.5 增加映射配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.atguigu.mapper.AdminMapper&quot;&gt;</span><br><span class="line">         &lt;select id=&quot;getAdminById&quot; resultType=&quot;com.atguigu.bean.TAdmin&quot;&gt;</span><br><span class="line">                 SELECT * FROM `t_admin` WHERE id=#&#123;id&#125;</span><br><span class="line">         &lt;/select&gt; </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="10-6-增加控制器"><a href="#10-6-增加控制器" class="headerlink" title="10.6 增加控制器"></a>10.6 增加控制器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.controller;</span><br><span class="line"> </span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line">import com.bean.TAdmin;</span><br><span class="line">import com.mapper.AdminMapper;</span><br><span class="line"> </span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"> </span><br><span class="line">@Autowired</span><br><span class="line">AdminMapper adminMapper;</span><br><span class="line"> </span><br><span class="line">@GetMapping(&quot;/getAdminById&quot;)</span><br><span class="line">public TAdmin getAdminById (Integer id)&#123;</span><br><span class="line">return adminMapper.getAdminById(id);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-7-增加mybatis主配置文件"><a href="#10-7-增加mybatis主配置文件" class="headerlink" title="10.7 增加mybatis主配置文件"></a>10.7 增加mybatis主配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="10-8-增加mapper扫描"><a href="#10-8-增加mapper扫描" class="headerlink" title="10.8 增加mapper扫描"></a>10.8 增加mapper扫描</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 和Mybatis的整合</span><br><span class="line"> * 1）、在配置文件中指明mybatis全局配置文件和Sql映射文件的位置</span><br><span class="line"> * 2）、扫描mybatis的所有mapper接口</span><br><span class="line"> */</span><br><span class="line">@MapperScan(&quot;com.atguigu.mapper&quot;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringBoot03Application &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringBoot03Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十一章-SpringBoot-整合mybatis-注解版"><a href="#第十一章-SpringBoot-整合mybatis-注解版" class="headerlink" title="第十一章 SpringBoot-整合mybatis-注解版"></a>第十一章 SpringBoot-整合mybatis-注解版</h1><p>拷贝上一个项目进行实验<br>增加Mapper接口,在方法增加相应的注解即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Mapper //加不加都行</span><br><span class="line">public interface AdminMapper &#123;</span><br><span class="line">@Select(&quot;SELECT * FROM `t_admin` WHERE id=#&#123;id&#125;&quot;)</span><br><span class="line">public TAdmin getAdminById(Integer id);</span><br><span class="line"> </span><br><span class="line">@Insert(&quot;INSERT INTO t_admin(loginacct,userpswd,username,email,createtime) &quot;</span><br><span class="line">+ &quot;VALUES(#&#123;loginacct&#125;,#&#123;userpswd&#125;,#&#123;username&#125;,#&#123;email&#125;,#&#123;createtime&#125;)&quot;)</span><br><span class="line">public void insertAdmin(TAdmin admin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十二章-SpringBoot-整合Druid数据源"><a href="#第十二章-SpringBoot-整合Druid数据源" class="headerlink" title="第十二章 SpringBoot-整合Druid数据源"></a>第十二章 SpringBoot-整合Druid数据源</h1><h2 id="12-1-使用方式一"><a href="#12-1-使用方式一" class="headerlink" title="12.1 使用方式一"></a>12.1 使用方式一</h2><h3 id="12-1-1-增依赖"><a href="#12-1-1-增依赖" class="headerlink" title="12.1.1 增依赖"></a>12.1.1 增依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="12-1-2-配置数据源"><a href="#12-1-2-配置数据源" class="headerlink" title="12.1.2 配置数据源"></a>12.1.2 配置数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    url: jdbc:mysql://192.168.137.3:3306/atcrowdfunding?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure><h3 id="12-1-3-测试"><a href="#12-1-3-测试" class="headerlink" title="12.1.3 测试"></a>12.1.3 测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class SpringBoot03ApplicationTests &#123; </span><br><span class="line">@Autowired</span><br><span class="line">DataSource dataSource;</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">   * HikariDataSource 默认数据源，性能很高</span><br><span class="line">   * DruidDataSource 使用很高，很稳定</span><br><span class="line">   */</span><br><span class="line">@Test</span><br><span class="line">public void contextLoads() throws SQLException &#123;</span><br><span class="line">System.out.println(dataSource.getClass());</span><br><span class="line">Connection connection = dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-2-使用方式二"><a href="#12-2-使用方式二" class="headerlink" title="12.2 使用方式二"></a>12.2 使用方式二</h2><h3 id="12-2-1创建数据源"><a href="#12-2-1创建数据源" class="headerlink" title="12.2.1创建数据源"></a>12.2.1创建数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;) //将数据库连接信息直接封装到数据源对象中</span><br><span class="line">@Bean</span><br><span class="line">public DataSource dataSource() throws SQLException &#123;</span><br><span class="line">DruidDataSource dataSource = new DruidDataSource();</span><br><span class="line">dataSource.setFilters(&quot;stat&quot;);//配置监控统计拦截的filters</span><br><span class="line">return dataSource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3-Druid监控使用情况"><a href="#12-3-Druid监控使用情况" class="headerlink" title="12.3 Druid监控使用情况"></a>12.3 Druid监控使用情况</h2><h3 id="12-3-1-增加配置"><a href="#12-3-1-增加配置" class="headerlink" title="12.3.1 增加配置"></a>12.3.1 增加配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//配置Druid的监控</span><br><span class="line">//1、配置一个管理后台的Servlet</span><br><span class="line">@Bean</span><br><span class="line">public ServletRegistrationBean statViewServlet() &#123;</span><br><span class="line">ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;);</span><br><span class="line">Map&lt;String, String&gt; initParams = new HashMap&lt;&gt;();</span><br><span class="line">initParams.put(&quot;loginUsername&quot;, &quot;admin&quot;);</span><br><span class="line">initParams.put(&quot;loginPassword&quot;, &quot;123456&quot;);</span><br><span class="line">initParams.put(&quot;allow&quot;, &quot;&quot;);// 默认就是允许所有访问</span><br><span class="line">initParams.put(&quot;deny&quot;, &quot;192.168.15.21&quot;);//拒绝哪个ip访问</span><br><span class="line">bean.setInitParameters(initParams);</span><br><span class="line">return bean;</span><br><span class="line">&#125;</span><br><span class="line">//2、配置一个web监控的filter</span><br><span class="line">@Bean</span><br><span class="line">public FilterRegistrationBean webStatFilter() &#123;</span><br><span class="line">FilterRegistrationBean bean = new FilterRegistrationBean();</span><br><span class="line">bean.setFilter(new WebStatFilter());</span><br><span class="line">Map&lt;String, String&gt; initParams = new HashMap&lt;&gt;();</span><br><span class="line">initParams.put(&quot;exclusions&quot;, &quot;*.js,*.css,/druid/*&quot;);//排除过滤</span><br><span class="line">bean.setInitParameters(initParams);</span><br><span class="line">bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));</span><br><span class="line">return bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-2-如果无法打印监控语句"><a href="#12-3-2-如果无法打印监控语句" class="headerlink" title="12.3.2 如果无法打印监控语句"></a>12.3.2 如果无法打印监控语句</h3><p>可以设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataSource.setFilters(&quot;stat&quot;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.filters=stat</span><br></pre></td></tr></table></figure><h1 id="第十三章-SpringBoot-整合Web组件-注解版"><a href="#第十三章-SpringBoot-整合Web组件-注解版" class="headerlink" title="第十三章 SpringBoot-整合Web组件-注解版"></a>第十三章 SpringBoot-整合Web组件-注解版</h1><p>之前的Web开发基于Servlet 2.5规范（在web.xml中配置<code>Servlet,Filter,Listener</code>）。<br>现在基于Servlet 3.0规范(基于配置类的方式声明对象：<code>@WebServlet @WebFilter @WebListener)</code></p><h2 id="13-1-监听器-WebListener"><a href="#13-1-监听器-WebListener" class="headerlink" title="13.1 监听器@WebListener"></a>13.1 监听器@WebListener</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.listener;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.ServletContextEvent;</span><br><span class="line">import javax.servlet.ServletContextListener;</span><br><span class="line">import javax.servlet.annotation.WebListener;</span><br><span class="line"> </span><br><span class="line">@WebListener</span><br><span class="line">public class HelloListener implements ServletContextListener &#123;</span><br><span class="line">@Override</span><br><span class="line">public void contextDestroyed(ServletContextEvent arg0) &#123;</span><br><span class="line">System.out.println(&quot;应用销毁了....HelloListener&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void contextInitialized(ServletContextEvent arg0) &#123;</span><br><span class="line">System.out.println(&quot;应用启动了....HelloListener&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-2-过滤器-WebFilter-urlPatterns-”-”"><a href="#13-2-过滤器-WebFilter-urlPatterns-”-”" class="headerlink" title="13.2 过滤器@WebFilter(urlPatterns=”/*”)"></a>13.2 过滤器@WebFilter(urlPatterns=”/*”)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.filter;</span><br><span class="line"> </span><br><span class="line">import java.io.IOException;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.Filter;</span><br><span class="line">import javax.servlet.FilterChain;</span><br><span class="line">import javax.servlet.FilterConfig;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@WebFilter(urlPatterns=&quot;/*&quot;)</span><br><span class="line">public class HelloFilter implements Filter &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void destroy() &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)</span><br><span class="line">throws IOException, ServletException &#123;</span><br><span class="line">System.out.println(&quot;HelloFilter............放行之前&quot;);</span><br><span class="line">arg2.doFilter(arg0, arg1);</span><br><span class="line">System.out.println(&quot;HelloFilter............放行之后&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void init(FilterConfig arg0) throws ServletException &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-Servlet-WebServlet-urlPatterns-”-my”"><a href="#13-3-Servlet-WebServlet-urlPatterns-”-my”" class="headerlink" title="13.3 Servlet @WebServlet(urlPatterns=”/my”)"></a>13.3 Servlet @WebServlet(urlPatterns=”/my”)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.servlet;</span><br><span class="line"> </span><br><span class="line">import java.io.IOException;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line">@WebServlet(urlPatterns=&quot;/my&quot;)</span><br><span class="line">public class MyServlet extends HttpServlet &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">resp.getWriter().write(&quot;MyServlet do.......&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">13.4扫描组件@ServletComponentScan</span><br><span class="line">@ServletComponentScan</span><br><span class="line">@MapperScan(&quot;com.atguigu.mapper&quot;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringBoot03Application &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringBoot03Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十四章-SpringBoot-集成业务层事务"><a href="#第十四章-SpringBoot-集成业务层事务" class="headerlink" title="第十四章 SpringBoot-集成业务层事务"></a>第十四章 SpringBoot-集成业务层事务</h1><ul><li>扫描Dao接口，需要在AtCrowdfundingApplication类中增加扫描注解@MapperScan(“com.atguigu.**.dao”)及事务管理@EnableTransactionManagement</li><li><p>传统的SSM架构中采用的是声明式事务，需要在配置文件中增加AOP事务配置，Spring Boot框架中简化了这种配置，可以在Service接口中增加注解@Transactional<br>附录1 官网提供的SpringBoot相关模块</p><p><img src="https://i.loli.net/2019/05/29/5ceddb3199da768624.jpg" alt></p></li></ul><p> <img src="https://i.loli.net/2019/05/29/5ceddb44c7b5611722.jpg" alt></p><p><img src="https://i.loli.net/2019/05/29/5ceddb44c429696556.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Spring-Boot-介绍&quot;&gt;&lt;a href=&quot;#第一章-Spring-Boot-介绍&quot; class=&quot;headerlink&quot; title=&quot;第一章 Spring Boot 介绍&quot;&gt;&lt;/a&gt;第一章 Spring Boot 介绍&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="使用过的开源框架" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://yoursite.com/2018/04/18/71.%20Redis/"/>
    <id>http://yoursite.com/2018/04/18/71. Redis/</id>
    <published>2018-04-17T16:00:00.000Z</published>
    <updated>2019-06-08T15:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-NoSQL-简介"><a href="#第1章-NoSQL-简介" class="headerlink" title="第1章 NoSQL 简介"></a>第1章 NoSQL 简介</h1><h2 id="1-1-技术的分类"><a href="#1-1-技术的分类" class="headerlink" title="1.1 技术的分类"></a>1.1 技术的分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1)解决功能性的问题</span><br><span class="line">Java、Servlet、Jsp、Tomcat、RDBMS、JDBC、Linux、Svn 等</span><br><span class="line">2)解决扩展性的问题</span><br><span class="line">Spring、 SpringMVC、SpringBoot、Hibernate、MyBatis等</span><br><span class="line">3)解决性能的问题</span><br><span class="line">NoSQL、Java多线程、Nginx、MQ、ElasticSearch、Hadoop等</span><br></pre></td></tr></table></figure><h2 id="1-2-WEB1-0-及WEB2-0"><a href="#1-2-WEB1-0-及WEB2-0" class="headerlink" title="1.2 WEB1.0 及WEB2.0"></a>1.2 WEB1.0 及WEB2.0</h2><blockquote><p>1)Web1.0的时代,数据访问量很有限，用一夫当关的高性能的单节点服务器可以解决大部分问题.</p></blockquote><p><img src="https://s2.ax1x.com/2019/05/15/ETpYHx.png" alt="ETpYHx.png"></p><blockquote><p>2)Web2.0时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据，加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战.</p></blockquote><p><img src="https://s2.ax1x.com/2019/05/15/ETpUUK.png" alt="ETpUUK.png"></p><h2 id="1-3-解决服务器CPU内存压力"><a href="#1-3-解决服务器CPU内存压力" class="headerlink" title="1.3 解决服务器CPU内存压力"></a>1.3 解决服务器CPU内存压力</h2><p><img src="https://s2.ax1x.com/2019/05/15/ETpwCD.png" alt="ETpwCD.png"></p><ul><li>Session共享问题如何解决?<ul><li>方案一、存在Cookie中 <ul><li>此种方案需要将Session数据以Cookie的形式存在客户端,不安全，网络负担效率低</li></ul></li><li>方案二、存在文件服务器或者是数据库里<ul><li>此种方案会导致大量的IO操作，效率低.</li></ul></li><li>方案三、Session复制<ul><li>此种方案会导致每个服务器之间必须将Session广播到集群内的每个节点，Session数据会冗余，节点越多浪费越大,存在广播风暴问题.</li></ul></li><li>方案四、存在Redis中<ul><li>目前来看，此种方案是最好的。将Session数据存在内存中，每台服务器都从内存中读取数据,速度快，结构还相对简单.</li></ul></li></ul></li></ul><h2 id="1-4-解决IO压力"><a href="#1-4-解决IO压力" class="headerlink" title="1.4 解决IO压力"></a>1.4 解决IO压力</h2><p><img src="https://s2.ax1x.com/2019/05/15/ETp08e.png" alt="ETp08e.png"></p><blockquote><p>将活跃的数据缓存到Redis中，客户端的请求先打到缓存中来获取对应的数据，如果能获取到，直接返回，不需要从MySQL中读取。如果缓存中没有，再从MySQL数据库中读取数据，将读取的数据返回并存一份到Redis中，方便下次读取.  </p></blockquote><blockquote><p>扩展: 对于持久化的数据库来说，单个库单个表存在性能瓶颈，因此会通过水平切分、垂直切分、读取分离等技术提升性能，此种解决方案会破坏一定的业务逻辑，但是可以换取更高的性能. </p><ul><li>mysql 单表可以达到500万条 普通服务器</li><li>NoSQL 小型机上理论可以达到1个亿</li></ul></blockquote><h2 id="1-5-NoSQL数据库概述"><a href="#1-5-NoSQL数据库概述" class="headerlink" title="1.5 NoSQL数据库概述"></a>1.5 NoSQL数据库概述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1)NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，</span><br><span class="line">泛指非关系型的数据库。 NoSQL 不依赖业务逻辑方式存储，</span><br><span class="line">而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</span><br><span class="line">2)NoSQL的特点</span><br><span class="line">不遵循SQL标准</span><br><span class="line">不支持ACID 但有自己的事物</span><br><span class="line">远超于SQL的性能。</span><br><span class="line">3)NoSQL的适用场景</span><br><span class="line">对数据高并发的读写</span><br><span class="line">海量数据的读写</span><br><span class="line">对数据高可扩展性的</span><br><span class="line">4)NoSQL的不适用场景</span><br><span class="line">需要事务支持</span><br><span class="line">基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</span><br><span class="line">5)建议: 用不着sql的和用了sql也不行的情况，请考虑用NoSql</span><br></pre></td></tr></table></figure><h2 id="1-6-常用的缓存数据库"><a href="#1-6-常用的缓存数据库" class="headerlink" title="1.6 常用的缓存数据库"></a>1.6 常用的缓存数据库</h2><p>1)Memcached   </p><p><img src="https://s2.ax1x.com/2019/05/15/ETpgVP.png" alt="ETpgVP.png"></p><p>2)Redis  </p><p><img src="https://s2.ax1x.com/2019/05/15/ETpR58.png" alt="ETpR58.png"></p><p>3) mongoDB </p><p><img src="https://s2.ax1x.com/2019/05/15/ETpfPS.png" alt="ETpfPS.png"></p><p>4)列式数据库<br>先看行式数据库<br><img src="https://s2.ax1x.com/2019/05/15/ETph8g.png" alt="ETph8g.png"><br>思考: 如下两条SQL的快慢<br>      select * from users where id =3<br>      select avg(age) from users<br>再看列式数据库</p><p>5)HBase</p><p>6)Cassandra</p><p>7)Neo4j</p><p>1.7 数据库排名<br><a href="http://db-engines.com/en/ranking" target="_blank" rel="noopener">http://db-engines.com/en/ranking</a></p><p>第2章 Redis简介 及 安装<br>2.1 Redis是什么<br>Redis是一个开源的key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。<br>2.2 Redis的应用场景<br>1)配合关系型数据库做高速缓存<br>高频次，热门访问的数据，降低数据库IO<br>高频次，热门访问的数据，降低数据库IO<br>2)由于其拥有持久化能力，利用其多样的数据结构存储特定的数据<br>最新N个数据  通过List实现按自然事件排序的数据<br>排行榜，TopN  利用zset(有序集合)<br>时效性的数据，比如手机验证码 Expire过期<br>计数器，秒杀  原子性，自增方法INCR、DECR<br>去除大量数据中的重复数据 利用set集合<br>构建队列利用list集合<br>发布订阅消息系统  pub/sub模式<br>2.3 Redis官网<br>1)Redis官方网站  <a href="http://Redis.io" target="_blank" rel="noopener">http://Redis.io</a><br>2)Redis中文官方网站  <a href="http://www.Redis.net.cn" target="_blank" rel="noopener">http://www.Redis.net.cn</a><br>2.4 关于Redis版本<br>1)3.2.5 for Linux<br>2)不用考虑在Windows环境下对Redis的支持<br>Redis官方没有提供对Windows环境的支持，是微软的开源小组开发了对Redis对Windows的支持.<br>2.5 安装步骤<br>1)下载获得redis-3.2.5.tar.gz后将它放入我们的Linux目录/opt<br>2)解压命令:tar -zxvf redis-3.2.5.tar.gz<br>3)解压完成后进入目录:cd redis-3.2.5<br>4)在redis-3.2.5目录下执行make命令<br>运行Make命令时出现错误,提示 gcc：命令未找到 ,原因是因为当前Linux环境中并没有安装gcc 与 g++ 的环境<br>5)安装gcc与g++<br>能上网的情况:<br>yum install gcc<br>yum install gcc-c++<br>不能上网[建议]<br>网盘里找gcc与gcc-c++环境（Redis里epmgcc）放到opt里<br>进入到epmgcc里 根据依赖关系执行<br> rpm -Uvh *.rpm –nodeps –force</p><p>运行 gcc -v 和g++ -v 出现下面图</p><p>重新进入到Redis的目录中执行 make distclean后再执行make 命令.<br>6)执行完make后，可跳过Redis test步骤，直接执行 make install<br>2.6 查看默认安装目录 /usr/local/bin<br>1)Redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何(服务启动起来后执行)<br>2)Redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲<br>3)Redis-check-dump：修复有问题的dump.rdb文件<br>4)Redis-sentinel：Redis集群使用<br>5)redis-server：Redis服务器启动命令<br>6)redis-cli：客户端，操作入口</p><p>2.7 Redis的启动<br>1)默认前台方式启动<br>直接执行redis-server 即可.启动后不能操作当前命令窗口<br>2)推荐后台方式启动<br>拷贝一份redis.conf配置文件到其他目录，例如根目录下的myredis目录  /myredis<br>修改redis.conf文件中的一项配置 daemonize 将no 改为yes，代表后台启动<br>执行配置文件进行启动 执行 redis-server /myredis/redis.conf<br>2.8客户端访问<br>1)使用redis-cli 命令访问启动好的Redis<br>如果有多个Redis同时启动，则需指定端口号访问  redis-cli -p 端口号<br>2)测试验证,通过 ping 命令 查看是否 返回 PONG<br>2.9 关闭Redis服务<br>1)单实例关闭<br>如果还未通过客户端访问，可直接 redis-cli shutdown<br>如果已经进入客户端,直接 shutdown即可.<br>2)多实例关闭<br>指定端口关闭 redis-cli -p 端口号 shutdown</p><p>2.9Redis端口号的由来<br>1)端口号来自一位影星的名字 . Alessia Merz<br>2.10 Redis 默认16个库<br>1)Redis默认创建16个库,每个库对应一个下标,从0开始.<br>通过客户端连接后默认进入到0 号库，推荐只使用0号库.<br>2)使用命令 select 库的下标  来切换数据库，例如  select 8<br>2.11 Redis的单线程+多路IO复用技术<br>1)多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。<br>2)Memcached 是 多线程 + 锁.<br>Redis 是 单线程 + 多路IO复用.<br>第3章 Redis的五大数据类型<br>3.1 key<br>keys  *     查看当前库的所有键<br>exists <key>    判断某个键是否存在<br>type <key>    查看键的类型<br>del <key>    删除某个键<br>expire <key> <seconds>    为键值设置过期时间，单位秒<br>ttl <key>    查看还有多久过期,-1表示永不过期,-2表示已过期<br>dbsize    查看当前数据库中key的数量<br>flushdb    清空当前库<br>Flushall    通杀全部库</key></seconds></key></key></key></key></p><p>3.2 String<br>1)String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value<br>2)String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>3)String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M<br>4)常用操作</p><p>get <key>    查询对应键值<br>set <key> <value>    添加键值对<br>append <key> <value>    将给定的<value>追加到原值的末尾<br>strlen <key>    获取值的长度<br>senx <key> <value>    只有在key 不存在时设置key的值<br>incr <key>    将key中存储的数字值增1<br>只能对数字值操作，如果为空，新增值为1<br>decr <key>    将key中存储的数字值减1<br>只能对数字之操作，如果为空,新增值为-1<br>incrby /decrby <key> 步长    将key中存储的数字值增减，自定义步长<br>mset <key1> <value1> <key2> <value2>    同时设置一个或多个key-value对<br>mget <key1> <key2>  <key3>    同时获取一个或多个value<br>msetnx <key1> <value1> <key2> <value2>    同时设置一个或多个key-value对，当且仅当所有给定的key都不存在<br>getrange <key> &lt;起始位置&gt; &lt;结束位置&gt;    获得值的范围,类似java中的substring<br>setrange <key> &lt;起始位置&gt; <value>    用<value>覆盖<key>所存储的字符串值，从&lt;起始位置&gt;开始<br>setex <key> &lt;过期时间&gt; <value>    设置键值的同时，设置过去时间，单位秒<br>getset <key> <value>    以新换旧,设置了新值的同时获取旧值</value></key></value></key></key></value></value></key></key></value2></key2></value1></key1></key3></key2></key1></value2></key2></value1></key1></key></key></key></value></key></key></value></value></key></value></key></key></p><p>5)详说 incr key 操作的原子性<br>所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。<br>在单线程中， 能够在单条指令中完成的操作都可以认为是” 原子操作”，因为中断只能发生于指令之间。<br>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。<br>Redis单命令的原子性主要得益于Redis的单线程<br>思考: java中i++是否是原子操作?<br>3.3List<br>1)单键多值<br>2)Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。<br>3)它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差<br>4)  </p><p>5)常用操作<br>lpush/rpush  <key>  <value1>  <value2>      从左边/右边插入一个或多个值。<br>lpop/rpop  <key>    从左边/右边吐出一个值。<br>值在键在，值光键亡。<br>rpoplpush  <key1>  <key2>      从<key1>列表右边吐出一个值，插到<key2>列表左边<br>lrange <key> <start> <stop>    按照索引下标获得元素(从左到右)<br>lindex <key> <index>    按照索引下标获得元素(从左到右)<br>llen <key>    获得列表长度<br>linsert <key>  before <value>  <newvalue>    在<value>的后面插入<newvalue> 插入值<br>lrem <key> <n>  <value>    从左边删除n个value(从左到右)<br>3.4 Set<br>1)Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的<br>2)Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表,所以添加，删除，查找的复杂度都是O(1)。<br>3)常用操作<br>sadd <key>  <value1>  <value2> ….    将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。<br>smembers <key>    取出该集合的所有值。<br>sismember <key>  <value>    判断集合<key>是否为含有该<value>值，有返回1，没有返回0<br>scard   <key>    返回该集合的元素个数。<br>srem <key> <value1> <value2> ….    删除集合中的某个元素。<br>spop <key>      随机从该集合中吐出一个值。<br>srandmember <key> <n>    随机从该集合中取出n个值。<br>不会从集合中删除<br>sinter <key1> <key2>      返回两个集合的交集元素。<br>sunion <key1> <key2>      返回两个集合的并集元素。<br>sdiff <key1> <key2>      返回两个集合的差集元素。<br>3.5 Hash<br>1)Redis  hash 是一个键值对集合<br>2)Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br>3)类似Java里面的Map&lt;String,Object&gt;<br>4)分析一个问题: 现有一个JavaBean对象，在Redis中如何存?</key2></key1></key2></key1></key2></key1></n></key></key></value2></value1></key></key></value></key></value></key></key></value2></value1></key></value></n></key></newvalue></value></newvalue></value></key></key></index></key></stop></start></key></key2></key1></key2></key1></key></value2></value1></key></p><p>第一种方案:  用户ID为key ,VALUE为JavaBean序列化后的字符串</p><p>缺点: 每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大<br>第二种方案: 用户ID+属性名作为key, 属性值作为Value.</p><p>缺点: 用户ID数据冗余<br>第三种方案: 通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</p><p>5)常用操作<br>hset <key>  <field>  <value>    给<key>集合中的  <field>键赋值<value><br>hget <key1>  <field>       从<key1>集合<field> 取出 value<br>hmset <key1>  <field1> <value1> <field2> <value2>…       批量设置hash的值<br>hexists key  <field>    查看哈希表 key 中，给定域 field 是否存在。<br>hkeys <key>       列出该hash集合的所有field<br>hvals <key>        列出该hash集合的所有value<br>hincrby <key> <field>  <increment>    为哈希表 key 中的域 field 的值加上增量 increment<br>hsetnx <key>  <field> <value>    将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</value></field></key></increment></field></key></key></key></field></value2></field2></value1></field1></key1></field></key1></field></key1></value></field></key></value></field></key></p><p>3.6 zset (sorted set)<br>1)Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联了一个评分（score） ，这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。<br>2)因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。<br>3)常用操作<br>zadd  <key> <score1> <value1>  <score2> <value2>…    将一个或多个 member 元素及其 score 值加入到有序集 key 当中<br>zrange <key>  <start> <stop>  [WITHSCORES]       返回有序集 key 中，下标在<start> <stop>之间的元素<br>带WITHSCORES，可以让分数一起和值返回到结果集。<br>zrangebyscore key min max [withscores] [limit offset count]    返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。<br>zrevrangebyscore key max min [withscores] [limit offset count]    同上，改为从大到小排列。<br>zincrby <key> <increment> <value>    为元素的score加上增量<br>zrem  <key>  <value>      删除该集合下，指定值的元素<br>zcount <key>  <min>  <max>    统计该集合，分数区间内的元素个数<br>zrank <key>  <value>    返回该值在集合中的排名，从0开始。<br>4)思考: 如何利用zset实现一个文章访问量的排行榜?<br>第4章 Redis的相关配置<br>1)计量单位说明,大小写不敏感</value></key></max></min></key></value></key></value></increment></key></stop></start></stop></start></key></value2></score2></value1></score1></key></p><p>2)include<br>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来<br>3)ip地址的绑定 bind<br>默认情况bind=127.0.0.1只能接受本机的访问请求<br>不写的情况下，无限制接受任何ip地址的访问<br>生产环境肯定要写你应用服务器的地址<br>如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的相应<br>4)tcp-backlog<br>可以理解是一个请求到达后至到接受进程处理前的队列.<br>backlog队列总和=未完成三次握手队列 +  已经完成三次握手队列<br>高并发环境tcp-backlog 设置值跟超时时限内的Redis吞吐量决定<br>5)timeout<br>一个空闲的客户端维持多少秒会关闭，0为永不关闭。<br>6)tcp keepalive<br>对访问客户端的一种心跳检测，每个n秒检测一次，官方推荐设置为60秒<br>7)daemonize<br>是否为后台进程<br>8)pidfile<br>存放pid文件的位置，每个实例会产生一个不同的pid文件<br>9)log level<br>四个级别根据使用阶段来选择，生产环境选择notice 或者warning<br>10)log level<br>日志文件名称<br>11)syslog<br>是否将Redis日志输送到linux系统日志服务中<br>12)syslog-ident<br>日志的标志<br>13)syslog-facility<br>输出日志的设备<br>14)database<br>设定库的数量 默认16<br>15)security<br>在命令行中设置密码</p><p>16)maxclient<br>最大客户端连接数<br>17)maxmemory<br>设置Redis可以使用的内存量。一旦到达内存使用上限，Redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。如果Redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，<br>那么Redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。<br>18)Maxmemory-policy<br>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键<br>allkeys-lru：使用LRU算法移除key<br>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键<br>allkeys-random：移除随机的key<br>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key<br>noeviction：不进行移除。针对写操作，只是返回错误信息<br>19)Maxmemory-samples<br>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小。<br>一般设置3到7的数字，数值越小样本越不准确，但是性能消耗也越小。<br>第5章 Redis的Java客户端 Jedis<br>1)Jedis所需要的jar包 ,可通过Maven的依赖引入<br>Commons-pool-1.6.jar<br>Jedis-2.1.0.jar<br>2)使用Windows环境下Eclipse连接虚拟机中的Redis注意事项<br>禁用Linux的防火墙：Linux(CentOS7)里执行命令 ： systemctl stop firewalld.service<br>redis.conf中注释掉bind 127.0.0.1 ,然后 protect-mode no。<br>3)Jedis测试连通性<br>public class Demo01 {<br>  public static void main(String[] args) {<br>    //连接本地的 Redis 服务<br>    Jedis jedis = new Jedis(“127.0.0.1”,6379);<br>    //查看服务是否运行，打出pong表示OK<br>    System.out.println(“connection is OK=======&gt;:”+jedis.ping());<br>  }<br>}<br>4)完成一个手机验证码功能<br>要求:<br>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效<br>2、输入验证码，点击验证，返回成功或失败<br>3、每个手机号每天只能输入3次<br>第6章  Redis 事务<br>6.1 Redis中事务的定义<br>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断<br>Redis事务的主要作用就是串联多个命令防止别的命令插队<br>6.2 multi 、exec、discard<br>1)从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，至到输入Exec后，Redis会将之前的命令队列中的命令依次执行。<br>2)组队的过程中可以通过discard来放弃组队。  </p><p>6.3 事务中的错误处理<br>1)组队中某个命令出现了报告错误，执行时整个的所有队列会都会被取消。</p><p>2)如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p>6.4 为什么要做成事务?<br>1)想想一个场景: 有很多人有你的账户，同时去参加双十一抢购</p><p>2)通过事务解决问题</p><p>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</p><p>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的。<br>6.5 Redis事务的使用<br>1)WATCH key[key….]<br>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><p>2)unwatch<br>取消 WATCH 命令对所有 key 的监视。<br>如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。<br>3)三特性<br>单独的隔离操作<br>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>没有隔离级别的概念<br>队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题<br>不保证原子性<br>Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚<br>6.6 Redis事务 秒杀案例<br>1)解决计数器和人员记录的事务操作</p><p>2)秒杀并发模拟  ab工具<br>CentOS6 默认安装 ,CentOS7需要手动安装<br>联网: yum install httpd-tools<br>无网络: 进入cd  /run/media/root/CentOS 7 x86_64/Packages<br>        顺序安装<br>             apr-1.4.8-3.el7.x86_64.rpm<br>              apr-util-1.5.2-6.el7.x86_64.rpm<br>              httpd-tools-2.4.6-67.el7.centos.x86_64.rpm<br>ab –n 请求数  -c 并发数  -p  指定请求数据文件<br>     -T  “application/x-www-form-urlencoded”   测试的请求<br>3)超卖问题</p><p>4)请求超时问题<br>节省每次连接redis服务带来的消耗，把连接好的实例反复利用<br>连接池参数:<br>MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted。<br>maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；<br>MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException；<br>testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；<br>5)遗留问题<br>LUA脚本<br>Lua 是一个小巧的脚本语言，Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。<br>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂<br>LUA脚本在Redis中的优势<br>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。<br>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作<br>但是注意redis的lua脚本功能，只有在2.6以上的版本才可以使用。<br>利用lua脚本淘汰用户，解决超卖问题。</p><p>第7章 Redis 持久化<br>Redis提供了2个不同形式的持久化方式 RDB 和 AOF</p><p>7.2 RDB<br>1)在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。<br>2)备份是如何执行的<br>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。<br>3)关于fork</p><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“写时复制技术”，一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。<br>4)RDB保存的文件<br>在redis.conf中配置文件名称，默认为dump.rdb</p><p>5)RDB文件的保存路径<br>默认为Redis启动时命令行所在的目录下,也可以修改</p><p>6)RDB的保存策略</p><p>7)手动保存快照<br>save: 只管保存，其它不管，全部阻塞<br>bgsave:按照保存策略自动保存<br>8)RDB的相关配置<br>stop-writes-on-bgsave-error yes<br>当Redis无法写入磁盘的话，直接关掉Redis的写操作<br>rdbcompression yes<br>进行rdb保存时，将文件压缩<br>rdbchecksum yes<br>在存储快照后，还可以让Redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能<br>9)RDB的备份 与恢复<br>备份:先通过config get dir  查询rdb文件的目录 , 将*.rdb的文件拷贝到别的地方<br>恢复: 关闭Redis，把备份的文件拷贝到工作目录下,启动redis,备份数据会直接加载。<br>10)RDB的优缺点<br>优点: 节省磁盘空间,恢复速度快.<br>缺点: 虽然Redis在fork时使用了写时拷贝技术,但是如果数据庞大时还是比较消耗性能。      在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就<br>      会丢失最后一次快照后的所有修改<br>7.2 AOF<br>1)以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。<br>2)AOF默认不开启，需要手动在配置文件中配置</p><p>3)可以在redis.conf中配置文件名称，默认为 appendonly.aof</p><p>AOF文件的保存路径，同RDB的路径一致<br>4)AOF和RDB同时开启，redis听谁的？<br>5)AOF文件故障备份<br>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载<br>6)AOF文件故障恢复<br>如遇到AOF文件损坏，可通过<br>redis-check-aof  –fix  appendonly.aof   进行恢复<br>7)AOF同步频率设置</p><p>始终同步，每次Redis的写入都会立刻记入日志<br>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。<br>把不主动进行同步，把同步时机交给操作系统。<br>8)Rewrite<br>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof。<br>Redis如何实现重写<br>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。<br>何时重写<br>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。</p><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。<br>9)AOF的优缺点<br>优点:<br>备份机制更稳健，丢失数据概率更低。<br>可读的日志文本，通过操作AOF稳健，可以处理误操作。<br>缺点:<br>比起RDB占用更多的磁盘空间<br>恢复备份速度要慢<br>每次读写都同步的话，有一定的性能压力。<br>7.3 RDB和AOF 用哪个好<br>官方推荐两个都启用。<br>如果对数据不敏感，可以选单独用RDB<br>不建议单独用 AOF，因为可能会出现Bug。<br>如果只是做纯内存缓存，可以都不用<br>第8章 Redis主从复制<br>8.1 什么是主从复制<br>主从复制，就是主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。<br>8.2 主从复制的目的<br>1)读写分离，性能扩展<br>2)容灾快速恢复<br>3)  </p><p>8.3 主从配置<br>1)原则: 配从不配主<br>2)步骤: 准备三个Redis实例，一主两从<br>     拷贝多个redis.conf文件include<br>     开启daemonize yes<br>     Pid文件名字pidfile<br>     指定端口port<br>     Log文件名字<br>     Dump.rdb名字dbfilename<br>     Appendonly 关掉或者换名字<br>3)info replication  打印主从复制的相关信息<br>4)slaveof  <ip>  <port>   成为某个实例的从服务器<br>8.4 一主二从模式演示</port></ip></p><p>1)相关问题:<br>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的123是否也可以复制<br>从机是否可以写？set可否？<br>主机shutdown后情况如何？从机是上位还是原地待命<br>主机又回来了后，主机新增记录，从机还能否顺利复制<br>其中一台从机down后情况如何？依照原有它能跟上大部队吗？<br>2)复制原理<br>每次从机联通后，都会给主机发送sync指令<br>主机立刻进行存盘操作，发送RDB文件，给从机<br>从机收到RDB文件后，进行全盘加载<br>之后每次主机的写操作，都会立刻发送给从机，从机执行相同的命令</p><p>8.5 薪火相传模式演示<br>1)上一个slave可以是下一个slave的Master，slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险.<br>    中途变更转向:会清除之前的数据，重新建立拷贝最新的<br>    风险是一旦某个slave宕机，后面的slave都没法备份</p><p>2)反客为主(小弟上位)<br>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。<br>用 slaveof  no one  将从机变为主机。</p><p>3)哨兵模式 sentinel (推举大哥)<br>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库.</p><p>配置哨兵<br>调整为一主二从模式<br>自定义的/myredis目录下新建sentinel.conf文件<br>在配置文件中填写内容<br>sentinel  monitor  mymaster  127.0.0.1  6379  1<br>        其中mymaster为监控对象起的服务器名称， 1 为 至少有多少个哨兵同意迁移的<br>        数量。<br>启动哨兵<br>执行redis-sentinel  /myredis/sentinel.conf<br>8.6 故障恢复</p><p>第9章 Redis集群<br>9.1 问题<br>1)容量不够，redis如何进行扩容？<br>2)并发写操作， redis如何分摊？<br>9.1 什么是集群<br>1)Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。<br>2)Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求<br>9.2 集群方案<br>9.3 安装ruby环境<br>1)能上网:<br>执行yum install ruby<br>执行yum install rubygems<br>2)不能上网:<br> cd  /run/media/root/CentOS 7 x86_64/Packages  获取如下rpm包</p><p>拷贝到/opt/rpmruby/目录下，并cd到此目录<br>执行：rpm -Uvh *.rpm –nodeps –force 按照依赖安装各个rpm包<br>按照依赖安装各个rpm包<br>执行在opt目录下执行  gem install –local redis-3.2.0.gem<br>9.4 准备6个Redis实例<br>1)准备6个实例  6379,6380,6381,6389,6390,6391<br>    拷贝多个redis.conf文件<br>    开启daemonize yes<br>    Pid文件名字<br>    指定端口<br>    Log文件名字<br>    Dump.rdb名字<br>    Appendonly 关掉或者换名字<br>2)再加入如下配置<br>cluster-enabled yes    打开集群模式<br>cluster-config-file  nodes-端口号.conf  设定节点配置文件名<br>cluster-node-timeout 15000   设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换<br>9.5 合体<br>1)将6个实例全部启动，nodes-端口号.conf文件都生成正常<br>2)合体<br>进入到 cd  /opt/redis-3.2.5/src<br>执行<br>./redis-trib.rb create –replicas 1<br>192.168.31.211:6379 192.168.31.211:6380  192.168.31.211:6381<br>192.168.31.211:6389 192.168.31.211:6390  192.168.31.211:6391<br>注意: IP地址修改为当前服务器的地址，端口号为每个Redis实例对应的端口号.<br>9.6 集群操作<br>1)以集群的方式进入客户端<br>redis-cli  -c  -p  端口号<br>2)通过cluster nodes 命令查看集群信息</p><p>3)redis cluster 如何分配这六个节点<br>一个集群至少要有三个主节点。<br>选项 –replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。<br>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。<br>4)什么是slots<br>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。<br>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：<br>        节点 A 负责处理 0 号至 5500 号插槽。<br>        节点 B 负责处理 5501 号至 11000 号插槽。<br>        节点 C 负责处理 11001 号至 16383 号插槽<br>5)在集群中录入值<br>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口.<br>redis-cli客户端提供了 –c 参数实现自动重定向。<br>如 redis-cli  -c –p 6379 登入后，再录入、查询键值对可以自动重定向。<br>不在一个slot下的键值，是不能使用mget,mset等多键操作。<br>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去<br>6)查询集群中的值<br>CLUSTER KEYSLOT <key> 计算键 key 应该被放置在哪个槽上。<br>CLUSTER COUNTKEYSINSLOT <slot> 返回槽 slot 目前包含的键值对数量<br>CLUSTER GETKEYSINSLOT <slot> <count> 返回 count 个 slot 槽中的键<br>7)故障恢复<br>如果主节点下线？从节点能否自动升为主节点？<br>主节点恢复后，主从关系会如何？<br>如果所有某一段插槽的主从节点都当掉，redis服务是否还能继续?<br>redis.conf中的参数  cluster-require-full-coverage<br>9.7 集群的Jedis开发<br>public class JedisClusterTest {<br>  public static void main(String[] args) {</count></slot></slot></key></p><pre><code>Set&lt;HostAndPort&gt; set =new HashSet&lt;HostAndPort&gt;();set.add(new HostAndPort(&quot;192.168.31.211&quot;,6379));JedisCluster jedisCluster=new JedisCluster(set);jedisCluster.set(&quot;k1&quot;, &quot;v1&quot;);System.out.println(jedisCluster.get(&quot;k1&quot;));</code></pre><p>  }<br>}</p><p>9.8 Redis集群的优缺点<br>优点<br>实现扩容<br>分摊压力<br>无中心配置相对简单<br>缺点<br>多键操作是不被支持的<br>多键的Redis事务是不被支持的。lua脚本不被支持。<br>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-NoSQL-简介&quot;&gt;&lt;a href=&quot;#第1章-NoSQL-简介&quot; class=&quot;headerlink&quot; title=&quot;第1章 NoSQL 简介&quot;&gt;&lt;/a&gt;第1章 NoSQL 简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-技术的分类&quot;&gt;&lt;a href=&quot;#1-1-
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="使用过的开源框架" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Maven</title>
    <link href="http://yoursite.com/2018/04/13/70.%20Maven/"/>
    <id>http://yoursite.com/2018/04/13/70. Maven/</id>
    <published>2018-04-12T16:00:00.000Z</published>
    <updated>2019-06-08T15:10:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Why"><a href="#第一章-Why" class="headerlink" title="第一章 Why"></a>第一章 Why</h1><blockquote><p>Maven是干什么用的？<br>即使不使用Maven我们仍然可以进行B/S结构项目的开发。<br>从表述层、业务逻辑层到持久化层再到数据库都有成熟的解决方案。<br>但是通过企业开发中的实际需求来看，不使用Maven是不足的。   </p></blockquote><h2 id="1-1-添加第三方jar包"><a href="#1-1-添加第三方jar包" class="headerlink" title="1.1 添加第三方jar包"></a>1.1 添加第三方jar包</h2><ul><li>在今天的JavaEE开发领域，有大量的第三方框架和工具可以供我们使用。要使用这些jar包最简单的方法就是复制粘贴到WEB-INF目录下的lib目录下。但是这会导致每次创建一个新的工程就需要将jar包重复复制到lib目录下，从而造成工作区中存在大量重复的文件。</li><li>而使用Maven后每个jar包只在本地仓库中保存一份，需要jar包的工程只需要维护一个文本形式的jar包的引用</li></ul><blockquote><p>我们称之为“坐标”。不仅极大的节约了存储空间，让项目更轻巧，更避免了重复文件太多而造成的混乱。</p></blockquote><h2 id="1-2-jar包之间的依赖关系"><a href="#1-2-jar包之间的依赖关系" class="headerlink" title="1.2 jar包之间的依赖关系"></a>1.2 jar包之间的依赖关系</h2><ul><li>jar包往往不是孤立存在的，很多jar包都需要在其他jar包的支持下才能够正常工作，我们称之为jar包之间的依赖关系。最典型的例子是：commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar，如果没有IO包，FileUpload包就不能正常工作。</li><li>那么问题来了，你知道你所使用的所有jar包的依赖关系吗？当你拿到一个新的从未使用过的jar包，你如何得知他需要哪些jar包的支持呢？如果不了解这个情况，导入的jar包不够，那么现有的程序将不能正常工作。再进一步，当你的项目中需要用到上百个jar包时，你还会人为的，手工的逐一确认它们依赖的其他jar包吗？这简直是不可想象的。</li><li>而引入Maven后，Maven就可以替我们自动的将当前jar包所依赖的其他所有jar包全部导入进来，无需人工参与，节约了我们大量的时间和精力。用实际例子来说明就是：通过Maven导入commons-fileupload-1.3.jar后，commons-io-2.0.1.jar会被自动导入，程序员不必了解这个依赖关系。</li><li><h2 id="1-3-处理jar包之间的冲突"><a href="#1-3-处理jar包之间的冲突" class="headerlink" title="1.3 处理jar包之间的冲突"></a>1.3 处理jar包之间的冲突</h2></li><li>jar包不足项目无法正常工作，但其实有的时候jar包多了项目仍然无法正常工作，这就是jar包之间的冲突。<blockquote><p>举个例子：我们现在有三个工程MakeFriend、HelloFriend、和Hello。<br>MakeFriend依赖HelloFriend，HelloFriend依赖Hello。<br>而Hello依赖log4j.1.2.17.jar，HelloFriend依赖log4j.1.2.14.jar。<br>如下图所示：</p></blockquote></li></ul><p><img src="https://s2.ax1x.com/2019/05/18/EOj6ER.png" alt="EOj6ER.png"></p><blockquote><p>那么MakeFriend工程的运行时环境中该导入log4j.1.2.14.jar呢还是log4j.1.2.17.jar呢?<br>这样的问题一个两个还可以手工解决，但如果系统中存在几十上百的jar包，他们之间的依赖关系会非常复杂，几乎不可能手工实现依赖关系的梳理。<br>使用Maven就可以自动的处理jar包之间的冲突问题。<br>因为Maven中内置了两条依赖原则：</p><ul><li>最短路径者优先和先声明者优先.  </li></ul></blockquote><blockquote><p>上述问题MakeFriend工程会自动使用log4j.1.2.14.jar。</p></blockquote><h2 id="1-4-获取第三方jar包"><a href="#1-4-获取第三方jar包" class="headerlink" title="1.4 获取第三方jar包"></a>1.4 获取第三方jar包</h2><blockquote><ul><li>JavaEE开发中需要使用到的jar包种类繁多，几乎每个jar包在其本身的官网上的获取方式都不尽相同。<br>为了查找一个jar包找遍互联网，身心俱疲，没有经历过的人或许体会不到这种折磨。<br>不仅如此，费劲心血找的jar包里有的时候并没有你需要的那个类，又或者又同名的类没有你要的方法——以不规范的方式获取的jar包也往往是不规范的。  </li><li>使用Maven我们可以享受到一个完全统一规范的jar包管理体系。<br>你只需要在你的项目中以坐标的方式依赖一个jar包，Maven就会自动从中央仓库进行下载，并同时下载这个jar包所依赖的其他jar包。<br>规范、完整、准确！一次性解决所有问题！   </li></ul></blockquote><blockquote><p><strong>Tips</strong>：统一的规范几乎可以说成是程序员的最高信仰。<br>        如果没有统一的规范，就意味着每个具体的技术都各自为政，需要以诸多不同的特殊的方式加入到项目中；<br>        好不容易加入进来还会和其他技术格格不入，最终受苦的是我们。<br>        而任何一个领域的统一规范都能够极大的降低程序员的工作难度，减少工作量。<br>        例如：USB接口可以外接各种设备，如果每个设备都有自己独特的接口，那么不仅制造商需要维护各个接口的设计方案，使用者也需要详细了解每个设备对应的接口，无疑是非常繁琐的。</p></blockquote><p>1.5 将项目拆分成多个工程模块<br>随着JavaEE项目的规模越来越庞大，开发团队的规模也与日俱增。一个项目上千人的团队持续开发很多年对于JavaEE项目来说再正常不过。那么我们想象一下：几百上千的人开发的项目是同一个Web工程。那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过package结构来划分模块，必须将项目拆分成多个工程协同开发。多个模块工程中有的是Java工程，有的是Web工程。<br>那么工程拆分后又如何进行互相调用和访问呢？这就需要用到Maven的依赖管理机制。大家请看我们的Survey调查项目拆分的情况：</p><p>上层模块依赖下层，所以下层模块中定义的API都可以为上层所调用和访问。</p><h2 id="1-6-实现项目的分布式部署"><a href="#1-6-实现项目的分布式部署" class="headerlink" title="1.6 实现项目的分布式部署"></a>1.6 实现项目的分布式部署</h2><p>在实际生产环境中，项目规模增加到一定程度后，可能每个模块都需要运行在独立的服务器上，我们称之为分布式部署，这里同样需要用到Maven。</p><h1 id="第二章-What"><a href="#第二章-What" class="headerlink" title="第二章 What"></a>第二章 What</h1><p>如果上面的描述能够使你认识到使用Maven是多么的重要，我们下面就来介绍一下Maven是什么。</p><h2 id="2-1-自动化构建工具"><a href="#2-1-自动化构建工具" class="headerlink" title="2.1 自动化构建工具"></a>2.1 自动化构建工具</h2><blockquote><p>Maven这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]，不要读作“妈文”。<br>Maven是一款自动化构建工具，专注服务于Java平台的项目构建和依赖管理。在JavaEE开发的历史上构建工具的发展也经历了一系列的演化和变迁：<br>Make→Ant→Maven→Gradle→其他……</p></blockquote><h2 id="2-2-构建的概念"><a href="#2-2-构建的概念" class="headerlink" title="2.2 构建的概念"></a>2.2 构建的概念</h2><p>构建并不是创建，创建一个工程并不等于构建一个项目。<br>由浅入深的从以下三个层面来看：  </p><blockquote><ul><li>①纯Java代码<br>大家都知道，我们Java是一门编译型语言.java扩展名的源文件需要编译成.class扩展名的字节码文件才能够执行。所以编写任何Java代码想要执行的话就必须经过编译得到对应的.class文件。</li><li>②Web工程<br>当我们需要通过浏览器访问Java程序时就必须将包含Java程序的Web工程编译的结果“拿”到服务器上的指定目录下，并启动服务器才行。这个“拿”的过程我们叫部署。  </li></ul></blockquote><blockquote><p>我们可以将未编译的Web工程比喻为一只生的鸡，编译好的Web工程是一只煮熟的鸡，编译部署的过程就是将鸡炖熟。<br>Web工程和其编译结果的目录结构对比见下图：</p></blockquote><p><img src="https://s2.ax1x.com/2019/05/18/EOj6ER.png" alt="EOj6ER.png"></p><blockquote><ul><li>③实际项目<br>在实际项目中整合第三方框架，Web工程中除了Java程序和JSP页面、图片等静态资源之外，还包括第三方框架的jar包以及各种各样的配置文件。所有这些资源都必须按照正确的目录结构部署到服务器上，项目才可以运行。<br>所以综上所述：构建就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、JSP页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。  </li></ul></blockquote><h2 id="2-3-构建环节"><a href="#2-3-构建环节" class="headerlink" title="2.3 构建环节"></a>2.3 构建环节</h2><p>①清理：删除以前的编译结果，为重新编译做好准备。<br>②编译：将Java源程序编译为字节码文件。<br>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>④报告：在每一次测试后以标准的格式记录和展示测试结果。<br>⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对应war包。<br>⑥安装：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。<br>⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。  </p><h2 id="2-4-自动化构建"><a href="#2-4-自动化构建" class="headerlink" title="2.4 自动化构建"></a>2.4 自动化构建</h2><p>其实上述环节我们在Eclipse中都可以找到对应的操作，只是不太标准。那么既然IDE已经可以进行构建了我们为什么还要使用Maven这样的构建工具呢？我们来看一个小故事：  </p><blockquote><p>这是阳光明媚的一天。托马斯向往常一样早早的来到了公司，冲好一杯咖啡，进入了自己的邮箱——很不幸，QA小组发来了一封邮件，报告了他昨天提交的模块的测试结果——有BUG。“好吧，反正也不是第一次”，托马斯摇摇头，进入IDE，运行自己的程序，编译、打包、部署到服务器上，然后按照邮件中的操作路径进行测试。“嗯，没错，这个地方确实有问题”，托马斯说道。于是托马斯开始尝试修复这个BUG，当他差不多有眉目的时候已经到了午饭时间。<br>下午继续工作。BUG很快被修正了，接着托马斯对模块重新进行了编译、打包、部署，测试之后确认没有问题了，回复了QA小组的邮件。<br>一天就这样过去了，明媚的阳光化作了美丽的晚霞，托马斯却觉得生活并不像晚霞那样美好啊。  </p></blockquote><p>让我们来梳理一下托马斯这一天中的工作内容</p><p><img src="https://s2.ax1x.com/2019/05/18/EOxwm4.png" alt="EOxwm4.png"></p><p>从中我们发现，托马斯的很大一部分时间花在了“编译、打包、部署、测试”这些程式化的工作上面，而真正需要由“人”的智慧实现的分析问题和编码却只占了很少一部分。</p><p><img src="https://s2.ax1x.com/2019/05/18/EOxB79.png" alt="EOxB79.png"></p><p>能否将这些程式化的工作交给机器自动完成呢？——当然可以！这就是自动化构建。</p><p><a href="https://imgchr.com/i/EOxyfx" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/18/EOxyfx.md.png" alt="EOxyfx.md.png"></a></p><p>那么Maven又是如何实现自动化构建的呢？简单的说来就是它可以自动的从构建过程的起点一直执行到终点：</p><p><a href="https://imgchr.com/i/EOx26O" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/18/EOx26O.md.png" alt="EOx26O.md.png"></a></p><h2 id="2-5-Maven核心概念（重点）"><a href="#2-5-Maven核心概念（重点）" class="headerlink" title="2.5 Maven核心概念（重点）"></a>2.5 Maven核心概念（重点）</h2><p>（学会9个重要概念就学会Maven）<br>Maven之所以能够实现自动化的构建，和它的设计是紧密相关的。我们对Maven的学习就围绕它的九个核心概念展开：<br>①POM<br>②约定的目录结构<br>③坐标<br>④依赖管理<br>⑤仓库管理<br>⑥生命周期<br>⑦插件和目标<br>⑧继承<br>⑨聚合  </p><h2 id="第三章-How"><a href="#第三章-How" class="headerlink" title="第三章 How"></a>第三章 How</h2><p>在这一节中，我们来看看Maven核心程序的安装和本地仓库的必要设置。然后我们就可以编写第一个Maven程序了。  </p><blockquote><p>①检查JAVA_HOME环境变量。<br>Maven是使用Java开发的，所以必须知道当前系统环境中JDK的安装目录。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;echo %JAVA_HOME%</span><br><span class="line">C:\Java\jdk1.8.0_45</span><br></pre></td></tr></table></figure><blockquote><p>②解压Maven的核心程序。<br>将apache-maven-3.5.0-bin.zip解压到一个非中文无空格的目录下。例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Server\apache-maven-3.5.0</span><br></pre></td></tr></table></figure><blockquote><p>③配置环境变量。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">M2_HOME</span><br><span class="line">D:\Server\ apache-maven-3.5.0</span><br><span class="line">path</span><br><span class="line">%M2_HOME%\bin或D:\Server\ apache-maven-3.5.0\bin</span><br></pre></td></tr></table></figure><blockquote><p>④查看Maven版本信息验证安装是否正确</p></blockquote><p><img src="https://s2.ax1x.com/2019/05/19/EXfPY9.png" alt="EXfPY9.png"></p><blockquote><p>⑤配置本地仓库  </p><ul><li>[1]Maven默认的本地仓库：</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~\.m2\repository目录。</span><br><span class="line">Tips：~表示当前用户的家目录。</span><br></pre></td></tr></table></figure><blockquote><ul><li>[2]Maven的核心程序并不包含具体功能，仅负责宏观调度。具体功能由插件来完成。Maven核心程序会到本地仓库中查找插件。如果本地仓库中没有就会从远程中央仓库下载。此时如果不能上网则无法执行Maven的具体功能。为了解决这个问题，我们可以将Maven的本地仓库指向一个在联网情况下下载好的目录。</li><li>[3]Maven的核心配置文件位置：<br>解压目录</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\D:\Server\ apache-maven-3.5.0\conf\settings.xml</span><br></pre></td></tr></table></figure><blockquote><ul><li>[4]设置方式</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;以及准备好的仓库位置&lt;/localRepository&gt;</span><br><span class="line">&lt;localRepository&gt;D:/RepMaven&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><h1 id="第四章-第一个Maven程序-练习常用命令"><a href="#第四章-第一个Maven程序-练习常用命令" class="headerlink" title="第四章 第一个Maven程序(练习常用命令)"></a>第四章 第一个Maven程序(练习常用命令)</h1><p>●第一步：创建约定的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line"> src</span><br><span class="line"> ——main</span><br><span class="line"> ————java</span><br><span class="line"> ————resources</span><br><span class="line"> ——test</span><br><span class="line"> ————java</span><br><span class="line"> ————resources</span><br><span class="line"> pom.xml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main目录用于存放主程序。  </span><br><span class="line">test目录用于存放测试程序。  </span><br><span class="line">java目录用于存放源代码文件。    </span><br><span class="line">resources目录用于存放配置文件和资源文件。</span><br></pre></td></tr></table></figure><p>●第二步：创建Maven的核心配置文件pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;Hello&lt;/name&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>●第三步：编写主代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在src/main/java/com/atguigu/maven目录下新建文件Hello.java</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.maven;</span><br><span class="line">public class Hello &#123;</span><br><span class="line">public String sayHello(String name)&#123;</span><br><span class="line">return &quot;Hello &quot;+name+&quot;!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●第四步：编写测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在/src/test/java/com/atguigu/maven目录下新建测试文件HelloTest.java</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.maven;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import static junit.framework.Assert.*;</span><br><span class="line">public class HelloTest &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testHello()&#123;</span><br><span class="line">Hello hello = new Hello();</span><br><span class="line">String results = hello.sayHello(&quot;litingwei&quot;);</span><br><span class="line">assertEquals(&quot;Hello litingwei!&quot;,results); //断言</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>●第五步：运行几个基本的Maven命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">①打开cmd命令行，进入Hello项目根目录(pom.xml文件所在目录)</span><br><span class="line">    执行mvn compile命令，查看根目录变化</span><br><span class="line">④cmd 中继续录入mvn clean命令，然后再次查看根目录变化</span><br><span class="line">⑤cmd 中录入 mvn clean compile命令, 查看根目录变化</span><br><span class="line">⑥cmd 中录入 mvn test-compile命令,查看target目录变化</span><br><span class="line">⑦cmd 中录入 mvn clean test命令，查看target目录变化</span><br><span class="line">⑧cmd 中录入mvn clean package命令,查看target目录变化</span><br><span class="line">⑨cmd中录入mvn source:jar命令，查看target目录变化</span><br></pre></td></tr></table></figure><p>注意：运行Maven命令时一定要进入pom.xml文件所在的目录！</p><h1 id="第五章-POM"><a href="#第五章-POM" class="headerlink" title="第五章 POM"></a>第五章 POM</h1><blockquote><p>Project Object Model：项目对象模型。将Java工程的相关信息封装为对象作为便于操作和管理的模型。<br>Maven工程的核心配置。可以说学习Maven就是学习pom.xml文件中的配置。</p></blockquote><h1 id="第六章-约定的目录结构"><a href="#第六章-约定的目录结构" class="headerlink" title="第六章 约定的目录结构"></a>第六章 约定的目录结构</h1><p>现在JavaEE开发领域普遍认同一个观点：<br><code>约定&gt;配置&gt;编码</code>。<br>意思就是能用配置解决的问题就不编码，能基于约定的就不进行配置。<br>而Maven正是因为指定了特定文件保存的目录才能够对我们的Java工程进行自动化构建。<br>目录结构含义参见前面的描述。</p><h1 id="第七章-坐标"><a href="#第七章-坐标" class="headerlink" title="第七章 坐标"></a>第七章 坐标</h1><h2 id="7-1-几何中的坐标"><a href="#7-1-几何中的坐标" class="headerlink" title="7.1 几何中的坐标"></a>7.1 几何中的坐标</h2><blockquote><ul><li>[1]在一个平面中使用x、y两个向量可以唯一的确定平面中的一个点。</li><li>[2]在空间中使用x、y、z三个向量可以唯一的确定空间中的一个点。</li></ul></blockquote><h2 id="7-2-Maven的坐标"><a href="#7-2-Maven的坐标" class="headerlink" title="7.2 Maven的坐标"></a>7.2 Maven的坐标</h2><p>使用如下三个向量在Maven的仓库中唯一的确定一个Maven工程。</p><blockquote><ul><li>[1]groupId：公司或组织的域名倒序+当前项目名称</li><li>[2]artifactId：当前项目的模块名称</li><li>[3]version：当前模块的版本</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br></pre></td></tr></table></figure><h2 id="7-3-如何通过坐标到仓库中查找jar包"><a href="#7-3-如何通过坐标到仓库中查找jar包" class="headerlink" title="7.3 如何通过坐标到仓库中查找jar包"></a>7.3 如何通过坐标到仓库中查找jar包</h2><p>[1]将gav三个向量连起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.maven+Hello+0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure><p>[2]以连起来的字符串作为目录结构到仓库中查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com/maven/Hello/0.0.1-SNAPSHOT/Hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>※注意：我们自己的Maven工程必须执行安装操作才会进入仓库。安装的命令是：<code>mvn install</code></p><h1 id="第八章-第二个Maven工程-练习依赖引用"><a href="#第八章-第二个Maven工程-练习依赖引用" class="headerlink" title="第八章 第二个Maven工程(练习依赖引用)"></a>第八章 第二个Maven工程(练习依赖引用)</h1><h2 id="8-1-目录结构"><a href="#8-1-目录结构" class="headerlink" title="8.1 目录结构"></a>8.1 目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HelloFriend</span><br><span class="line"> src</span><br><span class="line"> ——main</span><br><span class="line"> ————java</span><br><span class="line"> ————resources</span><br><span class="line"> ——test</span><br><span class="line"> ————java</span><br><span class="line"> ————resources</span><br><span class="line"> pom.xml</span><br></pre></td></tr></table></figure><h2 id="8-2-POM文件"><a href="#8-2-POM文件" class="headerlink" title="8.2 POM文件"></a>8.2 POM文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;name&gt;HelloFriend&lt;/name&gt;</span><br><span class="line">  </span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="8-3-主程序"><a href="#8-3-主程序" class="headerlink" title="8.3 主程序"></a>8.3 主程序</h2><p>在src/main/java/com/atguigu/maven目录下新建文件HelloFriend.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.maven;</span><br><span class="line">import com.atguigu.maven.Hello;</span><br><span class="line">public class HelloFriend &#123;</span><br><span class="line">public String sayHelloToFriend(String name)&#123;</span><br><span class="line">Hello hello = new Hello();</span><br><span class="line">String str = hello.sayHello(name)+&quot; I am &quot;+this.getMyName();</span><br><span class="line">System.out.println(str);</span><br><span class="line">return str;</span><br><span class="line">&#125;</span><br><span class="line">public String getMyName()&#123;</span><br><span class="line">return &quot;John&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-测试程序"><a href="#8-4-测试程序" class="headerlink" title="8.4 测试程序"></a>8.4 测试程序</h2><p>在/src/test/java/com/atguigu/maven目录下新建测试文件HelloFriendTest.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.maven;</span><br><span class="line">import static junit.framework.Assert.assertEquals;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import com.atguigu.maven.Hello;</span><br><span class="line"></span><br><span class="line">public class HelloFriendTest &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testHelloFriend()&#123;</span><br><span class="line">HelloFriend helloFriend = new HelloFriend();</span><br><span class="line">String results = helloFriend.sayHelloToFriend(&quot;litingwei&quot;);</span><br><span class="line">assertEquals(&quot;Hello litingwei! I am John&quot;,results);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-5-关键：对Hello的依赖"><a href="#8-5-关键：对Hello的依赖" class="headerlink" title="8.5 关键：对Hello的依赖"></a>8.5 关键：对Hello的依赖</h2><blockquote><ul><li>这里Hello就是我们的第一个Maven工程，现在HelloFriend对它有依赖。那么这个依赖能否成功呢？更进一步的问题是：HelloFriend工程会到哪里去找Hello呢？  </li><li>答案是：本地仓库。任何一个Maven工程会根据坐标到本地仓库中去查找它所依赖的jar包。如果能够找到则可以正常工作，否则就不行。</li></ul></blockquote><h1 id="第九章-依赖管理"><a href="#第九章-依赖管理" class="headerlink" title="第九章 依赖管理"></a>第九章 依赖管理</h1><h2 id="9-1-基本概念"><a href="#9-1-基本概念" class="headerlink" title="9.1 基本概念"></a>9.1 基本概念</h2><p>当A jar包需要用到B jar包中的类时，我们就说A对B有依赖。<br>例如：<code>commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar</code>。<br>通过第二个Maven工程我们已经看到，当前工程会到本地仓库中根据坐标查找它所依赖的jar包。<br>配置的基本形式是使用dependency标签指定目标jar包的坐标。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;!—坐标 --&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.10&lt;/version&gt;</span><br><span class="line">&lt;!-- 依赖的范围 --&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="9-2-直接依赖和间接依赖"><a href="#9-2-直接依赖和间接依赖" class="headerlink" title="9.2 直接依赖和间接依赖"></a>9.2 直接依赖和间接依赖</h2><p>如果A依赖B，B依赖C，那么A→B和B→C都是直接依赖，而A→C是间接依赖。</p><h2 id="9-3-依赖的范围"><a href="#9-3-依赖的范围" class="headerlink" title="9.3 依赖的范围"></a>9.3 依赖的范围</h2><p>当一个Maven工程添加了对某个jar包的依赖后，这个被依赖的jar包可以对应下面几个可选的范围：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">①compile  </span><br><span class="line">[1]main目录下的Java代码可以访问这个范围的依赖</span><br><span class="line">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class="line">[3]部署到Tomcat服务器上运行时要放在WEB-INF的lib目录下</span><br><span class="line">例如：对Hello的依赖。主程序、测试程序和服务器运行时都需要用到。</span><br><span class="line">②test</span><br><span class="line">[1]main目录下的Java代码不能访问这个范围的依赖</span><br><span class="line">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class="line">[3]部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下</span><br><span class="line">例如：对junit的依赖。仅仅是测试程序部分需要。</span><br><span class="line">③provided</span><br><span class="line">[1]main目录下的Java代码可以访问这个范围的依赖</span><br><span class="line">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class="line">[3]部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下</span><br><span class="line">例如：servlet-api在服务器上运行时，Servlet容器会提供相关API，所以部署的时候不需要。</span><br><span class="line">④runtime[了解]</span><br><span class="line">[1]main目录下的Java代码不能访问这个范围的依赖</span><br><span class="line">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class="line">[3]部署到Tomcat服务器上运行时会放在WEB-INF的lib目录下</span><br><span class="line">例如：JDBC驱动。只有在测试运行和在服务器运行的时候才决定使用什么样的数据库连接。</span><br><span class="line">⑤其他：import、system等。</span><br></pre></td></tr></table></figure><p>各个依赖范围的作用可以概括为下图：</p><p><img src="https://s2.ax1x.com/2019/05/19/EXh34J.png" alt="EXh34J.png"></p><h2 id="9-4-依赖的传递性"><a href="#9-4-依赖的传递性" class="headerlink" title="9.4 依赖的传递性"></a>9.4 依赖的传递性</h2><p>当存在间接依赖的情况时，主工程对间接依赖的jar可以访问吗？<br>这要看间接依赖的jar包引入时的依赖范围——只有依赖范围为compile时可以访问。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Maven工程依赖范围对A的可见性</span><br><span class="line">ABCcompile √</span><br><span class="line">Dtest    ×</span><br><span class="line">Eprovided×</span><br></pre></td></tr></table></figure><h2 id="9-5-依赖的原则：解决jar包冲突"><a href="#9-5-依赖的原则：解决jar包冲突" class="headerlink" title="9.5 依赖的原则：解决jar包冲突"></a>9.5 依赖的原则：解决jar包冲突</h2><p>①路径最短者优先</p><p><img src="https://s2.ax1x.com/2019/05/19/EjupHs.png" alt="EjupHs.png"></p><p>②路径相同时先声明者优先</p><p><img src="https://s2.ax1x.com/2019/05/19/Ejui40.png" alt="Ejui40.png"></p><p>这里“声明”的先后顺序指的是dependency标签配置的先后顺序。</p><h2 id="9-6-依赖的排除"><a href="#9-6-依赖的排除" class="headerlink" title="9.6 依赖的排除"></a>9.6 依赖的排除</h2><p>有的时候为了确保程序正确可以将有可能重复的间接依赖排除。请看如下的例子：<br>●假设当前工程为survey_public，直接依赖survey_environment。<br>●survey_environment依赖commons-logging的1.1.1对于survey_public来说是间接依赖。<br>●当前工程survey_public直接依赖commons-logging的1.1.2<br>●加入exclusions配置后可以在依赖survey_environment的时候排除版本为1.1.1的commons-logging的间接依赖  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;Survey160225_4_Environment&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;!-- 依赖排除 --&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="9-7-统一管理目标jar包的版本"><a href="#9-7-统一管理目标jar包的版本" class="headerlink" title="9.7 统一管理目标jar包的版本"></a>9.7 统一管理目标jar包的版本</h2><p>以对Spring的jar包依赖为例：Spring的每一个版本中都包含spring-core、spring-context等jar包。我们应该导入版本一致的Spring jar包，而不是使用4.0.0的spring-core的同时使用4.1.1的spring-context。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>问题是如果我们想要将这些jar包的版本统一升级为4.1.1，是不是要手动一个个修改呢？显然，我们有统一配置的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;spring.version&gt;4.1.1.RELEASE&lt;/spring.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">……</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这样一来，进行版本调整的时候只改一改地方就行了。</p><h1 id="第十章-仓库"><a href="#第十章-仓库" class="headerlink" title="第十章 仓库"></a>第十章 仓库</h1><h2 id="10-1-分类"><a href="#10-1-分类" class="headerlink" title="10.1 分类"></a>10.1 分类</h2><p>[1]本地仓库：为当前本机电脑上的所有Maven工程服务。<br>[2]远程仓库  </p><blockquote><p>(1)私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务。  </p></blockquote><p><img src="https://s2.ax1x.com/2019/05/19/Ejuf5q.png" alt="Ejuf5q.png"></p><blockquote><p>(2)中央仓库：架设在Internet上，为全世界所有Maven工程服务。<br>(3)中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。  </p></blockquote><h2 id="10-2-仓库中的文件"><a href="#10-2-仓库中的文件" class="headerlink" title="10.2 仓库中的文件"></a>10.2 仓库中的文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1]Maven的插件</span><br><span class="line">[2]我们自己开发的项目的模块</span><br><span class="line">[3]第三方框架或工具的jar包</span><br></pre></td></tr></table></figure><p>※不管是什么样的jar包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。</p><h1 id="第十一章-生命周期"><a href="#第十一章-生命周期" class="headerlink" title="第十一章 生命周期"></a>第十一章 生命周期</h1><h2 id="11-1-什么是Maven的生命周期"><a href="#11-1-什么是Maven的生命周期" class="headerlink" title="11.1 什么是Maven的生命周期"></a>11.1 什么是Maven的生命周期</h2><p>●Maven生命周期定义了各个构建环节的执行顺序，有了这个清单，Maven就可以自动化的执行构建命令了。<br>●Maven有三套相互独立的生命周期，分别是： </p><blockquote><p>①Clean Lifecycle在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle构建的核心部分，编译，测试，打包，安装，部署等等。<br>③Site Lifecycle生成项目报告，站点，发布站点。</p></blockquote><blockquote><p>再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。  </p></blockquote><blockquote><p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean，这个clean是Clean生命周期的一个阶段。有Clean生命周期，也有clean阶段。</p></blockquote><h2 id="11-2-clean生命周期"><a href="#11-2-clean生命周期" class="headerlink" title="11.2 clean生命周期"></a>11.2 clean生命周期</h2><p>Clean生命周期一共包含了三个阶段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">①pre-clean 执行一些需要在clean之前完成的工作 </span><br><span class="line">②clean 移除所有上一次构建生成的文件 </span><br><span class="line">③post-clean 执行一些需要在clean之后立刻完成的工作</span><br></pre></td></tr></table></figure><h2 id="11-3-Site生命周期"><a href="#11-3-Site生命周期" class="headerlink" title="11.3 Site生命周期"></a>11.3 Site生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">①pre-site 执行一些需要在生成站点文档之前完成的工作</span><br><span class="line">②site 生成项目的站点文档</span><br><span class="line">③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</span><br><span class="line">④site-deploy 将生成的站点文档部署到特定的服务器上</span><br></pre></td></tr></table></figure><p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</p><h2 id="11-4-Default生命周期"><a href="#11-4-Default生命周期" class="headerlink" title="11.4 Default生命周期"></a>11.4 Default生命周期</h2><p>Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">validate</span><br><span class="line">generate-sources</span><br><span class="line">process-sources</span><br><span class="line">generate-resources</span><br><span class="line">process-resources 复制并处理资源文件，至目标目录，准备打包。</span><br><span class="line">compile 编译项目的源代码。</span><br><span class="line">process-classes</span><br><span class="line">generate-test-sources</span><br><span class="line">process-test-sources</span><br><span class="line">generate-test-resources</span><br><span class="line">process-test-resources 复制并处理资源文件，至目标测试目录。</span><br><span class="line">test-compile 编译测试源代码。</span><br><span class="line">process-test-classes</span><br><span class="line">test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</span><br><span class="line">prepare-package</span><br><span class="line">package 接受编译好的代码，打包成可发布的格式，如JAR。</span><br><span class="line">pre-integration-test</span><br><span class="line">integration-test</span><br><span class="line">post-integration-test</span><br><span class="line">verify</span><br><span class="line">install将包安装至本地仓库，以让其它项目依赖。</span><br><span class="line">deploy将最终的包复制到远程的仓库，</span><br><span class="line">    以让其它开发人员与项目共享或部署到服务器上运行。</span><br></pre></td></tr></table></figure><h2 id="11-5-生命周期与自动化构建"><a href="#11-5-生命周期与自动化构建" class="headerlink" title="11.5 生命周期与自动化构建"></a>11.5 生命周期与自动化构建</h2><p><strong>运行任何一个阶段的时候，它前面的所有阶段都会被运行</strong>，<br>例如我们运行mvn install 的时候，代码会被编译，测试，打包。这就是Maven为什么能够自动执行构建过程的各个环节的原因。<br>此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。</p><h1 id="第十二章-插件和目标"><a href="#第十二章-插件和目标" class="headerlink" title="第十二章 插件和目标"></a>第十二章 插件和目标</h1><p>●Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。<br>●每个插件都能实现多个功能，每个功能就是一个插件目标。<br>●Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>例如：compile就是插件maven-compiler-plugin的一个功能；<br>pre-clean是插件maven-clean-plugin的一个目标。</p><h1 id="第十三章-STS整合Maven"><a href="#第十三章-STS整合Maven" class="headerlink" title="第十三章 STS整合Maven"></a>第十三章 STS整合Maven</h1><h2 id="13-1-Maven插件安装"><a href="#13-1-Maven插件安装" class="headerlink" title="13.1 Maven插件安装"></a>13.1 Maven插件安装</h2><p>STS内置Maven插件，可以使用默认插件。但是我们推荐配置自己的Maven插件，这样可以控制Maven版本以及仓库位置。</p><h2 id="13-2-Maven插件的设置"><a href="#13-2-Maven插件的设置" class="headerlink" title="13.2 Maven插件的设置"></a>13.2 Maven插件的设置</h2><p>①指定Maven核心程序的位置<br>[1]操作路径：Window→Preferences→Maven→Installations<br>[2]图解</p><p><img src="https://s2.ax1x.com/2019/05/19/EjKgSK.png" alt="EjKgSK.png"></p><p><img src="https://s2.ax1x.com/2019/05/19/EjKWOe.png" alt="EjKWOe.png"></p><p>第十四章 第三个Maven项目(Jar工程)<br>14.1 在Eclipse中创建Maven工程</p><p><img src="https://s2.ax1x.com/2019/05/19/EjKvwj.png" alt="EjKvwj.png"></p><p><img src="https://s2.ax1x.com/2019/05/19/EjMpYq.png" alt="EjMpYq.png"></p><p><img src="https://s2.ax1x.com/2019/05/19/EjMPpV.png" alt="EjMPpV.png"></p><p><img src="https://s2.ax1x.com/2019/05/19/EjMnt1.png" alt="EjMnt1.png"></p><h2 id="14-2-第三个Maven工程"><a href="#14-2-第三个Maven工程" class="headerlink" title="14.2 第三个Maven工程"></a>14.2 第三个Maven工程</h2><p>①坐标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupId：com.maven</span><br><span class="line">ArtifactId：MakeFriends</span><br><span class="line">Package：com.maven</span><br></pre></td></tr></table></figure><p>②在src/main/java中新建类com.atguigu.maven.MakeFriends<br>在类中创建如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public String makeFriends(String name)&#123;</span><br><span class="line">HelloFriend friend = new HelloFriend();</span><br><span class="line">friend.sayHelloToFriend(&quot;litingwei&quot;);</span><br><span class="line">String str = &quot;Hey,&quot;+friend.getMyName()+&quot; make a friend please.&quot;;</span><br><span class="line">System.out.println(str);</span><br><span class="line">return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③在src/test/java中新建类com.maven.MakeFriendsTest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.maven;</span><br><span class="line">import static junit.framework.Assert.assertEquals;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">public class MakeFriendsTest &#123;</span><br><span class="line">@Test</span><br><span class="line">public void testMakeFriends()&#123;</span><br><span class="line">MakeFriends makeFriend = new MakeFriends();</span><br><span class="line">String str = makeFriend.makeFriends(&quot;litingwei&quot;);</span><br><span class="line">assertEquals(&quot;Hey,John make a friend please.&quot;,str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④打开根目录pom.xml添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>⑤在Eclipse环境下执行Maven命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右击pom.xml选择run as 中的命令执行即可</span><br></pre></td></tr></table></figure><p>⑥此时可以测试依赖原则，需要的依赖信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.14&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>第十五章 继承<br>15.1 为什么需要继承机制<br>由于非compile范围的依赖信息是不能在“依赖链”中传递的，所以有需要的工程只能单独配置。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Hello       \  &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">                &lt;/dependency&gt;</span><br><span class="line">HelloFriend    &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">              &lt;/dependency&gt;</span><br><span class="line">MakeFriend    &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">                &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>此时如果项目需要将各个模块的junit版本统一为4.9，那么到各个工程中手动修改无疑是非常不可取的。使用继承机制就可以将这样的依赖信息统一提取到父工程模块中进行统一管理。</p><h2 id="15-2-创建父工程"><a href="#15-2-创建父工程" class="headerlink" title="15.2 创建父工程"></a>15.2 创建父工程</h2><p>创建父工程和创建一般的Java工程操作一致，唯一需要注意的是：打包方式处要设置为pom。</p><h2 id="15-3-在子工程中引用父工程"><a href="#15-3-在子工程中引用父工程" class="headerlink" title="15.3 在子工程中引用父工程"></a>15.3 在子工程中引用父工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;!-- 父工程坐标 --&gt;</span><br><span class="line">&lt;groupId&gt;...&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;...&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;...&lt;/version&gt;</span><br><span class="line">&lt;relativePath&gt;从当前目录到父项目的pom.xml文件的相对路径&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;Parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径 --&gt;</span><br><span class="line">&lt;relativePath&gt;../Parent/pom.xml&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p>此时如果子工程的groupId和version如果和父工程重复则可以删除。</p><h2 id="15-4-在父工程中管理依赖"><a href="#15-4-在父工程中管理依赖" class="headerlink" title="15.4 在父工程中管理依赖"></a>15.4 在父工程中管理依赖</h2><p>将Parent项目中的dependencies标签，用dependencyManagement标签括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><p>在子项目中重新指定需要的依赖，删除范围和版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h1 id="第十六章-聚合"><a href="#第十六章-聚合" class="headerlink" title="第十六章 聚合"></a>第十六章 聚合</h1><h2 id="16-1-为什么要使用聚合"><a href="#16-1-为什么要使用聚合" class="headerlink" title="16.1 为什么要使用聚合"></a>16.1 为什么要使用聚合</h2><p>将多个工程拆分为模块后，需要手动逐个安装到仓库后依赖才能够生效。修改源码后也需要逐个手动进行clean操作。而使用了聚合之后就可以批量进行Maven工程的安装、清理工作。</p><h2 id="16-1-如何配置聚合"><a href="#16-1-如何配置聚合" class="headerlink" title="16.1 如何配置聚合"></a>16.1 如何配置聚合</h2><p>在总的聚合工程中使用modules/module标签组合，指定模块工程的相对路径即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;module&gt;../Hello&lt;/module&gt;</span><br><span class="line">&lt;module&gt;../HelloFriend&lt;/module&gt;</span><br><span class="line">&lt;module&gt;../MakeFriends&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><h1 id="第十七章-第四个Maven工程-war工程"><a href="#第十七章-第四个Maven工程-war工程" class="headerlink" title="第十七章 第四个Maven工程(war工程)"></a>第十七章 第四个Maven工程(war工程)</h1><h2 id="17-1-创建步骤"><a href="#17-1-创建步骤" class="headerlink" title="17.1 创建步骤"></a>17.1 创建步骤</h2><p>①第一步：创建maven web工程<br>②第二步：修改web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><br><span class="line">id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>③找不到HttpServlet错误<br>如果看到JSP报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path可以加入如下依赖解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>④第二步：依赖MakeFriends<br>⑤第三步：建立测试JSP  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;com.atguigu.maven.MakeFriends&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    MakeFriends makeFriends=new MakeFriends();</span><br><span class="line">    out.println(makeFriends.makeFriends(&quot;wanglipeng&quot;));</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>⑥EL表达式没有提示问题<br>${pageContext}这个EL表达式中通过pageContext对象访问reuqest属性时本身是应该有提示的，但如果没有的话加入下面依赖即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.1.3-b06&lt;/version&gt;</span><br><span class="line">     &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="17-2-Web工程自动部署"><a href="#17-2-Web工程自动部署" class="headerlink" title="17.2 Web工程自动部署"></a>17.2 Web工程自动部署</h2><p>除了在Eclipse中使用Run as→run on server的方式运行Web工程，还可以配置Web工程的自动部署。<br>①配置自动部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;web&lt;/finalName&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">          &lt;plugin&gt;</span><br><span class="line">              &lt;groupId&gt;org.codehaus.cargo&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;cargo-maven2-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;container&gt;</span><br><span class="line">            &lt;containerId&gt;tomcat6x&lt;/containerId&gt;</span><br><span class="line">            &lt;home&gt;D:\DevInstall\apache-tomcat-6.0.39&lt;/home&gt;</span><br><span class="line">        &lt;/container&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">            &lt;type&gt;existing&lt;/type&gt;</span><br><span class="line">            &lt;home&gt;D:\DevInstall\apache-tomcat-6.0.39&lt;/home&gt;</span><br><span class="line">            &lt;!-- 如果Tomcat端口为默认值8080则不必设置该属性 --&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                  &lt;cargo.servlet.port&gt;8989&lt;/cargo.servlet.port&gt;</span><br><span class="line">            &lt;/properties&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;  </span><br><span class="line">                  &lt;execution&gt;  </span><br><span class="line">                      &lt;id&gt;cargo-run&lt;/id&gt;  </span><br><span class="line">                      &lt;phase&gt;install&lt;/phase&gt;  </span><br><span class="line">                      &lt;goals&gt;  </span><br><span class="line">                          &lt;goal&gt;run&lt;/goal&gt;  </span><br><span class="line">                      &lt;/goals&gt;  </span><br><span class="line">                  &lt;/execution&gt;  </span><br><span class="line">              &lt;/executions&gt;</span><br><span class="line">          &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure><p>②部署Web项目的命令：mvn deploy  </p><h1 id="第十八章-创建MavenWeb工程的完美方式"><a href="#第十八章-创建MavenWeb工程的完美方式" class="headerlink" title="第十八章 创建MavenWeb工程的完美方式"></a>第十八章 创建MavenWeb工程的完美方式</h1><p>①创建简单的Maven工程，打包方式选war包</p><p><img src="https://s2.ax1x.com/2019/05/19/EjQnbQ.png" alt="EjQnbQ.png"></p><p><img src="https://s2.ax1x.com/2019/05/19/EjQMUs.png" alt="EjQMUs.png"></p><p>②调整JRE版本<br>③取消Dynamic Web Module的勾选  </p><p><a href="https://imgchr.com/i/EjQGvT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/19/EjQGvT.png" alt="EjQGvT.png"></a></p><p>④重新勾选Dynamic Web Module</p><p><a href="https://imgchr.com/i/EjQIRP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/19/EjQIRP.md.png" alt="EjQIRP.md.png"></a></p><p>⑤点超链接进行必须设置</p><p><img src="https://s2.ax1x.com/2019/05/19/EjQw5R.png" alt="EjQw5R.png"></p><p>⑥最终生成的工程的结构  </p><p><img src="https://s2.ax1x.com/2019/05/19/EjQWad.png" alt="EjQWad.png"></p><h1 id="第十九章-Maven酷站"><a href="#第十九章-Maven酷站" class="headerlink" title="第十九章 Maven酷站"></a>第十九章 Maven酷站</h1><p>我们可以到<br><a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a>  搜索需要的jar包的依赖信息。<br><a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a><br><a href="http://repo.maven.apache.org/maven2" target="_blank" rel="noopener">http://repo.maven.apache.org/maven2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Why&quot;&gt;&lt;a href=&quot;#第一章-Why&quot; class=&quot;headerlink&quot; title=&quot;第一章 Why&quot;&gt;&lt;/a&gt;第一章 Why&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Maven是干什么用的？&lt;br&gt;即使不使用Maven我们仍然可以进行B/S
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="使用过的开源框架" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>日志框架概述</title>
    <link href="http://yoursite.com/2018/04/11/69.%20%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/04/11/69. 日志框架概述/</id>
    <published>2018-04-10T16:00:00.000Z</published>
    <updated>2019-06-08T15:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-日志框架介绍"><a href="#1-日志框架介绍" class="headerlink" title="1 日志框架介绍"></a>1 日志框架介绍</h1><h2 id="1-1-为什么有日志及框架？"><a href="#1-1-为什么有日志及框架？" class="headerlink" title="1.1 为什么有日志及框架？"></a>1.1 为什么有日志及框架？</h2><ul><li>跟踪用户对系统访问；</li><li>统计</li><li>Debug</li></ul><h2 id="1-2-日志框架"><a href="#1-2-日志框架" class="headerlink" title="1.2 日志框架"></a>1.2 日志框架</h2><ul><li>市场上存在非常多的日志框架。</li><li>JUL（java.util.logging），JCL（Jakarta Commons Logging），Log4j，Log4j2，Logback、SLF4j、jboss-logging等。</li><li>Spring 在框架内部使用JCL。 </li><li>Log4j被apache收购，升级，改为log4j2，框架改动很大，只是借用之名。</li><li>Log4j，Logback，SLF4j都是同一个作者。</li></ul><h2 id="1-3-优选slf4j-logback"><a href="#1-3-优选slf4j-logback" class="headerlink" title="1.3 优选slf4j+logback"></a>1.3 优选slf4j+logback</h2><h1 id="第二章-原理"><a href="#第二章-原理" class="headerlink" title="第二章 原理"></a>第二章 原理</h1><h2 id="2-1-如何在系统中使用slf4j-logback"><a href="#2-1-如何在系统中使用slf4j-logback" class="headerlink" title="2.1 如何在系统中使用slf4j+logback"></a>2.1 如何在系统中使用slf4j+logback</h2><p><a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a> </p><h2 id="2-2-使用slf4j-其他实现"><a href="#2-2-使用slf4j-其他实现" class="headerlink" title="2.2 使用slf4j+其他实现"></a>2.2 使用slf4j+其他实现</h2><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190607204953.png" alt></p><h1 id="第三章-历史遗留问题"><a href="#第三章-历史遗留问题" class="headerlink" title="第三章 历史遗留问题"></a>第三章 历史遗留问题</h1><h2 id="3-1-遗留问题解决"><a href="#3-1-遗留问题解决" class="headerlink" title="3.1 遗留问题解决"></a>3.1 遗留问题解决</h2><ul><li>如何将这些框架统一日志记录，统一使用slf4j进行输出？</li><li>springboot（slf4j+logback）: Spring（commons-logging）(2003年出现)、Hibernate（jboss-logging）（2004年出现）、MyBatis、xxxx </li><li><a href="https://www.slf4j.org/legacy.html" target="_blank" rel="noopener">https://www.slf4j.org/legacy.html</a> </li></ul><h2 id="3-2-想将应用中所使用的日志框架common-logging排除掉"><a href="#3-2-想将应用中所使用的日志框架common-logging排除掉" class="headerlink" title="3.2 想将应用中所使用的日志框架common-logging排除掉"></a>3.2 想将应用中所使用的日志框架common-logging排除掉</h2><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190607205228.png" alt></p><h2 id="3-3-引入jcl转换为slf4j依赖包-偷梁换柱"><a href="#3-3-引入jcl转换为slf4j依赖包-偷梁换柱" class="headerlink" title="3.3 引入jcl转换为slf4j依赖包(偷梁换柱)"></a>3.3 引入jcl转换为slf4j依赖包(偷梁换柱)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;&lt;!-- 替换commons-logging--&gt;</span><br><span class="line">   &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="第四章-优选slf4j-logback"><a href="#第四章-优选slf4j-logback" class="headerlink" title="第四章 优选slf4j+logback"></a>第四章 优选slf4j+logback</h1><p>因为Sping框架的内部底层的支持</p><h2 id="4-1-将系统中其他日志框架先排除出去；-所有项目"><a href="#4-1-将系统中其他日志框架先排除出去；-所有项目" class="headerlink" title="4.1 将系统中其他日志框架先排除出去；(所有项目)"></a>4.1 将系统中其他日志框架先排除出去；(所有项目)</h2><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190607205228.png" alt></p><h2 id="4-2-用中间包来替换原有的日志框架"><a href="#4-2-用中间包来替换原有的日志框架" class="headerlink" title="4.2 用中间包来替换原有的日志框架"></a>4.2 用中间包来替换原有的日志框架</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;&lt;!-- 替换commons-logging--&gt;</span><br><span class="line">   &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt; </span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jul-to-slf4j&lt;/artifactId&gt;&lt;!-- 替换java.util.logging--&gt;</span><br><span class="line">   &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3-我们slf4j及其他的实现"><a href="#4-3-我们slf4j及其他的实现" class="headerlink" title="4.3 我们slf4j及其他的实现"></a>4.3 我们slf4j及其他的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&lt;!-- 间接依赖logback-core--&gt;&lt;!-- 优秀的日志实现--&gt;</span><br><span class="line"> &lt;/dependency&gt;     </span><br><span class="line"> &lt;!-- slf4j（门面）: Simple Logging Facade for Java ：简单日志门面（接口）（类似JDBC）； </span><br><span class="line">      log4j：日志实现（类似数据库驱动）； </span><br><span class="line">      log4j2（实现）, logback（实现）, </span><br><span class="line">      后来我们用slf4j+logback（最稳定的方案）; --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&lt;!-- 抽象层，接口--&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="4-4-测试代码"><a href="#4-4-测试代码" class="headerlink" title="4.4 测试代码"></a>4.4 测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory; </span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">Logger logger = LoggerFactory.getLogger(TestLog.class);</span><br><span class="line">logger.debug(&quot;debug...&quot;); //用于调试程序</span><br><span class="line">logger.info(&quot;info...&quot;);//用于请求处理提示消息</span><br><span class="line">logger.warn(&quot;warn...&quot;);//用于警告处理提示消息</span><br><span class="line">logger.error(&quot;error...&quot;);//用于异常处理提示消息</span><br><span class="line">logger.error(&quot;==&gt;&gt;&quot;+logger.getClass());</span><br><span class="line">//class ch.qos.logback.classic.Logger</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-配置文件logback-xml"><a href="#4-5-配置文件logback-xml" class="headerlink" title="4.5 配置文件logback.xml"></a>4.5 配置文件logback.xml</h2><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration debug=&quot;true&quot;&gt;</span><br><span class="line">    &lt;!-- 指定日志输出的地方--&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;360&#125; - %msg%n&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt; </span><br><span class="line">    &lt;!-- 日志：从低到高；只会打印指定级别以后的; additivity表示是否将日志信息反馈给root</span><br><span class="line">打印日志是将大于等于该级别的日志输出到指定的目的地</span><br><span class="line">     DEBUG==》INFO===》WARN===》ERROR</span><br><span class="line">     &lt;logger name=&quot;com.atguigu.atcrowdfunding.mapper&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;  </span><br><span class="line">         &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;  </span><br><span class="line">     &lt;/logger&gt;</span><br><span class="line"></span><br><span class="line">      --&gt;</span><br><span class="line">     &lt;root level=&quot;info&quot;&gt;</span><br><span class="line">         &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">     &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-日志框架介绍&quot;&gt;&lt;a href=&quot;#1-日志框架介绍&quot; class=&quot;headerlink&quot; title=&quot;1 日志框架介绍&quot;&gt;&lt;/a&gt;1 日志框架介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-为什么有日志及框架？&quot;&gt;&lt;a href=&quot;#1-1-为什么有日志及框架？&quot;
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="使用过的开源框架" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>权限系统_认证授权SpringSecurity框架</title>
    <link href="http://yoursite.com/2018/04/09/68.%20%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F_%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83SpringSecurity%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/04/09/68. 权限系统_认证授权SpringSecurity框架/</id>
    <published>2018-04-08T16:00:00.000Z</published>
    <updated>2019-06-08T15:10:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-SpringSecurity-简介"><a href="#第一章-SpringSecurity-简介" class="headerlink" title="第一章 SpringSecurity-简介"></a>第一章 SpringSecurity-简介</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1    简介"></a>1    简介</h2><ul><li><a href="https://docs.spring.io/spring-security/site/docs/4.2.10.RELEASE/guides/html5/helloworld-xml.html" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/4.2.10.RELEASE/guides/html5/helloworld-xml.html</a>  </li><li>SpringSecurity融合Spring技术栈，提供JavaEE应    用的整体安全解决方案；</li><li>Spring Security为基于Java EE的企业软件应用提供全面的安全服务。</li><li>Spring Security只需要少量配置，就能构建一个强大的安全的应用系统。  </li><li>目前市面上受欢迎的两个安全框架：Apache Shiro、SpringSecurity；</li><li>SpringSecurity可以无缝整合Spring应用，具有强大的自动化web安全管控功能。而Shiro是一个轻量级强大的安全框架，可以脱离web应用来提供安全管控，但是对于web的一些定制安全需要手动编写；SpringBoot底层默认整合SpringSecurity作为安全框架，所以我们推荐web应用使用SpringSecurity来控制安全；<h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2    概念"></a>2    概念</h2></li><li>认证</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authentication：身份验证</span><br></pre></td></tr></table></figure><blockquote><p>“身份验证”是指建立主体（principal）的过程，主体就是他们声称是谁（“主体”通常指用户、设备或在应用程序中可以执行动作的其他系统）。也就是“证明你是谁”</p><ul><li>授权</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authorization：授权</span><br></pre></td></tr></table></figure><blockquote><p>“授权”是指确定主体（principal）是否被允许执行系统中某个动作的过程。 也就是“你能做什么！”</p><ul><li>为了达到“授权”决策（安全框架决定你是否有权限做此事），“身份验证”（authentication）过程已经建立了主体的身份（Principal）</li></ul></blockquote><h2 id="3-文档"><a href="#3-文档" class="headerlink" title="3    文档"></a>3    文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello Spring Security &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/helloworld &gt; 基于Java配置整合示例</span><br><span class="line">Hello Spring Security Boot &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/boot/helloworld&gt; 与SpringBoot整合案例</span><br><span class="line">Hello Spring Security XML &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/xml/helloworld&gt; 基于XML方式整合示例</span><br><span class="line">Hello Spring MVC Security &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/hellomvc&gt; SpringMVC集成示例</span><br><span class="line">Custom Login Form &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/form&gt; 自定义登录表单示例</span><br></pre></td></tr></table></figure><h2 id="4-支持的身份认证模式"><a href="#4-支持的身份认证模式" class="headerlink" title="4    支持的身份认证模式"></a>4    支持的身份认证模式</h2><blockquote><p>在身份验证级别，Spring Security支持广泛的认证模型。这些认证模型中的大部分要么由第三方提供，要么由相关标准机构（如互联网工程任务组）开发。此外，Spring Security提供了自己的一套身份验证功能。具体而言，Spring Security当前支持与所有这些技术的身份验证集成；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">HTTP BASIC身份验证标头</span><br><span class="line">HTTP BASIC authentication headers (an IETF RFC-based standard)</span><br><span class="line">参考：https://blog.csdn.net/lvxinzhi/article/details/49000003</span><br><span class="line"></span><br><span class="line">HTTP Digest身份验证标头</span><br><span class="line">HTTP Digest authentication headers (an IETF RFC-based standard)</span><br><span class="line"></span><br><span class="line">HTTP X.509客户端证书交换</span><br><span class="line">HTTP X.509 client certificate exchange (an IETF RFC-based standard)</span><br><span class="line"></span><br><span class="line">LDAP（一种非常常见的跨平台身份验证方法，特别是在大型环境中）</span><br><span class="line">LDAP (a very common approach to cross-platform authentication needs, especially in large environments)</span><br><span class="line"></span><br><span class="line">基于表单的身份验证（用于简单的用户界面需求）</span><br><span class="line">Form-based authentication (for simple user interface needs)</span><br><span class="line"></span><br><span class="line">OpenID身份验证</span><br><span class="line">OpenID authentication</span><br><span class="line"></span><br><span class="line">基于预先建立的请求标头的身份验证</span><br><span class="line">Authentication based on pre-established request headers (such as Computer Associates Siteminder)</span><br><span class="line"></span><br><span class="line">Jasig中央认证服务（也称为CAS，是一种流行的开源单点登录系统）</span><br><span class="line">Jasig Central Authentication Service (otherwise known as CAS, which is a popular open source single sign-on system)</span><br><span class="line"></span><br><span class="line">远程方法调用（RMI）和HttpInvoker（Spring远程协议）的透明身份验证上下文传播</span><br><span class="line">Transparent authentication context propagation for Remote Method Invocation (RMI) and HttpInvoker (a Spring remoting protocol)</span><br><span class="line"></span><br><span class="line">自动“记住我”身份验证</span><br><span class="line">Automatic &quot;remember-me&quot; authentication (so you can tick a box to avoid re-authentication for a predetermined period of time)</span><br><span class="line"></span><br><span class="line">匿名身份验证（允许每个未经身份验证自动承担特定的安全身份）</span><br><span class="line">Anonymous authentication (allowing every unauthenticated call to automatically assume a particular security identity)</span><br><span class="line"></span><br><span class="line">Runas身份验证（如果一个调用应继续使用不同的安全标识，则非常有用）</span><br><span class="line">Run-as authentication (which is useful if one call should proceed with a different security identity)</span><br><span class="line"></span><br><span class="line">Java身份验证和授权服务（JAAS）</span><br><span class="line">Java Authentication and Authorization Service (JAAS)</span><br><span class="line"></span><br><span class="line">JavaEE容器身份验证（如果需要，您仍然可以使用容器管理身份验证）</span><br><span class="line">Java EE container authentication (so you can still use Container Managed Authentication if desired)</span><br><span class="line"></span><br><span class="line">Java开源单点登录（JOSSO）</span><br><span class="line">Java Open Source Single Sign-On (JOSSO) *</span><br><span class="line"></span><br><span class="line">OpenNMS网络管理平台*</span><br><span class="line">OpenNMS Network Management Platform *</span><br><span class="line"></span><br><span class="line">您自己的身份验证系统</span><br><span class="line">Your own authentication systems (see below)</span><br><span class="line"></span><br><span class="line">其他</span><br><span class="line">Kerberos</span><br><span class="line">AppFuse *</span><br><span class="line">AndroMDA *</span><br><span class="line">Mule ESB *</span><br><span class="line">Direct Web Request (DWR) *</span><br><span class="line">Grails *</span><br><span class="line">Tapestry *</span><br><span class="line">JTrac *</span><br><span class="line">Jasypt *</span><br><span class="line">Roller *</span><br><span class="line">Elastic Path *</span><br><span class="line">Atlassian Crowd *</span><br></pre></td></tr></table></figure><h2 id="5-模块划分"><a href="#5-模块划分" class="headerlink" title="5    模块划分"></a>5    模块划分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Core - spring-security-core.jar  核心模块</span><br><span class="line">核心认证、授权功能、支持jdbc-user功能、支持独立的Spring应用</span><br><span class="line"></span><br><span class="line">Remoting - spring-security-remoting.jar  远程交互模块</span><br><span class="line">一般不需要，可以使用Spring Remoting功能简化远程客户端交互</span><br><span class="line"></span><br><span class="line">Web - spring-security-web.jar  web安全模块</span><br><span class="line">web项目使用，基于URL的访问控制（access-control）</span><br><span class="line"></span><br><span class="line">Config - spring-security-config.jar  java配置模块</span><br><span class="line">必须依赖包，包含解析xml方式和java 注解方式来使用SpringSecurity功能</span><br><span class="line"></span><br><span class="line">LDAP - spring-security-ldap.jar  ldap（轻量目录访问协议）支持模块</span><br><span class="line">可选依赖包，LDAP功能支持</span><br><span class="line"></span><br><span class="line">ACL - spring-security-acl.jar  ACL支持</span><br><span class="line">ACL（Access-Control-List）访问控制列表</span><br><span class="line">细粒度的资源访问控制(RBAC+ACL)</span><br><span class="line"></span><br><span class="line">CAS - spring-security-cas.jar  CAS整合支持</span><br><span class="line">CAS（Central Authentication Service）中央认证服务。开源ApereoCAS整合</span><br><span class="line"></span><br><span class="line">OpenID - spring-security-openid.jar  OpenID认证方式支持</span><br><span class="line">OpenID Web身份验证支持。 用于针对外部OpenID服务器对用户进行身份验证</span><br><span class="line">（微信,qq，新浪微博等第三方登录</span><br><span class="line">）</span><br><span class="line">Test - spring-security-test.jar  测试模块</span><br><span class="line">快速的测试SpringSecurity应用</span><br></pre></td></tr></table></figure><h2 id="6-4种使用方式"><a href="#6-4种使用方式" class="headerlink" title="6    4种使用方式"></a>6    4种使用方式</h2><ul><li>一种是全部利用配置文件，将用户、权限、资源(url)硬编码在xml文件中</li><li>二种是用户和权限用数据库存储，而资源(url)和权限的对应采用硬编码配置</li><li>三种是细分角色和权限，并将用户、角色、权限和资源均采用数据库存储，并且自定义过滤器，代替原有的FilterSecurityInterceptor过滤器， 并分别实现AccessDecisionManager、InvocationSecurityMetadataSourceService和UserDetailsService，并在配置文件中进行相应配置。</li><li>四是修改springsecurity的源代码，主要是修改InvocationSecurityMetadataSourceService和UserDetailsService两个类。<ul><li>InvocationSecurityMetadataSourceService</li></ul></li></ul><blockquote><ul><li>将配置文件或数据库中存储的资源(url)提取出来加工成为url和权限列表的Map供Security使用<br>-<ul><li>UserDetailsService</li></ul></li></ul></blockquote><blockquote><ul><li>提取用户名和权限组成一个完整的(UserDetails)User对象，该对象可以提供用户的详细信息供AuthentationManager进行认证与授权使用</li></ul></blockquote><h1 id="第二章-SpringSecurity-HelloWorld"><a href="#第二章-SpringSecurity-HelloWorld" class="headerlink" title="第二章 SpringSecurity-HelloWorld"></a>第二章 SpringSecurity-HelloWorld</h1><h2 id="2-1-测试环境搭建"><a href="#2-1-测试环境搭建" class="headerlink" title="2.1 测试环境搭建"></a>2.1 测试环境搭建</h2><h3 id="2-1-1-创建普通maven-war工程-spring-security-helloworld"><a href="#2-1-1-创建普通maven-war工程-spring-security-helloworld" class="headerlink" title="2.1.1 创建普通maven-war工程:spring-security-helloworld"></a>2.1.1 创建普通maven-war工程:spring-security-helloworld</h3><p>pom文件增加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.3.20.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-web-xml配置"><a href="#2-1-2-web-xml配置" class="headerlink" title="2.1.2 web.xml配置"></a>2.1.2 web.xml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-spring配置-spring-xml"><a href="#2-1-3-spring配置-spring-xml" class="headerlink" title="2.1.3 spring配置:spring.xml"></a>2.1.3 spring配置:spring.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.atguigu.security&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler /&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1-4-导入实验资源"><a href="#2-1-4-导入实验资源" class="headerlink" title="2.1.4 导入实验资源"></a>2.1.4 导入实验资源</h3><ul><li>导入页面</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531181744.png" alt></p><ul><li>导入controller</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531181821.png" alt></p><h3 id="2-1-5-运行测试"><a href="#2-1-5-运行测试" class="headerlink" title="2.1.5 运行测试"></a>2.1.5 运行测试</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531181905.png" alt></p><h2 id="2-2-引入SpringSecurity框架"><a href="#2-2-引入SpringSecurity框架" class="headerlink" title="2.2 引入SpringSecurity框架"></a>2.2 引入SpringSecurity框架</h2><h3 id="2-2-1-添加security-pom依赖"><a href="#2-2-1-添加security-pom依赖" class="headerlink" title="2.2.1 添加security-pom依赖"></a>2.2.1 添加security-pom依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.2.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.2.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 标签库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.2.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-web-xml中添加SpringSecurity的Filter进行安全控制"><a href="#2-2-2-web-xml中添加SpringSecurity的Filter进行安全控制" class="headerlink" title="2.2.2 web.xml中添加SpringSecurity的Filter进行安全控制"></a>2.2.2 web.xml中添加SpringSecurity的Filter进行安全控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;&lt;!--名称固定,不能变--&gt;</span><br><span class="line">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-加入SpringSecurity配置类"><a href="#2-2-3-加入SpringSecurity配置类" class="headerlink" title="2.2.3 加入SpringSecurity配置类"></a>2.2.3 加入SpringSecurity配置类</h3><p>@Configuration、@Bean 注解作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class AppWebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.4 启动测试效果</p><ul><li>所有资源访问受限（包括静态资源）</li><li>需要一个默认的登录页面（框架自带的）</li><li>账号密码错误会有提示</li><li>查看登录页面的源码，发现有个hidden-input；name=”_csrf” 这是SpringSecurity帮我们防止“跨站请求伪造”攻击；还可以防止表单重复提交。</li><li>。。。</li><li><a href="http://localhost:8080/spring-security-helloworld/login?error" target="_blank" rel="noopener">http://localhost:8080/spring-security-helloworld/login?error</a></li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182124.png" alt></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182151.png" alt></p><h1 id="第三章-SpringSecurity-实验"><a href="#第三章-SpringSecurity-实验" class="headerlink" title="第三章 SpringSecurity-实验"></a>第三章 SpringSecurity-实验</h1><h2 id="3-1-实验一：授权首页和静态资源"><a href="#3-1-实验一：授权首页和静态资源" class="headerlink" title="3.1    实验一：授权首页和静态资源"></a>3.1    实验一：授权首页和静态资源</h2><ul><li>配置类（AppWebSecurityConfig extends WebSecurityConfigurerAdapter）</li><li>重写configure(HttpSecurity http)方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">public class AppWebSecurityConfig extends WebSecurityConfigurerAdapter &#123; </span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">//super.configure(http); //取消默认配置 </span><br><span class="line">http.authorizeRequests()</span><br><span class="line">.antMatchers(&quot;/layui/**&quot;,&quot;/index.jsp&quot;).permitAll() //设置匹配的资源放行</span><br><span class="line">.anyRequest().authenticated(); //剩余任何资源必须认证</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果<ul><li>静态资源和index.jsp都可以访问</li><li>不存在的资源</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182609.png" alt></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182637.png" alt></p><h2 id="3-2-实验二：默认及自定义登录页"><a href="#3-2-实验二：默认及自定义登录页" class="headerlink" title="3.2    实验二：默认及自定义登录页"></a>3.2    实验二：默认及自定义登录页</h2><ul><li>开启formLogin()功能</li><li>静态资源和index.jsp都可以访问</li><li>不存在的资源<ul><li><a href="http://localhost/spring-security-helloworld/xxx" target="_blank" rel="noopener">http://localhost/spring-security-helloworld/xxx</a> 重定向到登录页</li><li><a href="http://localhost/spring-security-helloworld/layui/xxx" target="_blank" rel="noopener">http://localhost/spring-security-helloworld/layui/xxx</a>  404错误</li></ul></li><li>总结：默认表单登录页面的规则<br>1）、自动生成一个登录页<br>2）、登录请求被提交到  /login    POST下<br>3）、生成隐藏域，可以防重复提交和跨站请求伪造；<br><code>&lt;input name=&quot;_csrf&quot; type=&quot;hidden&quot; value=&quot;755f0b3c-0965-430b-852e-dcf6c77e7edb&quot; /&gt;</code><br>为了测试方便，先禁用这个功能: <code>http.csrf().disable();</code><br>4）、默认提交的字段名为：<code>name=&#39;password&#39;  name=&#39;username&#39;</code></li><li>指定登录页<ul><li>http.formLogin().loginPage(“/index.jsp”); //去到指定的登录页</li><li>静态资源和index.jsp都可以访问</li><li>不存在的资源</li></ul></li></ul><p><a href="http://localhost/spring-security-helloworld/xxx" target="_blank" rel="noopener">http://localhost/spring-security-helloworld/xxx</a> 重定向到自定义登录页<br>υ    <a href="http://localhost/spring-security-helloworld/layui/xxx" target="_blank" rel="noopener">http://localhost/spring-security-helloworld/layui/xxx</a> 404错误</p><h2 id="3-3-实验三：自定义表单登录逻辑分析"><a href="#3-3-实验三：自定义表单登录逻辑分析" class="headerlink" title="3.3 实验三：自定义表单登录逻辑分析"></a>3.3 实验三：自定义表单登录逻辑分析</h2><ul><li>表单提交地址：${PATH }/index.jsp</li><li>表单提交请求方式：post</li><li>表单提交请求失败，提取错误消息：<code>${SPRING_SECURITY_LAST_EXCEPTION.message}</code></li><li>如何提交表单：<ul><li>引入jquery:<code>&lt;script src=&quot;${PATH }/layui/jquery.min.js&quot;&gt;&lt;/script&gt;</code></li><li><code>$(&quot;form&quot;).submit();</code></li><li>表单提交参数名称： <code>username  password</code></li></ul></li></ul><ul><li>提交请求被拒绝</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183350.png" alt></p><p>暂时禁用csrf：http.csrf().disable();</p><ul><li><p>登录逻辑分析<br>/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**默认登录页面</span><br><span class="line">   * /login GET - the login form </span><br><span class="line">   * /login POST - process the credentials and if valid authenticate the user </span><br><span class="line">   * /login?error GET - redirect here for failed authentication attempts </span><br><span class="line">   * /login?logout GET - redirect here after successfully logging out </span><br><span class="line"></span><br><span class="line">   * 定制登录页面：loginPage(&quot;/index.jsp&quot;)：规定登录页的地址在哪里</span><br><span class="line">   * /index.jsp GET - the login form </span><br><span class="line">   * /index.jsp POST - process the credentials and if valid authenticate the user</span><br><span class="line">   * /index.jsp?error  GET - redirect here for failed authentication attempts </span><br><span class="line">   * /index.jsp?logout GET - redirect here after successfully logging out </span><br><span class="line">* $&#123;SPRING_SECURITY_LAST_EXCEPTION.message&#125;可以取出错误消息</span><br><span class="line">   */</span><br></pre></td></tr></table></figure></li><li><p>测试结果</p></li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183445.png" alt></p><h2 id="3-4实验四：自定义认证用户信息"><a href="#3-4实验四：自定义认证用户信息" class="headerlink" title="3.4实验四：自定义认证用户信息"></a>3.4实验四：自定义认证用户信息</h2><ul><li>自定义认证用户信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auth.inMemoryAuthentication()</span><br><span class="line">.withUser(&quot;zhangsan&quot;).password(&quot;123456&quot;).roles(&quot;ADMIN&quot;)</span><br><span class="line">.and()</span><br><span class="line">.withUser(&quot;lisi&quot;).password(&quot;123123&quot;).authorities(&quot;USER&quot;,&quot;MANAGER&quot;);</span><br></pre></td></tr></table></figure><pre><code>- CSRF跨站请求伪造- SpringSecurity添加了csrf功能【DefaultCsrfToken】，所有的表单提交为了防止跨站请求伪造，我们需要加上_csrf项; 或者，暂时禁用`http.csrf().disable();`</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;$&#123;_csrf.parameterName&#125;&quot; value=&quot;$&#123;_csrf.token&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li><ul><li><code>${_csrf}  ===&gt;&gt;&gt;  org.springframework.security.web.csrf.DefaultCsrfToken@19116cfd</code></li><li><code>&lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; value=&quot;310988c2-3f9d-4651-9e19-6ef4b2c4aa3a&quot;/&gt;</code></li></ul></li></ul><ul><li>如果不禁用csrf,默认是开启的状态；页面不设置csrf表单域，那么，提交登录请求会报错</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183736.png" alt></p><ul><li>令牌值变化：<ul><li>如果登录成功（用户名，密码正确），令牌会被删除，</li><li>重新回到登录页或后退网页，令牌会重新生成；</li><li>如果登录失败（用户名，密码错误），令牌不变。</li><li>刷新登录页，令牌值也不变</li></ul></li></ul><ul><li>作用：    <ul><li>防止别的网站伪造数据，提交请求到我们的网站。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183926.png" alt>    </p><ul><li>扩展-了解XSS<blockquote><ul><li>XSS攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。 </li><li>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</li></ul></blockquote><h2 id="3-5实验五：用户注销完成"><a href="#3-5实验五：用户注销完成" class="headerlink" title="3.5实验五：用户注销完成"></a>3.5实验五：用户注销完成</h2></li><li>添加注销功能（logout）http.logout()默认规则    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1)/logout：退出系统</span><br><span class="line">2)如果csrf开启，必须post方式的/logout请求，表单中需要增加csrf token</span><br><span class="line">3)logoutUrl()；退出系统需要发送的请求</span><br><span class="line">4)logoutSuccessUrl()；退出系统成功以后要跳转的页面地址</span><br><span class="line">5)addLogoutHandler()：自定义注销处理器</span><br><span class="line">6)deleteCookies()：指定需要删除的cookie</span><br><span class="line">7)invalidateHttpSession()：session失效（DEBUG）</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-6-实验六：基于角色的访问控制"><a href="#3-6-实验六：基于角色的访问控制" class="headerlink" title="3.6 实验六：基于角色的访问控制"></a>3.6 实验六：基于角色的访问控制</h2><ul><li>设置资源可以访问的角色</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests().antMatchers(&quot;/layui/**&quot;,&quot;/index.jsp&quot;).permitAll() //允许所有人都访问静态资源，无论登录（认证）与否</span><br><span class="line">.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class="line">.antMatchers(&quot;/level2/**&quot;).hasRole(&quot;大师&quot;)</span><br><span class="line">.antMatchers(&quot;/level3/**&quot;).hasRole(&quot;宗师&quot;)</span><br><span class="line">.anyRequest().authenticated(); //放置最后，以上没有规定的都需要权限认证。</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>将<code>.anyRequest().authenticated()</code>错误的设置在前面，后面的设置就不起作用了。</li><li>设置所有,”/**”都可以访问，其他再进行的设置就不会起作用了</li><li>设置匿名访问/level3/**  可以不用登录，匿名访问：<code>.anyRequest().anonymous();</code></li></ul></li></ul><ul><li>拥有该角色的资源可以访问，否则不可以访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auth.inMemoryAuthentication()</span><br><span class="line">.withUser(&quot;zhangsan&quot;).password(&quot;123456&quot;).roles(&quot;ADMIN&quot;,&quot;学徒&quot;,&quot;宗师&quot;)</span><br><span class="line">.and()</span><br><span class="line">.withUser(&quot;自定义访问拒绝处理页面，lisi&quot;).password(&quot;111111&quot;).authorities(&quot;USER&quot;,&quot;MANGER&quot;);</span><br></pre></td></tr></table></figure><h2 id="3-7-实验七：自定义访问拒绝处理页面"><a href="#3-7-实验七：自定义访问拒绝处理页面" class="headerlink" title="3.7 实验七：自定义访问拒绝处理页面"></a>3.7 实验七：自定义访问拒绝处理页面</h2><ul><li>直接增加处理映射界面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedPage(&quot;/unauth.html&quot;);</span><br></pre></td></tr></table></figure><ul><li>在控制器类中增加映射处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/unauth.html&quot;)</span><br><span class="line">public String unauth()&#123;</span><br><span class="line">return &quot;unauth&quot;;</span><br><span class="line">&#125;</span><br><span class="line">λ增加显示页面，将main.jsp复制,命名为unauth.jsp，增加一句提示信息</span><br><span class="line">&lt;h1&gt;你无权访问该页面...&lt;/h1&gt;</span><br></pre></td></tr></table></figure><ul><li>测试显示效果</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184346.png" alt></p><ul><li>自定义异常处理器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling().accessDeniedHandler(new AccessDeniedHandler() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void handle(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">AccessDeniedException accessDeniedException) throws IOException, ServletException &#123;</span><br><span class="line">request.setAttribute(&quot;message&quot;, accessDeniedException.getMessage());</span><br><span class="line">request.getRequestDispatcher(&quot;/WEB-INF/views/unauth.jsp&quot;).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-8-实验八：记住我功能"><a href="#3-8-实验八：记住我功能" class="headerlink" title="3.8 实验八：记住我功能"></a>3.8 实验八：记住我功能</h2><h3 id="3-8-1-记住我功能-免登录原理"><a href="#3-8-1-记住我功能-免登录原理" class="headerlink" title="3.8.1 记住我功能-免登录原理"></a>3.8.1 记住我功能-免登录原理</h3><ul><li>http.rememberMe();</li><li>默认规则<ul><li>页面checkbox提交remember-me参数</li><li>默认记住2周登录状态：AbstractRememberMeServices</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184449.png" alt></p><p>-</p><pre><code>- 会在cookie中保存名为：remember-me的cookie</code></pre><ul><li>记住了以前登录的状态，以后再访问就不用登录了</li><li>登录后页面，关闭浏览器，直接访问：<br><a href="http://localhost/spring-security-helloworld/main.html" target="_blank" rel="noopener">http://localhost/spring-security-helloworld/main.html</a> 可以成功访问，不必登录。</li><li>这种方式，token值是放置在内存中的，服务器端重启tomcat,token会失效。需要将token记录在数据库持久化才不会失效。</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184729.png" alt></p><h2 id="3-8-2-记住我-数据版"><a href="#3-8-2-记住我-数据版" class="headerlink" title="3.8.2 记住我-数据版"></a>3.8.2 记住我-数据版</h2><h3 id="引入pom-xml-包"><a href="#引入pom-xml-包" class="headerlink" title="引入pom.xml 包"></a>引入pom.xml 包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.3.20.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mysql驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置数据源 --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://192.168.137.3:3306/security?useSSL=false&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt; </span><br><span class="line">&lt;!--  jdbcTemplate--&gt;</span><br><span class="line">&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>create table persistent_logins (username varchar(64) not null, series varchar(64) primary key,token varchar(64) not null, last_used timestamp not null)</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184849.png" alt></p><h3 id="设置记住我"><a href="#设置记住我" class="headerlink" title="设置记住我"></a>设置记住我</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">//。。。</span><br><span class="line">//记住我</span><br><span class="line">JdbcTokenRepositoryImpl ptr = new JdbcTokenRepositoryImpl();</span><br><span class="line">ptr.setDataSource(dataSource);</span><br><span class="line">http.rememberMe().tokenRepository(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184930.png" alt></p><h1 id="第四章-认证"><a href="#第四章-认证" class="headerlink" title="第四章 认证"></a>第四章 认证</h1><p>使用数据库保存/查询用户数据，完成认证功能</p><h2 id="4-1-方式一：重写jdbcAuthentication规则-不推荐"><a href="#4-1-方式一：重写jdbcAuthentication规则-不推荐" class="headerlink" title="4.1 方式一：重写jdbcAuthentication规则(不推荐)"></a>4.1 方式一：重写jdbcAuthentication规则(不推荐)</h2><ul><li>基于数据库的RBAC查询出我们需要的用户以及这些用户的权限（权限标识、角色）</li><li>创建和SpringSecurity要求一模一样的表，然后用默认jdbcAuthentication</li><li>更新jdbcAuthentication里面所有我们需要实际运行的sql</li><li>authoritiesByUsernameQuery：根据用户名查询他权限的sql</li><li>usersByUsernameQuery：根据用户名查询用户的sql</li><li>…….：更多的sql均可定义</li></ul><h3 id="4-1-1-使用默认的查询用户语句"><a href="#4-1-1-使用默认的查询用户语句" class="headerlink" title="4.1.1 使用默认的查询用户语句"></a>4.1.1 使用默认的查询用户语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth.jdbcAuthentication().usersByUsernameQuery(&quot;zhangsan&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195137.png" alt></p><h3 id="4-1-2-使用默认的查询权限语句"><a href="#4-1-2-使用默认的查询权限语句" class="headerlink" title="4.1.2 使用默认的查询权限语句"></a>4.1.2 使用默认的查询权限语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth.jdbcAuthentication().authoritiesByUsernameQuery(&quot;zhangsan&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195209.png" alt></p><h2 id="4-2-方式二：自定义UserDetailsService检索用户"><a href="#4-2-方式二：自定义UserDetailsService检索用户" class="headerlink" title="4.2 方式二：自定义UserDetailsService检索用户"></a>4.2 方式二：自定义UserDetailsService检索用户</h2><h3 id="4-2-1-实现UserDetailService接口loadUserByUsername-String-username-方法"><a href="#4-2-1-实现UserDetailService接口loadUserByUsername-String-username-方法" class="headerlink" title="4.2.1 实现UserDetailService接口loadUserByUsername(String username)方法"></a>4.2.1 实现UserDetailService接口loadUserByUsername(String username)方法</h3><h3 id="4-2-2-实验步骤"><a href="#4-2-2-实验步骤" class="headerlink" title="4.2.2 实验步骤"></a>4.2.2 实验步骤</h3><h4 id="1-创建表结构"><a href="#1-创建表结构" class="headerlink" title="1 创建表结构"></a>1 创建表结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">security实验\security.sql</span><br></pre></td></tr></table></figure><h4 id="2-配置-configure-AuthenticationManagerBuilder-auth"><a href="#2-配置-configure-AuthenticationManagerBuilder-auth" class="headerlink" title="2 配置 configure(AuthenticationManagerBuilder auth)"></a>2 配置 configure(AuthenticationManagerBuilder auth)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">UserDetailsService userDetailsService;//用户详情查询服务组件的接口</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class="line">//根据用户名查询出用户的详细信息</span><br><span class="line">auth.userDetailsService(userDetailsService); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写UserDetailService实现"><a href="#3-编写UserDetailService实现" class="headerlink" title="3 编写UserDetailService实现:"></a>3 编写UserDetailService实现:</h4><p>1)    接口及已有实现类</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195412.png" alt></p><p>2)    实现UserDetailService接口，提供自定义实现类<br><code>org.springframework.security.core.userdetails.UserDetailsService</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.security.component;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">import org.springframework.security.core.authority.*;</span><br><span class="line">import org.springframework.security.core.userdetails.User;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line">//按照用户名查询用户详情的接口</span><br><span class="line">@Service</span><br><span class="line">public class AppUserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class="line">@Autowired</span><br><span class="line">JdbcTemplate jdbcTemplate;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">String queryUser = &quot;SELECT * FROM `t_admin` WHERE loginacct=?&quot;;</span><br><span class="line">    </span><br><span class="line">//1、查询指定用户的信息</span><br><span class="line">Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(queryUser, username);</span><br><span class="line">    </span><br><span class="line">//2、将查询到的用户封装到框架使用的UserDetails里面</span><br><span class="line">return new User(map.get(&quot;loginacct&quot;).toString(), map.get(&quot;userpswd&quot;).toString(), </span><br><span class="line">AuthorityUtils.createAuthorityList(&quot;ADMIN&quot;,&quot;USER&quot;));//暂时写死，过后数据库中查</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-运行测试结果，密码不一致，跳转到登录页，并提示错误消息"><a href="#4-运行测试结果，密码不一致，跳转到登录页，并提示错误消息" class="headerlink" title="4 运行测试结果，密码不一致，跳转到登录页，并提示错误消息"></a>4 运行测试结果，密码不一致，跳转到登录页，并提示错误消息</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195510.png" alt></p><h3 id="4-2-3-debug测试登录-断点调试"><a href="#4-2-3-debug测试登录-断点调试" class="headerlink" title="4.2.3 debug测试登录-断点调试"></a>4.2.3 debug测试登录-断点调试</h3><h4 id="1-断点-方法栈"><a href="#1-断点-方法栈" class="headerlink" title="1 断点-方法栈"></a>1 断点-方法栈</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195553.png" alt></p><h4 id="2-自定义UserDetailService实现类"><a href="#2-自定义UserDetailService实现类" class="headerlink" title="2 自定义UserDetailService实现类"></a>2 自定义UserDetailService实现类</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195851.png" alt></p><h4 id="3-Dao层认证提供者-DaoAuthenticationProvider"><a href="#3-Dao层认证提供者-DaoAuthenticationProvider" class="headerlink" title="3 Dao层认证提供者: DaoAuthenticationProvider"></a>3 Dao层认证提供者: DaoAuthenticationProvider</h4><p>Dao层认证提供者DaoAuthenticationProvider，用于调用自定义的UserDetailService实现类方法</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195949.png" alt></p><h4 id="4-抽象层用户认证提供者-AbstractUserDetailsAuthenticationProvider"><a href="#4-抽象层用户认证提供者-AbstractUserDetailsAuthenticationProvider" class="headerlink" title="4 抽象层用户认证提供者: AbstractUserDetailsAuthenticationProvider"></a>4 抽象层用户认证提供者: AbstractUserDetailsAuthenticationProvider</h4><p>抽象层用户认证提供者，获取dao层查找的认证用户信息，被封装成UserDetails对象，User类是UserDetails接口实现类</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200141.png" alt></p><p>1)    org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks认证用户账号是否被锁定，是否启用，是否过期；用户表中可以增加这些字段。</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200226.png" alt></p><p>2)    public interface Authentication extends Principal 封装表单提交的认证信息</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200248.png" alt></p><ul><li>认证用户名和密码；盐值为null</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200419.png" alt></p><ul><li>采用org.springframework.security.authentication.encoding.BasePasswordEncoder默认加密器对表单提交明文加密（其实并没有进行任何加密，明文无变化）</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200446.png" alt></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200512.png" alt></p><ul><li>总结</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200541.png" alt></p><h2 id="4-3-基于数据库-MD5密码-认证-debug"><a href="#4-3-基于数据库-MD5密码-认证-debug" class="headerlink" title="4.3 基于数据库(MD5密码)认证 (debug)"></a>4.3 基于数据库(MD5密码)认证 (debug)</h2><p>使用数据库保存/查询用户数据，完成认证功能</p><h3 id="4-3-1-配置-configure-AuthenticationManagerBuilder-auth"><a href="#4-3-1-配置-configure-AuthenticationManagerBuilder-auth" class="headerlink" title="4.3.1 配置 configure(AuthenticationManagerBuilder auth)"></a>4.3.1 配置 configure(AuthenticationManagerBuilder auth)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.crypto.password.PasswordEncoder</span><br><span class="line">//测试：分析源码（验证密码不一致）</span><br><span class="line">auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);</span><br></pre></td></tr></table></figure><h3 id="4-3-2-引入MD5加密工具类：MD5Util-java"><a href="#4-3-2-引入MD5加密工具类：MD5Util-java" class="headerlink" title="4.3.2 引入MD5加密工具类：MD5Util.java"></a>4.3.2 引入MD5加密工具类：MD5Util.java</h3><h3 id="4-3-3-PasswordEncoder接口实现类：AppPasswordEncoder"><a href="#4-3-3-PasswordEncoder接口实现类：AppPasswordEncoder" class="headerlink" title="4.3.3 PasswordEncoder接口实现类：AppPasswordEncoder"></a>4.3.3 PasswordEncoder接口实现类：AppPasswordEncoder</h3><p>@<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Service</span><br><span class="line">public class AppPasswordEncoder implements PasswordEncoder &#123;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">   * 密码加密的算法</span><br><span class="line">   */</span><br><span class="line">@Override</span><br><span class="line">public String encode(CharSequence rawPassword) &#123;</span><br><span class="line">String digestPwd = MD5Util.digestPwd(rawPassword.toString());</span><br><span class="line">return digestPwd;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">   * 比较登录密码和数据库存储密码是否一致</span><br><span class="line">   * rawPassword:页面的明文密码</span><br><span class="line">   * encodedPassword：数据库的密文密码</span><br><span class="line">   */</span><br><span class="line">@Override</span><br><span class="line">public boolean matches(CharSequence rawPassword, String encodedPassword) &#123;</span><br><span class="line">//使用自己的工具类</span><br><span class="line">String digestPwd = MD5Util.digestPwd(rawPassword.toString());</span><br><span class="line">return digestPwd.equals(encodedPassword);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-3-4-Debug测试，主要测试matches方法的调用过程"><a href="#4-3-4-Debug测试，主要测试matches方法的调用过程" class="headerlink" title="4.3.4 Debug测试，主要测试matches方法的调用过程"></a>4.3.4 Debug测试，主要测试matches方法的调用过程</h3><h4 id="1-表单提交密码：rawPassword"><a href="#1-表单提交密码：rawPassword" class="headerlink" title="1     表单提交密码：rawPassword"></a>1     表单提交密码：rawPassword</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083038.png" alt></p><h4 id="2-数据库存储密码-：encodePassword"><a href="#2-数据库存储密码-：encodePassword" class="headerlink" title="2     数据库存储密码 ：encodePassword"></a>2     数据库存储密码 ：encodePassword</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083112.png" alt></p><h4 id="3-调用自定义密码验证器"><a href="#3-调用自定义密码验证器" class="headerlink" title="3     调用自定义密码验证器"></a>3     调用自定义密码验证器</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083241.png" alt></p><h4 id="4-密码不一致，抛异常：Bad-credentials-密码一致，通过认证"><a href="#4-密码不一致，抛异常：Bad-credentials-密码一致，通过认证" class="headerlink" title="4     密码不一致，抛异常：Bad credentials ;密码一致，通过认证"></a>4     密码不一致，抛异常：Bad credentials ;密码一致，通过认证</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083355.png" alt></p><h4 id="5-创建UsernamePasswordAuthenticationToken-对象，封装认证信息"><a href="#5-创建UsernamePasswordAuthenticationToken-对象，封装认证信息" class="headerlink" title="5     创建UsernamePasswordAuthenticationToken 对象，封装认证信息"></a>5     创建UsernamePasswordAuthenticationToken 对象，封装认证信息</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083432.png" alt></p><h3 id="4-3-5-源码参考"><a href="#4-3-5-源码参考" class="headerlink" title="4.3.5 源码参考"></a>4.3.5 源码参考</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected Authentication createSuccessAuthentication(Object principal,Authentication authentication, UserDetails user) &#123;</span><br><span class="line">// Ensure we return the original credentials the user supplied,</span><br><span class="line">// so subsequent attempts are successful even with encoded passwords.</span><br><span class="line">// Also ensure we return the original getDetails(), so that future</span><br><span class="line">// authentication events after cache expiry contain the details </span><br><span class="line">UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(</span><br><span class="line">principal, authentication.getCredentials(),</span><br><span class="line">authoritiesMapper.mapAuthorities(user.getAuthorities())  );//封装用户权限信息 </span><br><span class="line">result.setDetails(authentication.getDetails()); //封装用户信息</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-principal-认证主体-数据库中查询User数据"><a href="#1-principal-认证主体-数据库中查询User数据" class="headerlink" title="1 principal 认证主体-数据库中查询User数据"></a>1 principal 认证主体-数据库中查询User数据</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083624.png" alt></p><h4 id="2-authentication-getCredentials-认证密码-表单中密码"><a href="#2-authentication-getCredentials-认证密码-表单中密码" class="headerlink" title="2 authentication.getCredentials() 认证密码(表单中密码)"></a>2 authentication.getCredentials() 认证密码(表单中密码)</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083655.png" alt></p><h4 id="3-authoritiesMapper-mapAuthorities-user-getAuthorities-认证权限集合"><a href="#3-authoritiesMapper-mapAuthorities-user-getAuthorities-认证权限集合" class="headerlink" title="3 authoritiesMapper.mapAuthorities(user.getAuthorities()) 认证权限集合"></a>3 authoritiesMapper.mapAuthorities(user.getAuthorities()) 认证权限集合</h4><p>该用户拥有的权限，暂时写死在代码中的，后期要根据用户查询所拥有的权限</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083729.png" alt></p><h4 id="4-认证细节：包括客户端ip和sessionid"><a href="#4-认证细节：包括客户端ip和sessionid" class="headerlink" title="4 认证细节：包括客户端ip和sessionid"></a>4 认证细节：包括客户端ip和sessionid</h4><p>org.springframework.security.web.authentication.WebAuthenticationDetails</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083805.png" alt></p><h4 id="5-result对象（UsernamePasswordAuthenticationToken）详细描述"><a href="#5-result对象（UsernamePasswordAuthenticationToken）详细描述" class="headerlink" title="5 result对象（UsernamePasswordAuthenticationToken）详细描述"></a>5 result对象（UsernamePasswordAuthenticationToken）详细描述</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083855.png" alt></p><h2 id="4-4-基于数据库-BCryptPasswordEncoder-密码加密认证"><a href="#4-4-基于数据库-BCryptPasswordEncoder-密码加密认证" class="headerlink" title="4.4 基于数据库(BCryptPasswordEncoder)密码加密认证"></a>4.4 基于数据库(BCryptPasswordEncoder)密码加密认证</h2><h3 id="4-4-1-PasswordEncoder接口"><a href="#4-4-1-PasswordEncoder接口" class="headerlink" title="4.4.1 PasswordEncoder接口"></a>4.4.1 PasswordEncoder接口</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083950.png" alt></p><h3 id="4-4-2-使用BCryptPasswordEncoder进行密码加密"><a href="#4-4-2-使用BCryptPasswordEncoder进行密码加密" class="headerlink" title="4.4.2 使用BCryptPasswordEncoder进行密码加密"></a>4.4.2 使用BCryptPasswordEncoder进行密码加密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//推荐密码加密器用这个BCryptPasswordEncoder; 将一个字符串加密成一个永不重复的密文</span><br><span class="line">//1、加盐+加随机数</span><br><span class="line">auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());</span><br></pre></td></tr></table></figure><h3 id="4-4-3-本地测试：main方法"><a href="#4-4-3-本地测试：main方法" class="headerlink" title="4.4.3 本地测试：main方法"></a>4.4.3 本地测试：main方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">BCryptPasswordEncoder pe = new BCryptPasswordEncoder();</span><br><span class="line"> </span><br><span class="line">//$2a$10$WzKk37ncOPynOSxyFGkxWu3ys7xaf7L/9uUhfVYVOCFTqeHkgJvOq</span><br><span class="line">//$2a$10$VmWwIx/uxNQabCYl3I5mZ.U9sQvpiM/xAhX69Skg0EWyDm3twQfcO</span><br><span class="line">//$2a$10$2Ig1mxqlb033XcU7aB0Ck.OZouRLsHUkJyIl9Mzi40FIY6grcEUr6</span><br><span class="line">//大致的规律：$2a$10$+&quot;xxx&quot;+&quot;/&quot;+&quot;xxx&quot;</span><br><span class="line">String encode = pe.encode(&quot;123456&quot;);</span><br><span class="line">System.out.println(encode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-4-服务器运行测试"><a href="#4-4-4-服务器运行测试" class="headerlink" title="4.4.4 服务器运行测试"></a>4.4.4 服务器运行测试</h3><p>将main方法生成的密文存储到数据库中（注意：userpswd字段长度），重新启动服务器进行测试。</p><h1 id="第五章-细粒度权限控制"><a href="#第五章-细粒度权限控制" class="headerlink" title="第五章 细粒度权限控制"></a>第五章 细粒度权限控制</h1><h2 id="5-1-前置细节【Role和Authority的区别】"><a href="#5-1-前置细节【Role和Authority的区别】" class="headerlink" title="5.1 前置细节【Role和Authority的区别】"></a>5.1 前置细节【Role和Authority的区别】</h2><h3 id="5-1-1-用户拥有的权限表示"><a href="#5-1-1-用户拥有的权限表示" class="headerlink" title="5.1.1 用户拥有的权限表示"></a>5.1.1 用户拥有的权限表示</h3><ul><li>roles(“ADMIN”,”学徒”,”宗师”) </li><li>authorities(“USER”,”MANAGER”);</li></ul><h3 id="5-1-2-给资源授予权限（角色或权限）"><a href="#5-1-2-给资源授予权限（角色或权限）" class="headerlink" title="5.1.2 给资源授予权限（角色或权限）"></a>5.1.2 给资源授予权限（角色或权限）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class="line">//.antMatchers(&quot;/level1/**&quot;).hasAnyRole(&quot;学徒&quot;,&quot;ADMIN&quot;)//拥有任何一个角色都可以访问</span><br><span class="line">.antMatchers(&quot;/level1/**&quot;).hasAnyAuthority(&quot;学徒&quot;,&quot;ADMIN&quot;) //拥有任何一个权限都可以访问</span><br><span class="line">.antMatchers(&quot;/level2/**&quot;).hasRole(&quot;大师&quot;)</span><br><span class="line">.antMatchers(&quot;/level3/**&quot;).hasRole(&quot;宗师&quot;)</span><br></pre></td></tr></table></figure><h3 id="5-1-3-权限：【roles和authorities区别】"><a href="#5-1-3-权限：【roles和authorities区别】" class="headerlink" title="5.1.3 权限：【roles和authorities区别】"></a>5.1.3 权限：【roles和authorities区别】</h3><ul><li>roles(“ADMIN”,”学徒”,”宗师”) <ul><li>增加”ROLE_”前缀存放：【”ROLE_ADMIN”,”ROLE_学徒”,”ROLE_宗师”】</li><li>表示拥有的权限。一个角色表示的是多个权限</li><li>用户传入的角色不能以ROLE_开头，否则会报错。ROLE_是自动加上的</li><li>如果我们保存的用户的角色：直接传入角色的名字，权限【new SimpleGrantedAuthority(“ROLE_” + role)】保存即可</li></ul></li></ul><ul><li>authorities(“USER”,”MANAGER”);<ul><li>原样存放：【”USER”,”MANAGER”】</li><li>表示拥有的权限。</li><li>如果我们保存的是真正的权限；直接传入权限名字，权限【new SimpleGrantedAuthority(role)】保存</li><li>无论是Role还是Authority都保存在  List<grantedauthority>,每个用户都拥有自己的权限集合-&gt;List<grantedauthority></grantedauthority></grantedauthority></li></ul></li></ul><h3 id="5-1-4-验证用户权限"><a href="#5-1-4-验证用户权限" class="headerlink" title="5.1.4 验证用户权限"></a>5.1.4 验证用户权限</h3><h4 id="1-通过角色（权限）验证："><a href="#1-通过角色（权限）验证：" class="headerlink" title="1)    通过角色（权限）验证："></a>1)    通过角色（权限）验证：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class="line">.antMatchers(&quot;/level1/**&quot;).hasAnyRole(&quot;学徒&quot;,&quot;ADMIN&quot;)</span><br><span class="line">拥有任何一个角色都可以访问</span><br><span class="line">验证时会自动增加&quot;ROLE_&quot;进行查找验证：</span><br><span class="line">    【&quot;ROLE_学徒&quot;,&quot;ROLE_ADMIN&quot;】</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601084432.png" alt></p><p>通过权限验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(&quot;/level1/**&quot;).hasAuthority(&quot;学徒&quot;)</span><br><span class="line">.antMatchers(&quot;/level1/**&quot;).hasAnyAuthority(&quot;学徒&quot;,&quot;ADMIN&quot;) </span><br><span class="line">拥有任何一个权限都可以访问</span><br><span class="line">验证时原样查找进行验证：【&quot;学徒&quot;,&quot;ADMIN&quot;】</span><br></pre></td></tr></table></figure><h2 id="5-2-细粒度的资源控制"><a href="#5-2-细粒度的资源控制" class="headerlink" title="5.2 细粒度的资源控制"></a>5.2 细粒度的资源控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">authenticated()：通过认证的用户都可以访问</span><br><span class="line">permitAll()：允许所有人访问，即使未登录</span><br><span class="line">authorizeRequests()：更细粒度的控制</span><br><span class="line">access(String)： //SpEL：Spring表达式</span><br><span class="line">.access(&quot;hasRole(&apos;大师&apos;) AND hasAuthority(&apos;user:delete&apos;) OR hasIpAddress(&apos;192.168.50.15&apos;)&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601084714.png" alt></p><h2 id="5-3-细粒度的资源控制相应注解"><a href="#5-3-细粒度的资源控制相应注解" class="headerlink" title="5.3 细粒度的资源控制相应注解"></a>5.3 细粒度的资源控制相应注解</h2><p>使用注解与SpEl进行细粒度权限控制</p><h3 id="5-3-1-开启注解控制权限模式"><a href="#5-3-1-开启注解控制权限模式" class="headerlink" title="5.3.1 开启注解控制权限模式"></a>5.3.1 开启注解控制权限模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnableWebSecurity：开启 Spring Security 注解</span><br><span class="line">@EnableGlobalMethodSecurity(prePostEnabled=true)：开启全局的细粒度方法级别权限控制功能</span><br></pre></td></tr></table></figure><h3 id="5-3-2-几个权限检查注解"><a href="#5-3-2-几个权限检查注解" class="headerlink" title="5.3.2 几个权限检查注解"></a>5.3.2 几个权限检查注解</h3><h4 id="1-PreAuthorize：方法执行前检查"><a href="#1-PreAuthorize：方法执行前检查" class="headerlink" title="1 @PreAuthorize：方法执行前检查"></a>1 @PreAuthorize：方法执行前检查</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PreAuthorize(&quot;hasRole(&apos;ADMIN&apos;)&quot;)  </span><br><span class="line">public void addUser(User user)&#123;  </span><br><span class="line">    //如果具有ROLE_ADMIN 权限 则访问该方法  </span><br><span class="line">    ....  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-PostAuthorize：方法执行后检查，失败抛异常"><a href="#2-PostAuthorize：方法执行后检查，失败抛异常" class="headerlink" title="2 @PostAuthorize：方法执行后检查，失败抛异常"></a>2 @PostAuthorize：方法执行后检查，失败抛异常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@PostAuthorize：允许方法调用，但是，如果表达式结果为false抛出异常  </span><br><span class="line">//returnObject可以获取返回对象user，判断user属性username是否和访问该方法的用户对象的用户名一样。不一样则抛出异常。  </span><br><span class="line">@PostAuthorize(&quot;returnObject.user.username==principal.username&quot;)  </span><br><span class="line">public User getUser(int userId)&#123;  </span><br><span class="line">   //允许进入</span><br><span class="line">...  </span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-PostFilter：允许方法调用，但是按照表达式过滤方法结果"><a href="#3-PostFilter：允许方法调用，但是按照表达式过滤方法结果" class="headerlink" title="3 @PostFilter：允许方法调用，但是按照表达式过滤方法结果"></a>3 @PostFilter：允许方法调用，但是按照表达式过滤方法结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//将结果过滤，即选出性别为男的用户  </span><br><span class="line">@PostFilter(&quot;returnObject.user.sex==&apos;男&apos; &quot;)  </span><br><span class="line">public List&lt;User&gt; getUserList()&#123;  </span><br><span class="line">    //允许进入</span><br><span class="line">    ...  </span><br><span class="line">    return user; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-PreFilter：允许方法调用，但必须在进入方法前过滤输入值"><a href="#4-PreFilter：允许方法调用，但必须在进入方法前过滤输入值" class="headerlink" title="4 @PreFilter：允许方法调用，但必须在进入方法前过滤输入值"></a>4 @PreFilter：允许方法调用，但必须在进入方法前过滤输入值</h4><h4 id="5-Secured：拥有指定角色才可以访问方法"><a href="#5-Secured：拥有指定角色才可以访问方法" class="headerlink" title="5 @Secured：拥有指定角色才可以访问方法"></a>5 @Secured：拥有指定角色才可以访问方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Secured(&apos;ADMIN&apos;)   等价于    @PreAuthorize(&quot;hasRole(&apos;ADMIN&apos;)&quot;)</span><br></pre></td></tr></table></figure><h2 id="5-4-细粒度的资源控制注解中可写的表达式"><a href="#5-4-细粒度的资源控制注解中可写的表达式" class="headerlink" title="5.4 细粒度的资源控制注解中可写的表达式"></a>5.4 细粒度的资源控制注解中可写的表达式</h2><p><a href="https://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#el-common-built-in" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#el-common-built-in</a><br>所有能使用的表达式见上面文档连接</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085028.png" alt></p><h2 id="5-5-细粒度权限控制实现步骤-★"><a href="#5-5-细粒度权限控制实现步骤-★" class="headerlink" title="5.5 细粒度权限控制实现步骤 ★"></a>5.5 细粒度权限控制实现步骤 ★</h2><h3 id="5-5-1-开启全局的细粒度方法级别权限控制功能"><a href="#5-5-1-开启全局的细粒度方法级别权限控制功能" class="headerlink" title="5.5.1 开启全局的细粒度方法级别权限控制功能"></a>5.5.1 开启全局的细粒度方法级别权限控制功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@Configuration</span><br><span class="line">public class AppSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-2-将手动授权的方式注释掉"><a href="#5-5-2-将手动授权的方式注释掉" class="headerlink" title="5.5.2 将手动授权的方式注释掉"></a>5.5.2 将手动授权的方式注释掉</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class="line">//.antMatchers(&quot;/level1/**&quot;).hasAnyRole(&quot;学徒&quot;,&quot;ADMIN&quot;)</span><br><span class="line">//.antMatchers(&quot;/level1/**&quot;).hasAnyAuthority(&quot;学徒&quot;,&quot;ADMIN&quot;)</span><br><span class="line">//.antMatchers(&quot;/level1/**&quot;).hasAuthority(&quot;学徒&quot;)</span><br><span class="line">//.antMatchers(&quot;/level2/**&quot;).hasRole(&quot;大师&quot;)</span><br><span class="line">//.antMatchers(&quot;/level3/**&quot;).hasRole(&quot;宗师&quot;)</span><br></pre></td></tr></table></figure><h3 id="5-5-3-给访问资源的方法增加注解，进行访问授权"><a href="#5-5-3-给访问资源的方法增加注解，进行访问授权" class="headerlink" title="5.5.3 给访问资源的方法增加注解，进行访问授权"></a>5.5.3 给访问资源的方法增加注解，进行访问授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class GongfuController &#123; </span><br><span class="line">/**</span><br><span class="line">   * 授权（权限检查）使用AOP；MethodSecurityInterceptor</span><br><span class="line">   *                 方法执行之前AccessDecisionManager利用投票机制决定这个方法是否可运行</span><br><span class="line"> * </span><br><span class="line">   */</span><br><span class="line">@PreAuthorize(&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;luohan&apos;)&quot;)</span><br><span class="line">@GetMapping(&quot;/level1/1&quot;)</span><br><span class="line">public String leve1Page()&#123;</span><br><span class="line">return &quot;/level1/1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@PreAuthorize(&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;wudang&apos;)&quot;)</span><br><span class="line">@GetMapping(&quot;/level1/2&quot;)</span><br><span class="line">public String leve1Page2()&#123;</span><br><span class="line">return &quot;/level1/2&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@PreAuthorize(&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;quanzhen&apos;)&quot;)</span><br><span class="line">@GetMapping(&quot;/level1/3&quot;)</span><br><span class="line">public String leve1Page3()&#123;</span><br><span class="line">return &quot;/level1/3&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-4-通过数据库加载用户权限"><a href="#5-5-4-通过数据库加载用户权限" class="headerlink" title="5.5.4 通过数据库加载用户权限"></a>5.5.4 通过数据库加载用户权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class AppUserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class="line"> </span><br><span class="line">@Autowired</span><br><span class="line">JdbcTemplate jdbcTemplate ;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class="line">String sql = &quot;select  * from t_admin where loginacct=?&quot;;</span><br><span class="line">Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(sql, username);</span><br><span class="line"> </span><br><span class="line">//查询用户拥有的角色集合</span><br><span class="line">String sql1=&quot;SELECT t_role.* FROM t_role LEFT JOIN t_admin_role ON t_admin_role.roleid=t_role.id WHERE t_admin_role.adminid=?&quot;;                </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; roleList = jdbcTemplate.query(sql1, new ColumnMapRowMapper(), map.get(&quot;id&quot;));</span><br><span class="line"> </span><br><span class="line">//查询用户拥有的权限集合</span><br><span class="line">String sql2 = &quot;SELECT distinct t_permission.* FROM t_permission LEFT JOIN t_role_permission ON t_role_permission.permissionid = t_permission.id LEFT JOIN t_admin_role ON t_admin_role.roleid=t_role_permission.roleid WHERE t_admin_role.adminid=?&quot;;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; permissionList = jdbcTemplate.query(sql2, new ColumnMapRowMapper(), map.get(&quot;id&quot;));</span><br><span class="line"> </span><br><span class="line">//用户权限=【角色+权限】</span><br><span class="line">Set&lt;GrantedAuthority&gt; authorities = new HashSet&lt;GrantedAuthority&gt;();</span><br><span class="line">                </span><br><span class="line">for (Map&lt;String, Object&gt; rolemap : roleList) &#123;</span><br><span class="line">String rolename = rolemap.get(&quot;name&quot;).toString();</span><br><span class="line">authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot;+rolename));</span><br><span class="line">&#125;                </span><br><span class="line">for (Map&lt;String, Object&gt; permissionmap : permissionList) &#123;</span><br><span class="line">String permissionName = permissionmap.get(&quot;name&quot;).toString();</span><br><span class="line">if(!StringUtils.isEmpty(permissionName)) &#123;</span><br><span class="line">authorities.add(new SimpleGrantedAuthority(permissionName));</span><br><span class="line">&#125;                        </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//return new User(map.get(&quot;loginacct&quot;).toString(),map.get(&quot;userpswd&quot;).toString(),</span><br><span class="line">//AuthorityUtils.createAuthorityList(&quot;ADMIN&quot;,&quot;USER&quot;));</span><br><span class="line">return new User(map.get(&quot;loginacct&quot;).toString(),map.get(&quot;userpswd&quot;).toString(),authorities);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-5-准备数据"><a href="#5-5-5-准备数据" class="headerlink" title="5.5.5 准备数据"></a>5.5.5 准备数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//查询用户拥有的角色集合</span><br><span class="line">SELECT </span><br><span class="line">  t_role.* </span><br><span class="line">FROM</span><br><span class="line">  t_role </span><br><span class="line">  LEFT JOIN t_admin_role </span><br><span class="line">    ON t_admin_role.roleid = t_role.id </span><br><span class="line">WHERE t_admin_role.userid = 1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085322.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查询用户拥有的权限集合</span><br><span class="line">SELECT DISTINCT </span><br><span class="line">  t_permission.* </span><br><span class="line">FROM</span><br><span class="line">  t_permission </span><br><span class="line">  LEFT JOIN t_role_permission </span><br><span class="line">    ON t_role_permission.permissionid = t_permission.id </span><br><span class="line">  LEFT JOIN t_admin_role </span><br><span class="line">    ON t_admin_role.roleid = t_role_permission.roleid </span><br><span class="line">WHERE t_admin_role.userid = 1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085345.png" alt></p><h3 id="5-5-6-测试结果"><a href="#5-5-6-测试结果" class="headerlink" title="5.5.6 测试结果"></a>5.5.6 测试结果</h3><p>登录认证通过，可以登录到成功页面  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">访问【学徒】角色下的资源：</span><br><span class="line">/level1/1 罗汉拳不可以访问</span><br><span class="line">/level1/2 武当长拳可以访问</span><br><span class="line">/level1/3 全真剑法不可以访问</span><br></pre></td></tr></table></figure><h1 id="第六章-SpringSecurity-原理"><a href="#第六章-SpringSecurity-原理" class="headerlink" title="第六章 SpringSecurity-原理"></a>第六章 SpringSecurity-原理</h1><h2 id="6-1-认证原理-过滤器链的调用"><a href="#6-1-认证原理-过滤器链的调用" class="headerlink" title="6.1 认证原理-过滤器链的调用"></a>6.1 认证原理-过滤器链的调用</h2><h3 id="1-源码调试分析"><a href="#1-源码调试分析" class="headerlink" title="1 源码调试分析"></a>1 源码调试分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">•程序入口</span><br><span class="line">•打断点-第一批次</span><br><span class="line">•运行调试</span><br><span class="line">•打断点-关键点</span><br></pre></td></tr></table></figure><h3 id="2-过滤器"><a href="#2-过滤器" class="headerlink" title="2 过滤器"></a>2 过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="3-debug走起…"><a href="#3-debug走起…" class="headerlink" title="3 debug走起…"></a>3 debug走起…</h3><h4 id="3-1-初始化方法"><a href="#3-1-初始化方法" class="headerlink" title="3.1 初始化方法"></a>3.1 初始化方法</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085707.png" alt></p><h4 id="3-2-过滤器：功能扩展的多个过滤器-gt-责任链设计模式"><a href="#3-2-过滤器：功能扩展的多个过滤器-gt-责任链设计模式" class="headerlink" title="3.2 过滤器：功能扩展的多个过滤器-&gt;责任链设计模式"></a>3.2 过滤器：功能扩展的多个过滤器-&gt;责任链设计模式</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085759.png" alt></p><h4 id="3-3-获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤"><a href="#3-3-获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤" class="headerlink" title="3.3 获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤"></a>3.3 获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085831.png" alt></p><h4 id="3-4-开始一个一个的执行过滤器"><a href="#3-4-开始一个一个的执行过滤器" class="headerlink" title="3.4 开始一个一个的执行过滤器"></a>3.4 开始一个一个的执行过滤器</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085910.png" alt></p><h4 id="3-5-自定义过滤器"><a href="#3-5-自定义过滤器" class="headerlink" title="3.5 自定义过滤器"></a>3.5 自定义过滤器</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090011.png" alt></p><h2 id="6-2-认证原理-相关过滤器解释"><a href="#6-2-认证原理-相关过滤器解释" class="headerlink" title="6.2 认证原理-相关过滤器解释"></a>6.2 认证原理-相关过滤器解释</h2><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090038.png" alt></p><h3 id="1-SecurityContextPersistenceFilter"><a href="#1-SecurityContextPersistenceFilter" class="headerlink" title="1    SecurityContextPersistenceFilter"></a>1    SecurityContextPersistenceFilter</h3><ul><li>过滤器链头，是从 SecurityContextRepository 中取出用户认证信息，默认实现为 HttpSessionSecurityContextRepository，它会从 Session 中取出已认证的用户信息，提高效率，避免每次请求都要查询用户认证信息</li><li>取出之后会放入 SecurityContextHolder 中，以便其它 filter 使用，SecurityContextHolder 使用 ThreadLocal 存储用户认证信息，保证线程之间信息隔离，最后再 finally 中清除该信息</li></ul><h3 id="2-WebAsyncManagerIntegrationFilter"><a href="#2-WebAsyncManagerIntegrationFilter" class="headerlink" title="2.    WebAsyncManagerIntegrationFilter"></a>2.    WebAsyncManagerIntegrationFilter</h3><p>提供了对 SecurityContext 和 WebAsyncManager 的集成，会把 SecurityContext 设置到异步线程，使其也能获取到用户上下文认证信息</p><h4 id="3-HeaderWriterFilter"><a href="#3-HeaderWriterFilter" class="headerlink" title="3.    HeaderWriterFilter"></a>3.    HeaderWriterFilter</h4><p>会往请求的 Header 中添加相应的信息<br>响应头：</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090157.png" alt></p><p>请求头：</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090221.png" alt></p><h4 id="4-CsrfFilter"><a href="#4-CsrfFilter" class="headerlink" title="4.    CsrfFilter"></a>4.    CsrfFilter</h4><p>跨域请求伪造过滤器，通过客户端穿来的 token 与服务端存储的 token 进行对比来判断请求</p><h4 id="5-LogoutFilter"><a href="#5-LogoutFilter" class="headerlink" title="5.    LogoutFilter"></a>5.    LogoutFilter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.web.authentication.logout.LogoutFilter</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090307.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090352.png" alt></p><p>匹配URL，默认为 /logout，匹配成功后则会用户退出，清除认证信息，若有自己的退出逻辑，该过滤器可以关闭</p><h4 id="6-UsernamePasswordAuthenticationFilter"><a href="#6-UsernamePasswordAuthenticationFilter" class="headerlink" title="6.    UsernamePasswordAuthenticationFilter"></a>6.    UsernamePasswordAuthenticationFilter</h4><blockquote><p>登录认证过滤器，默认是对 /login 的 POST 请求进行认证，首先该方法会调用 attemptAuthentication 尝试认证获取一个 Authentication 认证对象，<br>然后通过 sessionStrategy.onAuthentication 执行持久化，也就是保存认证信息，然后转向下一个 Filter，<br>最后调用 successfulAuthentication 执行认证后事件<br>attemptAuthentication 该方法是认证的主要方法，  </p></blockquote><p>认证基本流程为 UserDeatilService 根据用户名获取到用户信息，然后通过 UserDetailsChecker.<br>check 对用户状态进行校验，最后通过 additionalAuthenticationChecks 方法对用户密码进行校验完后认证后，返回一个认证对象</p><h4 id="7-DefaultLoginPageGeneratingFilter"><a href="#7-DefaultLoginPageGeneratingFilter" class="headerlink" title="7.    DefaultLoginPageGeneratingFilter"></a>7.    DefaultLoginPageGeneratingFilter</h4><p>当请求为登录请求时，生成简单的登录页面，可以关闭</p><h4 id="8-BasicAuthenticationFilter"><a href="#8-BasicAuthenticationFilter" class="headerlink" title="8.    BasicAuthenticationFilter"></a>8.    BasicAuthenticationFilter</h4><p>Http Basic 认证的支持，该认证会把用户名密码使用 base64 编码后放入 header 中传输，认证成功后会把用户信息放入 SecurityContextHolder 中</p><h4 id="9-RequestCacheAwareFilter"><a href="#9-RequestCacheAwareFilter" class="headerlink" title="9.    RequestCacheAwareFilter"></a>9.    RequestCacheAwareFilter</h4><p>恢复被打断时的请求</p><h4 id="10-SecurityContextHolderAwareRequestFilter"><a href="#10-SecurityContextHolderAwareRequestFilter" class="headerlink" title="10.    SecurityContextHolderAwareRequestFilter"></a>10.    SecurityContextHolderAwareRequestFilter</h4><p>针对 Servlet api 不同版本做一些包装</p><h4 id="11-AnonymousAuthenticationFilter"><a href="#11-AnonymousAuthenticationFilter" class="headerlink" title="11.    AnonymousAuthenticationFilter"></a>11.    AnonymousAuthenticationFilter</h4><p>SecurityContextHolder 中认证信息为空，则会创建一个匿名用户到 SecurityContextHolder 中</p><h4 id="12-SessionManagementFilter"><a href="#12-SessionManagementFilter" class="headerlink" title="12.    SessionManagementFilter"></a>12.    SessionManagementFilter</h4><p>与登录认证拦截时作用一样，持久化用户登录信息，可以保存到 Session 中，也可以保存到 cookie 或 redis 中</p><h4 id="13-ExceptionTranslationFilter"><a href="#13-ExceptionTranslationFilter" class="headerlink" title="13.    ExceptionTranslationFilter"></a>13.    ExceptionTranslationFilter</h4><p>异常拦截，处于 Filter 链条后部，只能拦截其后面的节点并着重处理 AuthenticationException 与 AccessDeniedException 异常</p><h2 id="6-3-认证原理-重点UsernamePasswordAuthenticationFilter"><a href="#6-3-认证原理-重点UsernamePasswordAuthenticationFilter" class="headerlink" title="6.3 认证原理-重点UsernamePasswordAuthenticationFilter"></a>6.3 认证原理-重点UsernamePasswordAuthenticationFilter</h2><h3 id="6-3-1-UsernamePasswordAuthencationFilter源码流程-不带图"><a href="#6-3-1-UsernamePasswordAuthencationFilter源码流程-不带图" class="headerlink" title="6.3.1 UsernamePasswordAuthencationFilter源码流程-不带图"></a>6.3.1 UsernamePasswordAuthencationFilter源码流程-不带图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、获取到页面的用户名和密码</span><br><span class="line">2、将username和password包装成UsernamePasswordAuthenticationToken</span><br><span class="line">3、获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证</span><br><span class="line">3.1）AuthenticationManager获取ProviderManager来调用ProviderManager.authenticate()</span><br><span class="line">3.2）ProviderManager获取到所有的AuthenticationProvider判断当前的提供者能否支持，如果支持provider.authenticate(authentication);</span><br><span class="line">现在我们DaoAuthenticationProvider（ authentication ：页面封装用户名和密码的对象）</span><br><span class="line">3.2.1）retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">3.2.1.1）loadedUser = this.getUserDetailsService().loadUserByUsername(username);</span><br><span class="line">（调用我们自己的UserDetailsService来去数据库查用户，按照用户名查出来的用户的详细信息）封装成UserDetails</span><br><span class="line">3.2.2）preAuthenticationChecks.check(user);（预检查，账号是否被锁定等…）</span><br><span class="line">3.2.3）additionalAuthenticationChecks（附加的认证检查）</span><br><span class="line">3.2.3.1）使用passwordEncoder. matches检查页面的密码和数据库的密码是否一致</span><br><span class="line">3.2.4）postAuthenticationChecks.check(user);（后置认证，检查密码是否过期）</span><br><span class="line">3.2.5）createSuccessAuthentication：将认证成功信息重新封装成UsernamePasswordAuthenticationToken</span><br><span class="line">3.3）3.2又返回了一个新的UsernamePasswordAuthenticationToken，然后擦掉密码</span><br><span class="line">4、 eventPublisher.publishAuthenticationSuccess(result);告诉所有监听器认证成功了</span><br></pre></td></tr></table></figure><h3 id="6-3-2-UsernamePasswordAuthencationFilter源码流程-带图"><a href="#6-3-2-UsernamePasswordAuthencationFilter源码流程-带图" class="headerlink" title="6.3.2 UsernamePasswordAuthencationFilter源码流程-带图"></a>6.3.2 UsernamePasswordAuthencationFilter源码流程-带图</h3><h4 id="1-执行过滤器，获取到页面的用户名和密码"><a href="#1-执行过滤器，获取到页面的用户名和密码" class="headerlink" title="1 执行过滤器，获取到页面的用户名和密码"></a>1 执行过滤器，获取到页面的用户名和密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class UsernamePasswordAuthenticationFilter extends  AbstractAuthenticationProcessingFilter</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602233802.png" alt></p><h4 id="2-将username和password包装成UsernamePasswordAuthenticationToken"><a href="#2-将username和password包装成UsernamePasswordAuthenticationToken" class="headerlink" title="2 将username和password包装成UsernamePasswordAuthenticationToken"></a>2 将username和password包装成UsernamePasswordAuthenticationToken</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602233852.png" alt></p><h4 id="3-获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this-getAuthenticationManager-authenticate-authRequest-）"><a href="#3-获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this-getAuthenticationManager-authenticate-authRequest-）" class="headerlink" title="3 获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this.getAuthenticationManager().authenticate(authRequest)）"></a>3 获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this.getAuthenticationManager().authenticate(authRequest)）</h4><p>3.1）、 AuthenticationManager获取ProviderManager来调用ProviderManager.authenticate() </p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234003.png" alt></p><p>3.2）、 ProviderManager获取到所有的AuthenticationProvider判断当前的提供者能否支持，如果支持provider.authenticate(authentication);<br>DaoAuthenticationProvider（ authentication ：页面封装用户名和密码的对象）</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234056.png" alt></p><ul><li>3.2.1）、retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);</li><li>3.2.1.1）、 loadedUser = this.getUserDetailsService().loadUserByUsername(username);<br>（调用我们自己的UserDetailsService来去数据库查用户，按照用户名查出来的用户的详细信息）封装成UserDetail</li><li>3.2.2）、 preAuthenticationChecks.check(user);（预检查，账号是否被锁定等…）</li><li><p>3.2.3）、 additionalAuthenticationChecks（附加的认证检查）</p><ul><li>3.2.3.1）、使用passwordEncoder. matches检查页面的密码和数据库的密码是否一致</li></ul></li><li><p>3.2.4）、 postAuthenticationChecks.check(user);（后置认证，检查密码是否过期）</p></li><li>3.2.5）、 createSuccessAuthentication：将认证成功的信息重新封装成UsernamePasswordAuthenticationToken</li><li>3.3）、 3.2又返回了一个新的UsernamePasswordAuthenticationToken，然后擦掉密码</li></ul><h4 id="4-eventPublisher-publishAuthenticationSuccess-result-认证成功"><a href="#4-eventPublisher-publishAuthenticationSuccess-result-认证成功" class="headerlink" title="4 eventPublisher.publishAuthenticationSuccess(result);认证成功"></a>4 eventPublisher.publishAuthenticationSuccess(result);认证成功</h4><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234232.png" alt></p><h4 id="5-successfulAuthentication-request-response-chain-authResult"><a href="#5-successfulAuthentication-request-response-chain-authResult" class="headerlink" title="5 successfulAuthentication(request, response, chain, authResult);"></a>5 successfulAuthentication(request, response, chain, authResult);</h4><ul><li>通过调用 SecurityContextHolder.getContext().setAuthentication(…)  将 Authentication 对象赋给当前的 SecurityContext </li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234259.png" alt></p><ul><li>org.springframework.security.core.context.SecurityContextHolderStrategy</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234355.png" alt></p><ul><li>ThreadLocal线程数据绑定</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234517.png" alt></p><ul><li>SecurityContextHolder.getContext()；就能获取到之前认证好的Authentication对象（UsernamePasswordAuthenticationToken）<h3 id="6-3-3-断点参考"><a href="#6-3-3-断点参考" class="headerlink" title="6.3.3 断点参考"></a>6.3.3 断点参考</h3></li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234721.png" alt></p><h2 id="6-4-认证原理-流程及相关类（API）"><a href="#6-4-认证原理-流程及相关类（API）" class="headerlink" title="6.4 认证原理-流程及相关类（API）"></a>6.4 认证原理-流程及相关类（API）</h2><p>认证&amp;授权</p><h3 id="6-4-1-认证流程"><a href="#6-4-1-认证流程" class="headerlink" title="6.4.1 认证流程"></a>6.4.1 认证流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.用户使用用户名和密码登录</span><br><span class="line">2.用户名密码被过滤器（默认为 UsernamePasswordAuthenticationFilter）获取到，封装成 Authentication（UsernamePasswordAuthenticationToken）</span><br><span class="line">3.token（Authentication实现类）传递给 AuthenticationManager 进行认证</span><br><span class="line">4.AuthenticationManager 认证成功后返回一个封装了用户权限信息的 Authentication 对象</span><br><span class="line">5.通过调用 SecurityContextHolder.getContext().setAuthentication(...)  将 Authentication 对象赋给当前的 SecurityContext </span><br><span class="line">6.将用户的信息保存到当前线程上，共享起来</span><br><span class="line">7.SecurityContextHolder.getContext()；就能获取到之前认证好的Authentication对象（UsernamePasswordAuthenticationToken）</span><br></pre></td></tr></table></figure><h3 id="6-4-2-默认执行顺序"><a href="#6-4-2-默认执行顺序" class="headerlink" title="6.4.2 默认执行顺序"></a>6.4.2 默认执行顺序</h3><h4 id="1-UsernamePasswordAuthenticationFilter"><a href="#1-UsernamePasswordAuthenticationFilter" class="headerlink" title="1 UsernamePasswordAuthenticationFilter"></a>1 UsernamePasswordAuthenticationFilter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1)用户通过url：/login 登录，该过滤器接收表单用户名密码</span><br><span class="line">2)判断用户名密码是否为空</span><br><span class="line">3)生成 UsernamePasswordAuthenticationToken</span><br><span class="line">4)将 Authentiction 传给 AuthenticationManager接口的 authenticate 方法进行认证处理</span><br><span class="line">5)AuthenticationManager 默认是实现类为 ProviderManager ，ProviderManager 委托给 AuthenticationProvider 进行处理</span><br><span class="line">6)UsernamePasswordAuthenticationFilter 继承了 AbstractAuthenticationProcessingFilter 抽象类，AbstractAuthenticationProcessingFilter 在 successfulAuthentication 方法中对登录成功进行了处理，通过 SecurityContextHolder.getContext().setAuthentication() 方法将 Authentication 认证信息对象绑定到 SecurityContext</span><br><span class="line">7)下次请求时，在过滤器链头的 SecurityContextPersistenceFilter 会从 Session 中取出用户信息并生成 Authentication（默认为 UsernamePasswordAuthenticationToken），并通过 SecurityContextHolder.getContext().setAuthentication() 方法将 Authentication 认证信息对象绑定到 SecurityContext</span><br><span class="line">8)需要权限才能访问的请求会从 SecurityContext 中获取用户的权限进行验证</span><br></pre></td></tr></table></figure><h4 id="2-DaoAuthenticationProvider（实现了-AuthenticationProvider）"><a href="#2-DaoAuthenticationProvider（实现了-AuthenticationProvider）" class="headerlink" title="2 DaoAuthenticationProvider（实现了 AuthenticationProvider）"></a>2 DaoAuthenticationProvider（实现了 AuthenticationProvider）</h4><ul><li>通过 UserDetailsService 获取 UserDetails</li><li>将 UserDetails 和 UsernamePasswordAuthenticationToken 进行认证匹配用户名密码是否正确</li><li>若正确则通过 UserDetails 中用户的权限、用户名等信息生成新的 Authentication 认证对象并返回</li></ul><h3 id="6-4-3-相关类"><a href="#6-4-3-相关类" class="headerlink" title="6.4.3 相关类"></a>6.4.3 相关类</h3><h4 id="1-WebSecurityConfigurerAdapter"><a href="#1-WebSecurityConfigurerAdapter" class="headerlink" title="1.    WebSecurityConfigurerAdapter"></a>1.    WebSecurityConfigurerAdapter</h4><ul><li>为创建 WebSecurityConfigurer 实例提供方便的基类，重写它的 configure 方法来设置安全细节</li><li>configure(HttpSecurity http)：重写该方法，通过 http 对象的 authorizeRequests()方法定义URL访问权限，默认会为 formLogin() 提供一个简单的测试HTML页面</li><li>configure (AuthenticationManagerBuilder auth)：通过 auth 对象的方法添加身份验证<h4 id="2-SecurityContextHolder"><a href="#2-SecurityContextHolder" class="headerlink" title="2.    SecurityContextHolder"></a>2.    SecurityContextHolder</h4></li><li>SecurityContextHolder 用于存储安全上下文信息（如操作用户是谁、用户是否被认证、用户权限有哪些），它用 ThreadLocal 来保存 SecurityContext，者意味着 Spring Security 在用户登录时自动绑定到当前现场，用户退出时，自动清除当前线程认证信息，SecurityContext 中含有正在访问系统用户的详细信息</li></ul><h3 id="3-AuthenticationManagerBuilder"><a href="#3-AuthenticationManagerBuilder" class="headerlink" title="3.    AuthenticationManagerBuilder"></a>3.    AuthenticationManagerBuilder</h3><ul><li>用于构建认证 AuthenticationManager 认证，允许快速构建内存认证、LDAP身份认证、JDBC身份验证，添加 userDetailsService（获取认证信息数据） 和 AuthenticationProvider’s（定义认证方式）</li></ul><h4 id="4-UserDetailsService"><a href="#4-UserDetailsService" class="headerlink" title="4.    UserDetailsService"></a>4.    UserDetailsService</h4><p>该接口仅有一个方法 loadUserByUsername，Spring Security 通过该方法获取用户信息</p><h4 id="5-UserDetails"><a href="#5-UserDetails" class="headerlink" title="5.    UserDetails"></a>5.    UserDetails</h4><ul><li>代表了Spring Security的用户实体类，带有用户名、密码、权限特性等性质，可以自己实现该接口，供 Spring Security 安全认证使用，Spring Security 默认使用的是内置的 User 类</li><li>将从数据库获取的 User 对象传入实现该接口的类，并获取 User 对象的值来让类实现该接口的方法</li><li>通过 Authentication.getPrincipal() 的返回类型是 Object，但很多情况下其返回的其实是一个 UserDetails 的实例 </li></ul><h4 id="6-Authentication"><a href="#6-Authentication" class="headerlink" title="6.    Authentication"></a>6.    Authentication</h4><p>Authentication 是一个接口，用来表示用户认证信息，在用户登录认证之前相关信息（用户传过来的用户名密码）会封装为一个 Authentication 具体实现类对象，默认情况下为 UsernamePasswordAuthenticationToken，登录之后（通过AuthenticationManager认证）会生成一个更详细的、包含权限的对象，然后把它保存在权限线程本地的 SecurityContext 中，供后续权限鉴定用<br>Authentication.principal可以获取到已经认证的用户详细信息<br> UsernamePasswordAuthenticationToken （密码被擦除，authenticated=true）</p><h4 id="7-GrantedAuthority"><a href="#7-GrantedAuthority" class="headerlink" title="7.    GrantedAuthority"></a>7.    GrantedAuthority</h4><p>GrantedAuthority 是一个接口，它定义了一个 getAuthorities() 方法返回当前 Authentication 对象的拥有权限字符串，用户有权限是一个 GrantedAuthority 数组，每一个 GrantedAuthority 对象代表一种用户权限</p><h4 id="8-AuthenticationManager"><a href="#8-AuthenticationManager" class="headerlink" title="8.    AuthenticationManager"></a>8.    AuthenticationManager</h4><ul><li>AuthenticationManager 是用来处理认证请求的接口，它只有一个方法 authenticate()，该方法接收一个 Authentication 作为对象，如果认证成功则返回一个封装了当前用户权限信息的 Authentication 对象进行返回</li><li>它默认的实现是 ProviderManager，但它不处理认证请求，而是将委托给 AuthenticationProvider 列表，然后依次使用 AuthenticationProvider 进行认证，如果有一个 AuthenticationProvider 认证的结果不为null，则表示成功（否则失败，抛出 ProviderNotFoundException），之后不在进行其它 AuthenticationProvider 认证，并作为结果保存在 ProviderManager</li><li>认证校验时最常用的方式就是通过用户名加载 UserDetails，然后比较 UserDetails 密码与请求认证是否一致，一致则通过，Security 内部的 DaoAuthenticationProvider 就是使用这种方式</li><li>认证成功后加载 UserDetails 来封装要返回的 Authentication 对象，加载的 UserDetails 对象是包含用户权限等信息的。认证成功返回的 Authentication 对象将会保存在当前的 SecurityContext 中 </li></ul><h4 id="9-AuthenticationProvider"><a href="#9-AuthenticationProvider" class="headerlink" title="9.    AuthenticationProvider"></a>9.    AuthenticationProvider</h4><ul><li>AuthenticationProvider 是一个身份认证接口，实现该接口来定制自己的认证方式，可通过 UserDetailsSevice 对获取数据库中的数据</li><li>该接口中有两个需要实现的方法：</li><li>Authentication authenticate(Authentication authentication)：认证处理，返回一个 Authentication 的实现类则代表成功，返回 null 则为认证失败</li><li>supports(Class&lt;?&gt; aClass)：如果该 AuthenticationProvider 支持传入的 Authentication 认证对象，则返回 true ，如：return aClass.equals(UsernamePasswordAuthenticationToken.class); </li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602235552.png" alt></p><h4 id="10-AuthorityUtils"><a href="#10-AuthorityUtils" class="headerlink" title="10.    AuthorityUtils"></a>10.    AuthorityUtils</h4><p>是一个工具包，用于操作 GrantedAuthority 集合的实用方法：<br>commaSeparatedStringToAuthorityList(String authorityString)：从逗号分隔符中创建 GrantedAuthority 对象数组，帮我们快速创建出权限的集合</p><h4 id="11-AbstractAuthenticationProcessingFilter"><a href="#11-AbstractAuthenticationProcessingFilter" class="headerlink" title="11.    AbstractAuthenticationProcessingFilter"></a>11.    AbstractAuthenticationProcessingFilter</h4><ul><li>该抽象类继承了 GenericFilterBean，是处理 form 登录的过滤器，与 form 登录相关的所有操作都在该抽象类的子类中进行（UsernamePasswordAuthenticationFilter 为其子类），比如获取表单中的用户名、密码，然后进行认证等操作</li><li>该类在 doFilter 方法中通过 attemptAuthentication() 方法进行用户信息逻辑认证，认证成功会将用户信息设置到 Session 中</li></ul><h4 id="12-HttpSecurity"><a href="#12-HttpSecurity" class="headerlink" title="12.    HttpSecurity"></a>12.    HttpSecurity</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用于配置全局 Http 请求的权限控制规则，对哪些请求进行验证、不验证等</span><br><span class="line">常用方法：</span><br><span class="line">authorizeRequests()：返回一个配置对象用于配置请求的访问限制</span><br><span class="line">formLogin()：返回表单配置对象，当什么都不指定时会提供一个默认的，如配置登录请求，还有登录成功页面</span><br><span class="line">logout()：返回登出配置对象，可通过logoutUrl设置退出url</span><br><span class="line">antMatchers：匹配请求路径或请求动作类型，如：.antMatchers(&quot;/admin/**&quot;)</span><br><span class="line"></span><br><span class="line">addFilterBefore: 在某过滤器之前添加 filter</span><br><span class="line">addFilterAfter：在某过滤器之后添加 filter</span><br><span class="line">addFilterAt：在某过滤器相同位置添加 filter，不会覆盖相同位置的 filter</span><br><span class="line">hasRole：结合 antMatchers 一起使用，设置请求允许访问的角色权限或IP，如：</span><br><span class="line">.antMatchers(&quot;/admin/**&quot;).hasAnyRole(&quot;ROLE_ADMIN&quot;,&quot;ROLE_USER&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">access(String)        </span><br><span class="line"></span><br><span class="line">SpringEL表达式结果为true时可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">anonymous()        </span><br><span class="line"></span><br><span class="line">匿名可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">denyAll()        </span><br><span class="line"></span><br><span class="line">用户不可以访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fullyAuthenticated()        </span><br><span class="line"></span><br><span class="line">用户完全认证访问（非remember me下自动登录）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hasAnyAuthority(String…)        </span><br><span class="line"></span><br><span class="line">参数中任意权限可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hasAnyRole(String…)        </span><br><span class="line"></span><br><span class="line">参数中任意角色可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hasAuthority(String)        </span><br><span class="line"></span><br><span class="line">某一权限的用户可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hasRole(String)        </span><br><span class="line"></span><br><span class="line">某一角色的用户可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">permitAll()        </span><br><span class="line"></span><br><span class="line">所有用户可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rememberMe()        </span><br><span class="line"></span><br><span class="line">允许通过remember me登录的用户访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">authenticated()        </span><br><span class="line"></span><br><span class="line">用户登录后可访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hasIpAddress(String)        </span><br><span class="line"></span><br><span class="line">用户来自参数中的IP可访问</span><br></pre></td></tr></table></figure><h4 id="13-PasswordEncoder"><a href="#13-PasswordEncoder" class="headerlink" title="13.    PasswordEncoder"></a>13.    PasswordEncoder</h4><p>Spring 提供的一个用于对密码加密的接口，首选实现类为 BCryptPasswordEncoder </p><h4 id="14-BCryptPasswordEncoder"><a href="#14-BCryptPasswordEncoder" class="headerlink" title="14.    BCryptPasswordEncoder"></a>14.    BCryptPasswordEncoder</h4><p>spring security中的BCryptPasswordEncoder方法采用SHA-256 +随机盐+密钥  对密码进行加密。SHA系列是Hash算法，不是加密算法，使用加密算法意味着可以解密（这个与编码/解码一样），但是采用Hash处理，其过程是不可逆的。</p><ul><li>（1）加密(encode)：注册用户时，使用SHA-256+随机盐+密钥把用户输入的密码进行hash处理，得到密码的hash值，然后将其存入数据库中。</li><li>（2）密码匹配(matches)：用户登录时，密码匹配阶段并没有进行密码解密（因为密码经过Hash处理，是不可逆的），而是使用相同的算法把用户输入的密码进行hash处理，得到密码的hash值，然后将其与从数据库中查询到的密码hash值进行比较。如果两者相同，说明用户输入的密码正确。<br>这正是为什么处理密码时要用hash算法，而不用加密算法。因为这样处理即使数据库泄漏，黑客也很难破解密码</li></ul><h2 id="6-5-授权原理-AOP-MethodSecurityInterceptor"><a href="#6-5-授权原理-AOP-MethodSecurityInterceptor" class="headerlink" title="6.5 授权原理-AOP-MethodSecurityInterceptor"></a>6.5 授权原理-AOP-MethodSecurityInterceptor</h2><p>MethodSecurityInterceptor（基于AOP模式进行权限检查）</p><ul><li>授权（权限检查机制）采用AOP机制：<br>org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor</li><li>方法执行前org.springframework.security.access.AccessDecisionManager通过投票机制决定这个方法是否可以被执行</li></ul><h3 id="6-5-1-例如"><a href="#6-5-1-例如" class="headerlink" title="6.5.1 例如"></a>6.5.1 例如</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PreAuthorize(value=&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;luohan&apos;)&quot;)</span><br><span class="line">@GetMapping(&quot;/level1/1&quot;)</span><br><span class="line">public String leve1Page1()&#123;</span><br><span class="line">return &quot;/level1/1&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-2-拦截器invoke方法"><a href="#6-5-2-拦截器invoke方法" class="headerlink" title="6.5.2 拦截器invoke方法"></a>6.5.2 拦截器invoke方法</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000014.png" alt></p><h3 id="6-5-3-支持各种功能的投票器"><a href="#6-5-3-支持各种功能的投票器" class="headerlink" title="6.5.3 支持各种功能的投票器"></a>6.5.3 支持各种功能的投票器</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000037.png" alt></p><h3 id="6-5-4-投票器标识"><a href="#6-5-4-投票器标识" class="headerlink" title="6.5.4 投票器标识"></a>6.5.4 投票器标识</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000117.png" alt></p><h3 id="6-5-5-AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作："><a href="#6-5-5-AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作：" class="headerlink" title="6.5.5 AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作："></a>6.5.5 AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作：</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000139.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）AffirmativeBased：有一个拒绝都不行</span><br><span class="line">2）ConsensusBased：赞成票数大于拒绝即可</span><br><span class="line">3）UnanimousBased：至少有一个赞成，不能全弃权和任何一个拒绝</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-SpringSecurity-简介&quot;&gt;&lt;a href=&quot;#第一章-SpringSecurity-简介&quot; class=&quot;headerlink&quot; title=&quot;第一章 SpringSecurity-简介&quot;&gt;&lt;/a&gt;第一章 SpringSecurity-简介&lt;/
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="使用过的开源框架" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端_Bootstrap框架概述</title>
    <link href="http://yoursite.com/2018/04/04/67.%20%E5%89%8D%E7%AB%AF_Bootstrap%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/04/04/67. 前端_Bootstrap框架概述/</id>
    <published>2018-04-03T16:00:00.000Z</published>
    <updated>2019-06-08T15:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>基本页面开发</li><li>了解相关组件</li><li>字体图标</li><li>模态窗口</li><li>表单</li><li>…</li></ul><h1 id="第一章-介绍"><a href="#第一章-介绍" class="headerlink" title="第一章 介绍"></a>第一章 介绍</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><ul><li>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。</li><li>Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。 </li><li>为什么使用 Bootstrap？<ul><li>1、移动设备优先：自 Bootstrap 3 起，框架包含了贯穿于整个库的移动设备优先的样式。</li><li>2、浏览器支持：所有的主流浏览器都支持 Bootstrap。</li></ul></li><li>Internet Explorer、 Firefox 、Opera 、Google Chrome、 Safari <ul><li>3、容易上手：只要您具备 HTML 和 CSS 的基础知识，您就可以开始学习 Bootstrap。</li><li>4、响应式设计：Bootstrap 的响应式 CSS 能够自适应于台式机、平板电脑和手机。更多有关响应式设计的内容详见 Bootstrap 响应式设计。 </li></ul></li></ul><h2 id="1-2-HelloWorld-响应式布局"><a href="#1-2-HelloWorld-响应式布局" class="headerlink" title="1.2 HelloWorld(响应式布局)"></a>1.2 HelloWorld(响应式布局)</h2><h3 id="1-2-1-下载和导入bootstrap框架"><a href="#1-2-1-下载和导入bootstrap框架" class="headerlink" title="1.2.1 下载和导入bootstrap框架"></a>1.2.1 下载和导入bootstrap框架</h3><h3 id="1-2-2-显示案例"><a href="#1-2-2-显示案例" class="headerlink" title="1.2.2 显示案例"></a>1.2.2 显示案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Bootstrap 实例&lt;/title&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;  </span><br><span class="line">  &lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;jumbotron&quot;&gt;&lt;!--超大屏幕--&gt;</span><br><span class="line">    &lt;h1&gt;我的第一个 Bootstrap 页面&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;重置窗口大小，查看响应式效果！&lt;/p&gt; </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class="line">      &lt;h3&gt;第一列&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class="line">      &lt;h3&gt;第二列&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class="line">      &lt;h3&gt;第三列&lt;/h3&gt;        </span><br><span class="line">      &lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="第二章-bootstrap基本使用"><a href="#第二章-bootstrap基本使用" class="headerlink" title="第二章 bootstrap基本使用"></a>第二章 bootstrap基本使用</h1><h2 id="2-1-表格"><a href="#2-1-表格" class="headerlink" title="2.1 表格"></a>2.1 表格</h2><p><a href="https://v3.bootcss.com/css/#tables" target="_blank" rel="noopener">https://v3.bootcss.com/css/#tables</a></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205611.png" alt></p><h2 id="2-2-表单"><a href="#2-2-表单" class="headerlink" title="2.2 表单"></a>2.2 表单</h2><p><a href="https://v3.bootcss.com/css/?#forms" target="_blank" rel="noopener">https://v3.bootcss.com/css/?#forms</a></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205744.png" alt></p><h2 id="2-3-按钮"><a href="#2-3-按钮" class="headerlink" title="2.3 按钮"></a>2.3 按钮</h2><p><a href="https://v3.bootcss.com/css/?#buttons" target="_blank" rel="noopener">https://v3.bootcss.com/css/?#buttons</a></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205813.png" alt></p><h2 id="2-4-图标"><a href="#2-4-图标" class="headerlink" title="2.4 图标"></a>2.4 图标</h2><p><a href="https://v3.bootcss.com/components/#glyphicons-examples" target="_blank" rel="noopener">https://v3.bootcss.com/components/#glyphicons-examples</a></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205836.png" alt></p><h2 id="2-5-栅-shan-格系统"><a href="#2-5-栅-shan-格系统" class="headerlink" title="2.5 栅(shan)格系统"></a>2.5 栅(shan)格系统</h2><ul><li>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</li><li>它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局。</li></ul><p><a href="https://v3.bootcss.com/css/" target="_blank" rel="noopener">https://v3.bootcss.com/css/</a> </p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205911.png" alt></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205949.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 原生页面写好，导入框架，只需要给相应的元素加上相应的class值就会有相应的效果 --&gt;</span><br><span class="line">&lt;!-- 所有东西都放在这个容器中，容器就是大网格 --&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;div class=&quot;jumbotron&quot;&gt;</span><br><span class="line">&lt;h1&gt;我的第一个 Bootstrap 页面&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;重置窗口大小，查看响应式效果！&lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;btn01&quot; class=&quot;btn btn-primary&quot;&gt;哈哈&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 里面的东西放在一行 --&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-12 col-sm-4 col-md-6&quot;&gt;</span><br><span class="line">&lt;h3&gt;第一列&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class="line">&lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-12 col-sm-4 col-md-6&quot;&gt;</span><br><span class="line">&lt;h3&gt;第二列&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class="line">&lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-12 col-sm-4 col-md-6&quot;&gt;</span><br><span class="line">&lt;h3&gt;第三列&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class="line">&lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="2-6-导航"><a href="#2-6-导航" class="headerlink" title="2.6 导航"></a>2.6 导航</h2><p><a href="https://v3.bootcss.com/components/#navbar-default" target="_blank" rel="noopener">https://v3.bootcss.com/components/#navbar-default</a></p><h2 id="2-7-分页"><a href="#2-7-分页" class="headerlink" title="2.7 分页"></a>2.7 分页</h2><p><a href="https://v3.bootcss.com/components/#pagination" target="_blank" rel="noopener">https://v3.bootcss.com/components/#pagination</a></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210226.png" alt></p><h1 id="第三章-Layer弹层插件"><a href="#第三章-Layer弹层插件" class="headerlink" title="第三章 Layer弹层插件"></a>第三章 Layer弹层插件</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><blockquote><p>layer是一款近年来备受青睐的web弹层组件，她具备全方位的解决方案，致力于服务各水平段的开发人员，您的页面会轻松地拥有丰富友好的操作体验。</p></blockquote><h2 id="3-2-下载"><a href="#3-2-下载" class="headerlink" title="3.2 下载"></a>3.2 下载</h2><p><a href="http://layer.layui.com/hello.html" target="_blank" rel="noopener">http://layer.layui.com/hello.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;开始使用layer&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt; </span><br><span class="line">  </span><br><span class="line">  &lt;script src=&quot;jQuery的路径&quot;&gt;&lt;/script&gt; &lt;!-- 你必须先引入jQuery1.8或以上版本 --&gt;</span><br><span class="line">  &lt;script src=&quot;layer.js的路径&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  </span><br><span class="line">  //弹出一个提示层</span><br><span class="line">  $(&apos;#test1&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    layer.msg(&apos;hello&apos;);</span><br><span class="line">  &#125;);  </span><br><span class="line">  </span><br><span class="line">  //弹出一个页面层</span><br><span class="line">  $(&apos;#test2&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    layer.open(&#123;</span><br><span class="line">      type: 1,</span><br><span class="line">      area: [&apos;600px&apos;, &apos;360px&apos;],</span><br><span class="line">      shadeClose: true, //点击遮罩关闭</span><br><span class="line">      content: &apos;\&lt;\div style=&quot;padding:20px;&quot;&gt;自定义内容\&lt;\/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);  </span><br><span class="line">  </span><br><span class="line">  //弹出一个loading层</span><br><span class="line">  $(&apos;#test4&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    var ii = layer.load();</span><br><span class="line">    //此处用setTimeout演示ajax的回调</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">      layer.close(ii);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;);  </span><br><span class="line">  </span><br><span class="line">  //弹出一个tips层</span><br><span class="line">  $(&apos;#test5&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    layer.tips(&apos;Hello tips!&apos;, &apos;#test5&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-不同的浏览器显示的提示框样子不同-不统一"><a href="#3-3-不同的浏览器显示的提示框样子不同-不统一" class="headerlink" title="3.3 不同的浏览器显示的提示框样子不同,不统一."></a>3.3 不同的浏览器显示的提示框样子不同,不统一.</h2><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210420.png" alt></p><h2 id="3-4-常用的弹层："><a href="#3-4-常用的弹层：" class="headerlink" title="3.4 常用的弹层："></a>3.4 常用的弹层：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer-v3.0.1.zip</span><br></pre></td></tr></table></figure><h3 id="3-4-1-提示"><a href="#3-4-1-提示" class="headerlink" title="3.4.1 提示"></a>3.4.1 提示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">layer.msg(提示信息, &#123;time:1000, icon:5, shift:6&#125;, 回调方法); //弹出时间，图标，特效</span><br><span class="line">layer.alert(提示信息, function(index)&#123;</span><br><span class="line">// 回调方法</span><br><span class="line">layer.close(index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-4-2-询问"><a href="#3-4-2-询问" class="headerlink" title="3.4.2 询问"></a>3.4.2 询问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">layer.confirm(&quot;询问信息&quot;,  &#123;icon: 3, title:&apos;提示&apos;&#125;, function(cindex)&#123;</span><br><span class="line">layer.close(cindex);</span><br><span class="line">&#125;, function(cindex)&#123;</span><br><span class="line">layer.close(cindex);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-4-3-加载"><a href="#3-4-3-加载" class="headerlink" title="3.4.3 加载"></a>3.4.3 加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var loadingIndex = layer.msg(&apos;处理中&apos;, &#123;icon: 16&#125;);</span><br><span class="line">...</span><br><span class="line">layer.close(loadingIndex); </span><br><span class="line">var index = layer.load(2, &#123;time: 10*1000&#125;);</span><br><span class="line">layer.close(index);</span><br></pre></td></tr></table></figure><h3 id="3-5-小图标"><a href="#3-5-小图标" class="headerlink" title="3.5 小图标"></a>3.5 小图标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">time:1000 显示时间</span><br><span class="line">icon:5 图标</span><br><span class="line">shift:6  抖动效果</span><br><span class="line">icon.png</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210719.png" alt></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210811.png" alt></p><h2 id="3-6-使用layer弹层完成提示消息"><a href="#3-6-使用layer弹层完成提示消息" class="headerlink" title="3.6 使用layer弹层完成提示消息"></a>3.6 使用layer弹层完成提示消息</h2><h3 id="3-6-1-拷贝组件到项目中"><a href="#3-6-1-拷贝组件到项目中" class="headerlink" title="3.6.1 拷贝组件到项目中"></a>3.6.1 拷贝组件到项目中</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210903.png" alt></p><h3 id="3-6-2-在页面中引用组件-WEB-INF-jsp-login-jsp"><a href="#3-6-2-在页面中引用组件-WEB-INF-jsp-login-jsp" class="headerlink" title="3.6.2 在页面中引用组件/WEB-INF/jsp/login.jsp"></a>3.6.2 在页面中引用组件/WEB-INF/jsp/login.jsp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;$&#123;APP_PATH&#125;/jquery/layer/layer.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-6-3-代码参考"><a href="#3-6-3-代码参考" class="headerlink" title="3.6.3 代码参考"></a>3.6.3 代码参考</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(loginacct.val() == &quot;&quot;)&#123;</span><br><span class="line">            //alert(&quot;登录账号不能为空,请重新输入!&quot;);//alert,confirm方法会暂停UI线程</span><br><span class="line">            layer.msg(&quot;登录账号不能为空,请重新输入!&quot;, &#123;time:2000, icon:5, shift:6&#125;, function()&#123;</span><br><span class="line">                    loginacct.focus();</span><br><span class="line">                    //return ; 只是返回当前回调函数，单击事件函数并没有返回，代码继续往下执行</span><br><span class="line">            &#125;); //弹出时间，图标，特效                    </span><br><span class="line">            return ;//单击事件函数返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基本页面开发&lt;/li&gt;
&lt;li&gt;了解相关组件&lt;/li&gt;
&lt;li&gt;字体图标&lt;/li&gt;
&lt;li&gt;模态窗口&lt;/li&gt;
&lt;li&gt;表单&lt;/
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="使用过的开源框架" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统整体解决方案_Spring Cloud框架</title>
    <link href="http://yoursite.com/2018/04/01/66.%20%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%95%B4%E4%BD%93%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88_Spring%20Cloud%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/04/01/66. 分布式系统整体解决方案_Spring Cloud框架/</id>
    <published>2018-03-31T16:00:00.000Z</published>
    <updated>2019-06-08T15:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-SpringCloud介绍"><a href="#第一章-SpringCloud介绍" class="headerlink" title="第一章 SpringCloud介绍"></a>第一章 SpringCloud介绍</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><ul><li>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</li><li>“微服务架构”在这几年非常的火热，以至于关于微服务架构相关的开源产品被反复的提及（比如：netflix、dubbo），Spring Cloud也因Spring社区的强大知名度和影响力也被广大架构师与开发者备受关注。</li><li>那么什么是“微服务架构”呢？简单的说，微服务架构就是将一个完整的应用从数据存储开始垂直拆分成多个不同的服务，每个服务都能独立部署、独立维护、独立扩展，服务与服务间通过诸如RESTful API的方式互相调用。</li></ul><h2 id="1-2-为什么使用Spring-Cloud？"><a href="#1-2-为什么使用Spring-Cloud？" class="headerlink" title="1.2 为什么使用Spring Cloud？"></a>1.2 为什么使用Spring Cloud？</h2><p>Spring Cloud对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用Spring Cloud一站式解决方案能在从容应对业务发展的同时大大减少开发成本。同时，随着近几年微服务架构和Docker容器概念的火爆，也会让Spring Cloud在未来越来越“云”化的软件开发风格中立有一席之地，尤其是在目前五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能会堪比当前Servlet规范的诞生，有效推进服务端软件系统技术水平的进步。</p><h2 id="1-3-应用Spring-Cloud"><a href="#1-3-应用Spring-Cloud" class="headerlink" title="1.3 应用Spring Cloud"></a>1.3 应用Spring Cloud</h2><blockquote><p>Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。 </p></blockquote><h2 id="1-4-Spring-Cloud是分布式系统的整体解决方案"><a href="#1-4-Spring-Cloud是分布式系统的整体解决方案" class="headerlink" title="1.4 Spring Cloud是分布式系统的整体解决方案"></a>1.4 Spring Cloud是分布式系统的整体解决方案</h2><ul><li>SpringBoot&amp;Spring什么关系？<br>SpringBoot底层就是Spring，简化使用Spring的方式而已，多加了好多的自动配置； </li><li>Spring Cloud&amp;SpringBoot什么关系？<br>Spring Cloud是分布式系统的整体解决方案，底层用的SpringBoot来构建项目，Cloud新增很多的分布式的starter，包括这些starter的自动配置；<h2 id="1-5-官方网站"><a href="#1-5-官方网站" class="headerlink" title="1.5 官方网站"></a>1.5 官方网站</h2><a href="http://spring.io/projects" target="_blank" rel="noopener">http://spring.io/projects</a><br><a href="https://projects.spring.io/spring-cloud/#quick-start" target="_blank" rel="noopener">https://projects.spring.io/spring-cloud/#quick-start</a><br><a href="https://springcloud.cc/" target="_blank" rel="noopener">https://springcloud.cc/</a><h1 id="第二章-SpringCloud-HelloWorld架构图"><a href="#第二章-SpringCloud-HelloWorld架构图" class="headerlink" title="第二章 SpringCloud-HelloWorld架构图"></a>第二章 SpringCloud-HelloWorld架构图</h1><h2 id="2-1-案例图解"><a href="#2-1-案例图解" class="headerlink" title="2.1 案例图解"></a>2.1 案例图解</h2></li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531105740.png" alt></p><p>默认使用轮询策略</p><h2 id="2-2-注册中心"><a href="#2-2-注册中心" class="headerlink" title="2.2 注册中心"></a>2.2 注册中心</h2><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531105823.png" alt></p><p>配置Region和Zone</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531105853.png" alt></p><blockquote><p>Region和Zone就相当于大区和机房，一个Region（大区）可以有很多的Zone（机房）<br>。在Spring Cloud中，服务消费者会优先查找在同一个Zone的服务，之后在去查找其他的服务。<br>如果该项配置使用的好，那么项目请求的响应时间将大大缩短！</p></blockquote><h1 id="第三章-SpringCloud-HelloWorld案例开发-注册中心"><a href="#第三章-SpringCloud-HelloWorld案例开发-注册中心" class="headerlink" title="第三章 SpringCloud-HelloWorld案例开发-注册中心"></a>第三章 SpringCloud-HelloWorld案例开发-注册中心</h1><h2 id="3-1-注册中心"><a href="#3-1-注册中心" class="headerlink" title="3.1 注册中心"></a>3.1 注册中心</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（Eureka , jar工程）-cloud-eureka-registry-center</span><br></pre></td></tr></table></figure><h3 id="3-1-1-引入eureka-server"><a href="#3-1-1-引入eureka-server" class="headerlink" title="3.1.1 引入eureka-server"></a>3.1.1 引入eureka-server</h3><h3 id="3-1-2-编写application-yml"><a href="#3-1-2-编写application-yml" class="headerlink" title="3.1.2 编写application.yml"></a>3.1.2 编写application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-eureka-registry-center</span><br><span class="line"> </span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false #自己就是注册中心，不用注册自己</span><br><span class="line">    fetch-registry: false #要不要去注册中心获取其他服务的地址</span><br><span class="line">    service-url:</span><br><span class="line">       defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><p>多服务的话需要 etch-registry: true    A获取B的服务列表</p><h3 id="3-1-3-开启Eureka注册中心功能；-EnableEurekaServer-启用注册中心服务器"><a href="#3-1-3-开启Eureka注册中心功能；-EnableEurekaServer-启用注册中心服务器" class="headerlink" title="3.1.3 开启Eureka注册中心功能；@EnableEurekaServer 启用注册中心服务器"></a>3.1.3 开启Eureka注册中心功能；@EnableEurekaServer 启用注册中心服务器</h3><h2 id="3-1-4-测试"><a href="#3-1-4-测试" class="headerlink" title="3.1.4 测试"></a>3.1.4 测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Boot Dashboard视图启动</span><br><span class="line">访问http://localhost:8761</span><br></pre></td></tr></table></figure><h1 id="第四章-SpringCloud-HelloWorld案例开发-电影服务"><a href="#第四章-SpringCloud-HelloWorld案例开发-电影服务" class="headerlink" title="第四章 SpringCloud-HelloWorld案例开发-电影服务"></a>第四章 SpringCloud-HelloWorld案例开发-电影服务</h1><h2 id="4-1-电影服务"><a href="#4-1-电影服务" class="headerlink" title="4.1 电影服务"></a>4.1 电影服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（jar工程，提供查询电影功能）cloud-provider-movie</span><br></pre></td></tr></table></figure><h3 id="4-1-1-引入eureka-Discovery、web模块"><a href="#4-1-1-引入eureka-Discovery、web模块" class="headerlink" title="4.1.1 引入eureka-Discovery、web模块"></a>4.1.1 引入eureka-Discovery、web模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="4-1-2-创建Movie实体类-增加id-movieName属性"><a href="#4-1-2-创建Movie实体类-增加id-movieName属性" class="headerlink" title="4.1.2 创建Movie实体类,增加id,movieName属性"></a>4.1.2 创建Movie实体类,增加id,movieName属性</h2><h2 id="4-1-3-创建MovieDao"><a href="#4-1-3-创建MovieDao" class="headerlink" title="4.1.3 创建MovieDao"></a>4.1.3 创建MovieDao</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class MovieDao &#123;</span><br><span class="line">public Movie getNewMovie()&#123;</span><br><span class="line">Movie movie = new Movie();</span><br><span class="line">movie.setId(1);</span><br><span class="line">movie.setMovieName(&quot;战狼&quot;);</span><br><span class="line">return movie; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">4.1.4 创建MovieService</span><br><span class="line">@Service</span><br><span class="line">public class MovieService &#123; </span><br><span class="line">@Autowired</span><br><span class="line">MovieDao movieDao; </span><br><span class="line">public Movie getNewMovie()&#123;</span><br><span class="line">return movieDao.getNewMovie();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">4.1.5 创建MovieController</span><br><span class="line">@RestController</span><br><span class="line">public class MovieController &#123;</span><br><span class="line"> </span><br><span class="line">@Autowired</span><br><span class="line">MovieService movieService;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">   * 获取最新电影</span><br><span class="line">   */</span><br><span class="line">@GetMapping(&quot;/movie&quot;)</span><br><span class="line">public Movie getNewMovie()&#123;</span><br><span class="line">return movieService.getNewMovie();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-6-启动测试"><a href="#4-1-6-启动测试" class="headerlink" title="4.1.6 启动测试"></a>4.1.6 启动测试</h3><p><a href="http://localhost:8080，与注册中心无关，注册中心无此服务" target="_blank" rel="noopener">http://localhost:8080，与注册中心无关，注册中心无此服务</a></p><h3 id="4-1-7-编写application-yml"><a href="#4-1-7-编写application-yml" class="headerlink" title="4.1.7 编写application.yml"></a>4.1.7 编写application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-provider-movie</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 8000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 指定注册到哪个注册中心</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true #注册自己服务使用ip的方式</span><br></pre></td></tr></table></figure><h3 id="4-1-8-将自己自动注册到注册中心-EnableDiscoveryClient"><a href="#4-1-8-将自己自动注册到注册中心-EnableDiscoveryClient" class="headerlink" title="4.1.8 将自己自动注册到注册中心@EnableDiscoveryClient"></a>4.1.8 将自己自动注册到注册中心@EnableDiscoveryClient</h3><h3 id="4-1-9-启动注册中心和服务"><a href="#4-1-9-启动注册中心和服务" class="headerlink" title="4.1.9 启动注册中心和服务"></a>4.1.9 启动注册中心和服务</h3><p>查看注册中心，访问服务 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a></p><h1 id="第五章-SpringCloud-HelloWorld案例开发-用户服务"><a href="#第五章-SpringCloud-HelloWorld案例开发-用户服务" class="headerlink" title="第五章 SpringCloud-HelloWorld案例开发-用户服务"></a>第五章 SpringCloud-HelloWorld案例开发-用户服务</h1><p>##5.1 用户服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（jar工程，提供查询用户，买电影票功能）cloud-consumer-user</span><br></pre></td></tr></table></figure><h3 id="5-1-1-引入eureka-Discovery、web模块"><a href="#5-1-1-引入eureka-Discovery、web模块" class="headerlink" title="5.1.1 引入eureka-Discovery、web模块"></a>5.1.1 引入eureka-Discovery、web模块</h3><h3 id="5-1-2-创建User实体类-增加id-userName属性"><a href="#5-1-2-创建User实体类-增加id-userName属性" class="headerlink" title="5.1.2 创建User实体类,增加id,userName属性"></a>5.1.2 创建User实体类,增加id,userName属性</h3><h3 id="5-1-3-创建UserDao"><a href="#5-1-3-创建UserDao" class="headerlink" title="5.1.3 创建UserDao"></a>5.1.3 创建UserDao</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public class UserDao &#123;</span><br><span class="line">public User getUser(Integer id)&#123;</span><br><span class="line">User user = new User();</span><br><span class="line">user.setId(id);</span><br><span class="line">user.setUserName(&quot;张三&quot;);</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-4-创建UserService"><a href="#5-1-4-创建UserService" class="headerlink" title="5.1.4 创建UserService"></a>5.1.4 创建UserService</h3><p>拷贝Movie类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"> </span><br><span class="line">@Autowired</span><br><span class="line">UserDao userDao;</span><br><span class="line"> </span><br><span class="line">public User getUserById(Integer id)&#123;</span><br><span class="line">User user = userDao.getUser(id);</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">   * 购买最新的电影票</span><br><span class="line">   * 传入用户id</span><br><span class="line">   */</span><br><span class="line">@HystrixCommand(fallbackMethod=&quot;hystrix&quot;)</span><br><span class="line">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class="line">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class="line">//1、查询用户信息</span><br><span class="line">User user = getUserById(id);</span><br><span class="line">//2、查到最新电影票  </span><br><span class="line">result.put(&quot;user&quot;, user);</span><br><span class="line">result.put(&quot;movie&quot;, null);//暂时为null</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">5.1.5 创建UserController</span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"> </span><br><span class="line">@Autowired</span><br><span class="line">UserService userService;</span><br><span class="line"> </span><br><span class="line">@GetMapping(&quot;/user&quot;)</span><br><span class="line">public User getUser(@RequestParam(&quot;id&quot;)Integer id)&#123;</span><br><span class="line">User user = userService.getUserById(id);</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@GetMapping(&quot;/buyMovie&quot;)</span><br><span class="line">public Map&lt;String, Object&gt; buyMovie(@RequestParam(&quot;id&quot;)Integer userid)&#123;</span><br><span class="line">Map&lt;String, Object&gt; map = userService.buyMovie(id);</span><br><span class="line">return map;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-6-编写application-yml"><a href="#5-1-6-编写application-yml" class="headerlink" title="5.1.6 编写application.yml"></a>5.1.6 编写application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-user</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 9000</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true #注册中心保存我的ip</span><br></pre></td></tr></table></figure><h3 id="5-1-7-将自己自动注册到注册中心"><a href="#5-1-7-将自己自动注册到注册中心" class="headerlink" title="5.1.7 将自己自动注册到注册中心"></a>5.1.7 将自己自动注册到注册中心</h3><p>@EnableDiscoveryClient</p><h3 id="5-1-8-启动注册中心和服务，查看注册中心，访问服务"><a href="#5-1-8-启动注册中心和服务，查看注册中心，访问服务" class="headerlink" title="5.1.8 启动注册中心和服务，查看注册中心，访问服务"></a>5.1.8 启动注册中心和服务，查看注册中心，访问服务</h3><p><a href="http://localhost:9000/user?id=1" target="_blank" rel="noopener">http://localhost:9000/user?id=1</a><br><a href="http://localhost:9000/buyMovie?id=1" target="_blank" rel="noopener">http://localhost:9000/buyMovie?id=1</a></p><h1 id="第六章-SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate"><a href="#第六章-SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate" class="headerlink" title="第六章 SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate"></a>第六章 SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate</h1><h2 id="6-1-Ribbon负载均衡"><a href="#6-1-Ribbon负载均衡" class="headerlink" title="6.1 Ribbon负载均衡"></a>6.1 Ribbon负载均衡</h2><p>可以用于远程调用（用户服务 调用  电影服务 项目）  </p><h3 id="如何使用Ribbon"><a href="#如何使用Ribbon" class="headerlink" title="如何使用Ribbon"></a>如何使用Ribbon</h3><p>1）、引入Ribbon的Starter<br>2）、配置使用Ribbon功能；底层使用 RestTemplate 的工具来给远程发送请求</p><h3 id="6-1-1-用户服务项目中引入Ribbon"><a href="#6-1-1-用户服务项目中引入Ribbon" class="headerlink" title="6.1.1 用户服务项目中引入Ribbon"></a>6.1.1 用户服务项目中引入Ribbon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入ribbon实现远程调用和负载均衡功能 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531135849.png" alt></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531135918.png" alt></p><h3 id="6-1-2-RestTemplate"><a href="#6-1-2-RestTemplate" class="headerlink" title="6.1.2 RestTemplate"></a>6.1.2 RestTemplate</h3><p>给容器中注入一个RestTemplate并使用Ribbon进行负载均衡调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@LoadBalanced   //负载均衡</span><br><span class="line">@Bean</span><br><span class="line">public RestTemplate restTemplate()&#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-3-使用RestTemplate远程调用（UserService中完善代码）"><a href="#6-1-3-使用RestTemplate远程调用（UserService中完善代码）" class="headerlink" title="6.1.3 使用RestTemplate远程调用（UserService中完善代码）"></a>6.1.3 使用RestTemplate远程调用（UserService中完善代码）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line">/**</span><br><span class="line"> * 购买最新的电影票</span><br><span class="line"> * 传入用户id</span><br><span class="line"> */</span><br><span class="line">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class="line">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class="line">//1、查询用户信息</span><br><span class="line">User user = getUserById(id);</span><br><span class="line">//2、查到最新电影票  restTemplate使用java代码来模拟发请求</span><br><span class="line">Movie movie = restTemplate.getForObject(&quot;http://CLOUD-PROVIDER-MOVIE/movie&quot;, Movie.class);</span><br><span class="line"> </span><br><span class="line">result.put(&quot;user&quot;, user);</span><br><span class="line">result.put(&quot;movie&quot;, movie);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-4-启动注册中心和服务，访问服务"><a href="#6-1-4-启动注册中心和服务，访问服务" class="headerlink" title="6.1.4 启动注册中心和服务，访问服务"></a>6.1.4 启动注册中心和服务，访问服务</h3><p><a href="http://localhost:9000/buyMovie?id=1" target="_blank" rel="noopener">http://localhost:9000/buyMovie?id=1</a><br>显示用户和电影信息</p><h3 id="6-1-5-在电影服务（MovieService-类）中打印服务端口，方便监控服务执行情况。"><a href="#6-1-5-在电影服务（MovieService-类）中打印服务端口，方便监控服务执行情况。" class="headerlink" title="6.1.5 在电影服务（MovieService 类）中打印服务端口，方便监控服务执行情况。"></a>6.1.5 在电影服务（MovieService 类）中打印服务端口，方便监控服务执行情况。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">private String port;</span><br><span class="line"> </span><br><span class="line">public Movie getNewMovie()&#123;</span><br><span class="line">System.out.println(&quot;当前电影服务的端口：&quot;+port);</span><br><span class="line">return movieDao.getNewMovie();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-6-将电影服务项目启动多次，测试负载均衡"><a href="#6-1-6-将电影服务项目启动多次，测试负载均衡" class="headerlink" title="6.1.6 将电影服务项目启动多次，测试负载均衡"></a>6.1.6 将电影服务项目启动多次，测试负载均衡</h3><p> <a href="http://localhost:9000/buyMovie?id=1" target="_blank" rel="noopener">http://localhost:9000/buyMovie?id=1</a> </p><ul><li>打jar包方式运行 </li><li>java -jar xxx.jar –server.port=8000</li><li>java -jar xxx.jar –server.port=8001</li><li>java -jar xxx.jar –server.port=8002</li><li>IDE工具中方式运行</li></ul><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531140438.png" alt></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531140459.png" alt></p><h1 id="第七章-SpringCloud-HelloWorld案例开发-Feign-声明式调用"><a href="#第七章-SpringCloud-HelloWorld案例开发-Feign-声明式调用" class="headerlink" title="第七章 SpringCloud-HelloWorld案例开发-Feign-声明式调用"></a>第七章 SpringCloud-HelloWorld案例开发-Feign-声明式调用</h1><h2 id="7-1-Feign声明式调用"><a href="#7-1-Feign声明式调用" class="headerlink" title="7.1  Feign声明式调用"></a>7.1  Feign声明式调用</h2><h2 id="7-2-创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块"><a href="#7-2-创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块" class="headerlink" title="7.2  创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块"></a>7.2  创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="7-2-1开启-EnableDiscoveryClient服务发现"><a href="#7-2-1开启-EnableDiscoveryClient服务发现" class="headerlink" title="7.2.1开启@EnableDiscoveryClient服务发现"></a>7.2.1开启@EnableDiscoveryClient服务发现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1、引入feign的starter</span><br><span class="line"> * 2、写一个接口，和被调用的服务关联起来</span><br><span class="line"> * 3、开启Feign功能;@EnableFeignClients</span><br><span class="line"> */</span><br><span class="line">@EnableFeignClients</span><br><span class="line">@EnableDiscoveryClient </span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class CloudConsumerUserFeignApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(CloudConsumerUserFeignApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-2-编写application-yml"><a href="#7-2-2-编写application-yml" class="headerlink" title="7.2.2 编写application.yml"></a>7.2.2 编写application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-user-feign</span><br><span class="line">    </span><br><span class="line">server:</span><br><span class="line">  port: 7000</span><br><span class="line">  </span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true #注册中心保存我的ip</span><br><span class="line">    </span><br><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true #开启feign整合hystrix进行服务熔断功能</span><br></pre></td></tr></table></figure><h3 id="7-2-3-复制用户服务项目的代码：实体类，Dao，Service，Controller"><a href="#7-2-3-复制用户服务项目的代码：实体类，Dao，Service，Controller" class="headerlink" title="7.2.3 复制用户服务项目的代码：实体类，Dao，Service，Controller"></a>7.2.3 复制用户服务项目的代码：实体类，Dao，Service，Controller</h3><h3 id="7-2-4-将RestTemplate方式改成Feign方式进行远程调用"><a href="#7-2-4-将RestTemplate方式改成Feign方式进行远程调用" class="headerlink" title="7.2.4 将RestTemplate方式改成Feign方式进行远程调用"></a>7.2.4 将RestTemplate方式改成Feign方式进行远程调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.feign;</span><br><span class="line"> </span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"> </span><br><span class="line">import com.atguigu.bean.Movie;</span><br><span class="line">import com.atguigu.feign.exception.MovieFeignExceptionHandlerService;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 调用指定服务名称 “CLOUD-PROVIDER-MOVIE” 的 @GetMapping(&quot;/movie&quot;) 映射方法</span><br><span class="line"> * 这个方法声明与电影服务端Controller映射的方法声明一致即可。</span><br><span class="line"> */</span><br><span class="line">@FeignClient(value=&quot;CLOUD-PROVIDER-MOVIE&quot;) //与被调用端的服务名称一致</span><br><span class="line">public interface MovieServiceFeign &#123; </span><br><span class="line">@GetMapping(&quot;/movie&quot;)</span><br><span class="line">public Movie getNewMovie(); //与被调用服务端的映射方法一致 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-5-修改UserService-代码"><a href="#7-2-5-修改UserService-代码" class="headerlink" title="7.2.5 修改UserService 代码"></a>7.2.5 修改UserService 代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"> </span><br><span class="line">@Autowired</span><br><span class="line">UserDao userDao;</span><br><span class="line"> </span><br><span class="line">//面向接口编程</span><br><span class="line">@Autowired</span><br><span class="line">MovieServiceFeign movieServiceFeign; //调用Feign接口；其实就是调用远程服务</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 购买最新的电影票</span><br><span class="line"> * 传入用户id</span><br><span class="line">   */</span><br><span class="line">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class="line">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class="line">//1、查询用户信息</span><br><span class="line">User userById = getUserById(id);</span><br><span class="line">//2、查到最新电影票  Feign方式发起远程调用</span><br><span class="line">Movie movie = movieServiceFeign.getNewMovie();</span><br><span class="line"> </span><br><span class="line">result.put(&quot;user&quot;, userById);</span><br><span class="line">result.put(&quot;movie&quot;, movie);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-6-开启Feign功能-EnableFeignClients"><a href="#7-2-6-开启Feign功能-EnableFeignClients" class="headerlink" title="7.2.6 开启Feign功能@EnableFeignClients"></a>7.2.6 开启Feign功能@EnableFeignClients</h3><h3 id="7-2-7-测试调用与负载均衡效果"><a href="#7-2-7-测试调用与负载均衡效果" class="headerlink" title="7.2.7 测试调用与负载均衡效果"></a>7.2.7 测试调用与负载均衡效果</h3><p><a href="http://localhost:7000/buyMovie?id=1" target="_blank" rel="noopener">http://localhost:7000/buyMovie?id=1</a> </p><h1 id="第八章-SpringCloud-HelloWorld案例开发-Ribbon-Hystrix组合"><a href="#第八章-SpringCloud-HelloWorld案例开发-Ribbon-Hystrix组合" class="headerlink" title="第八章 SpringCloud-HelloWorld案例开发-Ribbon+Hystrix组合"></a>第八章 SpringCloud-HelloWorld案例开发-Ribbon+Hystrix组合</h1><h2 id="8-1-Hystrix服务熔断"><a href="#8-1-Hystrix服务熔断" class="headerlink" title="8.1 Hystrix服务熔断"></a>8.1 Hystrix服务熔断</h2><p>目前情况：如果集群的三个电影服务都挂了，会怎样？</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531170955.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决：</span><br><span class="line">返回默认数据，会提示错误消息</span><br></pre></td></tr></table></figure><h2 id="8-2-使用Ribbon-Hystrix组合"><a href="#8-2-使用Ribbon-Hystrix组合" class="headerlink" title="8.2 使用Ribbon+Hystrix组合"></a>8.2 使用Ribbon+Hystrix组合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloud-consumer-user</span><br></pre></td></tr></table></figure><h3 id="8-2-1-引入Hystrix"><a href="#8-2-1-引入Hystrix" class="headerlink" title="8.2.1 引入Hystrix"></a>8.2.1 引入Hystrix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  引入hystrix进行服务熔断 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="8-2-2-开启断路保护功能"><a href="#8-2-2-开启断路保护功能" class="headerlink" title="8.2.2 开启断路保护功能"></a>8.2.2 开启断路保护功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableCircuitBreaker</span><br></pre></td></tr></table></figure><p>8.2.3 在方法上标注@HystrixCommand(fallbackMethod=”xxx”)来指定出错时调用xx方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 购买最新的电影票</span><br><span class="line"> * 传入用户id</span><br><span class="line"> */</span><br><span class="line">@HystrixCommand(fallbackMethod=&quot;hystrix&quot;)</span><br><span class="line">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class="line">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class="line">//1、查询用户信息</span><br><span class="line">User userById = getUserById(id);</span><br><span class="line">//2、查到最新电影票  restTemplate使用java代码来模拟发请求</span><br><span class="line">Movie movie = restTemplate.getForObject(&quot;http://CLOUD-PROVIDER-MOVIE/movie&quot;, Movie.class);</span><br><span class="line"> </span><br><span class="line">result.put(&quot;user&quot;, userById);</span><br><span class="line">result.put(&quot;movie&quot;, movie);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-4-在本类编写xxx方法，方法的参数和原来一样即可"><a href="#8-2-4-在本类编写xxx方法，方法的参数和原来一样即可" class="headerlink" title="8.2.4 在本类编写xxx方法，方法的参数和原来一样即可"></a>8.2.4 在本类编写xxx方法，方法的参数和原来一样即可</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String, Object&gt; hystrix(Integer id)&#123;</span><br><span class="line">User user = new User();</span><br><span class="line">user.setId(-1);</span><br><span class="line">user.setUserName(&quot;未知用户&quot;);</span><br><span class="line"> </span><br><span class="line">Movie movie = new Movie();</span><br><span class="line">movie.setId(-100);</span><br><span class="line">movie.setMovieName(&quot;无此电影&quot;);</span><br><span class="line"> </span><br><span class="line">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class="line">result.put(&quot;user&quot;, user);</span><br><span class="line">result.put(&quot;movie&quot;, movie);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-5-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常"><a href="#8-2-5-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常" class="headerlink" title="8.2.5 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常"></a>8.2.5 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常</h3><p> <a href="http://localhost:9000/buyMovie?id=1" target="_blank" rel="noopener">http://localhost:9000/buyMovie?id=1</a></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171333.png" alt></p><h3 id="8-2-6-熔断器原理"><a href="#8-2-6-熔断器原理" class="headerlink" title="8.2.6 熔断器原理"></a>8.2.6 熔断器原理</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171411.png" alt></p><h3 id="8-2-7-我们悄悄的启动一个服务，刷刷浏览器会怎样"><a href="#8-2-7-我们悄悄的启动一个服务，刷刷浏览器会怎样" class="headerlink" title="8.2.7 我们悄悄的启动一个服务，刷刷浏览器会怎样?"></a>8.2.7 我们悄悄的启动一个服务，刷刷浏览器会怎样?</h3><p>让子弹飞一分钟再看结果</p><h2 id="8-3-使用Feign-Hystrix组合"><a href="#8-3-使用Feign-Hystrix组合" class="headerlink" title="8.3 使用Feign+Hystrix组合"></a>8.3 使用Feign+Hystrix组合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloud-consumer-user-feign</span><br></pre></td></tr></table></figure><h3 id="8-3-1-引入Hystrix"><a href="#8-3-1-引入Hystrix" class="headerlink" title="8.3.1 引入Hystrix"></a>8.3.1 引入Hystrix</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  引入hystrix进行服务熔断 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="8-3-2-开启断路保护功能"><a href="#8-3-2-开启断路保护功能" class="headerlink" title="8.3.2 开启断路保护功能"></a>8.3.2 开启断路保护功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableCircuitBreaker</span><br></pre></td></tr></table></figure><h3 id="8-3-3-开启Feign对Hystrix支持"><a href="#8-3-3-开启Feign对Hystrix支持" class="headerlink" title="8.3.3 开启Feign对Hystrix支持"></a>8.3.3 开启Feign对Hystrix支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  hystrix:</span><br><span class="line">    enabled: true #默认false</span><br></pre></td></tr></table></figure><h3 id="8-3-4-Feign已经集成了Hystrix，使用起来非常简单-FeignClient-name-”provider-user”-fallback-”异常处理类”"><a href="#8-3-4-Feign已经集成了Hystrix，使用起来非常简单-FeignClient-name-”provider-user”-fallback-”异常处理类”" class="headerlink" title="8.3.4 Feign已经集成了Hystrix，使用起来非常简单@FeignClient(name=”provider-user”,fallback=”异常处理类”)"></a>8.3.4 Feign已经集成了Hystrix，使用起来非常简单@FeignClient(name=”provider-user”,fallback=”异常处理类”)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*使用Hystrix进行服务的熔断</span><br><span class="line"> * 1）、引入Hystrix的starter</span><br><span class="line"> * 2）、开启xxx功能 ：@EnableCircuitBreaker</span><br><span class="line"> * 3）、@FeignClient(value=&quot;CLOUD-PROVIDER-MOVIE&quot;,fallback=指定这个接口的异常处理类（异常处理类必须实现这个接口）)</span><br><span class="line"> */</span><br><span class="line">@FeignClient(value=&quot;CLOUD-PROVIDER-MOVIE&quot;,fallback=MovieFeignExceptionHandlerService.class)</span><br><span class="line">public interface MovieServiceFeign &#123;</span><br><span class="line">//  未来这个接口就会调用很多方法，定制每一个方法远程出错如何返回兜底mock数据；</span><br><span class="line">@GetMapping(&quot;/movie&quot;)</span><br><span class="line">public Movie getNewMovie();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-5-fallback-”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中"><a href="#8-3-5-fallback-”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中" class="headerlink" title="8.3.5 fallback=”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中"></a>8.3.5 fallback=”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.feign.exception;</span><br><span class="line"> </span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line">import com.bean.Movie;</span><br><span class="line">import com.feign.MovieServiceFeign;</span><br><span class="line"> </span><br><span class="line">@Component</span><br><span class="line">public class MovieFeignExceptionHandlerService implements MovieServiceFeign&#123;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 远程这个方法调用出问题就会调用此方法</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public Movie getNewMovie() &#123;</span><br><span class="line">Movie movie = new Movie();</span><br><span class="line">movie.setId(-100);</span><br><span class="line">movie.setMovieName(&quot;无此电影呀...&quot;);</span><br><span class="line">return movie;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-6-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常"><a href="#8-3-6-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常" class="headerlink" title="8.3.6 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常"></a>8.3.6 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常</h3><p> <a href="http://localhost:7000/buyMovie?id=1" target="_blank" rel="noopener">http://localhost:7000/buyMovie?id=1</a></p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171718.png" alt></p><h1 id="第九章-SpringCloud-HelloWorld案例开发-Hystrix-Dashboard"><a href="#第九章-SpringCloud-HelloWorld案例开发-Hystrix-Dashboard" class="headerlink" title="第九章 SpringCloud-HelloWorld案例开发-Hystrix Dashboard"></a>第九章 SpringCloud-HelloWorld案例开发-Hystrix Dashboard</h1><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171810.png" alt></p><p>除了隔离依赖服务的调用以外，Hystrix还提供了近实时的监控，Hystrix会实时、累加地记录所有关于HystrixCommand的执行信息，包括每秒执行多少请求，多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控</p><h2 id="9-1-引入actuator（cloud-consumer-user-feign）"><a href="#9-1-引入actuator（cloud-consumer-user-feign）" class="headerlink" title="9.1 引入actuator（cloud-consumer-user-feign）"></a>9.1 引入actuator（cloud-consumer-user-feign）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="9-1-1-actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志"><a href="#9-1-1-actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志" class="headerlink" title="9.1.1 actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志"></a>9.1.1 actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171849.png" alt></p><p>9.1.2 可提供的监控服务为</p><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171917.png" alt></p><h2 id="9-2-修改配置文件，暴露数据监控流"><a href="#9-2-修改配置文件，暴露数据监控流" class="headerlink" title="9.2 修改配置文件，暴露数据监控流"></a>9.2 修改配置文件，暴露数据监控流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: hystrix.stream # 访问/actuator/hystrix.stream能看到不断更新的监控流</span><br></pre></td></tr></table></figure><p>访问/actuator/hystrix.stream 可以看到打印</p><h2 id="9-3-引入HystrixDashboard"><a href="#9-3-引入HystrixDashboard" class="headerlink" title="9.3 引入HystrixDashboard"></a>9.3 引入HystrixDashboard</h2><p><dependency><br>     <groupid>org.springframework.cloud</groupid><br>     <artifactid>spring-cloud-starter-netflix-hystrix-dashboard</artifactid><br></dependency></p><h2 id="9-4-开启可视化监控功能"><a href="#9-4-开启可视化监控功能" class="headerlink" title="9.4 开启可视化监控功能"></a>9.4 开启可视化监控功能</h2><h3 id="9-4-1-EnableHystrixDashboard"><a href="#9-4-1-EnableHystrixDashboard" class="headerlink" title="9.4.1 @EnableHystrixDashboard"></a>9.4.1 @EnableHystrixDashboard</h3><h3 id="9-4-2-访问当前项目-hystrix，将Hystrix的stream地址输入-http-localhost-7000-actuator-hystrix-stream-，点击monitor按钮即可监控"><a href="#9-4-2-访问当前项目-hystrix，将Hystrix的stream地址输入-http-localhost-7000-actuator-hystrix-stream-，点击monitor按钮即可监控" class="headerlink" title="9.4.2 访问当前项目/hystrix，将Hystrix的stream地址输入(http://localhost:7000/actuator/hystrix.stream )，点击monitor按钮即可监控"></a>9.4.2 访问当前项目/hystrix，将Hystrix的stream地址输入(<a href="http://localhost:7000/actuator/hystrix.stream" target="_blank" rel="noopener">http://localhost:7000/actuator/hystrix.stream</a> )，点击monitor按钮即可监控</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531172038.png" alt></p><h3 id="9-4-3-监控中，服务器正常"><a href="#9-4-3-监控中，服务器正常" class="headerlink" title="9.4.3 监控中，服务器正常"></a>9.4.3 监控中，服务器正常</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531172118.png" alt></p><h3 id="9-4-4-监控中，服务器重新启动，断路器打开"><a href="#9-4-4-监控中，服务器重新启动，断路器打开" class="headerlink" title="9.4.4 监控中，服务器重新启动，断路器打开"></a>9.4.4 监控中，服务器重新启动，断路器打开</h3><p><img src="https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531172141.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-SpringCloud介绍&quot;&gt;&lt;a href=&quot;#第一章-SpringCloud介绍&quot; class=&quot;headerlink&quot; title=&quot;第一章 SpringCloud介绍&quot;&gt;&lt;/a&gt;第一章 SpringCloud介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-概
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="使用过的开源框架" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>9. SSM框架整合</title>
    <link href="http://yoursite.com/2018/03/27/65.%20SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2018/03/27/65. SSM框架整合/</id>
    <published>2018-03-26T16:00:00.000Z</published>
    <updated>2019-06-08T14:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-1-整合注意事项"><a href="#9-1-整合注意事项" class="headerlink" title="9.1 整合注意事项"></a>9.1 整合注意事项</h1><p>1)查看不同MyBatis版本整合Spring时使用的适配包；<br><a href="https://imgchr.com/i/EsXmUe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/07/EsXmUe.md.png" alt="EsXmUe.md.png"></a></p><p>2)下载整合适配包<br><a href="https://github.com/mybatis/spring/releases" target="_blank" rel="noopener">https://github.com/mybatis/spring/releases</a><br>3)官方整合示例，jpetstore<br><a href="https://github.com/mybatis/jpetstore-6" target="_blank" rel="noopener">https://github.com/mybatis/jpetstore-6</a></p><h1 id="9-2整合思路、步骤"><a href="#9-2整合思路、步骤" class="headerlink" title="9.2整合思路、步骤"></a>9.2整合思路、步骤</h1><h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1)搭建环境"></a>1)搭建环境</h2><blockquote><ol><li>创建一个动态的WEB工程</li><li>导入SSM（Spring+SpringMvc+MyBatis）需要使用的jar包<br> 整合ssm需要的基础jar包名字（<a href="https://pan.baidu.com/s/1N9xmgsfVw7jGRIwIvbGPug/" target="_blank" rel="noopener">点击下载</a>）<br> 整合ssm需要的基础jar包(<a href="https://pan.baidu.com/s/1IsQX5KPlnuZn6uHy0Pkn-A/" target="_blank" rel="noopener">点击下载</a>)</li><li>导入Spring与MyBatis整合适配包</li><li>导入其他技术的一些支持包  连接池 数据库驱动  日志….  </li></ol></blockquote><h2 id="2-搭建Spring-Springmvc的环境"><a href="#2-搭建Spring-Springmvc的环境" class="headerlink" title="2)搭建Spring + Springmvc的环境"></a>2)搭建Spring + Springmvc的环境</h2><pre><code>1. 在web.xml中配置:   Springmvc的前端控制器   实例化Spring容器的监听器 （contextLoaderListener）  字符编码过滤器  REST 过滤器2.创建Spring的配置文件(springMmvc.xml)-&gt; applicationContext.xml:组件扫描、 连接池、 事务.....</code></pre><ol start="3"><li>创建Springmvc的配置文件: springmvc.xml : 组件扫描、 视图解析器 <a href="mvc:..." target="_blank" rel="noopener">mvc:...</a><h2 id="3-MyBatis"><a href="#3-MyBatis" class="headerlink" title="3)MyBatis"></a>3)MyBatis</h2> 创建MyBatis的全局配置文件 mybatis-config,xml<br> 准备JavaBean 、测试表、 Mapper接口、 Mapper映射文件<h2 id="4-Spring-整合-MyBatis-："><a href="#4-Spring-整合-MyBatis-：" class="headerlink" title="4)Spring 整合 MyBatis ："></a>4)Spring 整合 MyBatis ：</h2> MyBatis的 SqlSession对象的创建 .<br> MyBatis的 Mapper接口的代理实现类得创建及管理<h2 id="5-测试-REST-CRUD"><a href="#5-测试-REST-CRUD" class="headerlink" title="5)测试:  REST CRUD"></a>5)测试:  REST CRUD</h2><ol><li>查询所有的员工信息,列表显示</li><li>添加新员工</li><li>修改员工</li><li>删除员工</li></ol></li></ol><h1 id="9-3整合的配置"><a href="#9-3整合的配置" class="headerlink" title="9.3整合的配置"></a>9.3整合的配置</h1><p>创建web动态工程 2.5（基本操作22个包）<br>最基本得spring得jar包在——Mybatis里support</p><h2 id="9-3-0-数据源文件db-properties"><a href="#9-3-0-数据源文件db-properties" class="headerlink" title="9.3.0 数据源文件db.properties"></a>9.3.0 数据源文件db.properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/lidaxiongdesql</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><h2 id="9-3-1-web-xml"><a href="#9-3-1-web-xml" class="headerlink" title="9.3.1 web.xml"></a>9.3.1 web.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</span><br><span class="line"> &lt;!-- 字符编码过滤器 --&gt;</span><br><span class="line"> &lt;filter&gt;</span><br><span class="line"> &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line"> &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line"> &lt;init-param&gt;</span><br><span class="line"> &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line"> &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line"> &lt;/init-param&gt;</span><br><span class="line"> &lt;/filter&gt;</span><br><span class="line"> &lt;filter-mapping&gt;</span><br><span class="line"> &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/filter-mapping&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!-- REST 过滤器 --&gt;</span><br><span class="line"> &lt;filter&gt;</span><br><span class="line"> &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class="line"> &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;</span><br><span class="line"> &lt;/filter&gt;</span><br><span class="line"> &lt;filter-mapping&gt;</span><br><span class="line"> &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class="line"> &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/filter-mapping&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 实例化SpringIOC容器的监听器 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;!-- Springmvc的前端控制器 --&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h2 id="9-3-2-Spring配置-spring-xml"><a href="#9-3-2-Spring配置-spring-xml" class="headerlink" title="9.3.2 Spring配置 spring.xml"></a>9.3.2 Spring配置 spring.xml</h2><p>(new一个Spring BeanConfiguration File 加组件context，事物的tx)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">xmlns:mybatis-spring=&quot;http://mybatis.org/schema/mybatis-spring&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件扫描 expression排除掉不能运行的类如jpg，mp3等静态文件--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.lbb.ssm&quot;&gt;</span><br><span class="line">&lt;context:exclude-filter type=&quot;annotation&quot; </span><br><span class="line">expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="line">&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数据源 连接池 --&gt;</span><br><span class="line">&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;mydataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 事务 --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSourceTransactionManager&quot; </span><br><span class="line">class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;dataSourceTransactionManager&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><!--整合mybatis--><!--AOP--><h2 id="9-3-3-SpringMVC配置-SpringMVC-xml"><a href="#9-3-3-SpringMVC配置-SpringMVC-xml" class="headerlink" title="9.3.3 SpringMVC配置 SpringMVC.xml"></a>9.3.3 SpringMVC配置 SpringMVC.xml</h2><p>一个Spring BeanConfiguration File 加组件context和mvc)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class="line">  &lt;!-- 组件扫描 expression排除掉不能运行的类如jpg，mp3等静态文件--&gt;</span><br><span class="line">  &lt;context:component-scan base-package=&quot;com.lbb.ssm&quot; use-default-filters=&quot;false&quot;&gt;</span><br><span class="line">  &lt;context:include-filter type=&quot;annotation&quot; </span><br><span class="line">         expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="line">  &lt;/context:component-scan&gt;</span><br><span class="line">   &lt;!--视图解析器 --&gt;</span><br><span class="line">   &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">   &lt;mvc:annotation-driven/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h2 id="9-3-4-MyBatis配置"><a href="#9-3-4-MyBatis配置" class="headerlink" title="9.3.4 MyBatis配置"></a>9.3.4 MyBatis配置</h2><h3 id="1-全局文件的配置"><a href="#1-全局文件的配置" class="headerlink" title="1)全局文件的配置"></a>1)全局文件的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!--  Spring 整合 MyBatis 后， MyBatis中配置数据源，事务等一些配置都可以</span><br><span class="line">         迁移到Spring的整合配置中。MyBatis配置文件中只需要配置与MyBatis相关</span><br><span class="line">         的即可。</span><br><span class="line"> --&gt;</span><br><span class="line"> &lt;!-- settings: 包含很多重要的设置项 --&gt;</span><br><span class="line">   &lt;settings&gt;</span><br><span class="line"> &lt;!-- 映射下划线到驼峰命名 --&gt;</span><br><span class="line"> &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class="line"> &lt;!-- 设置Mybatis对null值的默认处理 --&gt;</span><br><span class="line"> &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</span><br><span class="line"> &lt;!-- 开启延迟加载 --&gt;</span><br><span class="line"> &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line"> &lt;!-- 设置加载的数据是按需还是全部 --&gt;</span><br><span class="line"> &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line"> &lt;!-- 配置开启二级缓存 --&gt;</span><br><span class="line"> &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line"> &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="2-SQL映射文件配置"><a href="#2-SQL映射文件配置" class="headerlink" title="2)SQL映射文件配置"></a>2)SQL映射文件配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.atguigu.ssm.mapper.EmployeeMapper&quot;&gt;</span><br><span class="line">&lt;!-- public List&lt;Employee&gt; getAllEmps(); --&gt;</span><br><span class="line">&lt;select id=&quot;getAllEmps&quot; resultMap=&quot;myEmpsAndDept&quot; &gt;</span><br><span class="line">select e.id eid, e.last_name,e.email,e.gender, d.id did, d.dept_name</span><br><span class="line">from tbl_employee e ,tbl_dept d </span><br><span class="line">where e.d_id = d.id </span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.atguigu.ssm.beans.Employee&quot; id=&quot;myEmpsAndDept&quot;&gt;</span><br><span class="line">&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;association property=&quot;dept&quot; javaType=&quot;com.atguigu.ssm.beans.Department&quot;&gt;</span><br><span class="line">&lt;id column=&quot;did&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="9-3-5-Spring-整合MyBatis-配置"><a href="#9-3-5-Spring-整合MyBatis-配置" class="headerlink" title="9.3.5 Spring 整合MyBatis 配置"></a>9.3.5 Spring 整合MyBatis 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Spring 整合 Mybatis --&gt;</span><br><span class="line">&lt;!--1. SqlSession  --&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">&lt;!-- 指定数据源 --&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- MyBatis的配置文件 --&gt;</span><br><span class="line">&lt;property name=&quot;configLocation&quot; </span><br><span class="line">                 value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;!-- MyBatis的SQL映射文件 --&gt;</span><br><span class="line">&lt;property name=&quot;mapperLocations&quot; </span><br><span class="line">                 value=&quot;classpath:mybatis/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;typeAliasesPackage&quot; </span><br><span class="line">                 value=&quot;com.atguigu.ssm.beans&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- Mapper接口</span><br><span class="line">MapperScannerConfigurer 为指定包下的Mapper接口批量生成代理实现类.bean的默认id是接口名首字母小写. </span><br><span class="line"> --&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">&lt;property name=&quot;basePackage&quot; value=&quot;com.atguigu.ssm.mapper&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- &lt;mybatis-spring:scan base-package=&quot;com.atguigu.ssm.mapper&quot;/&gt; --&gt;</span><br></pre></td></tr></table></figure><h1 id="9-4-整合测试"><a href="#9-4-整合测试" class="headerlink" title="9.4 整合测试"></a>9.4 整合测试</h1><pre><code>1)编写页面，发送请求：http://localhost:8888/ssm/employees2)编写Handler,处理请求，完成响应3)在页面中获取数据，显示数据</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;9-1-整合注意事项&quot;&gt;&lt;a href=&quot;#9-1-整合注意事项&quot; class=&quot;headerlink&quot; title=&quot;9.1 整合注意事项&quot;&gt;&lt;/a&gt;9.1 整合注意事项&lt;/h1&gt;&lt;p&gt;1)查看不同MyBatis版本整合Spring时使用的适配包；&lt;br&gt;&lt;a 
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>8. 扩展-PageHelper分页插件</title>
    <link href="http://yoursite.com/2018/03/22/64.%20%E6%89%A9%E5%B1%95-PageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/03/22/64. 扩展-PageHelper分页插件/</id>
    <published>2018-03-21T16:00:00.000Z</published>
    <updated>2019-06-08T14:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="plugins-插件机制"><a href="#plugins-插件机制" class="headerlink" title="plugins 插件机制"></a>plugins 插件机制</h1><p>1)插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行<br>2)四大对象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</span><br><span class="line"></span><br><span class="line">ParameterHandler (getParameterObject, setParameters) </span><br><span class="line"></span><br><span class="line">ResultSetHandler (handleResultSets, handleOutputParameters) </span><br><span class="line"></span><br><span class="line">StatementHandler (prepare, parameterize, batch, update, query)</span><br></pre></td></tr></table></figure><h1 id="8-1-PageHelper-分页插件简介"><a href="#8-1-PageHelper-分页插件简介" class="headerlink" title="8.1 PageHelper 分页插件简介"></a>8.1 PageHelper 分页插件简介</h1><p>1)PageHelper是MyBatis中非常方便的第三方分页插件<br>2)官方文档：<br><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md" target="_blank" rel="noopener">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md</a><br>3)我们可以对照官方文档的说明，快速的使用插件</p><h1 id="8-2-PageHelper的使用步骤"><a href="#8-2-PageHelper的使用步骤" class="headerlink" title="8.2 PageHelper的使用步骤"></a>8.2 PageHelper的使用步骤</h1><h2 id="1-导入相关包"><a href="#1-导入相关包" class="headerlink" title="1)导入相关包"></a>1)导入相关包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pagehelper-x.x.x.jar </span><br><span class="line">jsqlparser-0.9.5.jar</span><br></pre></td></tr></table></figure><h2 id="2-在MyBatis全局配置文件中配置分页插件"><a href="#2-在MyBatis全局配置文件中配置分页插件" class="headerlink" title="2)在MyBatis全局配置文件中配置分页插件"></a>2)在MyBatis全局配置文件中配置分页插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><h2 id="3-使用PageHelper提供的方法进行分页"><a href="#3-使用PageHelper提供的方法进行分页" class="headerlink" title="3)使用PageHelper提供的方法进行分页"></a>3)使用PageHelper提供的方法进行分页</h2><h2 id="4-可以使用更强大的PageInfo封装返回结果"><a href="#4-可以使用更强大的PageInfo封装返回结果" class="headerlink" title="4)可以使用更强大的PageInfo封装返回结果"></a>4)可以使用更强大的PageInfo封装返回结果</h2><h1 id="8-3-Page对象的使用"><a href="#8-3-Page对象的使用" class="headerlink" title="8.3 Page对象的使用"></a>8.3 Page对象的使用</h1><p>1)在查询之前通过PageHelper.startPage(页码，条数)设置分页信息，该方法返回Page对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testPageHelper()  throws Exception&#123;</span><br><span class="line">SqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">try &#123;</span><br><span class="line">EmployeeMapper mapper = </span><br><span class="line">                      session.getMapper(EmployeeMapper.class);</span><br><span class="line">//设置分页信息</span><br><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(9, 1);</span><br><span class="line">List&lt;Employee&gt; emps = mapper.getAllEmps();</span><br><span class="line">for (Employee employee : emps) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;=============获取分页相关的信息=================&quot;);</span><br><span class="line">System.out.println(&quot;当前页: &quot; + page.getPageNum());</span><br><span class="line">System.out.println(&quot;总页码: &quot; + page.getPages());</span><br><span class="line">System.out.println(&quot;总条数: &quot; + page.getTotal());</span><br><span class="line">System.out.println(&quot;每页显示的条数: &quot; + page.getPageSize());</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-4-PageInfo对象的使用"><a href="#8-4-PageInfo对象的使用" class="headerlink" title="8.4 PageInfo对象的使用"></a>8.4 PageInfo对象的使用</h1><p>1)在查询完数据后，使用PageInfo对象封装查询结果，可以获取更详细的分页信息以及<br>可以完成分页逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testPageHelper1()  throws Exception&#123;</span><br><span class="line">SqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">try &#123;</span><br><span class="line">EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);</span><br><span class="line">//设置分页信息</span><br><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(9, 1);</span><br><span class="line">List&lt;Employee&gt; emps = mapper.getAllEmps();</span><br><span class="line">// </span><br><span class="line">PageInfo&lt;Employee&gt; info  = new PageInfo&lt;&gt;(emps,5);</span><br><span class="line">for (Employee employee : emps) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;=============获取详细分页相关的信息=================&quot;);</span><br><span class="line">System.out.println(&quot;当前页: &quot; + info.getPageNum());</span><br><span class="line">System.out.println(&quot;总页码: &quot; + info.getPages());</span><br><span class="line">System.out.println(&quot;总条数: &quot; + info.getTotal());</span><br><span class="line">System.out.println(&quot;每页显示的条数: &quot; + info.getPageSize());</span><br><span class="line">System.out.println(&quot;是否是第一页: &quot; + info.isIsFirstPage());</span><br><span class="line">System.out.println(&quot;是否是最后一页: &quot; + info.isIsLastPage());</span><br><span class="line">System.out.println(&quot;是否有上一页: &quot; + info.isHasPreviousPage());</span><br><span class="line">System.out.println(&quot;是否有下一页: &quot; + info.isHasNextPage());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;============分页逻辑===============&quot;);</span><br><span class="line">int [] nums = info.getNavigatepageNums();</span><br><span class="line">for (int i : nums) &#123;</span><br><span class="line">System.out.print(i +&quot; &quot; );</span><br><span class="line">&#125;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;plugins-插件机制&quot;&gt;&lt;a href=&quot;#plugins-插件机制&quot; class=&quot;headerlink&quot; title=&quot;plugins 插件机制&quot;&gt;&lt;/a&gt;plugins 插件机制&lt;/h1&gt;&lt;p&gt;1)插件是MyBatis提供的一个非常强大的机制，我们可以通
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>7. MyBatis 逆向工程</title>
    <link href="http://yoursite.com/2018/03/21/63.%20MyBatis%20%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/21/63. MyBatis 逆向工程/</id>
    <published>2018-03-20T16:00:00.000Z</published>
    <updated>2019-06-08T14:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-1-逆向工程简介"><a href="#7-1-逆向工程简介" class="headerlink" title="7.1 逆向工程简介"></a>7.1 逆向工程简介</h1><pre><code>MyBatis Generator:简称MBG，是一个专门为MyBatis框架使用者定制的代码生成器，可以快速的根据表生成对应的映射文件，接口，以及bean类。支持基本的增删改查，以及QBC风格的条件查询。但是表连接、存储过程等这些复杂sql的定义需要我们手工编写官方文档地址http://www.mybatis.org/generator/  （要先到jar包 官方文档没写）官方工程地址https://github.com/mybatis/generator/releases</code></pre><p>注意：逆向工程生成不了表链接要自己写，生成的bean没有tostring方法</p><h1 id="7-2-逆向工程的配置"><a href="#7-2-逆向工程的配置" class="headerlink" title="7.2 逆向工程的配置"></a>7.2 逆向工程的配置</h1><h2 id="1-导入逆向工程的jar包"><a href="#1-导入逆向工程的jar包" class="headerlink" title="1)导入逆向工程的jar包"></a>1)导入逆向工程的jar包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-generator-core-1.3.2.jar</span><br></pre></td></tr></table></figure><h2 id="2-编写MBG的配置文件（重要几处配置）-可参考官方手册"><a href="#2-编写MBG的配置文件（重要几处配置）-可参考官方手册" class="headerlink" title="2)编写MBG的配置文件（重要几处配置）,可参考官方手册"></a>2)编写MBG的配置文件（重要几处配置）,可参考官方手册</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">  &lt;!-- </span><br><span class="line">  targetRuntime: 执行生成的逆向工程的版本</span><br><span class="line">  MyBatis3Simple: 生成基本的CRUD</span><br><span class="line">  MyBatis3: 生成 QBC风格（带条件）的CRUD</span><br><span class="line">   --&gt;</span><br><span class="line">  &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">    &lt;!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 --&gt;</span><br><span class="line">        &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">         &lt;!-- 实现中文注释，这里的type里写的是你的实现类的类全路径，实现类在下面 具体看拓展1--&gt;</span><br><span class="line">        &lt;!-- &lt;commentGenerator type=&quot;com.lbb.mybatis.generator.MyCommentGenerator&quot;&gt;</span><br><span class="line">        &lt;/commentGenerator&gt; --&gt;</span><br><span class="line">    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">        connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis_1129&quot;</span><br><span class="line">        userId=&quot;root&quot;</span><br><span class="line">        password=&quot;1234&quot;&gt;</span><br><span class="line">    &lt;/jdbcConnection&gt;</span><br><span class="line">&lt;!-- javaBean的生成策略--&gt;</span><br><span class="line">    &lt;javaModelGenerator targetPackage=&quot;com.atguigu.mybatis.beans&quot; targetProject=&quot;.\src&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">      &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/javaModelGenerator&gt;</span><br><span class="line">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br><span class="line">    &lt;sqlMapGenerator targetPackage=&quot;com.atguigu.mybatis.dao&quot;  targetProject=&quot;.\conf&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Mapper接口的生成策略 路径。／  点代表当前文件下的src 官方的路径有问题 按照这个配--&gt;</span><br><span class="line">    &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.atguigu.mybatis.dao&quot;  targetProject=&quot;.\src&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/javaClientGenerator&gt;</span><br><span class="line">&lt;!-- 逆向分析的表 domainObjectName代表生成bean的名字--&gt;</span><br><span class="line">    &lt;table tableName=&quot;tbl_dept&quot; domainObjectName=&quot;Department&quot;&gt;&lt;/table&gt;</span><br><span class="line">    &lt;table tableName=&quot;tbl_employee&quot; domainObjectName=&quot;Employee&quot;&gt;&lt;/table&gt;</span><br><span class="line">  &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p>一般开发用上面 下面的详细内容翻译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!--导入属性配置--&gt;</span><br><span class="line">    &lt;properties resource=&quot;datasource.properties&quot;&gt;&lt;/properties&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 指定数据库驱动的jdbc驱动jar包的位置 --&gt;</span><br><span class="line">    &lt;classPathEntry location=&quot;$&#123;db.driverLocation&#125;&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- context 是逆向工程的主要配置信息 --&gt;</span><br><span class="line">    &lt;!-- id：起个名字 --&gt;</span><br><span class="line">    &lt;!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 --&gt;</span><br><span class="line">    &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!--optional,旨在创建class时，对注释进行控制--&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!--jdbc的数据库连接--&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;$&#123;db.driverClassName&#125;&quot;</span><br><span class="line">                        connectionURL=&quot;$&#123;db.url&#125;&quot;</span><br><span class="line">                        userId=&quot;$&#123;db.username&#125;&quot;</span><br><span class="line">                        password=&quot;$&#123;db.password&#125;&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!--非必须，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 --&gt;</span><br><span class="line">            &lt;!-- 不是 double 和 long 类型 --&gt;</span><br><span class="line">            &lt;!-- 使用常用的基本类型代替 sql 包下的引用类型 --&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!-- targetPackage：生成的实体类所在的包 --&gt;</span><br><span class="line">        &lt;!-- targetProject：生成的实体类所在的硬盘位置 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.mall.pojo&quot;</span><br><span class="line">                            targetProject=&quot;.\src\main\java&quot;&gt;</span><br><span class="line">            &lt;!-- 是否允许子包 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否对modal添加构造函数 --&gt;</span><br><span class="line">            &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">            &lt;!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 --&gt;</span><br><span class="line">            &lt;property name=&quot;immutable&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mappers&quot;</span><br><span class="line">                         targetProject=&quot;.\src\main\resource&quot;&gt;</span><br><span class="line">            &lt;!-- 针对数据库的一个配置，是否把 schema 作为字包名 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">                             targetPackage=&quot;com.mall.dao&quot; targetProject=&quot;.\src\main\java&quot;&gt;</span><br><span class="line">            &lt;!-- 针对 oracle 数据库的一个配置，是否把 schema 作为字包名 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;</span><br><span class="line">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="line">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></p><h2 id="3-运行代码生成器生成代码"><a href="#3-运行代码生成器生成代码" class="headerlink" title="3)运行代码生成器生成代码"></a>3)运行代码生成器生成代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testMBG() throws Exception &#123;</span><br><span class="line">   List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();</span><br><span class="line">   boolean overwrite = true;</span><br><span class="line">   File configFile = new File(&quot;mbg.xml&quot;);</span><br><span class="line">   ConfigurationParser cp = new ConfigurationParser(warnings);</span><br><span class="line">   Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">   DefaultShellCallback callback = new DefaultShellCallback(overwrite);</span><br><span class="line">   MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, </span><br><span class="line">           callback, warnings);</span><br><span class="line">   myBatisGenerator.generate(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-3-逆向工程的使用"><a href="#7-3-逆向工程的使用" class="headerlink" title="7.3 逆向工程的使用"></a>7.3 逆向工程的使用</h1><h2 id="1-基本查询的测试"><a href="#1-基本查询的测试" class="headerlink" title="1)基本查询的测试"></a>1)基本查询的测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelect() throws Exception &#123;</span><br><span class="line">SqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);</span><br><span class="line">List&lt;Employee&gt; emps = mapper.selectAll();</span><br><span class="line">for (Employee employee : emps) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-带条件查询的测试"><a href="#2-带条件查询的测试" class="headerlink" title="2)带条件查询的测试"></a>2)带条件查询的测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelect() throws Exception &#123;</span><br><span class="line">SqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">try &#123;</span><br><span class="line">EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);</span><br><span class="line">//条件查询: 名字中带有&apos;张&apos; 并且 email中&apos;j&apos;  或者 did = 2 </span><br><span class="line">EmployeeExample example =  new EmployeeExample();</span><br><span class="line">Criteria criteria = example.createCriteria();//封装条件1</span><br><span class="line">criteria.andLastNameLike(&quot;%张%&quot;);//条件</span><br><span class="line">criteria.andEmailLike(&quot;%j%&quot;);//条件</span><br><span class="line">//or 或者</span><br><span class="line">Criteria criteriaOr = example.createCriteria();//封装条件2</span><br><span class="line">criteriaOr.andDIdEqualTo(2);//条件</span><br><span class="line">//将封装条件1或者封装条件2设置到example中</span><br><span class="line">example.or(criteriaOr);</span><br><span class="line"></span><br><span class="line">List&lt;Employee&gt; emps = mapper.selectByExample(example);</span><br><span class="line">for (Employee employee : emps) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拓展-1-生成中文注释"><a href="#拓展-1-生成中文注释" class="headerlink" title="拓展 1 生成中文注释"></a>拓展 1 生成中文注释</h1><p>1.编写MBG的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">  </span><br><span class="line">   --&gt;</span><br><span class="line">&lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">  &lt;!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 --&gt;</span><br><span class="line">        &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">        &lt;!-- 实现中文注释，这里的type里写的是你的实现类的类全路径，实现类在下面--&gt;</span><br><span class="line">        &lt;commentGenerator type=&quot;com.lbb.mybatis.generator.MyCommentGenerator&quot;&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">  &lt;!-- </span><br><span class="line">  数据库的连接环境</span><br><span class="line">   --&gt;</span><br><span class="line">    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">        connectionURL=&quot;jdbc:mysql://localhost:3306/cosmetics_inventory_system&quot;</span><br><span class="line">        userId=&quot;root&quot;</span><br><span class="line">        password=&quot;root&quot;&gt;</span><br><span class="line">    &lt;/jdbcConnection&gt;</span><br></pre></td></tr></table></figure><p>2.建一个自定义的类 MyCommentGenerator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line">package com.lbb.mybatis.generator;</span><br><span class="line"></span><br><span class="line">import static org.mybatis.generator.internal.util.StringUtility.isTrue;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import org.mybatis.generator.api.CommentGenerator;</span><br><span class="line">import org.mybatis.generator.api.IntrospectedColumn;</span><br><span class="line">import org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line">import org.mybatis.generator.api.dom.java.CompilationUnit;</span><br><span class="line">import org.mybatis.generator.api.dom.java.Field;</span><br><span class="line">import org.mybatis.generator.api.dom.java.InnerClass;</span><br><span class="line">import org.mybatis.generator.api.dom.java.InnerEnum;</span><br><span class="line">import org.mybatis.generator.api.dom.java.JavaElement;</span><br><span class="line">import org.mybatis.generator.api.dom.java.Method;</span><br><span class="line">import org.mybatis.generator.api.dom.java.Parameter;</span><br><span class="line">import org.mybatis.generator.api.dom.xml.XmlElement;</span><br><span class="line">import org.mybatis.generator.config.MergeConstants;</span><br><span class="line">import org.mybatis.generator.config.PropertyRegistry;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 描述：</span><br><span class="line"> * @since 1.9.10</span><br><span class="line"> * @version 1.9.10</span><br><span class="line"> * @作者：lidaxiong</span><br><span class="line"> * @创建时间：2019年1月22日</span><br><span class="line"> * @修改记录：</span><br><span class="line"> */</span><br><span class="line">public class MyCommentGenerator implements CommentGenerator&#123;</span><br><span class="line">    private Properties properties;</span><br><span class="line">    private Properties systemPro;</span><br><span class="line">    private boolean suppressDate;</span><br><span class="line">    private boolean suppressAllComments;</span><br><span class="line">    private String currentDateStr;</span><br><span class="line"></span><br><span class="line">    public MyCommentGenerator() &#123;</span><br><span class="line">        super();</span><br><span class="line">        properties = new Properties();</span><br><span class="line">        systemPro = System.getProperties();</span><br><span class="line">        suppressDate = false;</span><br><span class="line">        suppressAllComments = false;</span><br><span class="line">        currentDateStr = (new SimpleDateFormat(&quot;yyyy-MM-dd&quot;)).format(new Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addJavaFileComment(CompilationUnit compilationUnit) &#123;</span><br><span class="line">        // add no file level comments by default</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Adds a suitable comment to warn users that the element was generated, and</span><br><span class="line">     * when it was generated.</span><br><span class="line">     */</span><br><span class="line">    public void addComment(XmlElement xmlElement) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addRootComment(XmlElement rootElement) &#123;</span><br><span class="line">        // add no document level comments by default</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addConfigurationProperties(Properties properties) &#123;</span><br><span class="line">        this.properties.putAll(properties);</span><br><span class="line"></span><br><span class="line">        suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));</span><br><span class="line"></span><br><span class="line">        suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * This method adds the custom javadoc tag for. You may do nothing if you do</span><br><span class="line">     * not wish to include the Javadoc tag - however, if you do not include the</span><br><span class="line">     * Javadoc tag then the Java merge capability of the eclipse plugin will</span><br><span class="line">     * break.</span><br><span class="line">     * </span><br><span class="line">     * @param javaElement</span><br><span class="line">     *            the java element</span><br><span class="line">     */</span><br><span class="line">    protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) &#123;</span><br><span class="line">        javaElement.addJavaDocLine(&quot; *&quot;);</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(MergeConstants.NEW_ELEMENT_TAG);</span><br><span class="line">        if (markAsDoNotDelete) &#123;</span><br><span class="line">            sb.append(&quot; do_not_delete_during_merge&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String s = getDateString();</span><br><span class="line">        if (s != null) &#123;</span><br><span class="line">            sb.append(&apos; &apos;);</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        javaElement.addJavaDocLine(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * This method returns a formated date string to include in the Javadoc tag</span><br><span class="line">     * and XML comments. You may return null if you do not want the date in</span><br><span class="line">     * these documentation elements.</span><br><span class="line">     * </span><br><span class="line">     * @return a string representing the current timestamp, or null</span><br><span class="line">     */</span><br><span class="line">    protected String getDateString() &#123;</span><br><span class="line">        String result = null;</span><br><span class="line">        if (!suppressDate) &#123;</span><br><span class="line">            result = currentDateStr;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        innerClass.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class="line">        sb.append(&quot; &quot;);</span><br><span class="line">        sb.append(getDateString());</span><br><span class="line">        innerClass.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        innerClass.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        innerEnum.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class="line">        innerEnum.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        innerEnum.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addFieldComment(Field field, IntrospectedTable introspectedTable,</span><br><span class="line">            IntrospectedColumn introspectedColumn) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        field.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(introspectedColumn.getRemarks());</span><br><span class="line">        field.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        field.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addFieldComment(Field field, IntrospectedTable introspectedTable) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        field.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class="line">        field.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        field.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">      method.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">      addJavadocTag(method, false);</span><br><span class="line">      method.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addGetterComment(Method method, IntrospectedTable introspectedTable,</span><br><span class="line">            IntrospectedColumn introspectedColumn) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        method.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(introspectedColumn.getRemarks());</span><br><span class="line">        method.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        sb.setLength(0);</span><br><span class="line">        sb.append(&quot; * @return &quot;);</span><br><span class="line">        sb.append(introspectedColumn.getActualColumnName());</span><br><span class="line">        sb.append(&quot; &quot;);</span><br><span class="line">        sb.append(introspectedColumn.getRemarks());</span><br><span class="line">        method.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        method.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addSetterComment(Method method, IntrospectedTable introspectedTable,</span><br><span class="line">            IntrospectedColumn introspectedColumn) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        method.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(introspectedColumn.getRemarks());</span><br><span class="line">        method.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        Parameter parm = method.getParameters().get(0);</span><br><span class="line">        sb.setLength(0);</span><br><span class="line">        sb.append(&quot; * @param &quot;);</span><br><span class="line">        sb.append(parm.getName());</span><br><span class="line">        sb.append(&quot; &quot;);</span><br><span class="line">        sb.append(introspectedColumn.getRemarks());</span><br><span class="line">        method.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        method.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) &#123;</span><br><span class="line">        if (suppressAllComments) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        innerClass.addJavaDocLine(&quot;/**&quot;);</span><br><span class="line">        sb.append(&quot; * &quot;);</span><br><span class="line">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class="line">        innerClass.addJavaDocLine(sb.toString().replace(&quot;\n&quot;, &quot; &quot;));</span><br><span class="line">        sb.setLength(0);</span><br><span class="line">        sb.append(&quot; * @author &quot;);</span><br><span class="line">        sb.append(systemPro.getProperty(&quot;user.name&quot;));</span><br><span class="line">        sb.append(&quot; &quot;);</span><br><span class="line">        sb.append(currentDateStr);</span><br><span class="line">        innerClass.addJavaDocLine(&quot; */&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-1-逆向工程简介&quot;&gt;&lt;a href=&quot;#7-1-逆向工程简介&quot; class=&quot;headerlink&quot; title=&quot;7.1 逆向工程简介&quot;&gt;&lt;/a&gt;7.1 逆向工程简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;MyBatis Generator:
简称MBG，是一个专门
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>6. MyBatis 缓存机制</title>
    <link href="http://yoursite.com/2018/03/19/62.%20MyBatis%20%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/03/19/62. MyBatis 缓存机制/</id>
    <published>2018-03-18T16:00:00.000Z</published>
    <updated>2019-06-08T14:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-1-缓存机制简介"><a href="#6-1-缓存机制简介" class="headerlink" title="6.1 缓存机制简介"></a>6.1 缓存机制简介</h1><blockquote><p>1)MyBatis 包含一个非常强大的查询缓存特性,它可以非常方便地配置和定制。缓存可以极大的提升查询效率<br>2)MyBatis系统中默认定义了两级缓存<br>    一级缓存<br>    二级缓存<br>3)默认情况下，只有一级缓存（SqlSession级别的缓存，也称为本地缓存）开启。<br>4)二级缓存需要手动开启和配置，他是基于namespace级别的缓存。<br>5)为了提高扩展性。MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存  </p></blockquote><h1 id="6-2-一级缓存的使用"><a href="#6-2-一级缓存的使用" class="headerlink" title="6.2 一级缓存的使用"></a>6.2 一级缓存的使用</h1><p>1)一级缓存(local cache), 即本地缓存, 作用域默认为sqlSession。当  Session flush 或 close 后, 该 Session 中的所有 Cache 将被清空。<br>2)本地缓存不能被关闭, 但可以调用 clearCache() 来清空本地缓存, 或者改变缓存的作用域.<br>3)在mybatis3.1之后, 可以配置本地缓存的作用域. 在 mybatis.xml 中配置</p><p><a href="https://imgchr.com/i/EsO17F" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/07/EsO17F.md.png" alt="EsO17F.md.png"></a></p><p>4)一级缓存的工作机制<br>同一次会话期间只要查询过的数据都会保存在当前SqlSession的一个Map中<br>key: hashCode+查询的SqlId+编写的sql查询语句+参数</p><h1 id="6-3-一级缓存失效的几种情况"><a href="#6-3-一级缓存失效的几种情况" class="headerlink" title="6.3 一级缓存失效的几种情况"></a>6.3 一级缓存失效的几种情况</h1><pre><code>1)不同的SqlSession对应不同的一级缓存2)同一个SqlSession但是查询条件不同3)同一个SqlSession两次查询期间执行了任何一次增删改操作4)同一个SqlSession两次查询期间手动清空了缓存</code></pre><h1 id="6-4-二级缓存的使用"><a href="#6-4-二级缓存的使用" class="headerlink" title="6.4 二级缓存的使用"></a>6.4 二级缓存的使用</h1><pre><code>1)二级缓存(second level cache)，全局作用域缓存 //全局缓存 2)二级缓存默认开启，但是需要手动配置     最好配置上 防止升级出bug cacheEnabled=true3)MyBatis提供二级缓存的接口以及实现，缓存实现要求POJO实现Serializable接口4)二级缓存在 SqlSession 关闭或提交之后才会生效5)二级缓存使用的步骤:    ①全局配置文件中开启二级缓存&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;    ②需要使用二级缓存的映射文件处使用cache配置缓存&lt;cache /&gt;    ③注意：POJO需要实现Serializable接口        添加序列号标示号（表示类有没有升级过） default serial VersionUID =1L    ps 注意要提交 二级缓存才起作用 6) 二级缓存工作机制    基于同一个namespace的多个SqlSession对象6)二级缓存相关的属性    ①eviction=“FIFO”：缓存回收策略（通俗的讲就是移除）：    LRU – 最近最少使用的：移除最长时间不被使用的对象。    FIFO – 先进先出：按对象进入缓存的顺序来移除它们。    SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。    WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。    默认的是 LRU。    ②flushInterval：刷新间隔，单位毫秒    默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新    ③size：引用数目，正整数    代表缓存最多可以存储多少个对象，太大容易导致内存溢出    ④readOnly：只读设置简称-“只读”，true/false    true（不安全的，速度快）：只读缓存；MyBatis认为从缓存中获得的数据不会被修改，直接将缓存中的数据引用交给用户。。。         会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。    false（安全的，但是会有损耗，慢）：非只读，MyBatis认为从缓存中获取的数据会被修改，会使用序列化以及反序列化的技术克隆一份给用户。。。         读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。（一般使用false）    拓展：type：指定使用的缓存类，一般用在自定义缓存或者整合第三方缓存</code></pre><h1 id="6-5-缓存的相关属性设置"><a href="#6-5-缓存的相关属性设置" class="headerlink" title="6.5 缓存的相关属性设置"></a>6.5 缓存的相关属性设置</h1><h2 id="1-全局setting的cacheEnable-true："><a href="#1-全局setting的cacheEnable-true：" class="headerlink" title="1)全局setting的cacheEnable=true："></a>1)全局setting的cacheEnable=true：</h2><pre><code>配置二级缓存的开关，一级缓存一直是打开的。</code></pre><h2 id="2-select标签的useCache属性："><a href="#2-select标签的useCache属性：" class="headerlink" title="2)select标签的useCache属性："></a>2)select标签的useCache属性：</h2><pre><code>配置这个select是否使用二级缓存。一级缓存一直是使用的</code></pre><h2 id="3-sql标签的flushCache属性："><a href="#3-sql标签的flushCache属性：" class="headerlink" title="3)sql标签的flushCache属性："></a>3)sql标签的flushCache属性：</h2><pre><code>增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。查询默认 flushCache=false。</code></pre><h2 id="4-sqlSession-clearCache-："><a href="#4-sqlSession-clearCache-：" class="headerlink" title="4)sqlSession.clearCache()："></a>4)sqlSession.clearCache()：</h2><pre><code>只是用来清除一级缓存。</code></pre><h1 id="6-6-整合第三方缓存"><a href="#6-6-整合第三方缓存" class="headerlink" title="6.6 整合第三方缓存"></a>6.6 整合第三方缓存</h1><p>1)为了提高扩展性。MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p><p>2)EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider</p><p>3)整合EhCache缓存的步骤:<br>    ①导入ehcache包，以及整合包，日志包<br>    ehcache-core-2.6.8.jar、mybatis-ehcache-1.0.3.jar<br>    slf4j-api-1.6.1.jar、slf4j-log4j12-1.6.2.jar<br>    ②编写ehcache.xml配置文件<br>    ③配置使用ehcache.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line"> xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt;</span><br><span class="line"> &lt;!-- 磁盘保存路径 --&gt;</span><br><span class="line"> &lt;diskStore path=&quot;D:\atguigu\ehcache&quot; /&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;defaultCache </span><br><span class="line">   maxElementsInMemory=&quot;1000&quot; </span><br><span class="line">   maxElementsOnDisk=&quot;10000000&quot;</span><br><span class="line">   eternal=&quot;false&quot; </span><br><span class="line">   overflowToDisk=&quot;true&quot; </span><br><span class="line">   timeToIdleSeconds=&quot;120&quot;</span><br><span class="line">   timeToLiveSeconds=&quot;120&quot; </span><br><span class="line">   diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class="line">   memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class="line"> &lt;/defaultCache&gt;</span><br><span class="line">&lt;/ehcache&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- </span><br><span class="line">属性说明：</span><br><span class="line">l diskStore：指定数据在磁盘中的存储位置。</span><br><span class="line">l defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略</span><br><span class="line"> </span><br><span class="line">以下属性是必须的：</span><br><span class="line">l maxElementsInMemory - 在内存中缓存的element的最大数目 </span><br><span class="line">l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大</span><br><span class="line">l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断</span><br><span class="line">l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</span><br><span class="line"> </span><br><span class="line">以下属性是可选的：</span><br><span class="line">l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大</span><br><span class="line">l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</span><br><span class="line"> diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.</span><br><span class="line">l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</span><br><span class="line">l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作</span><br><span class="line">l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</span><br><span class="line"> --&gt;</span><br></pre></td></tr></table></figure></p><p>③配置cache标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;&lt;/cache&gt;</span><br></pre></td></tr></table></figure><p>4）缓存的查找顺序：<br>二级缓存==&gt;一级换成 ==&gt;数据库 简称：二一库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;6-1-缓存机制简介&quot;&gt;&lt;a href=&quot;#6-1-缓存机制简介&quot; class=&quot;headerlink&quot; title=&quot;6.1 缓存机制简介&quot;&gt;&lt;/a&gt;6.1 缓存机制简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1)MyBatis 包含一个非常强大的查询缓存特性
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>5. MyBatis 动态SQL</title>
    <link href="http://yoursite.com/2018/03/17/61.%20MyBatis%20%E5%8A%A8%E6%80%81SQL/"/>
    <id>http://yoursite.com/2018/03/17/61. MyBatis 动态SQL/</id>
    <published>2018-03-16T16:00:00.000Z</published>
    <updated>2019-06-08T15:18:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-1-MyBatis动态SQL简介"><a href="#5-1-MyBatis动态SQL简介" class="headerlink" title="5.1 MyBatis动态SQL简介"></a>5.1 MyBatis动态SQL简介</h1><p>1)动态 SQL是MyBatis强大特性之一。极大的简化程序员拼装SQL的操作<br>2)动态 SQL 元素和使用 JSTL 或其他类似基于 XML 的文本处理器相似<br>3)MyBatis 采用功能强大的基于 OGNL 的表达式来简化操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure></p><p>4)OGNL（ Object Graph Navigation Language ）对象图导航语言，这是一种强大的<br>表达式语言，通过它可以非常方便的来操作对象属性。 类似于我们的EL，SpEL等</p><pre><code>访问对象属性：        person.name调用方法：            person.getName()调用静态属性/方法：    @java.lang.Math@PI                        @java.util.UUID@randomUUID()调用构造方法：        new com.atguigu.bean.Person(‘admin’).name运算符：             +,-*,/,%逻辑运算符：         in,not in,&gt;,&gt;=,&lt;,&lt;=,==,!=【注意】xml中特殊符号如”,&gt;,&lt;等这些都需要使用转义字符</code></pre><h1 id="5-2-if-where"><a href="#5-2-if-where" class="headerlink" title="5.2 if  where"></a>5.2 if  where</h1><p>1)If用于完成简单的判断.<br>2)Where用于解决SQL语句中where关键字以及条件中第一个and或者or的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmpsByConditionIf&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class="line">select id , last_name ,email  , gender  </span><br><span class="line">from tbl_employee </span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class="line">and id = #&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class="line">and last_name = #&#123;lastName&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;email!=null and email.trim()!=&apos;&apos;&quot;&gt;</span><br><span class="line">and email = #&#123;email&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;&amp;quot;m&amp;quot;.equals(gender) or &amp;quot;f&amp;quot;.equals(gender)&quot;&gt;</span><br><span class="line">and gender = #&#123;gender&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h1 id="5-3-trim"><a href="#5-3-trim" class="headerlink" title="5.3 trim"></a>5.3 trim</h1><p>1)Trim 可以在条件判断完的SQL语句前后 添加或者去掉指定的字符</p><pre><code>prefix: 添加前缀prefixOverrides: 去掉前缀suffix: 添加后缀suffixOverrides: 去掉后缀</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmpsByConditionTrim&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class="line">select id , last_name ,email  , gender  </span><br><span class="line">from tbl_employee </span><br><span class="line">&lt;trim prefix=&quot;where&quot;  suffixOverrides=&quot;and&quot;&gt;</span><br><span class="line">&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class="line"> id = #&#123;id&#125; and</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class="line"> last_name = #&#123;lastName&#125; and</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;email!=null and email.trim()!=&apos;&apos;&quot;&gt;</span><br><span class="line"> email = #&#123;email&#125; and</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;&amp;quot;m&amp;quot;.equals(gender) or &amp;quot;f&amp;quot;.equals(gender)&quot;&gt;</span><br><span class="line">gender = #&#123;gender&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="5-4-set"><a href="#5-4-set" class="headerlink" title="5.4 set"></a>5.4 set</h1><p>1)set 主要是用于解决修改操作中SQL语句中可能多出逗号的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateEmpByConditionSet&quot;&gt;</span><br><span class="line">update  tbl_employee  </span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class="line"> last_name = #&#123;lastName&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;email!=null and email.trim()!=&apos;&apos;&quot;&gt;</span><br><span class="line"> email = #&#123;email&#125; ,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;&amp;quot;m&amp;quot;.equals(gender) or &amp;quot;f&amp;quot;.equals(gender)&quot;&gt;</span><br><span class="line">gender = #&#123;gender&#125; </span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line"> where id =#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><h1 id="5-5-choose-when、otherwise"><a href="#5-5-choose-when、otherwise" class="headerlink" title="5.5 choose(when、otherwise)"></a>5.5 choose(when、otherwise)</h1><p>1)choose 主要是用于分支判断，类似于java中的switch case,只会满足所有分支中的一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmpsByConditionChoose&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class="line">select id ,last_name, email,gender from tbl_employee</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;choose&gt;</span><br><span class="line">&lt;when test=&quot;id!=null&quot;&gt;</span><br><span class="line">id = #&#123;id&#125;</span><br><span class="line">&lt;/when&gt;</span><br><span class="line">&lt;when test=&quot;lastName!=null&quot;&gt;</span><br><span class="line">last_name = #&#123;lastName&#125;</span><br><span class="line">&lt;/when&gt;</span><br><span class="line">&lt;when test=&quot;email!=null&quot;&gt;</span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line">&lt;/when&gt;</span><br><span class="line">&lt;otherwise&gt;</span><br><span class="line"> gender = &apos;m&apos;</span><br><span class="line">&lt;/otherwise&gt;</span><br><span class="line">&lt;/choose&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h1 id="5-6-foreach"><a href="#5-6-foreach" class="headerlink" title="5.6 foreach"></a>5.6 foreach</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">foreach 主要用于循环迭代</span><br><span class="line">collection: 要迭代的集合</span><br><span class="line">item: 当前从集合中迭代出的元素</span><br><span class="line">open: 开始字符</span><br><span class="line">close:结束字符</span><br><span class="line">separator: 元素与元素之间的分隔符</span><br><span class="line">index:</span><br><span class="line">迭代的是List集合: index表示的当前元素的下标</span><br><span class="line">迭代的Map集合:  index表示的当前元素的key</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmpsByConditionForeach&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class="line"> select id , last_name, email ,gender from tbl_employee where  id in </span><br><span class="line"> &lt;foreach collection=&quot;ids&quot; item=&quot;curr_id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; &gt;</span><br><span class="line"> #&#123;curr_id&#125;</span><br><span class="line"> &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="5-7-sql"><a href="#5-7-sql" class="headerlink" title="5.7 sql"></a>5.7 sql</h1><p>1)sql 标签是用于抽取可重用的sql片段，将相同的，使用频繁的SQL片段抽取出来，单独定义，方便多次引用.<br>2)抽取SQL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id=&quot;selectSQL&quot;&gt;</span><br><span class="line">select id , last_name, email ,gender from tbl_employee</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure></p><p>3)引用SQL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;include refid=&quot;selectSQL&quot;&gt;&lt;/include&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;5-1-MyBatis动态SQL简介&quot;&gt;&lt;a href=&quot;#5-1-MyBatis动态SQL简介&quot; class=&quot;headerlink&quot; title=&quot;5.1 MyBatis动态SQL简介&quot;&gt;&lt;/a&gt;5.1 MyBatis动态SQL简介&lt;/h1&gt;&lt;p&gt;1)动态 S
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>4. MyBatis 映射文件</title>
    <link href="http://yoursite.com/2018/03/16/60.%20MyBatis%20%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/03/16/60. MyBatis 映射文件/</id>
    <published>2018-03-15T16:00:00.000Z</published>
    <updated>2019-06-08T14:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-1-Mybatis映射文件简介"><a href="#4-1-Mybatis映射文件简介" class="headerlink" title="4.1 Mybatis映射文件简介"></a>4.1 Mybatis映射文件简介</h1><p>1)MyBatis 的真正强大在于它的映射语句，也是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 就是针对 SQL 构建的，并且比普通的方法做的更好。<br>2)SQL 映射文件有很少的几个顶级元素（按照它们应该被定义的顺序）：</p><pre><code>cache – 给定命名空间的缓存配置。cache-ref – 其他命名空间缓存配置的引用。resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。【parameterMap – 已废弃！老式风格的参数映射。内联参数是首选,这个元素可能在将来被移除，这里不会记录。】sql – 可被其他语句引用的可重用语句块。insert – 映射插入语句update – 映射更新语句delete – 映射删除语句select – 映射查询语</code></pre><h1 id="4-2-Mybatis使用insert-update-delete-select完成sql-CRUD"><a href="#4-2-Mybatis使用insert-update-delete-select完成sql-CRUD" class="headerlink" title="4.2 Mybatis使用insert|update|delete|select完成sql CRUD"></a>4.2 Mybatis使用insert|update|delete|select完成sql CRUD</h1><h2 id="4-2-1-select-查"><a href="#4-2-1-select-查" class="headerlink" title="4.2.1 select 查"></a>4.2.1 select 查</h2><h3 id="1-Mapper接口方法"><a href="#1-Mapper接口方法" class="headerlink" title="1)Mapper接口方法"></a>1)Mapper接口方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Employee getEmployeeById(Integer id );</span><br></pre></td></tr></table></figure><h3 id="2-Mapper映射文件"><a href="#2-Mapper映射文件" class="headerlink" title="2)Mapper映射文件"></a>2)Mapper映射文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmployeeById&quot; </span><br><span class="line">          resultType=&quot;com.atguigu.mybatis.beans.Employee&quot; </span><br><span class="line">          databaseId=&quot;mysql&quot;&gt;</span><br><span class="line"> select * from tbl_employee where id = $&#123;_parameter&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-2-insert-增／加"><a href="#4-2-2-insert-增／加" class="headerlink" title="4.2.2 insert 增／加"></a>4.2.2 insert 增／加</h2><h3 id="1-Mapper接口方法-1"><a href="#1-Mapper接口方法-1" class="headerlink" title="1)Mapper接口方法"></a>1)Mapper接口方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Integer  insertEmployee(Employee employee);</span><br></pre></td></tr></table></figure><h3 id="2-Mapper映射文件-1"><a href="#2-Mapper映射文件-1" class="headerlink" title="2)Mapper映射文件"></a>2)Mapper映射文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertEmployee&quot; </span><br><span class="line">parameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class="line">databaseId=&quot;mysql&quot;&gt;</span><br><span class="line">insert into tbl_employee(last_name,email,gender) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-3-update-改"><a href="#4-2-3-update-改" class="headerlink" title="4.2.3  update 改"></a>4.2.3  update 改</h2><h3 id="1-Mapper接口方法-2"><a href="#1-Mapper接口方法-2" class="headerlink" title="1)Mapper接口方法"></a>1)Mapper接口方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Boolean  updateEmployee(Employee employee);</span><br></pre></td></tr></table></figure><h3 id="2-Mapper映射文件-2"><a href="#2-Mapper映射文件-2" class="headerlink" title="2)Mapper映射文件"></a>2)Mapper映射文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateEmployee&quot; &gt;</span><br><span class="line">update tbl_employee set last_name = #&#123;lastName&#125;,</span><br><span class="line">    email = #&#123;email&#125;,</span><br><span class="line">    gender = #&#123;gender&#125;</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-4-delete-删"><a href="#4-2-4-delete-删" class="headerlink" title="4.2.4  delete 删"></a>4.2.4  delete 删</h2><h3 id="1-Mapper接口方法-3"><a href="#1-Mapper接口方法-3" class="headerlink" title="1)Mapper接口方法"></a>1)Mapper接口方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void  deleteEmployeeById(Integer id );</span><br></pre></td></tr></table></figure><h3 id="2-Mapper映射文件-3"><a href="#2-Mapper映射文件-3" class="headerlink" title="2)Mapper映射文件"></a>2)Mapper映射文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=&quot;deleteEmployeeById&quot; &gt;</span><br><span class="line">delete from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><h1 id="4-3主键生成方式、获取主键值"><a href="#4-3主键生成方式、获取主键值" class="headerlink" title="4.3主键生成方式、获取主键值"></a>4.3主键生成方式、获取主键值</h1><h2 id="4-3-1-主键生成方式"><a href="#4-3-1-主键生成方式" class="headerlink" title="4.3.1    主键生成方式"></a>4.3.1    主键生成方式</h2><p>1)支持主键自增，例如MySQL数据库<br>2)不支持主键自增，例如Oracle数据库  </p><p> 需求: 插入一条新数据，立马查询这条数据. </p><h2 id="4-3-2-获取主键值"><a href="#4-3-2-获取主键值" class="headerlink" title="4.3.2 获取主键值"></a>4.3.2 获取主键值</h2><p>1)若数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），则可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置到目标属性上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertEmployee&quot; parameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class="line">databaseId=&quot;mysql&quot;</span><br><span class="line">useGeneratedKeys=&quot;true&quot;</span><br><span class="line">keyProperty=&quot;id&quot;&gt;</span><br><span class="line">insert into tbl_employee(last_name,email,gender) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><p>2)而对于不支持自增型主键的数据库（例如 Oracle），则可以使用 selectKey 子元素：selectKey  元素将会首先运行，id  会被设置，然后插入语句会被调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertEmployee&quot; </span><br><span class="line">parameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class="line">databaseId=&quot;oracle&quot;&gt;</span><br><span class="line">&lt;selectKey order=&quot;BEFORE&quot; keyProperty=&quot;id&quot; </span><br><span class="line">                                       resultType=&quot;integer&quot;&gt;</span><br><span class="line">select employee_seq.nextval from dual </span><br><span class="line">&lt;/selectKey&gt;</span><br><span class="line">insert into orcl_employee(id,last_name,email,gender) values(#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertEmployee&quot; </span><br><span class="line">parameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class="line">databaseId=&quot;oracle&quot;&gt;</span><br><span class="line">&lt;selectKey order=&quot;AFTER&quot; keyProperty=&quot;id&quot; </span><br><span class="line">                                         resultType=&quot;integer&quot;&gt;</span><br><span class="line">select employee_seq.currval from dual </span><br><span class="line">&lt;/selectKey&gt;</span><br><span class="line">insert into orcl_employee(id,last_name,email,gender) values(employee_seq.nextval,#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h1 id="4-4-参数传递"><a href="#4-4-参数传递" class="headerlink" title="4.4 参数传递"></a>4.4 参数传递</h1><h2 id="4-4-1-参数传递的方式"><a href="#4-4-1-参数传递的方式" class="headerlink" title="4.4.1 参数传递的方式"></a>4.4.1 参数传递的方式</h2><h3 id="1-单个普通类型参数"><a href="#1-单个普通类型参数" class="headerlink" title="1)单个普通类型参数"></a>1)单个普通类型参数</h3><pre><code>可以接受基本类型，包装类型，字符串类型等。这种情况MyBatis可直接使用这个参数，不需要经过任何处理。</code></pre><h3 id="2-多个参数"><a href="#2-多个参数" class="headerlink" title="2)多个参数"></a>2)多个参数</h3><pre><code>任意多个参数，都会被MyBatis重新包装成一个Map传入。Map的key是param1，param2，或者0，1…，值就是参数的值</code></pre><h3 id="3-命名参数"><a href="#3-命名参数" class="headerlink" title="3)命名参数"></a>3)命名参数</h3><pre><code>为参数使用@Param起一个名字，MyBatis就会将这些参数封装进map中，key就是我们自己指定的名字</code></pre><h3 id="4-POJO"><a href="#4-POJO" class="headerlink" title="4)POJO"></a>4)POJO</h3><pre><code>当这些参数属于我们业务POJO时，我们直接传递POJO</code></pre><h3 id="5-Map"><a href="#5-Map" class="headerlink" title="5)Map"></a>5)Map</h3><pre><code>我们也可以封装多个参数为map，直接传递</code></pre><h3 id="6-Collection-Array"><a href="#6-Collection-Array" class="headerlink" title="6)Collection/Array"></a>6)Collection/Array</h3><pre><code>会被MyBatis封装成一个map传入, Collection对应的key是collection,Array对应的key是array. 如果确定是List集合，key还可以是list.</code></pre><h2 id="4-4-2-参数传递源码分析"><a href="#4-4-2-参数传递源码分析" class="headerlink" title="4.4.2 参数传递源码分析"></a>4.4.2 参数传递源码分析</h2><h3 id="1-以命名参数为例"><a href="#1-以命名参数为例" class="headerlink" title="1)以命名参数为例:"></a>1)以命名参数为例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public Employee getEmployeeByIdAndLastName</span><br><span class="line">(@Param(&quot;id&quot;)Integer id, @Param(&quot;lastName&quot;)String lastName);</span><br></pre></td></tr></table></figure><h3 id="2-源码"><a href="#2-源码" class="headerlink" title="2)源码:"></a>2)源码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public Object getNamedParams(Object[] args) &#123;</span><br><span class="line">    final int paramCount = names.size();</span><br><span class="line">    if (args == null || paramCount == 0) &#123;</span><br><span class="line">      return null;</span><br><span class="line">    &#125; else if (!hasParamAnnotation &amp;&amp; paramCount == 1) &#123;</span><br><span class="line">      return args[names.firstKey()];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      final Map&lt;String, Object&gt; param = new ParamMap&lt;Object&gt;();</span><br><span class="line">      int i = 0;</span><br><span class="line">      for (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class="line">        param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class="line">        // add generic param names (param1, param2, ...)</span><br><span class="line">        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);</span><br><span class="line">        // ensure not to overwrite parameter named with @Param</span><br><span class="line">        if (!names.containsValue(genericParamName)) &#123;</span><br><span class="line">          param.put(genericParamName, args[entry.getKey()]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      return param;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-3-参数处理"><a href="#4-4-3-参数处理" class="headerlink" title="4.4.3 参数处理"></a>4.4.3 参数处理</h2><h3 id="1-参数位置支持的属性"><a href="#1-参数位置支持的属性" class="headerlink" title="1)参数位置支持的属性:"></a>1)参数位置支持的属性:</h3><p>javaType、jdbcType、mode、numericScale、resultMap、typeHandler、jdbcTypeName、expression  </p><p>2)实际上通常被设置的是：可能为空的列名指定 jdbcType ,例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into orcl_employee(id,last_name,email,gender) values(employee_seq.nextval,#&#123;lastName,jdbcType=NULL &#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-4-4-参数的获取方式"><a href="#4-4-4-参数的获取方式" class="headerlink" title="4.4.4 参数的获取方式"></a>4.4.4 参数的获取方式</h2><blockquote><p>1)#{key}：获取参数的值，预编译到SQL中。安全。<br>2)${key}：获取参数的值，拼接到SQL中。有SQL注入问题。</p></blockquote><h1 id="4-5-select查询的几种情况"><a href="#4-5-select查询的几种情况" class="headerlink" title="4.5 select查询的几种情况"></a>4.5 select查询的几种情况</h1><h2 id="1-查询单行数据返回单个对象"><a href="#1-查询单行数据返回单个对象" class="headerlink" title="1)查询单行数据返回单个对象"></a>1)查询单行数据返回单个对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Employee getEmployeeById(Integer id );</span><br></pre></td></tr></table></figure><h2 id="2-查询多行数据返回对象的集合"><a href="#2-查询多行数据返回对象的集合" class="headerlink" title="2)查询多行数据返回对象的集合"></a>2)查询多行数据返回对象的集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Employee&gt; getAllEmps();</span><br></pre></td></tr></table></figure><h2 id="3-查询单行数据返回Map集合"><a href="#3-查询单行数据返回Map集合" class="headerlink" title="3)查询单行数据返回Map集合"></a>3)查询单行数据返回Map集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Map&lt;String,Object&gt; getEmployeeByIdReturnMap(Integer id );</span><br></pre></td></tr></table></figure><h2 id="4-查询多行数据返回Map集合"><a href="#4-查询多行数据返回Map集合" class="headerlink" title="4)查询多行数据返回Map集合"></a>4)查询多行数据返回Map集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@MapKey(&quot;id&quot;) // 指定使用对象的哪个属性来充当map的key</span><br><span class="line">public Map&lt;Integer,Employee&gt;  getAllEmpsReturnMap();</span><br></pre></td></tr></table></figure><h1 id="4-6-resultType自动映射"><a href="#4-6-resultType自动映射" class="headerlink" title="4.6 resultType自动映射"></a>4.6 resultType自动映射</h1><blockquote><p>1)autoMappingBehavior默认是PARTIAL，开启自动映射的功能。唯一的要求是结果集列名和javaBean属性名一致  </p></blockquote><blockquote><p>2)如果autoMappingBehavior设置为null则会取消自动映射  </p></blockquote><blockquote><p>3)数据库字段命名规范，POJO属性符合驼峰命名法，如A_COLUMNaColumn，我们可以开启自动驼峰命名规则映射功能，mapUnderscoreToCamelCase=true</p></blockquote><h1 id="4-7-resultMap自定义映射"><a href="#4-7-resultMap自定义映射" class="headerlink" title="4.7 resultMap自定义映射"></a>4.7 resultMap自定义映射</h1><pre><code>1)自定义resultMap，实现高级结果集映射2)id ：用于完成主键值的映射3)result ：用于完成普通列的映射4)association ：一个复杂的类型关联;许多结果将包成这种类型5)collection ： 复杂类型的集</code></pre><h2 id="4-7-1-id-amp-result"><a href="#4-7-1-id-amp-result" class="headerlink" title="4.7.1  id&amp;result"></a>4.7.1  id&amp;result</h2><p><a href="https://imgchr.com/i/EsoBJP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/07/EsoBJP.md.png" alt="EsoBJP.md.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmployeeById&quot; resultMap=&quot;myEmp&quot;&gt;</span><br><span class="line">select id, last_name,email, gender from tbl_employee where id =#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Employee&quot; id=&quot;myEmp&quot;&gt;</span><br><span class="line">&lt;id column=&quot;id&quot;  property=&quot;id&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h2 id="4-7-2-association"><a href="#4-7-2-association" class="headerlink" title="4.7.2  association"></a>4.7.2  association</h2><p>1)POJO中的属性可能会是一个对象,我们可以使用联合查询，并以级联属性的方式封装对象.使用association标签定义对象的封装规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Department &#123;</span><br><span class="line">private Integer id ; </span><br><span class="line">private String departmentName ;</span><br><span class="line">//  省略 get/set方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Employee &#123;</span><br><span class="line">private Integer id ; </span><br><span class="line">private String lastName; </span><br><span class="line">private String email ;</span><br><span class="line">private String gender ;</span><br><span class="line">private Department dept ;</span><br><span class="line">    // 省略 get/set方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-使用级联的方式"><a href="#2-使用级联的方式" class="headerlink" title="2)使用级联的方式:"></a>2)使用级联的方式:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmployeeAndDept&quot; resultMap=&quot;myEmpAndDept&quot; &gt;</span><br><span class="line">SELECT e.id eid, e.last_name, e.email,e.gender ,d.id did, d.dept_name FROM tbl_employee e , tbl_dept d   WHERE e.d_id = d.id  AND e.id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Employee&quot; id=&quot;myEmpAndDept&quot;&gt;</span><br><span class="line">&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class="line">    &lt;!-- 级联的方式 --&gt;</span><br><span class="line">&lt;result column=&quot;did&quot; property=&quot;dept.id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;dept_name&quot; property=&quot;dept.departmentName&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h3 id="3-Association‘"><a href="#3-Association‘" class="headerlink" title="3)Association‘"></a>3)Association‘</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Employee&quot; id=&quot;myEmpAndDept&quot;&gt;</span><br><span class="line">&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class="line">&lt;association property=&quot;dept&quot; javaType=&quot;com.atguigu.mybatis.beans.Department&quot;&gt;</span><br><span class="line">&lt;id column=&quot;did&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h2 id="4-7-3-association-分步查询"><a href="#4-7-3-association-分步查询" class="headerlink" title="4.7.3  association 分步查询"></a>4.7.3  association 分步查询</h2><p>1)实际的开发中，对于每个实体类都应该有具体的增删改查方法，也就是DAO层， 因此<br>对于查询员工信息并且将对应的部门信息也查询出来的需求，就可以通过分步的方式<br>完成查询。  </p><blockquote><p>①先通过员工的id查询员工信息<br>②再通过查询出来的员工信息中的外键(部门id)查询对应的部门信息. </p><blockquote><p>cha xun查询查询之前先 建立两个文件<br>DepartmentMapper.java<br>DepartmentMapper.jps<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmployeeAndDeptStep&quot; resultMap=&quot;myEmpAndDeptStep&quot;&gt;</span><br><span class="line"> select id, last_name, email,gender,d_id  from tbl_employee where id =#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap type=&quot;com.mybatis.beans.Employee&quot; id=&quot;myEmpAndDeptStep&quot;&gt;</span><br><span class="line">&lt;id column=&quot;id&quot;  property=&quot;id&quot; /&gt;</span><br><span class="line">&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class="line">&lt;association property=&quot;dept&quot; select=&quot;com.mybatis.dao.DepartmentMapper.getDeptById&quot; </span><br><span class="line">column=&quot;d_id&quot; fetchType=&quot;eager&quot;&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><h2 id="4-7-4-association-分步查询使用延迟加载"><a href="#4-7-4-association-分步查询使用延迟加载" class="headerlink" title="4.7.4  association 分步查询使用延迟加载"></a>4.7.4  association 分步查询使用延迟加载</h2><p>1)在分步查询的基础上，可以使用延迟加载来提升查询的效率，只需要在全局的<br>Settings中进行如下的配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开启延迟加载 --&gt;</span><br><span class="line">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;!-- 设置加载的数据是按需还是全部 --&gt;</span><br><span class="line">&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br></pre></td></tr></table></figure></p><h2 id="4-7-5-collection"><a href="#4-7-5-collection" class="headerlink" title="4.7.5 collection"></a>4.7.5 collection</h2><p>1)POJO中的属性可能会是一个集合对象,我们可以使用联合查询，并以级联属性的方式封装对象.使用collection标签定义对象的封装规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Department &#123;</span><br><span class="line">private Integer id ; </span><br><span class="line">private String departmentName ;</span><br><span class="line">private List&lt;Employee&gt; emps ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2)Collection<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getDeptAndEmpsById&quot; resultMap=&quot;myDeptAndEmps&quot;&gt;</span><br><span class="line">SELECT d.id did, d.dept_name ,e.id eid ,e.last_name ,e.email,e.gender </span><br><span class="line">FROM tbl_dept d  LEFT OUTER JOIN tbl_employee e ON  d.id = e.d_id </span><br><span class="line">WHERE d.id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Department&quot; id=&quot;myDeptAndEmps&quot;&gt;</span><br><span class="line">&lt;id column=&quot;did&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">property: 关联的属性名</span><br><span class="line">ofType: 集合中元素的类型</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;collection property=&quot;emps&quot;  ofType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class="line">&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class="line">&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p><h3 id="4-7-6-collection-分步查询"><a href="#4-7-6-collection-分步查询" class="headerlink" title="4.7.6 collection 分步查询"></a>4.7.6 collection 分步查询</h3><p>1)实际的开发中，对于每个实体类都应该有具体的增删改查方法，也就是DAO层， 因此<br>对于查询部门信息并且将对应的所有的员工信息也查询出来的需求，就可以通过分步的方式完成查询。  </p><blockquote><p>③先通过部门的id查询部门信息<br>④再通过部门id作为员工的外键查询对应的部门信息.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getDeptAndEmpsByIdStep&quot; resultMap=&quot;myDeptAndEmpsStep&quot;&gt;</span><br><span class="line"> select id ,dept_name  from tbl_dept where id = #&#123;id&#125;</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line"> &lt;resultMap type=&quot;com.atguigu.mybatis.beans.Department&quot; id=&quot;myDeptAndEmpsStep&quot;&gt;</span><br><span class="line"> &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span><br><span class="line"> &lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class="line"> &lt;collection property=&quot;emps&quot; </span><br><span class="line"> select=&quot;com.atguigu.mybatis.dao.EmployeeMapper.getEmpsByDid&quot;</span><br><span class="line"> column=&quot;id&quot;&gt;</span><br><span class="line"> &lt;/collection&gt;</span><br><span class="line"> &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="4-7-7-collection-分步查询使用延迟加载"><a href="#4-7-7-collection-分步查询使用延迟加载" class="headerlink" title="4.7.7 collection 分步查询使用延迟加载"></a>4.7.7 collection 分步查询使用延迟加载</h2><pre><code>懒加载 延迟加载 按需求加载（可以提高查询效率）标签&lt;seeting&gt; 加两行代码 直接去api里拷贝（严格区分大小写）</code></pre><h2 id="4-7-8-扩展-分步查询多列值的传递"><a href="#4-7-8-扩展-分步查询多列值的传递" class="headerlink" title="4.7.8 扩展: 分步查询多列值的传递"></a>4.7.8 扩展: 分步查询多列值的传递</h2><pre><code>&gt;1)如果分步查询时，需要传递给调用的查询中多个参数，则需要将多个参数封装成   Map来进行传递，语法如下: {k1=v1, k2=v2....}  2)在所调用的查询方，取值时就要参考Map的取值方式，需要严格的按照封装map   时所用的key来取值. </code></pre><h2 id="4-7-9-扩展-association-或-collection的-fetchType属性"><a href="#4-7-9-扩展-association-或-collection的-fetchType属性" class="headerlink" title="4.7.9 扩展: association 或 collection的 fetchType属性"></a>4.7.9 扩展: association 或 collection的 fetchType属性</h2><pre><code>1)在&lt;association&gt;  和&lt;collection&gt;标签中都可以设置fetchType，  指定本次查询是否要使用延迟加载。默认为 fetchType=”lazy”,  如果本次的查询不想使用延迟加载，则可设置为fetchType=”eager”. 2)fetchType可以灵活的设置查询是否需要使用延迟加载，而不需要因为某个查询不想使用延迟加载将全局的延迟加载设置关闭.</code></pre><h3 id="4-8-0-扩展：表链接"><a href="#4-8-0-扩展：表链接" class="headerlink" title="4.8.0 扩展：表链接"></a>4.8.0 扩展：表链接</h3><pre><code>内链接 inner join on 取交集外链接    左外链 A left outer join B on    右外链 B left outer join A o    主表：主表的数据读取    从表： 从表只取与主表匹配的数据</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4-1-Mybatis映射文件简介&quot;&gt;&lt;a href=&quot;#4-1-Mybatis映射文件简介&quot; class=&quot;headerlink&quot; title=&quot;4.1 Mybatis映射文件简介&quot;&gt;&lt;/a&gt;4.1 Mybatis映射文件简介&lt;/h1&gt;&lt;p&gt;1)MyBatis 
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>3. MyBatis全局配置文件</title>
    <link href="http://yoursite.com/2018/03/14/59.%20MyBatis%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/03/14/59. MyBatis全局配置文件/</id>
    <published>2018-03-13T16:00:00.000Z</published>
    <updated>2019-06-08T14:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-1-MyBatis全局配置文件简介"><a href="#3-1-MyBatis全局配置文件简介" class="headerlink" title="3.1 MyBatis全局配置文件简介"></a>3.1 MyBatis全局配置文件简介</h1><p>1)The MyBatis configuration contains settings and properties that have a dramatic effect on how MyBatis behaves.<br>MyBatis 的配置文件包含了影响 MyBatis 行为甚深的设置（settings）和属性（properties）信息。<br>2)文件结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configuration 配置 </span><br><span class="line">properties 属性</span><br><span class="line">settings 设置</span><br><span class="line">typeAliases 类型命名</span><br><span class="line">typeHandlers 类型处理器</span><br><span class="line">objectFactory 对象工厂</span><br><span class="line">plugins 插件</span><br><span class="line">environments 环境 </span><br><span class="line">environment 环境变量 </span><br><span class="line"> transactionManager 事务管理器</span><br><span class="line">dataSource 数据源</span><br><span class="line">databaseIdProvider 数据库厂商标识</span><br><span class="line">mappers 映射器</span><br></pre></td></tr></table></figure><h1 id="3-2-properties属性"><a href="#3-2-properties属性" class="headerlink" title="3.2 properties属性"></a>3.2 properties属性</h1><p>1)可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">     &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">     &lt;property name=&quot;url&quot; </span><br><span class="line">             value=&quot;jdbc:mysql://localhost:3306/test_mybatis&quot; /&gt;</span><br><span class="line">     &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">     &lt;property name=&quot;password&quot; value=&quot;1234&quot; /&gt;</span><br><span class="line"> &lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>2)然而properties的作用并不单单是这样，你可以创建一个资源文件，名为jdbc.properties的文件,将四个连接字符串的数据在资源文件中通过键值 对(key=value)的方式放置，不要任何符号，一条占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/mybatis_1129</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=1234</span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line">properties: 引入外部的属性文件</span><br><span class="line">resource: 从类路径下引入属性文件 </span><br><span class="line">url:  引入网络路径或者是磁盘路径下的属性文件</span><br><span class="line">--&gt;</span><br><span class="line">&lt;properties resource=&quot;db.properties&quot; &gt;&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>3)在environment元素的dataSource元素中为其动态设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;oracle&quot;&gt;</span><br><span class="line">&lt;environment id=&quot;mysql&quot;&gt;</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; </span><br><span class="line">                         value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; </span><br><span class="line">                         value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><h1 id="3-3-settings设置"><a href="#3-3-settings设置" class="headerlink" title="3.3 settings设置"></a>3.3 settings设置</h1><p>1)这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。<br>2)包含如下的setting设置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;</span><br><span class="line">&lt;setting name=&quot;lazyLoadTriggerMethods&quot;</span><br><span class="line">           value=&quot;equals,clone,hashCode,toString&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h1 id="3-4-typeAliases-别名处理"><a href="#3-4-typeAliases-别名处理" class="headerlink" title="3.4 typeAliases 别名处理"></a>3.4 typeAliases 别名处理</h1><p>1)类型别名是为 Java 类型设置一个短的名字，可以方便我们引用某个类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line"> &lt;typeAlias type=&quot;com.atguigu.mybatis.beans.Employee&quot;</span><br><span class="line">                   alias=&quot;emp&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><p>2)类很多的情况下，可以批量设置别名这个包下的每一个类创建一个默认的别名，就是简单类名小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line"> &lt;package name=&quot;com.atguigu.mybatis.beans&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><p>3)MyBatis已经取好的别名</p><p><img src="https://s2.ax1x.com/2019/05/07/Es547n.png" alt="Es547n.png"></p><h2 id="3-5-typeHandlers-类型处理器"><a href="#3-5-typeHandlers-类型处理器" class="headerlink" title="3.5 typeHandlers 类型处理器"></a>3.5 typeHandlers 类型处理器</h2><p>1)无论是 MyBatis在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型  </p><p>2)MyBatis中提供的类型处理器:  </p><p><img src="https://s2.ax1x.com/2019/05/07/Es5LX4.png" alt="Es5LX4.png"></p><p>3)日期和时间的处理，JDK1.8以前一直是个头疼的问题。我们通常使用JSR310规范领导者Stephen Colebourne创建的Joda-Time来操作。1.8已经实现全部的JSR310规范了<br>4)日期时间处理上，我们可以使用MyBatis基于JSR310（Date and Time API）编写的各种日期时间类型处理器。<br>5)MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的,如需注册，需要下载mybatistypehandlers-jsr310,并通过如下方式注册</p><p><img src="https://s2.ax1x.com/2019/05/07/Es5v7R.png" alt="Es5v7R.png"></p><h2 id="6-自定义类型转换器"><a href="#6-自定义类型转换器" class="headerlink" title="6)自定义类型转换器"></a>6)自定义类型转换器</h2><blockquote><p>①我们可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型<br>②步骤  </p><ul><li>实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler</li><li>指定其映射某个JDBC类型（可选操作）</li><li>在mybatis全局配置文件中注册</li></ul></blockquote><h1 id="3-6-plugins-插件机制"><a href="#3-6-plugins-插件机制" class="headerlink" title="3.6 plugins 插件机制"></a>3.6 plugins 插件机制</h1><p>1)插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行  </p><h2 id="2-四大对象"><a href="#2-四大对象" class="headerlink" title="2)四大对象:"></a>2)四大对象:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</span><br><span class="line"></span><br><span class="line">ParameterHandler (getParameterObject, setParameters) </span><br><span class="line"></span><br><span class="line">ResultSetHandler (handleResultSets, handleOutputParameters) </span><br><span class="line"></span><br><span class="line">StatementHandler (prepare, parameterize, batch, update, query)</span><br></pre></td></tr></table></figure><h1 id="3-7-environments-环境配置"><a href="#3-7-environments-环境配置" class="headerlink" title="3.7 environments 环境配置"></a>3.7 environments 环境配置</h1><p>1)MyBatis可以配置多种环境，比如开发、测试和生产环境需要有不同的配置<br>2)每种环境使用一个environment标签进行配置并指定唯一标识符<br>3)可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境<br>4)environment-指定具体环境  </p><blockquote><p>id：指定当前环境的唯一标识<br>transactionManager、和dataSource都必须有  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;oracle&quot;&gt;</span><br><span class="line">&lt;environment id=&quot;mysql&quot;&gt;</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br><span class="line"> &lt;environment id=&quot;oracle&quot;&gt;</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;$&#123;orcl.driver&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;$&#123;orcl.url&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;$&#123;orcl.username&#125;&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;$&#123;orcl.password&#125;&quot; /&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt; </span><br><span class="line"></span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><h2 id="5-transactionManager"><a href="#5-transactionManager" class="headerlink" title="5)transactionManager"></a>5)transactionManager</h2><p>type：  JDBC | MANAGED | 自定义  </p><ul><li>JDBC：使用了 JDBC   的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围。 JdbcTransactionFactory</li><li>MANAGED：不提交或回滚一个连接、让容器来管理事务的整个生命周期（比如 JEE应用服务器的上下文）。  ManagedTransactionFactory</li><li>自定义：实现TransactionFactory接口，type=全类名/别名</li></ul><h2 id="6-dataSource"><a href="#6-dataSource" class="headerlink" title="6)dataSource"></a>6)dataSource</h2><p>type：  UNPOOLED | POOLED | JNDI | 自定义</p><ul><li>UNPOOLED：不使用连接池， UnpooledDataSourceFactory</li><li>POOLED：使用连接池， PooledDataSourceFactory</li><li>JNDI： 在EJB 或应用服务器这类容器中查找指定的数据源</li><li>自定义：实现DataSourceFactory接口，定义数据源的获取方式。</li></ul><p>7)实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</p><h1 id="3-8-databaseIdProvider数据库厂商标识"><a href="#3-8-databaseIdProvider数据库厂商标识" class="headerlink" title="3.8 databaseIdProvider数据库厂商标识"></a>3.8 databaseIdProvider数据库厂商标识</h1><p>1)MyBatis 可以根据不同的数据库厂商执行不同的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;</span><br><span class="line"> &lt;property name=&quot;MySQL&quot; value=&quot;mysql&quot;/&gt;</span><br><span class="line"> &lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot;/&gt;</span><br><span class="line">&lt;/databaseIdProvider&gt;</span><br></pre></td></tr></table></figure><p>2)Type： DB_VENDOR, 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义.<br>会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短.  </p><pre><code>    Property-name：数据库厂商标识Property-value：为标识起一个别名，方便SQL语句使用databaseId属性引用</code></pre><p>3)配置了databaseIdProvider后，在SQL映射文件中的增删改查标签中使用databaseId<br>来指定数据库标识的别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getEmployeeById&quot;</span><br><span class="line">         resultType=&quot;com.atguigu.mybatis.beans.Employee&quot; </span><br><span class="line">         databaseId=&quot;mysql&quot;&gt;</span><br><span class="line"> select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="4-MyBatis匹配规则如下"><a href="#4-MyBatis匹配规则如下" class="headerlink" title="4)MyBatis匹配规则如下:"></a>4)MyBatis匹配规则如下:</h2><blockquote><p>①如果没有配置databaseIdProvider标签，那么databaseId=null<br>②如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId=配置指定的值，否则依旧为null<br>③如果databaseId不为null，他只会找到配置databaseId的sql语句<br>④MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。</p></blockquote><h1 id="3-9-mappers-映射器"><a href="#3-9-mappers-映射器" class="headerlink" title="3.9 mappers 映射器"></a>3.9 mappers 映射器</h1><p>1)用来在mybatis初始化的时候，告诉mybatis需要引入哪些Mapper映射文件<br>2)mapper逐个注册SQL映射文件</p><pre><code>resource : 引入类路径下的文件       url:引入网络路径或者是磁盘路径下的文件    class :引入Mapper接口.        有SQL映射文件 , 要求Mapper接口与 SQL映射文件同名同位置.         没有SQL映射文件 , 使用注解在接口的方法上写SQL语句.</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=&quot;EmployeeMapper.xml&quot; /&gt;</span><br><span class="line">&lt;mapper class=&quot;com.atguigu.mybatis.dao.EmployeeMapper&quot;/&gt;</span><br><span class="line">&lt;package name=&quot;com.atguigu.mybatis.dao&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>3)使用批量注册，这种方式要求SQL映射文件名必须和接口名相同并且在同一目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;package name=&quot;com.atguigu.mybatis.dao&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-1-MyBatis全局配置文件简介&quot;&gt;&lt;a href=&quot;#3-1-MyBatis全局配置文件简介&quot; class=&quot;headerlink&quot; title=&quot;3.1 MyBatis全局配置文件简介&quot;&gt;&lt;/a&gt;3.1 MyBatis全局配置文件简介&lt;/h1&gt;&lt;p&gt;1)
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>2. MyBatis HelloWorld</title>
    <link href="http://yoursite.com/2018/03/11/58.%20MyBatis%20HelloWorld/"/>
    <id>http://yoursite.com/2018/03/11/58. MyBatis HelloWorld/</id>
    <published>2018-03-10T16:00:00.000Z</published>
    <updated>2019-06-08T14:41:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-1-开发环境的准备"><a href="#2-1-开发环境的准备" class="headerlink" title="2.1 开发环境的准备"></a>2.1 开发环境的准备</h1><h2 id="1-导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包"><a href="#1-导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包" class="headerlink" title="1)导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包"></a>1)导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myBatis-3.4.1.jar</span><br><span class="line">mysql-connector-java-5.1.37-bin.jar</span><br><span class="line">log4j.jar</span><br></pre></td></tr></table></figure><h2 id="2-导入log4j-的配置文件"><a href="#2-导入log4j-的配置文件" class="headerlink" title="2)导入log4j 的配置文件"></a>2)导入log4j 的配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;appender name=&quot;STDOUT&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;</span><br><span class="line">   &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="line">   &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="line">    &lt;param name=&quot;ConversionPattern&quot; value=&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n&quot; /&gt;</span><br><span class="line">   &lt;/layout&gt;</span><br><span class="line"> &lt;/appender&gt;</span><br><span class="line"> &lt;logger name=&quot;java.sql&quot;&gt;</span><br><span class="line">   &lt;level value=&quot;debug&quot; /&gt;</span><br><span class="line"> &lt;/logger&gt;</span><br><span class="line"> &lt;logger name=&quot;org.apache.ibatis&quot;&gt;</span><br><span class="line">   &lt;level value=&quot;info&quot; /&gt;</span><br><span class="line"> &lt;/logger&gt;</span><br><span class="line"> &lt;root&gt;</span><br><span class="line">   &lt;level value=&quot;debug&quot; /&gt;</span><br><span class="line">   &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line"> &lt;/root&gt;</span><br><span class="line">&lt;/log4j:configuration&gt;</span><br></pre></td></tr></table></figure><h1 id="2-2-创建测试表"><a href="#2-2-创建测试表" class="headerlink" title="2.2 创建测试表"></a>2.2 创建测试表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 创建库</span><br><span class="line">CREATE DATABASE test_mybatis;</span><br><span class="line">-- 使用库</span><br><span class="line">USE test_mybatis;</span><br><span class="line">-- 创建表</span><br><span class="line">CREATE TABLE tbl_employee(</span><br><span class="line">   id INT(11) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">   last_name VARCHAR(50),</span><br><span class="line">   email VARCHAR(50),</span><br><span class="line">   gender CHAR(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="2-3-创建javaBean"><a href="#2-3-创建javaBean" class="headerlink" title="2.3 创建javaBean"></a>2.3 创建javaBean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Employee &#123;</span><br><span class="line"></span><br><span class="line">private Integer id ; </span><br><span class="line">private String lastName; </span><br><span class="line">private String email ;</span><br><span class="line">private String gender ;</span><br><span class="line">public Integer getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line">public void setId(Integer id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line">public String getLastName() &#123;</span><br><span class="line">return lastName;</span><br><span class="line">&#125;</span><br><span class="line">public void setLastName(String lastName) &#123;</span><br><span class="line">this.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line">public String getEmail() &#123;</span><br><span class="line">return email;</span><br><span class="line">&#125;</span><br><span class="line">public void setEmail(String email) &#123;</span><br><span class="line">this.email = email;</span><br><span class="line">&#125;</span><br><span class="line">public String getGender() &#123;</span><br><span class="line">return gender;</span><br><span class="line">&#125;</span><br><span class="line">public void setGender(String gender) &#123;</span><br><span class="line">this.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Employee [id=&quot; + id + &quot;, lastName=&quot; + lastName + &quot;, email=&quot; + email + &quot;, gender=&quot; + gender + &quot;]&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-3-创建MyBatis的全局配置文件"><a href="#2-3-创建MyBatis的全局配置文件" class="headerlink" title="2.3 创建MyBatis的全局配置文件"></a>2.3 创建MyBatis的全局配置文件</h1><p>1)参考MyBatis的官网手册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- 数据库连接环境的配置 --&gt;</span><br><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">&lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis_1129&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;1234&quot; /&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br><span class="line">&lt;!-- 引入SQL映射文件,Mapper映射文件 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=&quot;EmployeeMapper.xml&quot; /&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h1 id="2-4-创建Mybatis的sql映射文件"><a href="#2-4-创建Mybatis的sql映射文件" class="headerlink" title="2.4 创建Mybatis的sql映射文件"></a>2.4 创建Mybatis的sql映射文件</h1><h2 id="1-参考MyBatis的官方手册"><a href="#1-参考MyBatis的官方手册" class="headerlink" title="1)参考MyBatis的官方手册"></a>1)参考MyBatis的官方手册</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;suibian&quot;&gt;</span><br><span class="line">&lt;select id=&quot;selectEmployee&quot; resultType=&quot;com.atguigu.myabtis.helloWorld.Employee&quot;&gt;</span><br><span class="line">select id ,last_name lastName ,email ,gender from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">&lt;!-- select * from tbl_employee  where id = #&#123;id&#125; --&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h1 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h1><h2 id="1-参考MyBatis的官方手册-1"><a href="#1-参考MyBatis的官方手册-1" class="headerlink" title="1)参考MyBatis的官方手册"></a>1)参考MyBatis的官方手册</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() throws Exception &#123;</span><br><span class="line">String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = </span><br><span class="line">new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">System.out.println(sqlSessionFactory);</span><br><span class="line"></span><br><span class="line">SqlSession session  = sqlSessionFactory.openSession();</span><br><span class="line">try &#123;</span><br><span class="line">Employee employee = </span><br><span class="line">session.selectOne(&quot;suibian.selectEmployee&quot;, 1001);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-6-Mapper接口开发MyBatis-HelloWorld"><a href="#2-6-Mapper接口开发MyBatis-HelloWorld" class="headerlink" title="2.6 Mapper接口开发MyBatis HelloWorld"></a>2.6 Mapper接口开发MyBatis HelloWorld</h1><h2 id="1-编写Mapper接口"><a href="#1-编写Mapper接口" class="headerlink" title="1)编写Mapper接口"></a>1)编写Mapper接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface EmployeeMapper &#123;</span><br><span class="line"></span><br><span class="line">public Employee getEmployeeById(Integer id );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-完成两个绑定"><a href="#2-完成两个绑定" class="headerlink" title="2)完成两个绑定"></a>2)完成两个绑定</h2><blockquote><p>①Mapper接口与Mapper映射文件的绑定<br>在Mppper映射文件中的<mapper>标签中的namespace中必须指定Mapper接口的全类名<br>②Mapper映射文件中的增删改查标签的id必须指定成Mapper接口中的方法名.  </mapper></p></blockquote><h2 id="3-获取Mapper接口的代理实现类对象"><a href="#3-获取Mapper接口的代理实现类对象" class="headerlink" title="3)获取Mapper接口的代理实现类对象"></a>3)获取Mapper接口的代理实现类对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()  throws Exception&#123;</span><br><span class="line">String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">InputStream inputStream =</span><br><span class="line">                 Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = </span><br><span class="line">new SqlSessionFactoryBuilder()</span><br><span class="line">              .build(inputStream);</span><br><span class="line">SqlSession session = </span><br><span class="line">                         sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">//Mapper接口:获取Mapper接口的 代理实现类对象</span><br><span class="line">EmployeeMapper mapper =</span><br><span class="line">                 session.getMapper(EmployeeMapper.class);</span><br><span class="line">Employee employee = </span><br><span class="line">                  mapper.getEmployeeById(1006);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-1-开发环境的准备&quot;&gt;&lt;a href=&quot;#2-1-开发环境的准备&quot; class=&quot;headerlink&quot; title=&quot;2.1 开发环境的准备&quot;&gt;&lt;/a&gt;2.1 开发环境的准备&lt;/h1&gt;&lt;h2 id=&quot;1-导入MyBatis框架的jar包、Mysql驱动包、l
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>1. MyBatis简介</title>
    <link href="http://yoursite.com/2018/03/09/57.%20MyBatis%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/03/09/57. MyBatis简介/</id>
    <published>2018-03-08T16:00:00.000Z</published>
    <updated>2019-06-08T14:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-MyBatis历史"><a href="#1-1-MyBatis历史" class="headerlink" title="1.1 MyBatis历史"></a>1.1 MyBatis历史</h1><blockquote><p>1）MyBatis是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software     Foundation 迁移到了Google Code，随着开发团队转投Google Code旗下， iBatis3.x    正式更名为MyBatis ，代码于2013年11月迁移到Github<br> 2）iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis    提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p></blockquote><h1 id="1-2-MyBatis简介"><a href="#1-2-MyBatis简介" class="headerlink" title="1.2 MyBatis简介"></a>1.2 MyBatis简介</h1><blockquote><p>1）MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架<br>2）MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集<br>3）MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录<br>4）Mybatis 是一个 半自动的ORM（Object   Relation  Mapping）框架</p></blockquote><h1 id="1-3-如何下载MyBatis"><a href="#1-3-如何下载MyBatis" class="headerlink" title="1.3 如何下载MyBatis"></a>1.3 如何下载MyBatis</h1><p>1）下载网址<br>    <a href="https://github.com/mybatis/mybatis-3/" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/</a></p><p><img src="https://s2.ax1x.com/2019/05/07/Es59yQ.png" alt="Es59yQ.png">          </p><p><img src="https://s2.ax1x.com/2019/05/07/Es5Fwn.png" alt="Es5Fwn.png"></p><p><img src="https://s2.ax1x.com/2019/05/07/Es5koq.png" alt="Es5koq.png"></p><h1 id="1-4-为什么要使用MyBatis-–-现有持久化技术的对比"><a href="#1-4-为什么要使用MyBatis-–-现有持久化技术的对比" class="headerlink" title="1.4 为什么要使用MyBatis – 现有持久化技术的对比"></a>1.4 为什么要使用MyBatis – 现有持久化技术的对比</h1><p>1）JDBC</p><blockquote><p>①SQL夹在Java代码块里，耦合度高导致硬编码内伤<br>②维护不易且实际开发需求中sql有变化，频繁修改的情况多见</p></blockquote><p>2）Hibernate和JPA</p><blockquote><p>①长难复杂SQL，对于Hibernate而言处理也不容易<br>②内部自动生产的SQL，不容易做特殊优化<br>③基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难。导致数据库性能下降</p></blockquote><p>3）MyBatis</p><blockquote><p>①对开发人员而言，核心sql还是需要自己优化<br>②sql和java编码分开，功能边界清晰，一个专注业务、一个专注数据</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-1-MyBatis历史&quot;&gt;&lt;a href=&quot;#1-1-MyBatis历史&quot; class=&quot;headerlink&quot; title=&quot;1.1 MyBatis历史&quot;&gt;&lt;/a&gt;1.1 MyBatis历史&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1）MyBatis是Apa
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MyBatis框架" scheme="http://yoursite.com/tags/MyBatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>14. Spring整合SpringMVC</title>
    <link href="http://yoursite.com/2018/03/05/56.%20Spring%E6%95%B4%E5%90%88SpringMVC/"/>
    <id>http://yoursite.com/2018/03/05/56. Spring整合SpringMVC/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2019-06-08T14:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><ol><li>Spring 与 Springmvc 是否需要整合?  </li></ol><ul><li>不需要 : 单独使用Springmvc,将之前Spring中的配置全部迁移到Springmvc中即可。[不建议]</li><li>需要    ：Spring与Springmvc同时使用。 Springmvc只负责web相关的处理。 其他的都交给Spring处理。<pre><code>Spring ： 数据源、 AOP 、 声明式事务管理 .....Springmvc: 与web相关的。 </code></pre></li></ul><ol start="2"><li>Spring的容器对象如何创建 ?</li></ol><ul><li>非WEB环境:  直接在main方法或者是junit测试方法中创建Spring容器对象. </li><li>WEB环境  :  希望在服务器启动时，就将Spring的容器对象创建好。<br><strong>思路:</strong>   <blockquote><ul><li>通过监听器监听ServletContext对象的创建.</li><li>因为ServletContext对象是在服务器启动时创建，并且只会被创建一次。 </li><li>当监听到ServletContext对象被创建时，在对应的事件处理方法中，将Spring的容器对象创建出来.  </li><li>然后再将Spring容器对象保存到ServletContext中， 共享给每个组件.  </li><li><strong>Spring提供好的监听器(快捷键直接使用)</strong>: ==ContextLoaderListener==  </li></ul></blockquote></li></ul><ol start="3"><li>Bean对象被创建两次的问题<blockquote><ul><li>因为Spring与Springmvc都进行了组件扫描， 所以会将扫描到的组件管理到自己的容器中。 </li><li>正常情况Springmvc只负责web相关的，也就是Handler， Spring要负责除了web之外的，也就是Service 、Dao.</li><li>所以在组件扫描的配置中，需要使用<a href="context:include-filter" target="_blank" rel="noopener">context:include-filter</a>和<a href="context:exclude-filter" target="_blank" rel="noopener">context:exclude-filter</a>进行过滤.</li></ul></blockquote></li><li>Spring容器与 Springmvc容器的关系:父子关系<pre><code>**Spring是父容器，Springmvc是子容器. 子可以访问父，父不能访问子。**    </code></pre></li><li>扩展</li></ol><ul><li>Spring容器: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Root WebApplicationContext: startup date [Thu Mar 07 11:36:05 CST 2019]; root of context hierarchy</span><br></pre></td></tr></table></figure><ul><li>Springmvc容器: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext for namespace &apos;springDispatcherServlet-servlet&apos;: startup date [Thu Mar 07 11:37:35 CST 2019]; parent: Root WebApplicationContext</span><br></pre></td></tr></table></figure><ul><li>如何在Handler方法中获取到Spring的容器对象?<br>第一种</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ApplicationContext)sc.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContextUtils.getWebApplicationContext(sc);</span><br></pre></td></tr></table></figure><h1 id="1-Spring-与SpringMVC的整合问题："><a href="#1-Spring-与SpringMVC的整合问题：" class="headerlink" title="1 Spring 与SpringMVC的整合问题："></a>1 Spring 与SpringMVC的整合问题：</h1><p>1）需要进行 Spring 整合 SpringMVC 吗 ?<br>2）还是否需要再加入 Spring 的 IOC 容器 ?<br>3）是否需要在web.xml 文件中配置启动 Spring IOC 容器的 ContextLoaderListener ?  </p><ul><li>需要: 通常情况下, 类似于数据源, 事务, 整合其他框架都是放在 Spring 的配置文件          中(而不是放在 SpringMVC 的配置文件中).   <blockquote><p>实际上放入 Spring 配置文件对应的 IOC 容器中的还有 Service 和 Dao. </p></blockquote></li><li>不需要: 都放在 SpringMVC 的配置文件中. 也可以分多个 Spring 的配置文件, 然后使用 import 节点导入其他的配置文件 <h1 id="2-Spring整合SpringMVC-解决方案配置监听器"><a href="#2-Spring整合SpringMVC-解决方案配置监听器" class="headerlink" title="2 Spring整合SpringMVC_解决方案配置监听器"></a>2 Spring整合SpringMVC_解决方案配置监听器</h1><h2 id="1）监听器配置"><a href="#1）监听器配置" class="headerlink" title="1）监听器配置"></a>1）监听器配置</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置启动 Spring IOC 容器的 Listener --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:beans.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><h2 id="2）创建Spring的bean的配置文件：beans-xml"><a href="#2）创建Spring的bean的配置文件：beans-xml" class="headerlink" title="2）创建Spring的bean的配置文件：beans.xml"></a>2）创建Spring的bean的配置文件：beans.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class="line">&lt;!-- 设置扫描组件的包 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 配置数据源, 整合其他框架, 事务等. --&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="3）springmvc配置文件：springmvc-xml"><a href="#3）springmvc配置文件：springmvc-xml" class="headerlink" title="3）springmvc配置文件：springmvc.xml"></a>3）springmvc配置文件：springmvc.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 设置扫描组件的包 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt; </span><br><span class="line">&lt;!-- 配置视图解析器 --&gt;</span><br><span class="line">&lt;bean id=&quot;internalResourceViewResolver&quot;</span><br><span class="line">   class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;mvc:default-servlet-handler/&gt; </span><br><span class="line">&lt;mvc:annotation-driven/&gt; </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>在HelloWorldHandler、UserService类中增加构造方法，启动服务器，查看构造器执行情况。</p><blockquote><p>问题: 若 Spring 的 IOC 容器和 SpringMVC 的 IOC 容器扫描的包有重合的部分, 就会导致有的 bean 会被创建 2 次.  </p></blockquote><p>解决:  </p><ul><li>使 Spring 的 IOC 容器扫描的包和 SpringMVC 的 IOC 容器扫描的包没有重合的部分.   </li><li>使用 exclude-filter 和 include-filter 子节点来规定只能扫描的注解<br>springmvc.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot; use-default-filters=&quot;false&quot;&gt;</span><br><span class="line">&lt;context:include-filter type=&quot;annotation&quot;</span><br><span class="line">           expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="line">&lt;context:include-filter type=&quot;annotation&quot;</span><br><span class="line">           expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot;/&gt;</span><br><span class="line">&lt;/context:component-scan&gt;</span><br><span class="line"> </span><br><span class="line">beans.xml</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;&gt;</span><br><span class="line">&lt;context:exclude-filter type=&quot;annotation&quot;</span><br><span class="line">        expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="line">&lt;context:exclude-filter type=&quot;annotation&quot;</span><br><span class="line">        expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot;/&gt;</span><br><span class="line">&lt;/context:component-scan&gt;</span><br><span class="line">&lt;!-- 配置数据源, 整合其他框架, 事务等. --&gt;</span><br></pre></td></tr></table></figure><h1 id="3-SpringIOC-容器和-SpringMVC-IOC-容器的关系"><a href="#3-SpringIOC-容器和-SpringMVC-IOC-容器的关系" class="headerlink" title="3 SpringIOC 容器和 SpringMVC IOC 容器的关系"></a>3 SpringIOC 容器和 SpringMVC IOC 容器的关系</h1><p>SpringMVC 的 IOC 容器中的 bean 可以来引用 Spring IOC 容器中的 bean.<br>==反之则不行==. Spring IOC 容器中的 bean 却不能来引用 SpringMVC IOC 容器中的 bean<br>1）在 Spring MVC 配置文件中引用业务层的 Bean<br>2）多个 Spring IOC 容器之间可以设置为父子关系，以实现良好的解耦。<br>3）Spring MVC WEB 层容器可作为 “业务层” Spring 容器的子容器：<br>即 WEB 层容器可以引用业务层容器的 Bean，而业务层容器却访问不到 WEB 层容器的 Bean<br><a href="https://imgchr.com/i/EDAbxe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/06/EDAbxe.png" alt="EDAbxe.png"></a></p><h1 id="4-SpringMVC对比Struts2"><a href="#4-SpringMVC对比Struts2" class="headerlink" title="4 SpringMVC对比Struts2"></a>4 SpringMVC对比Struts2</h1><p>1） Spring MVC 的入口是 Servlet, 而 Struts2 是 FilterSpring MVC 会稍微比 Struts2 快些.<br>2） Spring MVC 是基于方法设计, 而 Sturts2 是基于类,<br>    每次发一次请求都会实例一个 Action.<br>4）Spring MVC 使用更加简洁, 开发效率Spring MVC确实比 struts2 高: 支持 JSR303, 处  理ajax 的请求更方便<br>5）Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Spring 与 Springmvc 是否需要整合?  &lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;不需要 : 单独使用Sprin
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC框架" scheme="http://yoursite.com/tags/SpringMVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>13. SpringMVC运行流程图解</title>
    <link href="http://yoursite.com/2018/03/01/55.%20SpringMVC%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/03/01/55. SpringMVC运行流程图解/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2019-06-08T14:47:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p> HandlerExecutionChain  ：包含了请求处理器还有所有的拦截器对象。由HandlerMapping对象获取.<br>    HandlerMapping  : 定义了请求与处理器之间的映射.<br>   HandlerAdapter  : 请求处理器适配器对象，主要负责 分析@RequestMapping，方法的参数，方法的返回值，方法的调用，ModelAndView对象的封装等.</p><h1 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1 流程图"></a>1 流程图</h1><p><img src="https://s2.ax1x.com/2019/05/06/EBv7IH.png" alt="EBv7IH.png"></p><h1 id="2-Spring工作流程描述"><a href="#2-Spring工作流程描述" class="headerlink" title="2 Spring工作流程描述"></a>2 Spring工作流程描述</h1><p>1）用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获；<br>2）DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）:<br>判断请求URI对应的映射 </p><blockquote><p>①不存在：<br>再判断是否配置了mvc:default-servlet-handler：<br>如果没配置，则控制台报映射查找不到，客户端展示404错误<br>如果有配置，则执行目标资源（一般为静态资源，如：JS,CSS,HTML）<br>②存在：<br>执行下面流程  </p></blockquote><p>3）根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；<br>4）DispatcherServlet根据获得的Handler，选择一个合适的HandlerAdapter。<br>5）如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法【正向】<br>6）提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：  </p><blockquote><p>①HttpMessageConveter：<br>将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>②数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>③数据根式化：对请求消息进行数据格式化。如将字符串转换成格式化数字或格式化日期等<br>④数据验证：验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中<br>7）Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；<br>8）此时将开始执行拦截器的postHandle(…)方法【逆向】<br>9）根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet，根据Model和View，来渲染视图<br>10）在返回给客户端时需要执行拦截器的AfterCompletion方法【逆向】<br>11）将渲染结果返回给客户端  </p></blockquote><h1 id="3-源码解析"><a href="#3-源码解析" class="headerlink" title="3 源码解析"></a>3 源码解析</h1><h2 id="3-1-搭建环境"><a href="#3-1-搭建环境" class="headerlink" title="3.1 搭建环境"></a>3.1 搭建环境</h2><p>1）拷贝jar包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring-aop-4.0.0.RELEASE.jar  </span><br><span class="line">spring-beans-4.0.0.RELEASE.jar  </span><br><span class="line">spring-context-4.0.0.RELEASE.jar  </span><br><span class="line">spring-core-4.0.0.RELEASE.jar  </span><br><span class="line">spring-expression-4.0.0.RELEASE.jar  </span><br><span class="line">commons-logging-1.1.3.jar  </span><br><span class="line">spring-web-4.0.0.RELEASE.jar  </span><br><span class="line">spring-webmvc-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure><p>2）配置文件web.xml  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>3）配置文件springmvc.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class="line">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 设置扫描组件的包 --&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 配置视图解析器 --&gt;</span><br><span class="line">&lt;bean id=&quot;internalResourceViewResolver&quot;</span><br><span class="line">    class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-完成HelloWorld"><a href="#3-2-完成HelloWorld" class="headerlink" title="3.2 完成HelloWorld"></a>3.2 完成HelloWorld</h2><p>1）页面链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;helloworld&quot;&gt;Hello World&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2）控制器方法(最开始的helloword)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.springmvc.handler;</span><br><span class="line"> </span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"> </span><br><span class="line">@Controller</span><br><span class="line">public class HelloWorldHandler &#123; </span><br><span class="line">@RequestMapping(&quot;/helloworld&quot;)</span><br><span class="line">public String testHello()&#123; </span><br><span class="line">System.out.println(&quot;Hello,SpringMVC...&quot;); </span><br><span class="line">return &quot;success&quot;;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）成功页面：/views/success.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;Success Page&lt;/h3&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-Debug实验"><a href="#3-3-Debug实验" class="headerlink" title="3.3 Debug实验"></a>3.3 Debug实验</h2><p>1）正常流程，运行出结果<br>2）没有配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure></p><p>，测试，直接报404</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">①http://localhost:8080/SpringMVC_09_WorkFlow/helloworld2</span><br><span class="line">四月 20, 2016 11:53:19 上午 org.springframework.web.servlet.PageNotFound noHandlerFound</span><br><span class="line">警告: No mapping found for HTTP request with URI [/SpringMVC_09_WorkFlow/helloworld2] in DispatcherServlet with name &apos;springDispatcherServlet&apos;</span><br><span class="line">②http://localhost:8080/SpringMVC_09_WorkFlow/test.html</span><br><span class="line">四月 20, 2016 11:54:16 上午 org.springframework.web.servlet.PageNotFound noHandlerFound</span><br><span class="line">警告: No mapping found for HTTP request with URI [/SpringMVC_09_WorkFlow/test.html] in DispatcherServlet with name &apos;springDispatcherServlet&apos;</span><br></pre></td></tr></table></figure><p>3）配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure><p>测试，会去查找目标资源<br>4）测试，依然发生错误，这时，需要配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure><p>否则，映射解析不好使。<br><img src="https://s2.ax1x.com/2019/05/06/EBRSVU.png" alt="image"></p><h2 id="3-4-Debug流程分析"><a href="#3-4-Debug流程分析" class="headerlink" title="3.4 Debug流程分析"></a>3.4 Debug流程分析</h2><p>1）HandlerExecutionChain mappedHandler；包含了拦截器和处理器方法；  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DispatcherServlet L902 916</span><br><span class="line">org.springframework.web.servlet.HandlerExecutionChain</span><br><span class="line">Handler execution chain, consisting of handler object and any handler interceptors. Returned by</span><br><span class="line"> HandlerMapping&apos;s HandlerMapping.getHandler method.</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/06/EBR8Mt.png" alt="image"><br>2）HandlerMapping</p><blockquote><p>接口==org.springframework.web.servlet==.HandlerMapping<br><strong>Interface to be implemented by objects that define a mapping between requests and handler objects.</strong><br>This class can be implemented by application developers, although this is not necessary, as ==org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping== and ==org.springframework.web.servlet.handler.SimpleUrlHandlerMapping== are included in the framework. The former is the default if no HandlerMapping bean is registered in the application context.<br>HandlerMapping implementations can support mapped interceptors but do not have to. A handler will always be wrapped in a ==HandlerExecutionChain== instance, optionally accompanied by some ==HandlerInterceptor== instances. The DispatcherServlet will first call each HandlerInterceptor’s preHandle method in the given order, finally invoking the handler itself if all preHandle methods have returned true.<br>The ability to parameterize this mapping is a powerful and unusual capability of this MVC framework. For example, it is possible to write a custom mapping based on session state, cookie state or many other variables. No other MVC framework seems to be equally flexible.<br>Note: Implementations can implement the ==org.springframework.core.Ordered== interface to be able to specify a sorting order and thus a priority for getting applied by DispatcherServlet. Non-Ordered instances get treated as lowest priority.</p></blockquote><p>3）没有配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler/&gt;，&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure><p>发送一个不存在资源的请求路径，mappedHandler为null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/SpringMVC_09_WorkFlow/helloworld2</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/06/EBhNdK.png" alt="image"> </p><p><img src="https://s2.ax1x.com/2019/05/06/EBhBzd.png" alt="image"></p><p>4）配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler/&gt;，&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure><p>发送一个不存在资源的请求路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/SpringMVC_09_WorkFlow/helloworld2</span><br></pre></td></tr></table></figure><p>mappedHandler不为null,原因是当循环simpleUrlHandlerMapping时，当做静态资源处理<br><img src="https://s2.ax1x.com/2019/05/06/EBhfJg.png" alt="image"></p><h2 id="3-5-断点"><a href="#3-5-断点" class="headerlink" title="3.5 断点"></a>3.5 断点</h2><p><img src="https://s2.ax1x.com/2019/05/06/EBhbwV.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h1&gt;&lt;p&gt; HandlerExecutionChain  ：包含了请求处理器还有所有的拦截器对象。由HandlerMapping对象获取.&lt;br&gt;  
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC框架" scheme="http://yoursite.com/tags/SpringMVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>12. SpringMVC异常处理</title>
    <link href="http://yoursite.com/2018/02/26/54.%20SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/02/26/54. SpringMVC异常处理/</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2019-06-08T14:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p> HandlerExceptionResolver</p><ol><li>在Springmvc中，不管请求是正常执行，还是抛出异常，都需要得到一个ModelAndView对象. </li><li>DefaultHandlerExceptionResolver  对一些特定的异常进行处理. </li><li>SimpleMappingExceptionResolver   可以配置异常与视图的映射, 抛出什么异常去往什么视图，并报告异常. </li></ol><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>java:   throws      throw        try ..catch..finally </p><p>所有系统定义的编译和运行异常都可以由系统自动抛出，称为标准异常，但是一般情况下Java 强烈地要求应用程序进行完整的异常处理，给用户友好的提示，或者修正后使程序继续执行。<br>1.用户程序自定义的异常和应用程序特定的异常,必须借助于 throws 和 throw 语句来定义抛出异常。</p><p>1.1   throw是语句抛出一个异常。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：throw (异常对象);  </span><br><span class="line">         throw e;</span><br></pre></td></tr></table></figure><p>1.2   throws是方法可能抛出异常的声明。(用在声明方法时，表示该方法可能要抛出异常)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：[(修饰符)](返回值类型)(方法名)([参数列表])[throws(异常类)]&#123;......&#125;</span><br><span class="line">            public void doA(int a) throws Exception1,Exception3&#123;......&#125;</span><br></pre></td></tr></table></figure><h1 id="1异常处理概述"><a href="#1异常处理概述" class="headerlink" title="1异常处理概述"></a>1异常处理概述</h1><p>1）Spring MVC 通过 HandlerExceptionResolver  处理程序的异常，包括 Handler 映射、数据绑定以及目标方法执行时发生的异常。<br>2）SpringMVC 提供的 HandlerExceptionResolver 的实现类</p><p><img src="https://s2.ax1x.com/2019/05/06/EDVlff.png" alt="EDVlff.png"></p><h1 id="2-HandlerExceptionResolver"><a href="#2-HandlerExceptionResolver" class="headerlink" title="2 HandlerExceptionResolver"></a>2 HandlerExceptionResolver</h1><p>1）DispatcherServlet  默认装配的 HandlerExceptionResolver ：<br>2）没有使用 <a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a> 配置：<br><img src="https://s2.ax1x.com/2019/05/06/EDV59K.png" alt="EDV59K.png"><br><img src="https://s2.ax1x.com/2019/05/06/EDVx9f.png" alt="EDVx9f.png"></p><p>3）使用了 <a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a> 配置：<br><img src="https://s2.ax1x.com/2019/05/06/EDZPBj.png" alt="EDZPBj.png"><br><img src="https://s2.ax1x.com/2019/05/06/EDZZCV.png" alt="EDZZCV.png"></p><h1 id="3-异常处理-DefaultHandlerExceptionResolver"><a href="#3-异常处理-DefaultHandlerExceptionResolver" class="headerlink" title="3 异常处理_DefaultHandlerExceptionResolver"></a>3 异常处理_DefaultHandlerExceptionResolver</h1><p>1）对一些特殊的异常进行处理，比如：</p><ul><li>NoSuchRequestHandlingMethodException、</li><li>HttpRequestMethodNotSupportedException、</li><li>HttpMediaTypeNotSupportedException、</li><li>HttpMediaTypeNotAcceptableException等   </li></ul><p>2）javadoc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br><span class="line">Default implementation of the HandlerExceptionResolver interface that resolves standard Spring exceptions and translates them to corresponding HTTP status codes. </span><br><span class="line">This exception resolver is enabled by default in the org.springframework.web.servlet.DispatcherServlet.</span><br></pre></td></tr></table></figure><h2 id="3-1-实验代码"><a href="#3-1-实验代码" class="headerlink" title="3.1 实验代码"></a>3.1 实验代码</h2><p>1）增加页面链接：GET请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;testDefaultHandlerExceptionResolver&quot;&gt;testDefaultHandlerExceptionResolver&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>增加处理器方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//@RequestMapping(value=&quot;/testDefaultHandlerExceptionResolver&quot;)</span><br><span class="line">@RequestMapping(value=&quot;/testDefaultHandlerExceptionResolver&quot;,method=RequestMethod.POST)  //不支持GET请求</span><br><span class="line">public String testDefaultHandlerExceptionResolver()&#123;</span><br><span class="line">System.out.println(&quot;testDefaultHandlerExceptionResolver...&quot;);</span><br><span class="line">return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）出现异常错误<br>网页错误码405<br><img src="https://s2.ax1x.com/2019/05/06/EDZXqJ.png" alt="EDZXqJ.png"></p><p>3） 出现异常交给DefaultHandlerExceptionResolver处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected ModelAndView doResolveException(</span><br><span class="line">HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123;</span><br><span class="line"> </span><br><span class="line">try &#123;</span><br><span class="line">if (ex instanceof NoSuchRequestHandlingMethodException) &#123;</span><br><span class="line">return handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, request, response,</span><br><span class="line">handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof HttpRequestMethodNotSupportedException) &#123;</span><br><span class="line">return handleHttpRequestMethodNotSupported((HttpRequestMethodNotSupportedException) ex, request,</span><br><span class="line">response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof HttpMediaTypeNotSupportedException) &#123;</span><br><span class="line">return handleHttpMediaTypeNotSupported((HttpMediaTypeNotSupportedException) ex, request, response,</span><br><span class="line">handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof HttpMediaTypeNotAcceptableException) &#123;</span><br><span class="line">return handleHttpMediaTypeNotAcceptable((HttpMediaTypeNotAcceptableException) ex, request, response,</span><br><span class="line">handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof MissingServletRequestParameterException) &#123;</span><br><span class="line">return handleMissingServletRequestParameter((MissingServletRequestParameterException) ex, request,</span><br><span class="line">response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof ServletRequestBindingException) &#123;</span><br><span class="line">return handleServletRequestBindingException((ServletRequestBindingException) ex, request, response,</span><br><span class="line">handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof ConversionNotSupportedException) &#123;</span><br><span class="line">return handleConversionNotSupported((ConversionNotSupportedException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof TypeMismatchException) &#123;</span><br><span class="line">return handleTypeMismatch((TypeMismatchException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof HttpMessageNotReadableException) &#123;</span><br><span class="line">return handleHttpMessageNotReadable((HttpMessageNotReadableException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof HttpMessageNotWritableException) &#123;</span><br><span class="line">return handleHttpMessageNotWritable((HttpMessageNotWritableException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof MethodArgumentNotValidException) &#123;</span><br><span class="line">return handleMethodArgumentNotValidException((MethodArgumentNotValidException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof MissingServletRequestPartException) &#123;</span><br><span class="line">return handleMissingServletRequestPartException((MissingServletRequestPartException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof BindException) &#123;</span><br><span class="line">return handleBindException((BindException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">else if (ex instanceof NoHandlerFoundException) &#123;</span><br><span class="line">return handleNoHandlerFoundException((NoHandlerFoundException) ex, request, response, handler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception handlerException) &#123;</span><br><span class="line">logger.warn(&quot;Handling of [&quot; + ex.getClass().getName() + &quot;] resulted in Exception&quot;, handlerException);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-异常处理-SimpleMappingExceptionResolver"><a href="#4-异常处理-SimpleMappingExceptionResolver" class="headerlink" title="4 异常处理_SimpleMappingExceptionResolver"></a>4 异常处理_SimpleMappingExceptionResolver</h1><p>1）如果希望对所有异常进行统一处理，可以使用 SimpleMappingExceptionResolver，它将异<br>  常类名映射为视图名，即发生异常时使用对应的视图报告异常</p><p> <img src="https://s2.ax1x.com/2019/05/06/EDeGZj.png" alt="EDeGZj.png"></p><h2 id="4-1实验代码"><a href="#4-1实验代码" class="headerlink" title="4.1实验代码"></a>4.1实验代码</h2><p>1）增加页面链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;testSimpleMappingExceptionResolver?i=1&quot;&gt;testSimpleMappingExceptionResolver&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2）增加控制器方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/testSimpleMappingExceptionResolver&quot;)</span><br><span class="line">public String testSimpleMappingExceptionResolver(@RequestParam(&quot;i&quot;) int i)&#123;</span><br><span class="line">System.out.println(&quot;testSimpleMappingExceptionResolver...&quot;); </span><br><span class="line">String[] s = new String[10]; </span><br><span class="line">System.out.println(s[i]); </span><br><span class="line">return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）出现异常情况：参数i的值大于10<br>错误码500</p><p><a href="https://imgchr.com/i/EDegF1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/06/EDegF1.md.png" alt="EDegF1.md.png"></a></p><p>4）配置异常解析器:自动将异常对象信息，存放到request范围内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SimpleMappingExceptionResolver异常解析器 --&gt;</span><br><span class="line">&lt;bean id=&quot;simpleMappingExceptionResolver&quot;</span><br><span class="line"> class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;</span><br><span class="line">&lt;!-- exceptionAttribute默认值(通过ModelAndView传递给页面)：</span><br><span class="line">exception   -&gt;  $&#123;requestScope.exception&#125;</span><br><span class="line">public static final String DEFAULT_EXCEPTION_ATTRIBUTE = &quot;exception&quot;;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name=&quot;exceptionAttribute&quot; value=&quot;exception&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;exceptionMappings&quot;&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;prop key=&quot;java.lang.ArrayIndexOutOfBoundsException&quot;&gt;error&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>error.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class="line"> &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;h3&gt;Error Page&lt;/h3&gt; </span><br><span class="line">$&#123;exception &#125;</span><br><span class="line">$&#123;requestScope.exception &#125; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/06/EDmApV.png" alt="EDmApV.png">  </p><p>5）源码分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleMappingExceptionResolver    L187 L339</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/EDmU7d" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/06/EDmU7d.md.png" alt="EDmU7d.md.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected ModelAndView doResolveException(HttpServletRequest request,</span><br><span class="line"> HttpServletResponse response,Object handler, Exception ex) &#123;</span><br><span class="line"> </span><br><span class="line">// Expose ModelAndView for chosen error view.</span><br><span class="line">String viewName = determineViewName(ex, request);</span><br><span class="line">if (viewName != null) &#123;</span><br><span class="line">// Apply HTTP status code for error views, if specified.</span><br><span class="line">// Only apply it if we&apos;re processing a top-level request.</span><br><span class="line">Integer statusCode = determineStatusCode(request, viewName);</span><br><span class="line">if (statusCode != null) &#123;</span><br><span class="line">applyStatusCodeIfPossible(request, response, statusCode);</span><br><span class="line">&#125;</span><br><span class="line">return getModelAndView(viewName, ex, request);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Return a ModelAndView for the given view name and exception.</span><br><span class="line"> * &lt;p&gt;The default implementation adds the specified exception attribute.</span><br><span class="line"> * Can be overridden in subclasses.</span><br><span class="line"> * @param viewName the name of the error view</span><br><span class="line"> * @param ex the exception that got thrown during handler execution</span><br><span class="line"> * @return the ModelAndView instance</span><br><span class="line"> * @see #setExceptionAttribute</span><br><span class="line"> */</span><br><span class="line">protected ModelAndView getModelAndView(String viewName, Exception ex) &#123;</span><br><span class="line">ModelAndView mv = new ModelAndView(viewName);</span><br><span class="line">if (this.exceptionAttribute != null) &#123;</span><br><span class="line">if (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(&quot;Exposing Exception as model attribute &apos;&quot; + this.exceptionAttribute + &quot;&apos;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">mv.addObject(this.exceptionAttribute, ex);</span><br><span class="line">&#125;</span><br><span class="line">return mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt; HandlerExceptionResolver&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Springmvc中，不管请求是正常执行，还是抛出异常，都需
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC框架" scheme="http://yoursite.com/tags/SpringMVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>11. SpringMVC拦截器</title>
    <link href="http://yoursite.com/2018/02/25/53.%20SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8%20/"/>
    <id>http://yoursite.com/2018/02/25/53. SpringMVC拦截器 /</id>
    <published>2018-02-24T16:00:00.000Z</published>
    <updated>2019-06-08T14:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol><li>自定义拦截器<br> 1.1 实现HandlerInterceptor接口<br> 1.2 继承HandlerInterceptorAdaptor类</li><li>拦截器的配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;bean class=&quot;&quot;&gt;</span><br><span class="line">&lt;ref bean=&quot;&quot;/&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;</span><br><span class="line">&lt;mvc:mapping&gt;</span><br><span class="line">&lt;mvc:exclude-mapping&gt;</span><br><span class="line">&lt;bean class=&quot;&quot;&gt;</span><br><span class="line">&lt;ref bean=&quot;&quot;/&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">   &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>拦截器中三个方法的执行顺序 以及 执行时机:<br> preHandle    DispatcherServlet的939行开始执行，是在请求处理方法之前执行的.<br> postHandle   DispatcherServlet的954行开始执行，是在请求处理方法之后， 视图处理之前执行的.<br> afterCompletion  DispatcherServlet的1030行开始执行，是在视图处理之后执行的.</li><li>多个拦截器的执行顺序:<br> 拦截器的执行顺序由配置顺序决定，先配置的先执行. </li><li>多个拦截器中方法的执行顺序:<br> preHandle:      与拦截器的执行顺序一致.<br> postHandle:     与拦截器的执行顺序相反.<br> afterCompletion:与拦截器的执行顺序相反.</li><li>拦截器中preHandle方法返回false:<br> 如果第一个拦截器的preHandle返回false,后续的处理都不执行.<br> 如果不是第一个拦截器的preHandle返回false, 之前拦截器的afterCompletion方法都会执行.</li></ol><h1 id="1-自定义拦截器概述"><a href="#1-自定义拦截器概述" class="headerlink" title="1 自定义拦截器概述"></a>1 自定义拦截器概述</h1><p>1）Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，<strong>自定义的拦截器可以实现HandlerInterceptor接口，也可以继承HandlerInterceptorAdapter 适配器类</strong><br>①preHandle()：这个方法在业务处理器处理请求之前被调用，在该方法中对用户请求 request 进行处理。<strong>如果程序员决定该拦截器对请求进行拦截处理后还要调用其他的拦截器，或者是业务处理器去进行处理，则返回true；如果程序员决定不需要再调用其他的组件去处理请求，则返回false。</strong><br>②postHandle()：<strong>这个方法在业务处理器处理完请求后，但是DispatcherServlet 向客户端返回响应前被调用</strong>，在该方法中对用户请求request进行处理。<br>③afterCompletion()：这个方法<strong>在 DispatcherServlet 完全处理完请求后被调用</strong>，可以在该方法中进行一些资源清理的操作。</p><h1 id="2-实验代码-单个拦截器"><a href="#2-实验代码-单个拦截器" class="headerlink" title="2 实验代码(单个拦截器)"></a>2 实验代码(单个拦截器)</h1><p>1）自定义拦截器类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.springmvc.interceptors;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line">public class FirstHandlerInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void afterCompletion(HttpServletRequest arg0,</span><br><span class="line">HttpServletResponse arg1, Object arg2, Exception arg3) throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - afterCompletion&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class="line">Object arg2, ModelAndView arg3) throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - postHandle&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class="line">Object arg2) throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - preHandle&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）配置拦截器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;!-- 声明自定义拦截器 --&gt;</span><br><span class="line">&lt;bean id=&quot;firstHandlerInterceptor&quot;</span><br><span class="line">      class=&quot;com.atguigu.springmvc.interceptors.FirstHandlerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p>3）断点调试拦截器执行流程<br><a href="https://imgchr.com/i/EDMr5j" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/06/EDMr5j.md.png" alt="EDMr5j.md.png"></a><br>4）拦截器方法执行顺序（小总结）<br><img src="https://s2.ax1x.com/2019/05/06/EDMc2q.png" alt="EDMc2q.png"></p><h1 id="3-实验代码-多个拦截器"><a href="#3-实验代码-多个拦截器" class="headerlink" title="3 实验代码(多个拦截器)"></a>3 实验代码(多个拦截器)</h1><h2 id="1）自定义拦截器类-两个"><a href="#1）自定义拦截器类-两个" class="headerlink" title="1）自定义拦截器类(两个)"></a>1）自定义拦截器类(两个)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.springmvc.interceptors;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line">public class FirstHandlerInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void afterCompletion(HttpServletRequest arg0,</span><br><span class="line">HttpServletResponse arg1, Object arg2, Exception arg3)</span><br><span class="line">throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - afterCompletion&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class="line">Object arg2, ModelAndView arg3) throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - postHandle&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class="line">Object arg2) throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - preHandle&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.springmvc.interceptors;</span><br><span class="line"> </span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"> </span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"> </span><br><span class="line">public class SecondHandlerInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void afterCompletion(HttpServletRequest arg0,</span><br><span class="line">HttpServletResponse arg1, Object arg2, Exception arg3)</span><br><span class="line">throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - afterCompletion&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class="line">Object arg2, ModelAndView arg3) throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - postHandle&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class="line">Object arg2) throws Exception &#123;</span><br><span class="line">System.out.println(this.getClass().getName() + &quot; - preHandle&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2）配置自定义拦截器"><a href="#2）配置自定义拦截器" class="headerlink" title="2）配置自定义拦截器"></a>2）配置自定义拦截器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;!-- 声明自定义拦截器 --&gt;</span><br><span class="line">&lt;bean id=&quot;firstHandlerInterceptor&quot;</span><br><span class="line">  class=&quot;com.atguigu.springmvc.interceptors.FirstHandlerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置拦截器引用 --&gt;</span><br><span class="line">&lt;mvc:interceptor&gt;                        </span><br><span class="line">&lt;mvc:mapping path=&quot;/empList&quot;/&gt;</span><br><span class="line">&lt;!-- &lt;mvc:exclude-mapping path=&quot;/empList&quot;/&gt; --&gt;</span><br><span class="line">&lt;bean id=&quot;secondHandlerInterceptor&quot;</span><br><span class="line">         class=&quot;com.atguigu.springmvc.interceptors.SecondHandlerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br><span class="line">两个都是返回true :</span><br><span class="line">com.atguigu.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class="line">com.atguigu.springmvc.interceptors.SecondHandlerInterceptor - preHandle</span><br><span class="line">************************************biz method*******************************</span><br><span class="line">com.springmvc.interceptors.SecondHandlerInterceptor - postHandle  </span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - postHandle</span><br><span class="line">com.springmvc.interceptors.SecondHandlerInterceptor - afterCompletion</span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - afterCompletion</span><br><span class="line">两个都是返回false:</span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class="line">true,false</span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class="line">com.springmvc.interceptors.SecondHandlerInterceptor - preHandle</span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - afterCompletion</span><br><span class="line">false,true </span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br></pre></td></tr></table></figure><h1 id="4-多个拦截方法的执行顺序"><a href="#4-多个拦截方法的执行顺序" class="headerlink" title="4 多个拦截方法的执行顺序"></a>4 多个拦截方法的执行顺序</h1><h2 id="1）关于执行顺序"><a href="#1）关于执行顺序" class="headerlink" title="1）关于执行顺序"></a>1）关于执行顺序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class="line">com.atguigu.springmvc.interceptors.SecondHandlerInterceptor – preHandle</span><br><span class="line">************************************biz method*******************************</span><br><span class="line">com.springmvc.interceptors.SecondHandlerInterceptor - postHandle</span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - postHandle</span><br><span class="line">com.springmvc.interceptors.SecondHandlerInterceptor - afterCompletion</span><br><span class="line">com.springmvc.interceptors.FirstHandlerInterceptor - afterCompletion</span><br></pre></td></tr></table></figure><p>2）执行顺序图解<br><img src="https://s2.ax1x.com/2019/05/06/EDQFQP.png" alt="EDQFQP.png"></p><p>3）从源代码的执行角度分析流程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">if (getInterceptors() != null) &#123;</span><br><span class="line">for (int i = 0; i &lt; getInterceptors().length; i++) &#123;</span><br><span class="line">HandlerInterceptor interceptor = getInterceptors()[i];</span><br><span class="line">if (!interceptor.preHandle(request, response, this.handler)) &#123;</span><br><span class="line">triggerAfterCompletion(request, response, null);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">this.interceptorIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://s2.ax1x.com/2019/05/06/EDQZdg.png" alt="EDQZdg.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception &#123;</span><br><span class="line">if (getInterceptors() == null) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = getInterceptors().length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = getInterceptors()[i];</span><br><span class="line">interceptor.postHandle(request, response, this.handler, mv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://s2.ax1x.com/2019/05/06/EDQlQ0.png" alt="EDQlQ0.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)</span><br><span class="line">throws Exception &#123;</span><br><span class="line"> </span><br><span class="line">if (getInterceptors() == null) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = this.interceptorIndex; i &gt;= 0; i--) &#123;</span><br><span class="line">HandlerInterceptor interceptor = getInterceptors()[i];</span><br><span class="line">try &#123;</span><br><span class="line">interceptor.afterCompletion(request, response, this.handler, ex);</span><br><span class="line">&#125;</span><br><span class="line">catch (Throwable ex2) &#123;</span><br><span class="line">logger.error(&quot;HandlerInterceptor.afterCompletion threw exception&quot;, ex2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/EDQ1yV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/06/EDQ1yV.md.png" alt="EDQ1yV.md.png"></a></p><p><img src="https://s2.ax1x.com/2019/05/06/EDQUY9.png" alt="EDQUY9.png">  </p><p>4）源码分析：分析interceptorIndex的值情况  </p><p><img src="https://s2.ax1x.com/2019/05/06/EDQBy6.png" alt="EDQBy6.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;自定义拦截器&lt;br&gt; 1.1 实现HandlerInterceptor接口&lt;br&gt; 1.2 继承HandlerIntercept
      
    
    </summary>
    
      <category term="Java框架" scheme="http://yoursite.com/categories/Java%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM框架" scheme="http://yoursite.com/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC框架" scheme="http://yoursite.com/tags/SpringMVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
