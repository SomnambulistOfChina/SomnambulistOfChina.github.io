[{"title":"2. Java基本语法(上)","url":"http://yoursite.com/2019/03/19/2. Java基本语法(上)变量与运算符/","content":"<h1 id=\"重点-变量-amp-常见数据类型概览\"><a href=\"#重点-变量-amp-常见数据类型概览\" class=\"headerlink\" title=\"重点:变量&amp;常见数据类型概览\"></a>重点:变量&amp;常见数据类型概览</h1><p>变量的理解  </p>\n<pre><code>概念：内存中一块数据存储空间的表示。  \n</code></pre><p>变量三要素</p>\n<pre><code>数据类型\n变量名\n变量值\n</code></pre><p>变量使用步骤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式1：三步法（声明-赋值-使用）</span><br><span class=\"line\">        //步骤1：声明变量</span><br><span class=\"line\">        int age;//(内存帮我们开辟一个int大小的房间，房间名叫age)</span><br><span class=\"line\">        //步骤2：为变量赋值</span><br><span class=\"line\">        age = 18;//(将18放到名叫age的房间中)</span><br><span class=\"line\">        //步骤3：使用变量</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        格式2：两步法（声明/赋值-使用）</span><br><span class=\"line\">        //步骤1：声明变量并赋值</span><br><span class=\"line\">        int age = 18;//(内存帮我们开辟一个int大小的房间，房间名叫age，并将值18放进去)</span><br><span class=\"line\">        //步骤2：使用变量</span><br><span class=\"line\">        System.out.println(age);</span><br></pre></td></tr></table></figure>\n<p>变量的特点</p>\n<pre><code>1、变量必须先声明、赋值后才能使用\n完全遵循：声明-赋值-使用\n2、同一个作用域内，变量不可以重名\n3、变量的值是可以变化的\n4、变量的值是临时存储的，遵循内存的特点：易失性\n</code></pre><p>常见数据类型</p>\n<pre><code>整型：说明：用于存储整数，比如100/99\n    byte字节整型\n    short短整型\n    int整型\n    long长整型\n浮点型：说明：用于存储小数，比如100.9、99.0\n    float单精度浮点型\n    double双精度浮点型\n字符型：说明：用于存储单个字符，比如 &apos;a&apos; 、&apos;男&apos;  、&apos;1&apos;\n    char 字符型\n布尔型：说明：用于存储多个字符，比如 &quot;张三丰&quot;  、&quot;a&quot; 、&quot;&quot; 、&quot;1&quot; 基本数据类型（原始数据类型）\n    boolean 布尔型\n</code></pre><p>引用数据类型（复杂数据类型）</p>\n<pre><code>使用class定义的类型：String\n使用interface定义的接口\n数组\n</code></pre><p>基本数据类型之间的转换（除了boolean类型）</p>\n<pre><code>byte-&gt; short-&gt; int-&gt; long-&gt;float-&gt;double\nchar-&gt;int\n自动类型转换：\n规则：小——&gt;大\n强制类型转换：\n规则：大——&gt;小\n</code></pre><p>细节：</p>\n<pre><code>①自动提升原则：表达式的结果类型为 操作数中类型最大的\n②强转符号只针对于最近的变量有效\n③byte和short在进行运算时，当做int类型处理！\n④char类型的值可以是int的常量值，但不可以是int的变量值，需要强转。\n</code></pre><p>命名规则</p>\n<pre><code>只能包含字母、数字、_或$符号，不能是关键字或保留字，不能以数字开头！\n</code></pre><p>命名规范</p>\n<pre><code>要求见名知义，提高阅读性\n变量名和方法名：遵循驼峰命名法，第一个单词全小写，其他单词首字符大写，其他字符小写\n类名和接口名：遵循Pascal命名法，所有单词，首字符大写，其他字符小写。\n</code></pre><h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><h3 id=\"1-1-基本算术运算符\"><a href=\"#1-1-基本算术运算符\" class=\"headerlink\" title=\"1 -1 基本算术运算符\"></a>1 -1 基本算术运算符</h3><pre><code>+ - * / %\n特点：\n①/左右的操作数如果都是整型，则结果取整\n②a%b 相当于 a-(int)a/b*b\n    13.5%3=13.5- 13/3*3=1.5\n    -13%-3= -13 - (-13)/3*3 = -1\n③属于二元操作符，运算顺序：从左往右 \n算术表达式的结果肯定是数值型\n</code></pre><h3 id=\"1-2-自增、自减算术运算符\"><a href=\"#1-2-自增、自减算术运算符\" class=\"headerlink\" title=\"1-2 自增、自减算术运算符\"></a>1-2 自增、自减算术运算符</h3><pre><code>++ --\n特点：\n①属于一元操作符\ni++;\n--i;\n++i\ni--;\nint j = i++;\n②既可以作为独立语句使用，又可以作为表达式使用\n如果作为独立语句使用，则i++;等价于++i;等价于i=i+1;\n如果作为表达式使用，则  ★\n        int j= i++; 先赋值后自增\n        int j= ++i; 先自增后赋值\n③自增、自减运算符，编译器做了内部的优化，会进行自动的类型转换，而且效率也提高了\nbyte b = 1;\nb++;//不会报编译错误！\n</code></pre><h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><h3 id=\"1、摘要\"><a href=\"#1、摘要\" class=\"headerlink\" title=\"1、摘要\"></a>1、摘要</h3><pre><code>&gt;  &lt;   &gt;= &lt;= ==  !=\n</code></pre><h3 id=\"2、特点\"><a href=\"#2、特点\" class=\"headerlink\" title=\"2、特点\"></a>2、特点</h3><pre><code>①属于二元操作符\n②关系表达式的结果类型肯定是 boolean类型\n③关系表达式一般当作条件放在if结构或循环结构中\n</code></pre><h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><h3 id=\"1、引入\"><a href=\"#1、引入\" class=\"headerlink\" title=\"1、引入\"></a>1、引入</h3><pre><code>需求：如果令狐冲 java成绩&gt;90,则岳灵珊就和他在一起\n    if(javaScore&gt;90){\n    }\n进阶：如果令狐冲 java成绩&gt;90并且music&gt;85并且 dance==100 或 html&gt;70 则岳灵珊就和他在一起\n    if(java&gt;90&amp;&amp;music&gt;85&amp;&amp;dance==100||html&gt;70){}\n作用：为了连接多个关系表达式的，最终的结果依然是boolean类型\n</code></pre><h3 id=\"2、摘要\"><a href=\"#2、摘要\" class=\"headerlink\" title=\"2、摘要\"></a>2、摘要</h3><pre><code>        名称          写法              特点\n&amp;&amp;      短路与         条件1 &amp;&amp; 条件2      两个条件都成立，结果为true\n||      短路或         条件1 || 条件2      只要有一个条件成立，结果为true\n！       非               !条件             如果条件本身成立，结果为false\n&amp;       逻辑与         条件1 &amp; 条件2       两个条件都成立，结果为true\n|       逻辑或         条件1 | 条件2       只要有一个条件成立，结果为true\n&amp;&amp;和&amp;的区别：\n&amp;&amp;      如果第一个条件不成立，则不再判断第二个条件，直接结果为false\n&amp;       不管第一个条件是否成立，都要判断第二个条件\n||和|的区别：\n||      如果第一个条件成立，则不再判断第二个条件，直接结果为true\n|       不管第一个条件是否成立，都要判断第二个条件\n</code></pre><h2 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><pre><code>语法：\n条件?表达式1:表达式2\n特点：\n①如果条件成立，结果为表达式1的值，否则为表达式2的值\n②表达式1和表达式2的类型要求一致或兼容\n③如果条件成立，则表达式2根本不用计算；\n如果条件不成立，则表达式1根本不用计算。\n</code></pre><h2 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h2><pre><code>() \n自增、自减 ！\n算术运算符\n    * / %    \n    + -\n关系运算符\n    &gt; &lt; &gt;= &lt;=\n    == !=\n逻辑运算符\n    &amp;&amp; \n    ||\n三元运算符\n赋值运算符\n</code></pre><h1 id=\"2-1-关键字与保留字\"><a href=\"#2-1-关键字与保留字\" class=\"headerlink\" title=\"2-1 关键字与保留字\"></a>2-1 关键字与保留字</h1><p>关键字(keyword)的定义和特点</p>\n<ul>\n<li>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</li>\n<li>特点：关键字中所有字母都为小写</li>\n<li>官方地址：<br><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcFWDg.png\" alt=\"EcFWDg.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EckYIs.png\" alt=\"EckYIs.png\"></p>\n<p>保留字(reserved word)</p>\n<pre><code>ava保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 \ngoto 、const\n</code></pre><h1 id=\"2-2-标识符-Identifier\"><a href=\"#2-2-标识符-Identifier\" class=\"headerlink\" title=\"2-2 标识符(Identifier)\"></a>2-2 标识符(Identifier)</h1><h2 id=\"标识符：\"><a href=\"#标识符：\" class=\"headerlink\" title=\"标识符：\"></a>标识符：</h2><blockquote>\n<ul>\n<li>Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符</li>\n<li>技巧：凡是自己可以起名字的地方都叫标识符。</li>\n<li>定义合法标识符规则：<br>由26个英文字母大小写，0-9 ，_或 $ 组成 </li>\n<li>数字不可以开头。</li>\n<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>\n<li>Java中严格区分大小写，长度无限制。</li>\n<li>标识符不能包含空格。</li>\n</ul>\n</blockquote>\n<h2 id=\"Java中的名称命名规范\"><a href=\"#Java中的名称命名规范\" class=\"headerlink\" title=\"Java中的名称命名规范\"></a>Java中的名称命名规范</h2><blockquote>\n<ul>\n<li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li>\n<li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li>\n<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个&gt;- 单词开始每个单词首字母大写：xxxYyyZzz</li>\n<li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>注意1：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</li>\n<li>注意2：java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。</li>\n</ul>\n</blockquote>\n<ul>\n<li>更多细节详见《<strong>代码整洁之道.pdf</strong>》<a href=\"https://pan.baidu.com/s/1B_EW3BKPBA03A1fmisA9rg\" target=\"_blank\" rel=\"noopener\">点击下载</a></li>\n</ul>\n<h1 id=\"2-3-变量\"><a href=\"#2-3-变量\" class=\"headerlink\" title=\"2-3 变量\"></a>2-3 变量</h1><h2 id=\"变量的概念：\"><a href=\"#变量的概念：\" class=\"headerlink\" title=\"变量的概念：\"></a>变量的概念：</h2><blockquote>\n<ul>\n<li>内存中的一个存储区域</li>\n<li>该区域的数据可以在同一类型范围内不断变化</li>\n<li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的作用：\"><a href=\"#变量的作用：\" class=\"headerlink\" title=\"变量的作用：\"></a>变量的作用：</h2><blockquote>\n<ul>\n<li>用于在内存中保存数据</li>\n</ul>\n</blockquote>\n<h2 id=\"使用变量注意：\"><a href=\"#使用变量注意：\" class=\"headerlink\" title=\"使用变量注意：\"></a>使用变量注意：</h2><blockquote>\n<ul>\n<li>Java中每个变量必须先声明，后使用</li>\n<li>使用变量名来访问这块区域的数据</li>\n<li>变量的作用域：其定义所在的一对{ }内</li>\n<li>变量只有在其作用域内才有效</li>\n<li>同一个作用域内，不能定义重名的变量</li>\n</ul>\n</blockquote>\n<h2 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h2><blockquote>\n<ul>\n<li>语法：&lt;数据类型&gt;  &lt;变量名称&gt;</li>\n<li>例如：int var;</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h2><blockquote>\n<ul>\n<li>语法：&lt;变量名称&gt; =  &lt;值&gt;</li>\n<li>例如：var = 10;</li>\n</ul>\n</blockquote>\n<h2 id=\"声明和赋值变量\"><a href=\"#声明和赋值变量\" class=\"headerlink\" title=\"声明和赋值变量\"></a>声明和赋值变量</h2><blockquote>\n<ul>\n<li>语法： &lt;数据类型&gt;  &lt;变量名&gt;  =  &lt;初始化值&gt;</li>\n<li>例如：int var = 10;</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的分类-按数据类型\"><a href=\"#变量的分类-按数据类型\" class=\"headerlink\" title=\"变量的分类-按数据类型\"></a>变量的分类-按数据类型</h2><pre><code>对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。\n</code></pre><p><a href=\"https://imgchr.com/i/EcAdkd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/08/EcAdkd.md.png\" alt=\"EcAdkd.md.png\"></a></p>\n<p>补充：变量的分类-按声明的位置的不同  </p>\n<blockquote>\n<p>在方法体外，类体内声明的变量称为<strong>成员变量</strong>。<br>在方法体内部声明的变量称为<strong>局部变量</strong>。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcEnjf.png\" alt=\"EcEnjf.png\"></p>\n<ul>\n<li><strong>注意：二者在初始化值方面的异同</strong>:<blockquote>\n<ul>\n<li><strong>同</strong>：都有生命周期      </li>\n<li><strong>异</strong>：局部变量除形参外，需显式初始化。</li>\n</ul>\n</blockquote>\n<h1 id=\"2-4-基本数据类型\"><a href=\"#2-4-基本数据类型\" class=\"headerlink\" title=\"2-4 基本数据类型\"></a>2-4 基本数据类型</h1><h2 id=\"整数类型-byte、short、int、long\"><a href=\"#整数类型-byte、short、int、long\" class=\"headerlink\" title=\"整数类型:byte、short、int、long\"></a>整数类型:byte、short、int、long</h2><blockquote>\n<p>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。</p>\n<ul>\n<li><strong>java的整型常量默认为 int 型，声明long型常量须后加‘l’或‘L’</strong></li>\n<li><strong>java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcE3Nj.png\" alt=\"EcE3Nj.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class VariableTest &#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">          int number1;</span><br><span class=\"line\">          number1 = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">          int number2;</span><br><span class=\"line\">          number2 = 20;</span><br><span class=\"line\"> </span><br><span class=\"line\">          int number3;</span><br><span class=\"line\">        number3 = number1 + number2;</span><br><span class=\"line\">        System.out.println(&quot;Number3 = &quot; + number3);</span><br><span class=\"line\"></span><br><span class=\"line\">        int number4 = 50;</span><br><span class=\"line\">        int number5 = number4 - number3;</span><br><span class=\"line\">        System.out.println(&quot;Number5 = &quot; + number5);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮点类型-float、double\"><a href=\"#浮点类型-float、double\" class=\"headerlink\" title=\"浮点类型:float、double\"></a>浮点类型:float、double</h2><p>与整数类型类似，Java <strong>浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响</strong>。<br>浮点型常量有两种表示形式：</p>\n<ul>\n<li>十进制数形式：如：5.12       512.0f        .512   (必须有小数点）</li>\n<li>科学计数法形式:如：5.12e2      512E2     100E-2<blockquote>\n<p>float:单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。<br>double:双精度，精度是float的两倍。通常采用此类型。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Java 的浮点型常量默认为double型，声明float型常量，须后加‘f’或‘F’</strong>。</p>\n<h2 id=\"字符类型：char\"><a href=\"#字符类型：char\" class=\"headerlink\" title=\"字符类型：char\"></a>字符类型：char</h2><blockquote>\n<ul>\n<li>char 型数据用来表示通常意义上“<strong>字符</strong>”(2字节)</li>\n<li>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。 </li>\n</ul>\n</blockquote>\n<p>字符型变量的三种表现形式：</p>\n<blockquote>\n<ul>\n<li>字符常量是用单引号(‘ ’)括起来的单个字符。例如：char c1 = ‘a’;   char c2 = ‘中’; char c3 =  ‘9’;</li>\n<li>Java中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。例如：char c3 = ‘\\n’;  // ‘\\n’表示换行符</li>\n<li>直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX代表一个十六进制整数。如：\\u000a 表示 \\n。</li>\n</ul>\n</blockquote>\n<p>char类型是可以进行运算的。因为它都对应有Unicode码。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcQXqI.png\" alt=\"EcQXqI.png\"></p>\n<h1 id=\"了解：\"><a href=\"#了解：\" class=\"headerlink\" title=\"了解：\"></a>了解：</h1><h2 id=\"ASCII-码\"><a href=\"#ASCII-码\" class=\"headerlink\" title=\"ASCII 码\"></a>ASCII 码</h2><blockquote>\n<ul>\n<li>在计算机内部，所有数据都使用二进制表示。每一个二进制位（bit）有 0 和 1 两种状态，因此 8 个二进制位就可以组合出 256 种状态，这被称为一个字节（byte）。一个字节一共可以用来表示 256 种不同的状态，每一个状态对应一个符号，就是 256 个符号，从 0000000 到 11111111。</li>\n<li>ASCII码：上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</li>\n</ul>\n</blockquote>\n<h3 id=\"ASCII码缺点：\"><a href=\"#ASCII码缺点：\" class=\"headerlink\" title=\"ASCII码缺点：\"></a>ASCII码缺点：</h3><blockquote>\n<ul>\n<li>不能表示所有字符。</li>\n<li>相同的编码表示的字符不一样：比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)<br>了解： Unicode 编码<br>乱码：世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。</li>\n</ul>\n</blockquote>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，使用 Unicode 没有乱码的问题。</p>\n<h3 id=\"Unicode-的缺点：\"><a href=\"#Unicode-的缺点：\" class=\"headerlink\" title=\"Unicode 的缺点：\"></a>Unicode 的缺点：</h3><p>Unicode 只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储;<br>无法区别 Unicode 和ASCII：<br>计算机无法区分三个字节表示一个符号还是分别表示三个符号。<br>另外，我们知道，英文字母只用一个字节表示就够了，<br>如果unicode统一规定，每个符号用三个或四个字节表示，<br>那么每个英文字母前都必然有二到三个字节是0，<br>这对于存储空间来说是极大的浪费。  </p>\n<h2 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h2><blockquote>\n<ul>\n<li>UTF-8 是在互联网上使用最广的一种 Unicode 的实现方式。</li>\n<li>UTF-8 是一种变长的编码方式。它可以使用 1-6 个字节表示一个符号，根据不同的符号而变化字节长度。</li>\n</ul>\n</blockquote>\n<h3 id=\"UTF-8的编码规则：\"><a href=\"#UTF-8的编码规则：\" class=\"headerlink\" title=\"UTF-8的编码规则：\"></a>UTF-8的编码规则：</h3><ul>\n<li>对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）。</li>\n<li>对于多字节的UTF-8编码，如果编码包含 n 个字节，那么第一个字节的前 n 位为1，第一个字节的第 n+1 位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是最高两位为”10”，其余6位用来对字符进行编码。 </li>\n</ul>\n<h1 id=\"布尔类型：boolean\"><a href=\"#布尔类型：boolean\" class=\"headerlink\" title=\"布尔类型：boolean\"></a>布尔类型：boolean</h1><p>boolean 类型用来判断逻辑条件，一般用于程序流程控制：</p>\n<ul>\n<li>if条件控制语句；                 </li>\n<li>while循环控制语句；</li>\n<li>do-while循环控制语句；     </li>\n<li>for循环控制语句； </li>\n</ul>\n<p>boolean类型数据只允许取值true和false，无null。</p>\n<ul>\n<li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li>\n<li>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。———《java虚拟机规范 8版》<h1 id=\"基本数据类型转换\"><a href=\"#基本数据类型转换\" class=\"headerlink\" title=\"基本数据类型转换\"></a>基本数据类型转换</h1>自动类型转换：容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：<br><img src=\"https://s2.ax1x.com/2019/05/08/Ec34Zn.png\" alt=\"Ec34Zn.png\"><br>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</li>\n<li>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</li>\n<li>boolean类型不能与其它数据类型运算。<br>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。<br>字符串类型：String<br>String不是基本数据类型，属于引用数据类型<br>使用方式与基本数据类型一致。例如：String str = “abcd”;<br>一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = str + “xyz” ;</span><br><span class=\"line\">int n = 100;</span><br><span class=\"line\">str = str + n;</span><br></pre></td></tr></table></figure>\n<h1 id=\"示-例—StringTest类\"><a href=\"#示-例—StringTest类\" class=\"headerlink\" title=\"示 例—StringTest类\"></a>示 例—StringTest类</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StringTest &#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">          int no = 10;</span><br><span class=\"line\">          String str = &quot;abcdef&quot;;</span><br><span class=\"line\">          String str1 = str + “xyz” + no;</span><br><span class=\"line\"></span><br><span class=\"line\">          str1 = str1 + &quot;123&quot;;</span><br><span class=\"line\">          char c = &apos;国&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">         double pi = 3.1416;</span><br><span class=\"line\">         str1 = str1 + pi;</span><br><span class=\"line\">         boolean b = false;</span><br><span class=\"line\">         str1 = str1 + b;</span><br><span class=\"line\">         str1 = str1 + c;</span><br><span class=\"line\"></span><br><span class=\"line\">         System.out.println(&quot;str1 = &quot; + str1);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>练习1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = 4;        //判断对错：no</span><br><span class=\"line\">String str2 = 3.5f + “”;             //判断str2对错：yes</span><br><span class=\"line\">System.out.println(str2);        //输出：”3.5”</span><br><span class=\"line\">System.out .println(3+4+“Hello!”);     //输出：7Hello!</span><br><span class=\"line\">System.out.println(“Hello!”+3+4);      //输出：Hello!34</span><br><span class=\"line\">System.out.println(‘a’+1+“Hello!”);    //输出：98Hello!</span><br><span class=\"line\">System.out.println(“Hello”+‘a’+1);     //输出：Helloa1</span><br></pre></td></tr></table></figure>\n<h1 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h1><ul>\n<li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。</li>\n<li>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。<br>如： </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = “43”; int i = Integer.parseInt(a);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>boolean类型不可以转换为其它的数据类型。<br>练习2<br>判断是否能通过编译</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）short  s = 5;</span><br><span class=\"line\">      s = s-2;                       //判断：no</span><br><span class=\"line\">2） byte b = 3;</span><br><span class=\"line\">       b = b + 4;                  //判断：no</span><br><span class=\"line\">       b = (byte)(b+4);        //判断：yes</span><br><span class=\"line\">3）char c = ‘a’;</span><br><span class=\"line\">      int  i = 5;</span><br><span class=\"line\">      float d = .314F;</span><br><span class=\"line\">      double result = c+i+d;     //判断：yes</span><br><span class=\"line\">4） byte b = 5;</span><br><span class=\"line\">       short s = 3;</span><br><span class=\"line\">       short t = s + b;          //判断：no</span><br></pre></td></tr></table></figure>\n<h1 id=\"进-制\"><a href=\"#进-制\" class=\"headerlink\" title=\"进  制\"></a>进  制</h1><p>==世界上有10种人 ，认识和不认识二进制的。==</p>\n<h2 id=\"关于进制\"><a href=\"#关于进制\" class=\"headerlink\" title=\"关于进制\"></a>关于进制</h2><ul>\n<li>所有数字在计算机底层都以二进制形式存在。<br>对于整数，有四种表示方式：<blockquote>\n<ul>\n<li>二进制(binary)：0,1 ，满2进1.以0b或0B开头。</li>\n<li>十进制(decimal)：0-9 ，满10进1。</li>\n<li>八进制(octal)：0-7 ，满8进1. 以数字0开头表示。</li>\n<li>十六进制(hex)：0-9及A-F，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。<br>如：0x21AF +1= 0X21B0</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/Ec6GgH\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ec6GgH.png\" alt=\"Ec6GgH.png\"></a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/Ec6Ubt.png\" alt=\"Ec6Ubt.png\"></p>\n<h2 id=\"二进制\"><a href=\"#二进制\" class=\"headerlink\" title=\"二进制\"></a>二进制</h2><p><strong>Java整数常量默认是int类型，当用二进制定义整数时，其第32位是符号位；当是long类型时，二进制默认占64位，第64位是符号位</strong></p>\n<h2 id=\"二进制的整数有如下三种形式：\"><a href=\"#二进制的整数有如下三种形式：\" class=\"headerlink\" title=\"二进制的整数有如下三种形式：\"></a>二进制的整数有如下三种形式：</h2><ul>\n<li>原码：直接将一个数值换成二进制数。最高位是符号位</li>\n<li>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。</li>\n<li>负数的补码：其反码加1。</li>\n</ul>\n<h2 id=\"计算机以二进制补码的形式保存所有的整数。\"><a href=\"#计算机以二进制补码的形式保存所有的整数。\" class=\"headerlink\" title=\"计算机以二进制补码的形式保存所有的整数。\"></a>计算机以二进制补码的形式保存所有的整数。</h2><ul>\n<li>正数的原码、反码、补码都相同</li>\n<li>负数的补码是其反码+1</li>\n</ul>\n<p>使用原码、反码、补码表示形式的原因</p>\n<blockquote>\n<p>计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/Ec6xPO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ec6xPO.md.png\" alt=\"Ec6xPO.md.png\"></a></p>\n<h2 id=\"二进制-gt-十进制\"><a href=\"#二进制-gt-十进制\" class=\"headerlink\" title=\"二进制-&gt;十进制\"></a>二进制-&gt;十进制</h2><p><a href=\"https://imgchr.com/i/EccPsA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EccPsA.md.png\" alt=\"EccPsA.md.png\"></a><br>在计算机底层，都是以补码的方式存储数值的。<br><strong>对于正数来说：原码、反码、补码是相同的，三码合一</strong></p>\n<p><a href=\"https://imgchr.com/i/EccKMj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EccKMj.md.png\" alt=\"EccKMj.md.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/EcczT0\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EcczT0.md.png\" alt=\"EcczT0.md.png\"></a></p>\n<h2 id=\"进制间转化\"><a href=\"#进制间转化\" class=\"headerlink\" title=\"进制间转化\"></a>进制间转化</h2><ul>\n<li>十进制  二进制互转</li>\n</ul>\n<blockquote>\n<p>   二进制转成十进制  乘以2的幂数<br>   十进制转成二进制  除以2取余数</p>\n</blockquote>\n<ul>\n<li>二进制  八进制互转</li>\n<li>二进制   十六进制互转</li>\n<li>十进制 八进制互转</li>\n<li>十进制 十六进制互转</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcgeTx.png\" alt=\"EcgeTx.png\"></p>\n<p><a href=\"https://imgchr.com/i/Ecgl1e\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ecgl1e.md.png\" alt=\"Ecgl1e.md.png\"></a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcgJ0I.png\" alt=\"EcgJ0I.png\"></p>\n<h1 id=\"2-4-运算符\"><a href=\"#2-4-运算符\" class=\"headerlink\" title=\"2-4 运算符\"></a>2-4 运算符</h1><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p>\n<h2 id=\"算术运算符-1\"><a href=\"#算术运算符-1\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/EcgTBR.png\" alt=\"EcgTBR.png\"><br><strong>如果对负数取模，可以把模数负号忽略不记，如：5%-2=1。 但被模数是负数则不可忽略。此外，取模运算的结果不一定总是整数。</strong><br>对于除号“/”，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。 例如：int x=3510;x=x/1000*1000;  x的结果是？<br>“+”除字符串相加功能外，还能把非字符串转换成字符串.例如：System.out.println(“5+5=”+5+5); //打印结果是？ 5+5=55 ? </p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><strong>符号：=</strong></p>\n<ul>\n<li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li>\n<li>支持连续赋值。</li>\n</ul>\n<p>扩展赋值运算符： +=, -=, *=, /=, %=</p>\n<h2 id=\"比较运算符（关系运算符）\"><a href=\"#比较运算符（关系运算符）\" class=\"headerlink\" title=\"比较运算符（关系运算符）\"></a>比较运算符（关系运算符）</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/Ec288U.png\" alt=\"Ec288U.png\"></p>\n<ul>\n<li>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</li>\n<li>比较运算符“==”不能误写成“=” 。<h2 id=\"逻辑运算符-1\"><a href=\"#逻辑运算符-1\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2>&amp;—逻辑与  　　　 | —逻辑或 　　　 ！—逻辑非<br>&amp;&amp; —短路与　　　 || —短路或 　　 ^ —逻辑异或<br><img src=\"https://s2.ax1x.com/2019/05/09/EcRkZR.png\" alt=\"EcRkZR.png\"><br>逻辑运算符用于连接布尔型表达式，在Java中不可以写成3&lt;x&lt;6，应该写成x&gt;3 &amp; x&lt;6 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class  Test  &#123;</span><br><span class=\"line\">        public static void main (String []  args)  &#123;</span><br><span class=\"line\">           boolean x=true;</span><br><span class=\"line\">           boolean y=false;</span><br><span class=\"line\">           short z=42;</span><br><span class=\"line\">      //if(y == true)</span><br><span class=\"line\">             if((z++==42)&amp;&amp;(y=true))z++;</span><br><span class=\"line\">             if((x=false) || (++z==45))  z++;</span><br><span class=\"line\"></span><br><span class=\"line\">           System. out.println(“z=”+z);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">        //结果: z=46</span><br></pre></td></tr></table></figure>\n<h3 id=\"“-amp-”和“-amp-amp-”的区别：\"><a href=\"#“-amp-”和“-amp-amp-”的区别：\" class=\"headerlink\" title=\"“&amp;”和“&amp;&amp;”的区别：\"></a>“&amp;”和“&amp;&amp;”的区别：</h3><ul>\n<li>单&amp;时，左边无论真假，右边都进行运算；</li>\n<li>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</li>\n</ul>\n<blockquote>\n<p>“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。</p>\n</blockquote>\n<blockquote>\n<p>异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。<br>      理解：<strong>异或，追求的是“异”!</strong></p>\n</blockquote>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/EcRmRO.png\" alt=\"EcRmRO.png\"><br><strong>位运算是直接对整数的二进制进行的运算</strong><br><img src=\"https://s2.ax1x.com/2019/05/09/EcRaQg.png\" alt=\"EcRaQg.png\"></p>\n<h2 id=\"三元运算符-1\"><a href=\"#三元运算符-1\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><p>格式:</p>\n<ul>\n<li>(条件表达式)?表达式1：表达式2；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(条件表达式)为true，运算后的结果是表达式1；</span><br><span class=\"line\">(条件表达式)为false，运算后的结果是表达式2；</span><br></pre></td></tr></table></figure>\n<ul>\n<li>表达式1和表达式2为同种类型</li>\n<li>三元运算符与if-else的联系与区别：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）三元运算符可简化if-else语句</span><br><span class=\"line\">2）三元运算符要求必须返回一个结果。</span><br><span class=\"line\">3）if后的代码块可有多个语句</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h2><h3 id=\"变量与运算符\"><a href=\"#变量与运算符\" class=\"headerlink\" title=\"变量与运算符\"></a>变量与运算符</h3><p>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。<br>如下表，上一行运算符总优先于下一行。<br>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcW1cF.png\" alt=\"EcW1cF.png\"></p>\n","categories":["技术"],"tags":["Java SE"]},{"title":"9. SSM框架整合","url":"http://yoursite.com/2019/02/12/9. SSM框架整合/","content":"<h1 id=\"9-1-整合注意事项\"><a href=\"#9-1-整合注意事项\" class=\"headerlink\" title=\"9.1 整合注意事项\"></a>9.1 整合注意事项</h1><p>1)查看不同MyBatis版本整合Spring时使用的适配包；<br><a href=\"https://imgchr.com/i/EsXmUe\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/07/EsXmUe.md.png\" alt=\"EsXmUe.md.png\"></a></p>\n<p>2)下载整合适配包<br><a href=\"https://github.com/mybatis/spring/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/spring/releases</a><br>3)官方整合示例，jpetstore<br><a href=\"https://github.com/mybatis/jpetstore-6\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/jpetstore-6</a></p>\n<h1 id=\"9-2整合思路、步骤\"><a href=\"#9-2整合思路、步骤\" class=\"headerlink\" title=\"9.2整合思路、步骤\"></a>9.2整合思路、步骤</h1><h2 id=\"1-搭建环境\"><a href=\"#1-搭建环境\" class=\"headerlink\" title=\"1)搭建环境\"></a>1)搭建环境</h2><blockquote>\n<ol>\n<li>创建一个动态的WEB工程</li>\n<li>导入SSM（Spring+SpringMvc+MyBatis）需要使用的jar包<br> 整合ssm需要的基础jar包名字（<a href=\"https://pan.baidu.com/s/1N9xmgsfVw7jGRIwIvbGPug/\" target=\"_blank\" rel=\"noopener\">点击下载</a>）<br> 整合ssm需要的基础jar包(<a href=\"https://pan.baidu.com/s/1IsQX5KPlnuZn6uHy0Pkn-A/\" target=\"_blank\" rel=\"noopener\">点击下载</a>)</li>\n<li>导入Spring与MyBatis整合适配包</li>\n<li>导入其他技术的一些支持包  连接池 数据库驱动  日志….  </li>\n</ol>\n</blockquote>\n<h2 id=\"2-搭建Spring-Springmvc的环境\"><a href=\"#2-搭建Spring-Springmvc的环境\" class=\"headerlink\" title=\"2)搭建Spring + Springmvc的环境\"></a>2)搭建Spring + Springmvc的环境</h2><pre><code>1. 在web.xml中配置:   Springmvc的前端控制器   实例化Spring容器的监听器 （contextLoaderListener）  字符编码过滤器  REST 过滤器\n2.创建Spring的配置文件(springMmvc.xml)-&gt; applicationContext.xml:组件扫描、 连接池、 事务.....\n</code></pre><ol start=\"3\">\n<li>创建Springmvc的配置文件: springmvc.xml : 组件扫描、 视图解析器 <a href=\"mvc:...\" target=\"_blank\" rel=\"noopener\">mvc:...</a><h2 id=\"3-MyBatis\"><a href=\"#3-MyBatis\" class=\"headerlink\" title=\"3)MyBatis\"></a>3)MyBatis</h2> 创建MyBatis的全局配置文件 mybatis-config,xml<br> 准备JavaBean 、测试表、 Mapper接口、 Mapper映射文件<h2 id=\"4-Spring-整合-MyBatis-：\"><a href=\"#4-Spring-整合-MyBatis-：\" class=\"headerlink\" title=\"4)Spring 整合 MyBatis ：\"></a>4)Spring 整合 MyBatis ：</h2> MyBatis的 SqlSession对象的创建 .<br> MyBatis的 Mapper接口的代理实现类得创建及管理<h2 id=\"5-测试-REST-CRUD\"><a href=\"#5-测试-REST-CRUD\" class=\"headerlink\" title=\"5)测试:  REST CRUD\"></a>5)测试:  REST CRUD</h2><ol>\n<li>查询所有的员工信息,列表显示</li>\n<li>添加新员工</li>\n<li>修改员工</li>\n<li>删除员工</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"9-3整合的配置\"><a href=\"#9-3整合的配置\" class=\"headerlink\" title=\"9.3整合的配置\"></a>9.3整合的配置</h1><p>创建web动态工程 2.5（基本操作22个包）<br>最基本得spring得jar包在——Mybatis里support</p>\n<h2 id=\"9-3-0-数据源文件db-properties\"><a href=\"#9-3-0-数据源文件db-properties\" class=\"headerlink\" title=\"9.3.0 数据源文件db.properties\"></a>9.3.0 数据源文件db.properties</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://localhost:3306/lidaxiongdesql</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-3-1-web-xml\"><a href=\"#9-3-1-web-xml\" class=\"headerlink\" title=\"9.3.1 web.xml\"></a>9.3.1 web.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</span><br><span class=\"line\"> &lt;!-- 字符编码过滤器 --&gt;</span><br><span class=\"line\"> &lt;filter&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class=\"line\"> \t&lt;init-param&gt;</span><br><span class=\"line\"> \t\t&lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class=\"line\"> \t\t&lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class=\"line\"> \t&lt;/init-param&gt;</span><br><span class=\"line\"> &lt;/filter&gt;</span><br><span class=\"line\"> &lt;filter-mapping&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\"> &lt;/filter-mapping&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;!-- REST 过滤器 --&gt;</span><br><span class=\"line\"> &lt;filter&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;</span><br><span class=\"line\"> &lt;/filter&gt;</span><br><span class=\"line\"> &lt;filter-mapping&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\"> &lt;/filter-mapping&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 实例化SpringIOC容器的监听器 --&gt;</span><br><span class=\"line\">\t&lt;context-param&gt;</span><br><span class=\"line\">\t\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">\t\t&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class=\"line\">\t&lt;/context-param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;listener&gt;</span><br><span class=\"line\">\t&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"line\">    &lt;/listener&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;!-- Springmvc的前端控制器 --&gt;</span><br><span class=\"line\">\t&lt;servlet&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">\t&lt;/servlet&gt;</span><br><span class=\"line\">\t&lt;servlet-mapping&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">\t&lt;/servlet-mapping&gt;</span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-3-2-Spring配置-spring-xml\"><a href=\"#9-3-2-Spring配置-spring-xml\" class=\"headerlink\" title=\"9.3.2 Spring配置 spring.xml\"></a>9.3.2 Spring配置 spring.xml</h2><p>(new一个Spring BeanConfiguration File 加组件context，事物的tx)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class=\"line\">\txmlns:mybatis-spring=&quot;http://mybatis.org/schema/mybatis-spring&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 组件扫描 expression排除掉不能运行的类如jpg，mp3等静态文件--&gt;</span><br><span class=\"line\">\t&lt;context:component-scan base-package=&quot;com.lbb.ssm&quot;&gt;</span><br><span class=\"line\">\t\t&lt;context:exclude-filter type=&quot;annotation&quot; </span><br><span class=\"line\">\t\texpression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class=\"line\">\t&lt;/context:component-scan&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 数据源 连接池 --&gt;</span><br><span class=\"line\">\t&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;mydataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 事务 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;dataSourceTransactionManager&quot; </span><br><span class=\"line\">\t\tclass=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;tx:annotation-driven transaction-manager=&quot;dataSourceTransactionManager&quot;/&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<!--整合mybatis-->\n<!--AOP-->\n<h2 id=\"9-3-3-SpringMVC配置-SpringMVC-xml\"><a href=\"#9-3-3-SpringMVC配置-SpringMVC-xml\" class=\"headerlink\" title=\"9.3.3 SpringMVC配置 SpringMVC.xml\"></a>9.3.3 SpringMVC配置 SpringMVC.xml</h2><p>一个Spring BeanConfiguration File 加组件context和mvc)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 组件扫描 expression排除掉不能运行的类如jpg，mp3等静态文件--&gt;</span><br><span class=\"line\">  &lt;context:component-scan base-package=&quot;com.lbb.ssm&quot; use-default-filters=&quot;false&quot;&gt;</span><br><span class=\"line\">\t  &lt;context:include-filter type=&quot;annotation&quot; </span><br><span class=\"line\">         expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class=\"line\">  &lt;/context:component-scan&gt;</span><br><span class=\"line\">   &lt;!--视图解析器 --&gt;</span><br><span class=\"line\">   &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;mvc:default-servlet-handler/&gt;</span><br><span class=\"line\">   &lt;mvc:annotation-driven/&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-3-4-MyBatis配置\"><a href=\"#9-3-4-MyBatis配置\" class=\"headerlink\" title=\"9.3.4 MyBatis配置\"></a>9.3.4 MyBatis配置</h2><h3 id=\"1-全局文件的配置\"><a href=\"#1-全局文件的配置\" class=\"headerlink\" title=\"1)全局文件的配置\"></a>1)全局文件的配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;!--  Spring 整合 MyBatis 后， MyBatis中配置数据源，事务等一些配置都可以</span><br><span class=\"line\">         迁移到Spring的整合配置中。MyBatis配置文件中只需要配置与MyBatis相关</span><br><span class=\"line\">         的即可。</span><br><span class=\"line\">\t --&gt;</span><br><span class=\"line\">\t &lt;!-- settings: 包含很多重要的设置项 \t--&gt;</span><br><span class=\"line\">\t   &lt;settings&gt;</span><br><span class=\"line\">\t \t&lt;!-- 映射下划线到驼峰命名 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;!-- 设置Mybatis对null值的默认处理 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;!-- 开启延迟加载 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;!-- 设置加载的数据是按需还是全部 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;\t</span><br><span class=\"line\">\t \t&lt;!-- 配置开启二级缓存 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t &lt;/settings&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-SQL映射文件配置\"><a href=\"#2-SQL映射文件配置\" class=\"headerlink\" title=\"2)SQL映射文件配置\"></a>2)SQL映射文件配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;mapper namespace=&quot;com.atguigu.ssm.mapper.EmployeeMapper&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- public List&lt;Employee&gt; getAllEmps(); --&gt;</span><br><span class=\"line\">\t&lt;select id=&quot;getAllEmps&quot; resultMap=&quot;myEmpsAndDept&quot; &gt;</span><br><span class=\"line\">\t\tselect e.id eid, e.last_name,e.email,e.gender, d.id did, d.dept_name</span><br><span class=\"line\">\t\tfrom tbl_employee e ,tbl_dept d </span><br><span class=\"line\">\t\twhere e.d_id = d.id </span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\">\t&lt;resultMap type=&quot;com.atguigu.ssm.beans.Employee&quot; id=&quot;myEmpsAndDept&quot;&gt;</span><br><span class=\"line\">\t\t&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;association property=&quot;dept&quot; javaType=&quot;com.atguigu.ssm.beans.Department&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;id column=&quot;did&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/association&gt;</span><br><span class=\"line\">\t&lt;/resultMap&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-3-5-Spring-整合MyBatis-配置\"><a href=\"#9-3-5-Spring-整合MyBatis-配置\" class=\"headerlink\" title=\"9.3.5 Spring 整合MyBatis 配置\"></a>9.3.5 Spring 整合MyBatis 配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Spring 整合 Mybatis --&gt;</span><br><span class=\"line\">\t&lt;!--1. SqlSession  --&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 指定数据源 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;!-- MyBatis的配置文件 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;configLocation&quot; </span><br><span class=\"line\">                 value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;!-- MyBatis的SQL映射文件 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;mapperLocations&quot; </span><br><span class=\"line\">                 value=&quot;classpath:mybatis/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;typeAliasesPackage&quot; </span><br><span class=\"line\">                 value=&quot;com.atguigu.ssm.beans&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;!-- Mapper接口</span><br><span class=\"line\">\t\tMapperScannerConfigurer 为指定包下的Mapper接口批量生成代理实现类.bean的默认id是接口名首字母小写. </span><br><span class=\"line\">\t --&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;basePackage&quot; value=&quot;com.atguigu.ssm.mapper&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;!-- &lt;mybatis-spring:scan base-package=&quot;com.atguigu.ssm.mapper&quot;/&gt; --&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-4-整合测试\"><a href=\"#9-4-整合测试\" class=\"headerlink\" title=\"9.4 整合测试\"></a>9.4 整合测试</h1><pre><code>1)编写页面，发送请求：\nhttp://localhost:8888/ssm/employees\n2)编写Handler,处理请求，完成响应\n3)在页面中获取数据，显示数据\n</code></pre>","categories":["技术"],"tags":["Java 工具"]},{"title":"1. Java语言概述","url":"http://yoursite.com/2019/02/12/1. Java语言概述/","content":"<h1 id=\"1-1-软件开发介绍\"><a href=\"#1-1-软件开发介绍\" class=\"headerlink\" title=\"1.1 软件开发介绍\"></a>1.1 软件开发介绍</h1><h2 id=\"软件开发\"><a href=\"#软件开发\" class=\"headerlink\" title=\"软件开发\"></a>软件开发</h2><p>软件，即一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分。  </p>\n<h2 id=\"人机交互方式\"><a href=\"#人机交互方式\" class=\"headerlink\" title=\"人机交互方式\"></a>人机交互方式</h2><p>图形化界面(Graphical User Interface GUI)这种方式简单直观，使用者易于接受，容易上手操作。<br>命令行方式(Command Line Interface CLI)：需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。<br>==Pascal之父Nicklaus Wirth： “Algorithms+Data Structures=Programs”==</p>\n<h2 id=\"常用的DOS命令\"><a href=\"#常用的DOS命令\" class=\"headerlink\" title=\"常用的DOS命令\"></a>常用的DOS命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir :    列出当前目录下的文件以及文件夹</span><br><span class=\"line\">md :   创建目录</span><br><span class=\"line\">rd :     删除目录</span><br><span class=\"line\">cd :    进入指定目录</span><br><span class=\"line\">cd.. :  退回到上一级目录</span><br><span class=\"line\">cd\\:    退回到根目录</span><br><span class=\"line\">del :    删除文件</span><br><span class=\"line\">exit :   退出 dos 命令行</span><br><span class=\"line\">补充：echo javase&gt;1.doc</span><br><span class=\"line\">常用快捷键</span><br><span class=\"line\">←   →：移动光标</span><br><span class=\"line\">↑   ↓：调阅历史操作命令</span><br><span class=\"line\">Delete和Backspace：删除字符</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-2-计算机编程语言介绍\"><a href=\"#1-2-计算机编程语言介绍\" class=\"headerlink\" title=\"1-2 计算机编程语言介绍\"></a>1-2 计算机编程语言介绍</h1><h2 id=\"什么是计算机语言\"><a href=\"#什么是计算机语言\" class=\"headerlink\" title=\"什么是计算机语言\"></a>什么是计算机语言</h2><ul>\n<li>语言：是人与人之间用于沟通的一种方式。例如：中国人与中国人用普通话沟通。而中国人要和英国人交流，就要学习英语。</li>\n<li><p>计算机语言：人与计算机交流的方式。<br>   如果人要与计算机交流，那么就要学习计算机语言。<br>   计算机语言有很多种。如：C ,C++ ,Java ,PHP ,  Kotlin，Python，Scala等。  </p>\n</li>\n<li><p>第一代语言<br>机器语言。指令以二进制代码形式存在。</p>\n</li>\n<li>第二代语言<br>汇编语言。使用助记符表示一条机器指令。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDJj1J.png\" alt=\"EDJj1J.png\"></p>\n<ul>\n<li>第三代语言：高级语言</li>\n</ul>\n<blockquote>\n<p>C、Pascal、Fortran面向过程的语言<br>C++面向过程/面向对象<br>Java跨平台的纯面向对象的语言<br>.NET跨语言的平台<br>Python、Scala…  </p>\n</blockquote>\n<h2 id=\"1-3-Java语言概述\"><a href=\"#1-3-Java语言概述\" class=\"headerlink\" title=\"1-3 Java语言概述\"></a>1-3 Java语言概述</h2><ul>\n<li>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言。</li>\n<li>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中。</li>\n<li>随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言<br>   <strong>后台开发：Java、PHP、Python、Go、Node.js</strong><h3 id=\"Java语言概述-Java简史\"><a href=\"#Java语言概述-Java简史\" class=\"headerlink\" title=\"Java语言概述:Java简史\"></a>Java语言概述:Java简史</h3><blockquote>\n<p>1991年 Green项目，开发语言最初命名为Oak (橡树)<br>1994年，开发组意识到Oak 非常适合于互联网<br>1996年，发布JDK 1.0，约8.3万个网页应用Java技术来制作<br>1997年，发布JDK 1.1，JavaOne会议召开，创当时全球同类会议规模之最<br>1998年，发布JDK 1.2，同年发布企业平台J2EE<br>1999年，Java分成J2SE、J2EE和J2ME，JSP/Servlet技术诞生<br>2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，更名为JDK 5.0<br>2005年，J2SE -&gt; JavaSE，J2EE -&gt; JavaEE，J2ME -&gt; JavaME<br>2009年，Oracle公司收购SUN，交易价格74亿美元<br>2011年，发布JDK 7.0<br>2014年，发布JDK 8.0，是继JDK 5.0以来变化最大的版本<br>2017年，发布JDK 9.0，最大限度实现模块化<br>2018年3月，发布JDK 10.0，版本号也称为18.3<br>2018年9月，发布JDK 11.0，版本号也称为18.9     </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Java技术体系平台\"><a href=\"#Java技术体系平台\" class=\"headerlink\" title=\"Java技术体系平台\"></a>Java技术体系平台</h3><p><img src=\"https://s2.ax1x.com/2019/05/06/EDYdEV.png\" alt=\"EDYdEV.png\"></p>\n<h1 id=\"1-3-Java在各领域的应用\"><a href=\"#1-3-Java在各领域的应用\" class=\"headerlink\" title=\"1-3 Java在各领域的应用\"></a>1-3 Java在各领域的应用</h1><p>从Java的应用领域来分，Java语言的应用方向主要表现在以下几个方面：</p>\n<ul>\n<li>企业级应用：主要指复杂的大企业的软件系统、各种类型的网站。Java的安全机制以及它的跨平台的优势，使它在分布式系统领域开发中有广泛应用。应用领域包括金融、电信、交通、电子商务等。</li>\n<li>Android平台应用：Android应用程序使用Java语言编写。Android开发水平的高低很大程度上取决于Java语言核心能力是否扎实。</li>\n<li>大数据平台开发：各类框架有Hadoop，spark，storm，flink等，就这类技术生态圈来讲，还有各种中间件如flume，kafka，sqoop等等 ，这些框架以及工具大多数是用Java编写而成，但提供诸如Java，scala，Python，R等各种语言API供编程。</li>\n<li>移动领域应用：主要表现在消费和嵌入式领域，是指在各种小型设备上的应用，包括手机、PDA、机顶盒、汽车通信设备等。<h3 id=\"Java语言的诞生\"><a href=\"#Java语言的诞生\" class=\"headerlink\" title=\"Java语言的诞生\"></a>Java语言的诞生</h3>java之父James Gosling团队在开发”Green”项目时，发现C缺少垃圾回收系统，还有可移植的安全性、分布程序设计和多线程功能。最后，他们想要一种易于移植到各种设备上的平台。<br><img src=\"https://s2.ax1x.com/2019/05/06/EDaaM4.png\" alt=\"EDaaM4.png\"><br>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。比如Java语言的变量声明，操作符形式，参数传递，流程控制等方面和C语言、C++语言完全相同。但同时，Java是一个纯粹的面向对象的程序设计语言，它继承了C++语言面向对象技术的核心。Java舍弃了C语言中容易引起错误的指针（以引用取代）、运算符重载（operator overloading）、多重继承（以接口取代）等特性，增加了垃圾回收器功能用于回收不再被引用的对象所占据的内存空间。<br>JDK1.5又引入了泛型编程（Generic Programming）、类型安全的枚举、不定长参数和自动装/拆箱<h2 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h2></li>\n<li>Java语言是易学的。Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用Java。</li>\n<li>Java语言是强制面向对象的。Java语言提供类、接口和继承等原语，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。</li>\n<li>Java语言是分布式的。Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</li>\n<li>Java语言是健壮的。Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。</li>\n<li>Java语言是安全的。Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。如：安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查。</li>\n<li>Java语言是体系结构中立的。Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。</li>\n<li>Java语言是解释型的。如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统的解释器中运行。</li>\n<li>Java是性能略高的。与那些解释型的高级脚本语言相比，Java的性能还是较优的。</li>\n<li>Java语言是原生支持多线程的。在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。<h1 id=\"1-4-Java程序运行机制及运行过程\"><a href=\"#1-4-Java程序运行机制及运行过程\" class=\"headerlink\" title=\"1-4 Java程序运行机制及运行过程\"></a>1-4 Java程序运行机制及运行过程</h1><h2 id=\"Java语言的特点\"><a href=\"#Java语言的特点\" class=\"headerlink\" title=\"Java语言的特点\"></a>Java语言的特点</h2></li>\n<li>特点一：面向对象<br>两个基本概念：类、对象<br>三大特性：封装、继承、多态  </li>\n<li>特点二：健壮性<br>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</li>\n<li>特点三：跨平台性<br>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”<br>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java Virtual Machine) 即可。由JVM来负责Java程序在该系统中的运行。</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/EDaHW8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDaHW8.md.png\" alt=\"EDaHW8.md.png\"></a></p>\n<h2 id=\"Java两种核心机制\"><a href=\"#Java两种核心机制\" class=\"headerlink\" title=\"Java两种核心机制\"></a>Java两种核心机制</h2><ul>\n<li>Java虚拟机  (Java Virtal Machine)<br>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。<br>对于不同的平台，有不同的虚拟机。<br>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行<br>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”  </li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDaves.png\" alt=\"EDaves.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdpF0.png\" alt=\"EDdpF0.png\"></p>\n<ul>\n<li>垃圾收集机制  (Garbage Collection)<br>不再使用的内存空间应回收—— 垃圾回收。</li>\n</ul>\n<blockquote>\n<ul>\n<li>在C/C++等语言中，由程序员负责回收无用内存。</li>\n<li>Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。<br>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</li>\n</ul>\n</blockquote>\n<p><strong>Java程序还会出现内存泄漏和内存溢出问题吗？</strong>==Yes!==</p>\n<h1 id=\"1-5-Java语言的环境搭建\"><a href=\"#1-5-Java语言的环境搭建\" class=\"headerlink\" title=\"1-5 Java语言的环境搭建\"></a>1-5 Java语言的环境搭建</h1><h2 id=\"明确什么是JDK-JRE\"><a href=\"#明确什么是JDK-JRE\" class=\"headerlink\" title=\"明确什么是JDK, JRE\"></a>明确什么是JDK, JRE</h2><p><img src=\"https://s2.ax1x.com/2019/05/06/EDdVm9.png\" alt=\"EDdVm9.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdnFx.png\" alt=\"EDdnFx.png\"></p>\n<p>==简单而言，使用JDK的开发工具完成的java程序，交给JRE去运行。==</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDd16e.png\" alt=\"EDd16e.png\"></p>\n<ul>\n<li>JDK = JRE + 开发工具集（例如Javac编译工具等）</li>\n<li>JRE = JVM + Java SE标准类库<h2 id=\"下载-JDK\"><a href=\"#下载-JDK\" class=\"headerlink\" title=\"下载 JDK\"></a>下载 JDK</h2>官方网址：</li>\n<li><a href=\"http://www.oracle.com\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com</a></li>\n<li><a href=\"http://java.sun.com\" target=\"_blank\" rel=\"noopener\">http://java.sun.com</a></li>\n</ul>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><ul>\n<li>傻瓜式安装，下一步即可。</li>\n<li>建议：安装路径不要有中文或者空格等特殊符号。</li>\n<li>如果操作系统是64位的，软件尽量选择支持64位的（除非软件本身不区分）。</li>\n<li>当提示安装 JRE 时，正常在JDK安装时已经装过了，但是为了后续使用Eclipse等开发工具不报错，建议也根据提示安装JRE。</li>\n<li>安装 JDK</li>\n</ul>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>在dos命令行中敲入javac，出现错误提示：</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdaff.png\" alt=\"EDdaff.png\"></p>\n<p>错误原因：当前执行的程序在当前目录下如果不存在，windows系统会在系统中已有的一个名为path的环境变量指定的目录中查找。如果仍未找到，会出现以上的错误提示。所以进入到  jdk安装路径\\bin目录下，执行javac，会看到javac参数提示信息。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdqtx.png\" alt=\"EDdqtx.png\"></p>\n<h2 id=\"配置环境变量-path\"><a href=\"#配置环境变量-path\" class=\"headerlink\" title=\"配置环境变量 path\"></a>配置环境变量 path</h2><ul>\n<li>path：windows系统执行命令时要搜寻的路径。<br>每次执行 java 的工具都要进入到bin目录下，是非常麻烦的。可不可以在任何目录下都可以执行java的工具呢？<br>根据windows系统在查找可执行程序的原理，可以将java工具所在路径定义到 path 环境变量中，让系统帮我们去找运行执行的程序。<br><strong>配置方法</strong>：</li>\n<li>我的电脑–属性–高级系统设置–环境变量</li>\n<li>编辑 path 环境变量，在变量值开始处加上java工具所在目录，后面用 “ ; ”和其他值分隔开即可。</li>\n<li>打开DOS命令行，任意目录下敲入javac。如果出现javac 的参数信息，配置成功。</li>\n</ul>\n<p>注：  具体操作流程，参看JDK8下载_安装_配置(点击跳转)</p>\n<p><a href=\"https://imgchr.com/i/EDwOVs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDwOVs.md.png\" alt=\"EDwOVs.md.png\"></a></p>\n<p>验证是否成功：javac   java</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0S2T.png\" alt=\"ED0S2T.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0CMF.png\" alt=\"ED0CMF.png\"></p>\n<p>#1-6 开发体验— HelloWorld</p>\n<ul>\n<li>步骤：<br>1.将 Java 代码编写到扩展名为 .java 的文件中。<br>2.通过 javac 命令对该 java 文件进行编译。<br>通过 java 命令对生成的 class 文件进行运行  </li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0Dds.png\" alt=\"ED0Dds.png\"></p>\n<ul>\n<li>步骤一：编写<br>选择最简单的编辑器：记事本。<br>敲入代码    class Test{  }<br>将文件保存成Test.java，这个文件是存放java代码的文件，称为源文件。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED06J0.png\" alt=\"ED06J0.png\"></p>\n<h3 id=\"第一个Java程序\"><a href=\"#第一个Java程序\" class=\"headerlink\" title=\"第一个Java程序\"></a>第一个Java程序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">             System.out.println(“Hello World!”);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤二：编译\"><a href=\"#步骤二：编译\" class=\"headerlink\" title=\"步骤二：编译\"></a>步骤二：编译</h3><p><img src=\"https://s2.ax1x.com/2019/05/06/ED0fL4.png\" alt=\"ED0fL4.png\"></p>\n<ul>\n<li>有了java源文件，通过编译器将其编译成JVM可以识别的字节码文件。</li>\n<li>在该源文件目录下，通过javac编译工具对Test.java文件进行编译。</li>\n<li>如果程序没有错误，没有任何提示，但在当前目录下会出现一个Test.class文件，该文件称为字节码文件，也是可以执行的java的程序。<h3 id=\"步骤三：运行\"><a href=\"#步骤三：运行\" class=\"headerlink\" title=\"步骤三：运行\"></a>步骤三：运行</h3></li>\n<li>有了可执行的java程序(Test.class字节码文件)</li>\n<li>通过运行工具java.exe对字节码文件进行执行。</li>\n<li>出现提示：缺少一个名称为main的方法。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0LQO.png\" alt=\"ED0LQO.png\"></p>\n<ul>\n<li>因为一个程序的执行需要一个起始点或者入口，所以在Test类中的加入public static void main(String[] args){  }</li>\n<li>对修改后的Test.java源文件需要重新编译，生成新的class文件后，再进行执行。</li>\n<li>发现没有编译失败，但也没有任何效果，因为并没有告诉JVM要帮我们做什么事情，也就是没有可以具体执行的语句。</li>\n<li>想要和JVM来个互动，只要在main方法中加入一句System.out.println(“Hello World”);因为程序进行改动，所以再重新编译，运行即可。<h1 id=\"1-7-常见问题及解决方法\"><a href=\"#1-7-常见问题及解决方法\" class=\"headerlink\" title=\"1-7 常见问题及解决方法\"></a>1-7 常见问题及解决方法</h1></li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBuYq.png\" alt=\"EDBuYq.png\"></p>\n<p>Ø源文件名不存在或者写错<br>Ø当前路径错误<br>Ø后缀名隐藏问题</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBJ0J.png\" alt=\"EDBJ0J.png\"></p>\n<p>Ø类文件名写错，尤其文件名与类名不一致时，要小心<br>Ø类文件不在当前路径下，或者不在classpath指定路径下</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBgAA.png\" alt=\"EDBgAA.png\"></p>\n<p>Ø声明为public的类应与文件名一致，否知编译失败</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBh1f.png\" alt=\"EDBh1f.png\"></p>\n<p>Ø编译失败，注意错误出现的行数，再到源代码中指定位置改错</p>\n<h2 id=\"小总结：\"><a href=\"#小总结：\" class=\"headerlink\" title=\"小总结：\"></a>小总结：</h2><p>学习编程最容易犯的错是语法错误。Java要求你必须按照语法规则编写代码。如果你的程序违反了语法规则，例如：忘记了分号、大括号、引号，或者拼错了单词，java编译器都会报语法错误。尝试着去看懂编译器会报告的错误信息。</p>\n<h1 id=\"1-8-注释-Comment\"><a href=\"#1-8-注释-Comment\" class=\"headerlink\" title=\"1-8 注释(Comment)\"></a>1-8 注释(Comment)</h1><p>用于注解说明解释程序的文字就是注释。<br>Java中的注释类型：</p>\n<ul>\n<li>单行注释    格式： //注释文字</li>\n<li>多行注释    格式：   /<em>  注释文字 </em>/</li>\n<li><p>文档注释 (java特有)</p>\n</li>\n<li><p>对于单行和多行注释，被注释的文字，不会被JVM（java虚拟机）解释执行。</p>\n</li>\n<li>多行注释里面不允许有多行注释嵌套。</li>\n<li>格式：/**  <pre><code>@author  指定java程序的作者  \n@version  指定源文件的版本                 \n       */\n</code></pre></li>\n</ul>\n<p>注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。<br>提高了代码的阅读性；调试程序的重要方法。<br>注释是一个程序员必须要具有的良好编程习惯。<br>将自己的思想通过注释先整理出来，再用代码去体现</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDnDe.png\" alt=\"EDDnDe.png\"></p>\n<h2 id=\"小结第一个程序\"><a href=\"#小结第一个程序\" class=\"headerlink\" title=\"小结第一个程序\"></a>小结第一个程序</h2><ul>\n<li>Java源文件以“java”为扩展名。源文件的基本组成部分是类（class），如本例中的HelloWorld类。</li>\n<li>Java应用程序的执行入口是main()方法。它有固定的书写格式：<br> public static void main(String[] args)  {…}</li>\n<li>Java语言严格区分大小写。</li>\n<li>Java方法由一条条语句构成，每个语句以“;”结束。</li>\n<li>大括号都是成对出现的，缺一不可。</li>\n<li>一个源文件中最多只能有一个public类。其它类的个数不限，如果源文件包含一个public类，则文件名必须按该类名命名。<h1 id=\"1-9-Java-API文档\"><a href=\"#1-9-Java-API文档\" class=\"headerlink\" title=\"1-9 Java API文档\"></a>1-9 Java API文档</h1>API （Application Programming Interface,应用程序编程接口）是 Java 提供的基本编程接口。<br>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的API文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。<br>下载API：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>Additional Resources-Java SE 8 Documentation下载。  <h1 id=\"1-10-良好的编程风格\"><a href=\"#1-10-良好的编程风格\" class=\"headerlink\" title=\"1.10 良好的编程风格\"></a>1.10 良好的编程风格</h1><h2 id=\"正确的注释和注释风格\"><a href=\"#正确的注释和注释风格\" class=\"headerlink\" title=\"正确的注释和注释风格\"></a>正确的注释和注释风格</h2></li>\n<li>使用文档注释来注释整个类或整个方法。</li>\n<li>如果注释方法中的某一个步骤，使用单行或多行注释。<br>正确的缩进和空白</li>\n<li>使用一次tab操作，实现缩进</li>\n<li>运算符两边习惯性各加一个空格。比如：2 + 4 * 5。<br>块的风格</li>\n<li>Java API 源代码选择了行尾风格</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">行尾风格</span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(&quot;Block Style!&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">次行风格</span><br><span class=\"line\">public class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(&quot;Block Style!&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"选择合适的文本编辑器或-IDE-开发\"><a href=\"#选择合适的文本编辑器或-IDE-开发\" class=\"headerlink\" title=\"选择合适的文本编辑器或 IDE 开发\"></a>选择合适的文本编辑器或 IDE 开发</h1><h2 id=\"JBuilder\"><a href=\"#JBuilder\" class=\"headerlink\" title=\"JBuilder\"></a>JBuilder</h2><p>JBuilder是Borland公司开发的针对java的开发工具，使用JBuilder将可以快速，有效的开发各类java应用。 Jbuilder支持各种应用服务器。Jbuilder与Inprise Application Server紧密集成，同时支持WebLogic Server，支持EJB 1.1和EJB 2.0，可以快速开发J2EE的电子商务应用。支持远程调试和多线程调试，调试器支持各种JDK版本<br><a href=\"https://edn.embarcadero.com/cn/jbuilder\" target=\"_blank\" rel=\"noopener\">https://edn.embarcadero.com/cn/jbuilder</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDDCq.png\" alt=\"EDDDCq.png\"></p>\n<h2 id=\"NetBeans\"><a href=\"#NetBeans\" class=\"headerlink\" title=\"NetBeans\"></a>NetBeans</h2><p>NetBeans是一款用Java编写的开源IDE。既可用于Java开发，也支持其他语言，特别是PHP、C/C ++，和HTML5。NetBeans开发环境提供了丰富的产品文档和培训资源以及大量的第三方插件。<br><a href=\"https://netbeans.org/features/index.html\" target=\"_blank\" rel=\"noopener\">https://netbeans.org/features/index.html</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDqqe.png\" alt=\"EDDqqe.png\"></p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p>Eclipse应该是大多数Java程序员使用的第一个IDE。众所周知的、最流行、也最受欢迎的Java开发工具。优点很多：免费、更新快、代码智能化、ANT构建等，拥有众多插件，完全免费、有中文版、上手比较快。缺点也非常明显，安装插件麻烦、插件对版本要求比较严格。</p>\n<p><a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"noopener\">https://eclipse.org/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDxPI.png\" alt=\"EDDxPI.png\"></p>\n<h2 id=\"MyEclipse\"><a href=\"#MyEclipse\" class=\"headerlink\" title=\"MyEclipse\"></a>MyEclipse</h2><p>MyEclipse也是一款功能强大的J2EE集成开发环境，由Genuitec公司发布，提供免费版和收费版。但免费版，只能满足基本开发需求<br><a href=\"https://www.myeclipsecn.com/\" target=\"_blank\" rel=\"noopener\">https://www.myeclipsecn.com/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDrPsS.png\" alt=\"EDrPsS.png\"></p>\n<p>ØIntelliJ IDEA<br>IntelliJ IDEA被认为是目前Java开发效率最快的IDE工具。是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格。它整合了开发过程中实用的众多功能，智能提示错误，强大的调试工具，Ant，JavaEE支持，CVS整合，最大程度的加快开发的速度。简单而又功能强大。与其他的一些繁冗而复杂的IDE工具有鲜明的对比。<br><a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/idea/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDrAaj.png\" alt=\"EDrAaj.png\"></p>\n","categories":["技术"],"tags":["Java 工具"]},{"title":"Maven","url":"http://yoursite.com/2018/03/10/Maven/","content":"<h1 id=\"第一章-Why\"><a href=\"#第一章-Why\" class=\"headerlink\" title=\"第一章 Why\"></a>第一章 Why</h1><blockquote>\n<p>Maven是干什么用的？<br>即使不使用Maven我们仍然可以进行B/S结构项目的开发。<br>从表述层、业务逻辑层到持久化层再到数据库都有成熟的解决方案。<br>但是通过企业开发中的实际需求来看，不使用Maven是不足的。   </p>\n</blockquote>\n<h2 id=\"1-1-添加第三方jar包\"><a href=\"#1-1-添加第三方jar包\" class=\"headerlink\" title=\"1.1 添加第三方jar包\"></a>1.1 添加第三方jar包</h2><ul>\n<li>在今天的JavaEE开发领域，有大量的第三方框架和工具可以供我们使用。要使用这些jar包最简单的方法就是复制粘贴到WEB-INF目录下的lib目录下。但是这会导致每次创建一个新的工程就需要将jar包重复复制到lib目录下，从而造成工作区中存在大量重复的文件。</li>\n<li>而使用Maven后每个jar包只在本地仓库中保存一份，需要jar包的工程只需要维护一个文本形式的jar包的引用</li>\n</ul>\n<blockquote>\n<p>我们称之为“坐标”。不仅极大的节约了存储空间，让项目更轻巧，更避免了重复文件太多而造成的混乱。</p>\n</blockquote>\n<h2 id=\"1-2-jar包之间的依赖关系\"><a href=\"#1-2-jar包之间的依赖关系\" class=\"headerlink\" title=\"1.2 jar包之间的依赖关系\"></a>1.2 jar包之间的依赖关系</h2><ul>\n<li>jar包往往不是孤立存在的，很多jar包都需要在其他jar包的支持下才能够正常工作，我们称之为jar包之间的依赖关系。最典型的例子是：commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar，如果没有IO包，FileUpload包就不能正常工作。</li>\n<li>那么问题来了，你知道你所使用的所有jar包的依赖关系吗？当你拿到一个新的从未使用过的jar包，你如何得知他需要哪些jar包的支持呢？如果不了解这个情况，导入的jar包不够，那么现有的程序将不能正常工作。再进一步，当你的项目中需要用到上百个jar包时，你还会人为的，手工的逐一确认它们依赖的其他jar包吗？这简直是不可想象的。</li>\n<li>而引入Maven后，Maven就可以替我们自动的将当前jar包所依赖的其他所有jar包全部导入进来，无需人工参与，节约了我们大量的时间和精力。用实际例子来说明就是：通过Maven导入commons-fileupload-1.3.jar后，commons-io-2.0.1.jar会被自动导入，程序员不必了解这个依赖关系。</li>\n<li><h2 id=\"1-3-处理jar包之间的冲突\"><a href=\"#1-3-处理jar包之间的冲突\" class=\"headerlink\" title=\"1.3 处理jar包之间的冲突\"></a>1.3 处理jar包之间的冲突</h2></li>\n<li>jar包不足项目无法正常工作，但其实有的时候jar包多了项目仍然无法正常工作，这就是jar包之间的冲突。<blockquote>\n<p>举个例子：我们现在有三个工程MakeFriend、HelloFriend、和Hello。<br>MakeFriend依赖HelloFriend，HelloFriend依赖Hello。<br>而Hello依赖log4j.1.2.17.jar，HelloFriend依赖log4j.1.2.14.jar。<br>如下图所示：</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOj6ER.png\" alt=\"EOj6ER.png\"></p>\n<blockquote>\n<p>那么MakeFriend工程的运行时环境中该导入log4j.1.2.14.jar呢还是log4j.1.2.17.jar呢?<br>这样的问题一个两个还可以手工解决，但如果系统中存在几十上百的jar包，他们之间的依赖关系会非常复杂，几乎不可能手工实现依赖关系的梳理。<br>使用Maven就可以自动的处理jar包之间的冲突问题。<br>因为Maven中内置了两条依赖原则：</p>\n<ul>\n<li>最短路径者优先和先声明者优先.  </li>\n</ul>\n</blockquote>\n<blockquote>\n<p>上述问题MakeFriend工程会自动使用log4j.1.2.14.jar。</p>\n</blockquote>\n<h2 id=\"1-4-获取第三方jar包\"><a href=\"#1-4-获取第三方jar包\" class=\"headerlink\" title=\"1.4 获取第三方jar包\"></a>1.4 获取第三方jar包</h2><blockquote>\n<ul>\n<li>JavaEE开发中需要使用到的jar包种类繁多，几乎每个jar包在其本身的官网上的获取方式都不尽相同。<br>为了查找一个jar包找遍互联网，身心俱疲，没有经历过的人或许体会不到这种折磨。<br>不仅如此，费劲心血找的jar包里有的时候并没有你需要的那个类，又或者又同名的类没有你要的方法——以不规范的方式获取的jar包也往往是不规范的。  </li>\n<li>使用Maven我们可以享受到一个完全统一规范的jar包管理体系。<br>你只需要在你的项目中以坐标的方式依赖一个jar包，Maven就会自动从中央仓库进行下载，并同时下载这个jar包所依赖的其他jar包。<br>规范、完整、准确！一次性解决所有问题！   </li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>Tips</strong>：统一的规范几乎可以说成是程序员的最高信仰。<br>        如果没有统一的规范，就意味着每个具体的技术都各自为政，需要以诸多不同的特殊的方式加入到项目中；<br>        好不容易加入进来还会和其他技术格格不入，最终受苦的是我们。<br>        而任何一个领域的统一规范都能够极大的降低程序员的工作难度，减少工作量。<br>        例如：USB接口可以外接各种设备，如果每个设备都有自己独特的接口，那么不仅制造商需要维护各个接口的设计方案，使用者也需要详细了解每个设备对应的接口，无疑是非常繁琐的。</p>\n</blockquote>\n<p>1.5 将项目拆分成多个工程模块<br>随着JavaEE项目的规模越来越庞大，开发团队的规模也与日俱增。一个项目上千人的团队持续开发很多年对于JavaEE项目来说再正常不过。那么我们想象一下：几百上千的人开发的项目是同一个Web工程。那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过package结构来划分模块，必须将项目拆分成多个工程协同开发。多个模块工程中有的是Java工程，有的是Web工程。<br>那么工程拆分后又如何进行互相调用和访问呢？这就需要用到Maven的依赖管理机制。大家请看我们的Survey调查项目拆分的情况：</p>\n<p>上层模块依赖下层，所以下层模块中定义的API都可以为上层所调用和访问。</p>\n<h2 id=\"1-6-实现项目的分布式部署\"><a href=\"#1-6-实现项目的分布式部署\" class=\"headerlink\" title=\"1.6 实现项目的分布式部署\"></a>1.6 实现项目的分布式部署</h2><p>在实际生产环境中，项目规模增加到一定程度后，可能每个模块都需要运行在独立的服务器上，我们称之为分布式部署，这里同样需要用到Maven。</p>\n<h1 id=\"第二章-What\"><a href=\"#第二章-What\" class=\"headerlink\" title=\"第二章 What\"></a>第二章 What</h1><p>如果上面的描述能够使你认识到使用Maven是多么的重要，我们下面就来介绍一下Maven是什么。</p>\n<h2 id=\"2-1-自动化构建工具\"><a href=\"#2-1-自动化构建工具\" class=\"headerlink\" title=\"2.1 自动化构建工具\"></a>2.1 自动化构建工具</h2><blockquote>\n<p>Maven这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]，不要读作“妈文”。<br>Maven是一款自动化构建工具，专注服务于Java平台的项目构建和依赖管理。在JavaEE开发的历史上构建工具的发展也经历了一系列的演化和变迁：<br>Make→Ant→Maven→Gradle→其他……</p>\n</blockquote>\n<h2 id=\"2-2-构建的概念\"><a href=\"#2-2-构建的概念\" class=\"headerlink\" title=\"2.2 构建的概念\"></a>2.2 构建的概念</h2><p>构建并不是创建，创建一个工程并不等于构建一个项目。<br>由浅入深的从以下三个层面来看：  </p>\n<blockquote>\n<ul>\n<li>①纯Java代码<br>大家都知道，我们Java是一门编译型语言.java扩展名的源文件需要编译成.class扩展名的字节码文件才能够执行。所以编写任何Java代码想要执行的话就必须经过编译得到对应的.class文件。</li>\n<li>②Web工程<br>当我们需要通过浏览器访问Java程序时就必须将包含Java程序的Web工程编译的结果“拿”到服务器上的指定目录下，并启动服务器才行。这个“拿”的过程我们叫部署。  </li>\n</ul>\n</blockquote>\n<blockquote>\n<p>我们可以将未编译的Web工程比喻为一只生的鸡，编译好的Web工程是一只煮熟的鸡，编译部署的过程就是将鸡炖熟。<br>Web工程和其编译结果的目录结构对比见下图：</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOj6ER.png\" alt=\"EOj6ER.png\"></p>\n<blockquote>\n<ul>\n<li>③实际项目<br>在实际项目中整合第三方框架，Web工程中除了Java程序和JSP页面、图片等静态资源之外，还包括第三方框架的jar包以及各种各样的配置文件。所有这些资源都必须按照正确的目录结构部署到服务器上，项目才可以运行。<br>所以综上所述：构建就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、JSP页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。  </li>\n</ul>\n</blockquote>\n<h2 id=\"2-3-构建环节\"><a href=\"#2-3-构建环节\" class=\"headerlink\" title=\"2.3 构建环节\"></a>2.3 构建环节</h2><p>①清理：删除以前的编译结果，为重新编译做好准备。<br>②编译：将Java源程序编译为字节码文件。<br>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>④报告：在每一次测试后以标准的格式记录和展示测试结果。<br>⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对应war包。<br>⑥安装：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。<br>⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。  </p>\n<h2 id=\"2-4-自动化构建\"><a href=\"#2-4-自动化构建\" class=\"headerlink\" title=\"2.4 自动化构建\"></a>2.4 自动化构建</h2><p>其实上述环节我们在Eclipse中都可以找到对应的操作，只是不太标准。那么既然IDE已经可以进行构建了我们为什么还要使用Maven这样的构建工具呢？我们来看一个小故事：  </p>\n<blockquote>\n<p>这是阳光明媚的一天。托马斯向往常一样早早的来到了公司，冲好一杯咖啡，进入了自己的邮箱——很不幸，QA小组发来了一封邮件，报告了他昨天提交的模块的测试结果——有BUG。“好吧，反正也不是第一次”，托马斯摇摇头，进入IDE，运行自己的程序，编译、打包、部署到服务器上，然后按照邮件中的操作路径进行测试。“嗯，没错，这个地方确实有问题”，托马斯说道。于是托马斯开始尝试修复这个BUG，当他差不多有眉目的时候已经到了午饭时间。<br>下午继续工作。BUG很快被修正了，接着托马斯对模块重新进行了编译、打包、部署，测试之后确认没有问题了，回复了QA小组的邮件。<br>一天就这样过去了，明媚的阳光化作了美丽的晚霞，托马斯却觉得生活并不像晚霞那样美好啊。  </p>\n</blockquote>\n<p>让我们来梳理一下托马斯这一天中的工作内容</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOxwm4.png\" alt=\"EOxwm4.png\"></p>\n<p>从中我们发现，托马斯的很大一部分时间花在了“编译、打包、部署、测试”这些程式化的工作上面，而真正需要由“人”的智慧实现的分析问题和编码却只占了很少一部分。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOxB79.png\" alt=\"EOxB79.png\"></p>\n<p>能否将这些程式化的工作交给机器自动完成呢？——当然可以！这就是自动化构建。</p>\n<p><a href=\"https://imgchr.com/i/EOxyfx\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/18/EOxyfx.md.png\" alt=\"EOxyfx.md.png\"></a></p>\n<p>那么Maven又是如何实现自动化构建的呢？简单的说来就是它可以自动的从构建过程的起点一直执行到终点：</p>\n<p><a href=\"https://imgchr.com/i/EOx26O\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/18/EOx26O.md.png\" alt=\"EOx26O.md.png\"></a></p>\n<h2 id=\"2-5-Maven核心概念（重点）\"><a href=\"#2-5-Maven核心概念（重点）\" class=\"headerlink\" title=\"2.5 Maven核心概念（重点）\"></a>2.5 Maven核心概念（重点）</h2><p>（学会9个重要概念就学会Maven）<br>Maven之所以能够实现自动化的构建，和它的设计是紧密相关的。我们对Maven的学习就围绕它的九个核心概念展开：<br>①POM<br>②约定的目录结构<br>③坐标<br>④依赖管理<br>⑤仓库管理<br>⑥生命周期<br>⑦插件和目标<br>⑧继承<br>⑨聚合  </p>\n<h2 id=\"第三章-How\"><a href=\"#第三章-How\" class=\"headerlink\" title=\"第三章 How\"></a>第三章 How</h2><p>在这一节中，我们来看看Maven核心程序的安装和本地仓库的必要设置。然后我们就可以编写第一个Maven程序了。  </p>\n<blockquote>\n<p>①检查JAVA_HOME环境变量。<br>Maven是使用Java开发的，所以必须知道当前系统环境中JDK的安装目录。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32&gt;echo %JAVA_HOME%</span><br><span class=\"line\">C:\\Java\\jdk1.8.0_45</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>②解压Maven的核心程序。<br>将apache-maven-3.5.0-bin.zip解压到一个非中文无空格的目录下。例如：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\Server\\apache-maven-3.5.0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>③配置环境变量。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M2_HOME</span><br><span class=\"line\">D:\\Server\\ apache-maven-3.5.0</span><br><span class=\"line\">path</span><br><span class=\"line\">%M2_HOME%\\bin或D:\\Server\\ apache-maven-3.5.0\\bin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>④查看Maven版本信息验证安装是否正确</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EXfPY9.png\" alt=\"EXfPY9.png\"></p>\n<blockquote>\n<p>⑤配置本地仓库  </p>\n<ul>\n<li>[1]Maven默认的本地仓库：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~\\.m2\\repository目录。</span><br><span class=\"line\">Tips：~表示当前用户的家目录。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>[2]Maven的核心程序并不包含具体功能，仅负责宏观调度。具体功能由插件来完成。Maven核心程序会到本地仓库中查找插件。如果本地仓库中没有就会从远程中央仓库下载。此时如果不能上网则无法执行Maven的具体功能。为了解决这个问题，我们可以将Maven的本地仓库指向一个在联网情况下下载好的目录。</li>\n<li>[3]Maven的核心配置文件位置：<br>解压目录</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\D:\\Server\\ apache-maven-3.5.0\\conf\\settings.xml</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>[4]设置方式</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;localRepository&gt;以及准备好的仓库位置&lt;/localRepository&gt;</span><br><span class=\"line\">&lt;localRepository&gt;D:/RepMaven&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第四章-第一个Maven程序-练习常用命令\"><a href=\"#第四章-第一个Maven程序-练习常用命令\" class=\"headerlink\" title=\"第四章 第一个Maven程序(练习常用命令)\"></a>第四章 第一个Maven程序(练习常用命令)</h1><p>●第一步：创建约定的目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello</span><br><span class=\"line\">\t src</span><br><span class=\"line\">\t ——main</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t ——test</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t pom.xml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main目录用于存放主程序。  </span><br><span class=\"line\">test目录用于存放测试程序。  </span><br><span class=\"line\">java目录用于存放源代码文件。    </span><br><span class=\"line\">resources目录用于存放配置文件和资源文件。</span><br></pre></td></tr></table></figure>\n<p>●第二步：创建Maven的核心配置文件pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;name&gt;Hello&lt;/name&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>●第三步：编写主代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在src/main/java/com/atguigu/maven目录下新建文件Hello.java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;</span><br><span class=\"line\">public class Hello &#123;</span><br><span class=\"line\">\tpublic String sayHello(String name)&#123;</span><br><span class=\"line\">\t\treturn &quot;Hello &quot;+name+&quot;!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>●第四步：编写测试代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在/src/test/java/com/atguigu/maven目录下新建测试文件HelloTest.java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;\t</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import static junit.framework.Assert.*;</span><br><span class=\"line\">public class HelloTest &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testHello()&#123;</span><br><span class=\"line\">\t\tHello hello = new Hello();</span><br><span class=\"line\">\t\tString results = hello.sayHello(&quot;litingwei&quot;);</span><br><span class=\"line\">\t\tassertEquals(&quot;Hello litingwei!&quot;,results);\t //断言</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>●第五步：运行几个基本的Maven命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①打开cmd命令行，进入Hello项目根目录(pom.xml文件所在目录)</span><br><span class=\"line\">    执行mvn compile命令，查看根目录变化</span><br><span class=\"line\">④cmd 中继续录入mvn clean命令，然后再次查看根目录变化</span><br><span class=\"line\">⑤cmd 中录入 mvn clean compile命令, 查看根目录变化</span><br><span class=\"line\">⑥cmd 中录入 mvn test-compile命令,查看target目录变化</span><br><span class=\"line\">⑦cmd 中录入 mvn clean test命令，查看target目录变化</span><br><span class=\"line\">⑧cmd 中录入mvn clean package命令,查看target目录变化</span><br><span class=\"line\">⑨cmd中录入mvn source:jar命令，查看target目录变化</span><br></pre></td></tr></table></figure>\n<p>注意：运行Maven命令时一定要进入pom.xml文件所在的目录！</p>\n<h1 id=\"第五章-POM\"><a href=\"#第五章-POM\" class=\"headerlink\" title=\"第五章 POM\"></a>第五章 POM</h1><blockquote>\n<p>Project Object Model：项目对象模型。将Java工程的相关信息封装为对象作为便于操作和管理的模型。<br>Maven工程的核心配置。可以说学习Maven就是学习pom.xml文件中的配置。</p>\n</blockquote>\n<h1 id=\"第六章-约定的目录结构\"><a href=\"#第六章-约定的目录结构\" class=\"headerlink\" title=\"第六章 约定的目录结构\"></a>第六章 约定的目录结构</h1><p>现在JavaEE开发领域普遍认同一个观点：<br><code>约定&gt;配置&gt;编码</code>。<br>意思就是能用配置解决的问题就不编码，能基于约定的就不进行配置。<br>而Maven正是因为指定了特定文件保存的目录才能够对我们的Java工程进行自动化构建。<br>目录结构含义参见前面的描述。</p>\n<h1 id=\"第七章-坐标\"><a href=\"#第七章-坐标\" class=\"headerlink\" title=\"第七章 坐标\"></a>第七章 坐标</h1><h2 id=\"7-1-几何中的坐标\"><a href=\"#7-1-几何中的坐标\" class=\"headerlink\" title=\"7.1 几何中的坐标\"></a>7.1 几何中的坐标</h2><blockquote>\n<ul>\n<li>[1]在一个平面中使用x、y两个向量可以唯一的确定平面中的一个点。</li>\n<li>[2]在空间中使用x、y、z三个向量可以唯一的确定空间中的一个点。</li>\n</ul>\n</blockquote>\n<h2 id=\"7-2-Maven的坐标\"><a href=\"#7-2-Maven的坐标\" class=\"headerlink\" title=\"7.2 Maven的坐标\"></a>7.2 Maven的坐标</h2><p>使用如下三个向量在Maven的仓库中唯一的确定一个Maven工程。</p>\n<blockquote>\n<ul>\n<li>[1]groupId：公司或组织的域名倒序+当前项目名称</li>\n<li>[2]artifactId：当前项目的模块名称</li>\n<li>[3]version：当前模块的版本</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-3-如何通过坐标到仓库中查找jar包\"><a href=\"#7-3-如何通过坐标到仓库中查找jar包\" class=\"headerlink\" title=\"7.3 如何通过坐标到仓库中查找jar包\"></a>7.3 如何通过坐标到仓库中查找jar包</h2><p>[1]将gav三个向量连起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.maven+Hello+0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure>\n<p>[2]以连起来的字符串作为目录结构到仓库中查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com/maven/Hello/0.0.1-SNAPSHOT/Hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n<p>※注意：我们自己的Maven工程必须执行安装操作才会进入仓库。安装的命令是：<code>mvn install</code></p>\n<h1 id=\"第八章-第二个Maven工程-练习依赖引用\"><a href=\"#第八章-第二个Maven工程-练习依赖引用\" class=\"headerlink\" title=\"第八章 第二个Maven工程(练习依赖引用)\"></a>第八章 第二个Maven工程(练习依赖引用)</h1><h2 id=\"8-1-目录结构\"><a href=\"#8-1-目录结构\" class=\"headerlink\" title=\"8.1 目录结构\"></a>8.1 目录结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloFriend</span><br><span class=\"line\">\t src</span><br><span class=\"line\">\t ——main</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t ——test</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t pom.xml</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-POM文件\"><a href=\"#8-2-POM文件\" class=\"headerlink\" title=\"8.2 POM文件\"></a>8.2 POM文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t  &lt;name&gt;HelloFriend&lt;/name&gt;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-3-主程序\"><a href=\"#8-3-主程序\" class=\"headerlink\" title=\"8.3 主程序\"></a>8.3 主程序</h2><p>在src/main/java/com/atguigu/maven目录下新建文件HelloFriend.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;\t</span><br><span class=\"line\">\timport com.atguigu.maven.Hello;</span><br><span class=\"line\">\tpublic class HelloFriend &#123;</span><br><span class=\"line\">\t\tpublic String sayHelloToFriend(String name)&#123;</span><br><span class=\"line\">\t\t\tHello hello = new Hello();</span><br><span class=\"line\">\t\t\tString str = hello.sayHello(name)+&quot; I am &quot;+this.getMyName();</span><br><span class=\"line\">\t\t\tSystem.out.println(str);</span><br><span class=\"line\">\t\t\treturn str;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpublic String getMyName()&#123;</span><br><span class=\"line\">\t\t\treturn &quot;John&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-4-测试程序\"><a href=\"#8-4-测试程序\" class=\"headerlink\" title=\"8.4 测试程序\"></a>8.4 测试程序</h2><p>在/src/test/java/com/atguigu/maven目录下新建测试文件HelloFriendTest.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;\t</span><br><span class=\"line\">import static junit.framework.Assert.assertEquals;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import com.atguigu.maven.Hello;</span><br><span class=\"line\">\t</span><br><span class=\"line\">public class HelloFriendTest &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testHelloFriend()&#123;</span><br><span class=\"line\">\t\tHelloFriend helloFriend = new HelloFriend();</span><br><span class=\"line\">\t\tString results = helloFriend.sayHelloToFriend(&quot;litingwei&quot;);</span><br><span class=\"line\">\t\tassertEquals(&quot;Hello litingwei! I am John&quot;,results);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-5-关键：对Hello的依赖\"><a href=\"#8-5-关键：对Hello的依赖\" class=\"headerlink\" title=\"8.5 关键：对Hello的依赖\"></a>8.5 关键：对Hello的依赖</h2><blockquote>\n<ul>\n<li>这里Hello就是我们的第一个Maven工程，现在HelloFriend对它有依赖。那么这个依赖能否成功呢？更进一步的问题是：HelloFriend工程会到哪里去找Hello呢？  </li>\n<li>答案是：本地仓库。任何一个Maven工程会根据坐标到本地仓库中去查找它所依赖的jar包。如果能够找到则可以正常工作，否则就不行。</li>\n</ul>\n</blockquote>\n<h1 id=\"第九章-依赖管理\"><a href=\"#第九章-依赖管理\" class=\"headerlink\" title=\"第九章 依赖管理\"></a>第九章 依赖管理</h1><h2 id=\"9-1-基本概念\"><a href=\"#9-1-基本概念\" class=\"headerlink\" title=\"9.1 基本概念\"></a>9.1 基本概念</h2><p>当A jar包需要用到B jar包中的类时，我们就说A对B有依赖。<br>例如：<code>commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar</code>。<br>通过第二个Maven工程我们已经看到，当前工程会到本地仓库中根据坐标查找它所依赖的jar包。<br>配置的基本形式是使用dependency标签指定目标jar包的坐标。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;!—坐标 --&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.10&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 依赖的范围 --&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-直接依赖和间接依赖\"><a href=\"#9-2-直接依赖和间接依赖\" class=\"headerlink\" title=\"9.2 直接依赖和间接依赖\"></a>9.2 直接依赖和间接依赖</h2><p>如果A依赖B，B依赖C，那么A→B和B→C都是直接依赖，而A→C是间接依赖。</p>\n<h2 id=\"9-3-依赖的范围\"><a href=\"#9-3-依赖的范围\" class=\"headerlink\" title=\"9.3 依赖的范围\"></a>9.3 依赖的范围</h2><p>当一个Maven工程添加了对某个jar包的依赖后，这个被依赖的jar包可以对应下面几个可选的范围：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①compile  </span><br><span class=\"line\">[1]main目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时要放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：对Hello的依赖。主程序、测试程序和服务器运行时都需要用到。</span><br><span class=\"line\">②test</span><br><span class=\"line\">[1]main目录下的Java代码不能访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：对junit的依赖。仅仅是测试程序部分需要。</span><br><span class=\"line\">③provided</span><br><span class=\"line\">[1]main目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：servlet-api在服务器上运行时，Servlet容器会提供相关API，所以部署的时候不需要。</span><br><span class=\"line\">④runtime[了解]</span><br><span class=\"line\">[1]main目录下的Java代码不能访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时会放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：JDBC驱动。只有在测试运行和在服务器运行的时候才决定使用什么样的数据库连接。</span><br><span class=\"line\">⑤其他：import、system等。</span><br></pre></td></tr></table></figure>\n<p>各个依赖范围的作用可以概括为下图：</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EXh34J.png\" alt=\"EXh34J.png\"></p>\n<h2 id=\"9-4-依赖的传递性\"><a href=\"#9-4-依赖的传递性\" class=\"headerlink\" title=\"9.4 依赖的传递性\"></a>9.4 依赖的传递性</h2><p>当存在间接依赖的情况时，主工程对间接依赖的jar可以访问吗？<br>这要看间接依赖的jar包引入时的依赖范围——只有依赖范围为compile时可以访问。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maven工程\t依赖范围\t对A的可见性</span><br><span class=\"line\">A\tB\tC\tcompile \t√</span><br><span class=\"line\">\t\tD\ttest    \t×</span><br><span class=\"line\">\t\tE\tprovided\t×</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-5-依赖的原则：解决jar包冲突\"><a href=\"#9-5-依赖的原则：解决jar包冲突\" class=\"headerlink\" title=\"9.5 依赖的原则：解决jar包冲突\"></a>9.5 依赖的原则：解决jar包冲突</h2><p>①路径最短者优先</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjupHs.png\" alt=\"EjupHs.png\"></p>\n<p>②路径相同时先声明者优先</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/Ejui40.png\" alt=\"Ejui40.png\"></p>\n<p>这里“声明”的先后顺序指的是dependency标签配置的先后顺序。</p>\n<h2 id=\"9-6-依赖的排除\"><a href=\"#9-6-依赖的排除\" class=\"headerlink\" title=\"9.6 依赖的排除\"></a>9.6 依赖的排除</h2><p>有的时候为了确保程序正确可以将有可能重复的间接依赖排除。请看如下的例子：<br>●假设当前工程为survey_public，直接依赖survey_environment。<br>●survey_environment依赖commons-logging的1.1.1对于survey_public来说是间接依赖。<br>●当前工程survey_public直接依赖commons-logging的1.1.2<br>●加入exclusions配置后可以在依赖survey_environment的时候排除版本为1.1.1的commons-logging的间接依赖  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;Survey160225_4_Environment&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;!-- 依赖排除 --&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-7-统一管理目标jar包的版本\"><a href=\"#9-7-统一管理目标jar包的版本\" class=\"headerlink\" title=\"9.7 统一管理目标jar包的版本\"></a>9.7 统一管理目标jar包的版本</h2><p>以对Spring的jar包依赖为例：Spring的每一个版本中都包含spring-core、spring-context等jar包。我们应该导入版本一致的Spring jar包，而不是使用4.0.0的spring-core的同时使用4.1.1的spring-context。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>问题是如果我们想要将这些jar包的版本统一升级为4.1.1，是不是要手动一个个修改呢？显然，我们有统一配置的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">\t&lt;spring.version&gt;4.1.1.RELEASE&lt;/spring.version&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\">……</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>这样一来，进行版本调整的时候只改一改地方就行了。</p>\n<h1 id=\"第十章-仓库\"><a href=\"#第十章-仓库\" class=\"headerlink\" title=\"第十章 仓库\"></a>第十章 仓库</h1><h2 id=\"10-1-分类\"><a href=\"#10-1-分类\" class=\"headerlink\" title=\"10.1 分类\"></a>10.1 分类</h2><p>[1]本地仓库：为当前本机电脑上的所有Maven工程服务。<br>[2]远程仓库  </p>\n<blockquote>\n<p>(1)私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务。  </p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/Ejuf5q.png\" alt=\"Ejuf5q.png\"></p>\n<blockquote>\n<p>(2)中央仓库：架设在Internet上，为全世界所有Maven工程服务。<br>(3)中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。  </p>\n</blockquote>\n<h2 id=\"10-2-仓库中的文件\"><a href=\"#10-2-仓库中的文件\" class=\"headerlink\" title=\"10.2 仓库中的文件\"></a>10.2 仓库中的文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]Maven的插件</span><br><span class=\"line\">[2]我们自己开发的项目的模块</span><br><span class=\"line\">[3]第三方框架或工具的jar包</span><br></pre></td></tr></table></figure>\n<p>※不管是什么样的jar包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。</p>\n<h1 id=\"第十一章-生命周期\"><a href=\"#第十一章-生命周期\" class=\"headerlink\" title=\"第十一章 生命周期\"></a>第十一章 生命周期</h1><h2 id=\"11-1-什么是Maven的生命周期\"><a href=\"#11-1-什么是Maven的生命周期\" class=\"headerlink\" title=\"11.1 什么是Maven的生命周期\"></a>11.1 什么是Maven的生命周期</h2><p>●Maven生命周期定义了各个构建环节的执行顺序，有了这个清单，Maven就可以自动化的执行构建命令了。<br>●Maven有三套相互独立的生命周期，分别是： </p>\n<blockquote>\n<p>①Clean Lifecycle在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle构建的核心部分，编译，测试，打包，安装，部署等等。<br>③Site Lifecycle生成项目报告，站点，发布站点。</p>\n</blockquote>\n<blockquote>\n<p>再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。  </p>\n</blockquote>\n<blockquote>\n<p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean，这个clean是Clean生命周期的一个阶段。有Clean生命周期，也有clean阶段。</p>\n</blockquote>\n<h2 id=\"11-2-clean生命周期\"><a href=\"#11-2-clean生命周期\" class=\"headerlink\" title=\"11.2 clean生命周期\"></a>11.2 clean生命周期</h2><p>Clean生命周期一共包含了三个阶段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①pre-clean 执行一些需要在clean之前完成的工作 </span><br><span class=\"line\">②clean 移除所有上一次构建生成的文件 </span><br><span class=\"line\">③post-clean 执行一些需要在clean之后立刻完成的工作</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-3-Site生命周期\"><a href=\"#11-3-Site生命周期\" class=\"headerlink\" title=\"11.3 Site生命周期\"></a>11.3 Site生命周期</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①pre-site 执行一些需要在生成站点文档之前完成的工作</span><br><span class=\"line\">②site 生成项目的站点文档</span><br><span class=\"line\">③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</span><br><span class=\"line\">④site-deploy 将生成的站点文档部署到特定的服务器上</span><br></pre></td></tr></table></figure>\n<p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</p>\n<h2 id=\"11-4-Default生命周期\"><a href=\"#11-4-Default生命周期\" class=\"headerlink\" title=\"11.4 Default生命周期\"></a>11.4 Default生命周期</h2><p>Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate</span><br><span class=\"line\">generate-sources</span><br><span class=\"line\">process-sources</span><br><span class=\"line\">generate-resources</span><br><span class=\"line\">process-resources 复制并处理资源文件，至目标目录，准备打包。</span><br><span class=\"line\">compile 编译项目的源代码。</span><br><span class=\"line\">process-classes</span><br><span class=\"line\">generate-test-sources</span><br><span class=\"line\">process-test-sources</span><br><span class=\"line\">generate-test-resources</span><br><span class=\"line\">process-test-resources 复制并处理资源文件，至目标测试目录。</span><br><span class=\"line\">test-compile 编译测试源代码。</span><br><span class=\"line\">process-test-classes</span><br><span class=\"line\">test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</span><br><span class=\"line\">prepare-package</span><br><span class=\"line\">package 接受编译好的代码，打包成可发布的格式，如JAR。</span><br><span class=\"line\">pre-integration-test</span><br><span class=\"line\">integration-test</span><br><span class=\"line\">post-integration-test</span><br><span class=\"line\">verify</span><br><span class=\"line\">install将包安装至本地仓库，以让其它项目依赖。</span><br><span class=\"line\">deploy将最终的包复制到远程的仓库，</span><br><span class=\"line\">    以让其它开发人员与项目共享或部署到服务器上运行。</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-5-生命周期与自动化构建\"><a href=\"#11-5-生命周期与自动化构建\" class=\"headerlink\" title=\"11.5 生命周期与自动化构建\"></a>11.5 生命周期与自动化构建</h2><p><strong>运行任何一个阶段的时候，它前面的所有阶段都会被运行</strong>，<br>例如我们运行mvn install 的时候，代码会被编译，测试，打包。这就是Maven为什么能够自动执行构建过程的各个环节的原因。<br>此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。</p>\n<h1 id=\"第十二章-插件和目标\"><a href=\"#第十二章-插件和目标\" class=\"headerlink\" title=\"第十二章 插件和目标\"></a>第十二章 插件和目标</h1><p>●Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。<br>●每个插件都能实现多个功能，每个功能就是一个插件目标。<br>●Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>例如：compile就是插件maven-compiler-plugin的一个功能；<br>pre-clean是插件maven-clean-plugin的一个目标。</p>\n<h1 id=\"第十三章-STS整合Maven\"><a href=\"#第十三章-STS整合Maven\" class=\"headerlink\" title=\"第十三章 STS整合Maven\"></a>第十三章 STS整合Maven</h1><h2 id=\"13-1-Maven插件安装\"><a href=\"#13-1-Maven插件安装\" class=\"headerlink\" title=\"13.1 Maven插件安装\"></a>13.1 Maven插件安装</h2><p>STS内置Maven插件，可以使用默认插件。但是我们推荐配置自己的Maven插件，这样可以控制Maven版本以及仓库位置。</p>\n<h2 id=\"13-2-Maven插件的设置\"><a href=\"#13-2-Maven插件的设置\" class=\"headerlink\" title=\"13.2 Maven插件的设置\"></a>13.2 Maven插件的设置</h2><p>①指定Maven核心程序的位置<br>[1]操作路径：Window→Preferences→Maven→Installations<br>[2]图解</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjKgSK.png\" alt=\"EjKgSK.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjKWOe.png\" alt=\"EjKWOe.png\"></p>\n<p>第十四章 第三个Maven项目(Jar工程)<br>14.1 在Eclipse中创建Maven工程</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjKvwj.png\" alt=\"EjKvwj.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjMpYq.png\" alt=\"EjMpYq.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjMPpV.png\" alt=\"EjMPpV.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjMnt1.png\" alt=\"EjMnt1.png\"></p>\n<h2 id=\"14-2-第三个Maven工程\"><a href=\"#14-2-第三个Maven工程\" class=\"headerlink\" title=\"14.2 第三个Maven工程\"></a>14.2 第三个Maven工程</h2><p>①坐标</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupId：com.maven</span><br><span class=\"line\">ArtifactId：MakeFriends</span><br><span class=\"line\">Package：com.maven</span><br></pre></td></tr></table></figure>\n<p>②在src/main/java中新建类com.atguigu.maven.MakeFriends<br>在类中创建如下方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String makeFriends(String name)&#123;\t\t</span><br><span class=\"line\">HelloFriend friend = new HelloFriend();</span><br><span class=\"line\">friend.sayHelloToFriend(&quot;litingwei&quot;);</span><br><span class=\"line\">String str = &quot;Hey,&quot;+friend.getMyName()+&quot; make a friend please.&quot;;</span><br><span class=\"line\">System.out.println(str);</span><br><span class=\"line\">return str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>③在src/test/java中新建类com.maven.MakeFriendsTest</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;</span><br><span class=\"line\">import static junit.framework.Assert.assertEquals;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">public class MakeFriendsTest &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testMakeFriends()&#123;\t\t</span><br><span class=\"line\">\t\tMakeFriends makeFriend = new MakeFriends();</span><br><span class=\"line\">\t\tString str = makeFriend.makeFriends(&quot;litingwei&quot;);</span><br><span class=\"line\">\t\tassertEquals(&quot;Hey,John make a friend please.&quot;,str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>④打开根目录pom.xml添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t    \t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t    \t&lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;</span><br><span class=\"line\">\t    \t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t    \t&lt;type&gt;jar&lt;/type&gt;</span><br><span class=\"line\">\t    \t&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>⑤在Eclipse环境下执行Maven命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击pom.xml选择run as 中的命令执行即可</span><br></pre></td></tr></table></figure>\n<p>⑥此时可以测试依赖原则，需要的依赖信息如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;1.2.14&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>第十五章 继承<br>15.1 为什么需要继承机制<br>由于非compile范围的依赖信息是不能在“依赖链”中传递的，所以有需要的工程只能单独配置。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello\t       \\  &lt;dependency&gt;</span><br><span class=\"line\">                \t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">                \t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                \t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">                \t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">                &lt;/dependency&gt;</span><br><span class=\"line\">HelloFriend\t    &lt;dependency&gt;</span><br><span class=\"line\">        \t        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">        \t        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                \t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">                \t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">              &lt;/dependency&gt;</span><br><span class=\"line\">MakeFriend\t    &lt;dependency&gt;</span><br><span class=\"line\">                \t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">                \t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                \t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">                \t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">                &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>此时如果项目需要将各个模块的junit版本统一为4.9，那么到各个工程中手动修改无疑是非常不可取的。使用继承机制就可以将这样的依赖信息统一提取到父工程模块中进行统一管理。</p>\n<h2 id=\"15-2-创建父工程\"><a href=\"#15-2-创建父工程\" class=\"headerlink\" title=\"15.2 创建父工程\"></a>15.2 创建父工程</h2><p>创建父工程和创建一般的Java工程操作一致，唯一需要注意的是：打包方式处要设置为pom。</p>\n<h2 id=\"15-3-在子工程中引用父工程\"><a href=\"#15-3-在子工程中引用父工程\" class=\"headerlink\" title=\"15.3 在子工程中引用父工程\"></a>15.3 在子工程中引用父工程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">\t&lt;!-- 父工程坐标 --&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;...&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;...&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;...&lt;/version&gt;</span><br><span class=\"line\">\t&lt;relativePath&gt;从当前目录到父项目的pom.xml文件的相对路径&lt;/relativePath&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;Parent&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径 --&gt;</span><br><span class=\"line\">\t&lt;relativePath&gt;../Parent/pom.xml&lt;/relativePath&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>\n<p>此时如果子工程的groupId和version如果和父工程重复则可以删除。</p>\n<h2 id=\"15-4-在父工程中管理依赖\"><a href=\"#15-4-在父工程中管理依赖\" class=\"headerlink\" title=\"15.4 在父工程中管理依赖\"></a>15.4 在父工程中管理依赖</h2><p>将Parent项目中的dependencies标签，用dependencyManagement标签括起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencyManagement&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>\n<p>在子项目中重新指定需要的依赖，删除范围和版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十六章-聚合\"><a href=\"#第十六章-聚合\" class=\"headerlink\" title=\"第十六章 聚合\"></a>第十六章 聚合</h1><h2 id=\"16-1-为什么要使用聚合\"><a href=\"#16-1-为什么要使用聚合\" class=\"headerlink\" title=\"16.1 为什么要使用聚合\"></a>16.1 为什么要使用聚合</h2><p>将多个工程拆分为模块后，需要手动逐个安装到仓库后依赖才能够生效。修改源码后也需要逐个手动进行clean操作。而使用了聚合之后就可以批量进行Maven工程的安装、清理工作。</p>\n<h2 id=\"16-1-如何配置聚合\"><a href=\"#16-1-如何配置聚合\" class=\"headerlink\" title=\"16.1 如何配置聚合\"></a>16.1 如何配置聚合</h2><p>在总的聚合工程中使用modules/module标签组合，指定模块工程的相对路径即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">\t&lt;module&gt;../Hello&lt;/module&gt;</span><br><span class=\"line\">\t&lt;module&gt;../HelloFriend&lt;/module&gt;</span><br><span class=\"line\">\t&lt;module&gt;../MakeFriends&lt;/module&gt;</span><br><span class=\"line\">&lt;/modules&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十七章-第四个Maven工程-war工程\"><a href=\"#第十七章-第四个Maven工程-war工程\" class=\"headerlink\" title=\"第十七章 第四个Maven工程(war工程)\"></a>第十七章 第四个Maven工程(war工程)</h1><h2 id=\"17-1-创建步骤\"><a href=\"#17-1-创建步骤\" class=\"headerlink\" title=\"17.1 创建步骤\"></a>17.1 创建步骤</h2><p>①第一步：创建maven web工程<br>②第二步：修改web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><br><span class=\"line\">\tid=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n<p>③找不到HttpServlet错误<br>如果看到JSP报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path可以加入如下依赖解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.5&lt;/version&gt;</span><br><span class=\"line\">\t&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>④第二步：依赖MakeFriends<br>⑤第三步：建立测试JSP  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">\tpageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;com.atguigu.maven.MakeFriends&quot;%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    MakeFriends makeFriends=new MakeFriends();</span><br><span class=\"line\">    out.println(makeFriends.makeFriends(&quot;wanglipeng&quot;));</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n<p>⑥EL表达式没有提示问题<br>${pageContext}这个EL表达式中通过pageContext对象访问reuqest属性时本身是应该有提示的，但如果没有的话加入下面依赖即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;2.1.3-b06&lt;/version&gt;</span><br><span class=\"line\">     &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"17-2-Web工程自动部署\"><a href=\"#17-2-Web工程自动部署\" class=\"headerlink\" title=\"17.2 Web工程自动部署\"></a>17.2 Web工程自动部署</h2><p>除了在Eclipse中使用Run as→run on server的方式运行Web工程，还可以配置Web工程的自动部署。<br>①配置自动部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;finalName&gt;web&lt;/finalName&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">          &lt;plugin&gt;</span><br><span class=\"line\">              &lt;groupId&gt;org.codehaus.cargo&lt;/groupId&gt;</span><br><span class=\"line\">              &lt;artifactId&gt;cargo-maven2-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">  \t\t\t  &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">  \t\t\t  &lt;configuration&gt;</span><br><span class=\"line\">  \t\t\t      &lt;container&gt;</span><br><span class=\"line\">  \t\t\t          &lt;containerId&gt;tomcat6x&lt;/containerId&gt;</span><br><span class=\"line\">  \t\t\t          &lt;home&gt;D:\\DevInstall\\apache-tomcat-6.0.39&lt;/home&gt;</span><br><span class=\"line\">  \t\t\t      &lt;/container&gt;</span><br><span class=\"line\">  \t\t\t      &lt;configuration&gt;</span><br><span class=\"line\">  \t\t\t          &lt;type&gt;existing&lt;/type&gt;</span><br><span class=\"line\">  \t\t\t          &lt;home&gt;D:\\DevInstall\\apache-tomcat-6.0.39&lt;/home&gt;</span><br><span class=\"line\">  \t\t\t          &lt;!-- 如果Tomcat端口为默认值8080则不必设置该属性 --&gt;</span><br><span class=\"line\">  \t\t\t          &lt;properties&gt;</span><br><span class=\"line\">  \t\t\t                &lt;cargo.servlet.port&gt;8989&lt;/cargo.servlet.port&gt;</span><br><span class=\"line\">  \t\t\t          &lt;/properties&gt;</span><br><span class=\"line\">  \t\t\t      &lt;/configuration&gt;</span><br><span class=\"line\">  \t\t\t  &lt;/configuration&gt;</span><br><span class=\"line\">  \t\t\t  &lt;executions&gt;  </span><br><span class=\"line\">                  &lt;execution&gt;  </span><br><span class=\"line\">                      &lt;id&gt;cargo-run&lt;/id&gt;  </span><br><span class=\"line\">                      &lt;phase&gt;install&lt;/phase&gt;  </span><br><span class=\"line\">                      &lt;goals&gt;  </span><br><span class=\"line\">                          &lt;goal&gt;run&lt;/goal&gt;  </span><br><span class=\"line\">                      &lt;/goals&gt;  </span><br><span class=\"line\">                  &lt;/execution&gt;  </span><br><span class=\"line\">              &lt;/executions&gt;</span><br><span class=\"line\">          &lt;/plugin&gt;</span><br><span class=\"line\">      &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>②部署Web项目的命令：mvn deploy  </p>\n<h1 id=\"第十八章-创建MavenWeb工程的完美方式\"><a href=\"#第十八章-创建MavenWeb工程的完美方式\" class=\"headerlink\" title=\"第十八章 创建MavenWeb工程的完美方式\"></a>第十八章 创建MavenWeb工程的完美方式</h1><p>①创建简单的Maven工程，打包方式选war包</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQnbQ.png\" alt=\"EjQnbQ.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQMUs.png\" alt=\"EjQMUs.png\"></p>\n<p>②调整JRE版本<br>③取消Dynamic Web Module的勾选  </p>\n<p><a href=\"https://imgchr.com/i/EjQGvT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/19/EjQGvT.png\" alt=\"EjQGvT.png\"></a></p>\n<p>④重新勾选Dynamic Web Module</p>\n<p><a href=\"https://imgchr.com/i/EjQIRP\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/19/EjQIRP.md.png\" alt=\"EjQIRP.md.png\"></a></p>\n<p>⑤点超链接进行必须设置</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQw5R.png\" alt=\"EjQw5R.png\"></p>\n<p>⑥最终生成的工程的结构  </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQWad.png\" alt=\"EjQWad.png\"></p>\n<h1 id=\"第十九章-Maven酷站\"><a href=\"#第十九章-Maven酷站\" class=\"headerlink\" title=\"第十九章 Maven酷站\"></a>第十九章 Maven酷站</h1><p>我们可以到<br><a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">http://mvnrepository.com/</a>  搜索需要的jar包的依赖信息。<br><a href=\"http://search.maven.org/\" target=\"_blank\" rel=\"noopener\">http://search.maven.org/</a><br><a href=\"http://repo.maven.apache.org/maven2\" target=\"_blank\" rel=\"noopener\">http://repo.maven.apache.org/maven2</a></p>\n","categories":["技术"],"tags":["Java 工具"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]