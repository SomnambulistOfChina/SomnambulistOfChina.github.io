[{"title":"2. Java基本语法(上)","url":"http://yoursite.com/2019/03/19/2. JavaSE-变量与运算符/","content":"<h1 id=\"重点-变量-amp-常见数据类型概览\"><a href=\"#重点-变量-amp-常见数据类型概览\" class=\"headerlink\" title=\"重点:变量&amp;常见数据类型概览\"></a>重点:变量&amp;常见数据类型概览</h1><p>变量的理解  </p>\n<pre><code>概念：内存中一块数据存储空间的表示。  \n</code></pre><p>变量三要素</p>\n<pre><code>数据类型\n变量名\n变量值\n</code></pre><p>变量使用步骤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式1：三步法（声明-赋值-使用）</span><br><span class=\"line\">        //步骤1：声明变量</span><br><span class=\"line\">        int age;//(内存帮我们开辟一个int大小的房间，房间名叫age)</span><br><span class=\"line\">        //步骤2：为变量赋值</span><br><span class=\"line\">        age = 18;//(将18放到名叫age的房间中)</span><br><span class=\"line\">        //步骤3：使用变量</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        格式2：两步法（声明/赋值-使用）</span><br><span class=\"line\">        //步骤1：声明变量并赋值</span><br><span class=\"line\">        int age = 18;//(内存帮我们开辟一个int大小的房间，房间名叫age，并将值18放进去)</span><br><span class=\"line\">        //步骤2：使用变量</span><br><span class=\"line\">        System.out.println(age);</span><br></pre></td></tr></table></figure>\n<p>变量的特点</p>\n<pre><code>1、变量必须先声明、赋值后才能使用\n完全遵循：声明-赋值-使用\n2、同一个作用域内，变量不可以重名\n3、变量的值是可以变化的\n4、变量的值是临时存储的，遵循内存的特点：易失性\n</code></pre><p>常见数据类型</p>\n<pre><code>整型：说明：用于存储整数，比如100/99\n    byte字节整型\n    short短整型\n    int整型\n    long长整型\n浮点型：说明：用于存储小数，比如100.9、99.0\n    float单精度浮点型\n    double双精度浮点型\n字符型：说明：用于存储单个字符，比如 &apos;a&apos; 、&apos;男&apos;  、&apos;1&apos;\n    char 字符型\n布尔型：说明：用于存储多个字符，比如 &quot;张三丰&quot;  、&quot;a&quot; 、&quot;&quot; 、&quot;1&quot; 基本数据类型（原始数据类型）\n    boolean 布尔型\n</code></pre><p>引用数据类型（复杂数据类型）</p>\n<pre><code>使用class定义的类型：String\n使用interface定义的接口\n数组\n</code></pre><p>基本数据类型之间的转换（除了boolean类型）</p>\n<pre><code>byte-&gt; short-&gt; int-&gt; long-&gt;float-&gt;double\nchar-&gt;int\n自动类型转换：\n规则：小——&gt;大\n强制类型转换：\n规则：大——&gt;小\n</code></pre><p>细节：</p>\n<pre><code>①自动提升原则：表达式的结果类型为 操作数中类型最大的\n②强转符号只针对于最近的变量有效\n③byte和short在进行运算时，当做int类型处理！\n④char类型的值可以是int的常量值，但不可以是int的变量值，需要强转。\n</code></pre><p>命名规则</p>\n<pre><code>只能包含字母、数字、_或$符号，不能是关键字或保留字，不能以数字开头！\n</code></pre><p>命名规范</p>\n<pre><code>要求见名知义，提高阅读性\n变量名和方法名：遵循驼峰命名法，第一个单词全小写，其他单词首字符大写，其他字符小写\n类名和接口名：遵循Pascal命名法，所有单词，首字符大写，其他字符小写。\n</code></pre><h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><h3 id=\"1-1-基本算术运算符\"><a href=\"#1-1-基本算术运算符\" class=\"headerlink\" title=\"1 -1 基本算术运算符\"></a>1 -1 基本算术运算符</h3><pre><code>+ - * / %\n特点：\n①/左右的操作数如果都是整型，则结果取整\n②a%b 相当于 a-(int)a/b*b\n    13.5%3=13.5- 13/3*3=1.5\n    -13%-3= -13 - (-13)/3*3 = -1\n③属于二元操作符，运算顺序：从左往右 \n算术表达式的结果肯定是数值型\n</code></pre><h3 id=\"1-2-自增、自减算术运算符\"><a href=\"#1-2-自增、自减算术运算符\" class=\"headerlink\" title=\"1-2 自增、自减算术运算符\"></a>1-2 自增、自减算术运算符</h3><pre><code>++ --\n特点：\n①属于一元操作符\ni++;\n--i;\n++i\ni--;\nint j = i++;\n②既可以作为独立语句使用，又可以作为表达式使用\n如果作为独立语句使用，则i++;等价于++i;等价于i=i+1;\n如果作为表达式使用，则  ★\n        int j= i++; 先赋值后自增\n        int j= ++i; 先自增后赋值\n③自增、自减运算符，编译器做了内部的优化，会进行自动的类型转换，而且效率也提高了\nbyte b = 1;\nb++;//不会报编译错误！\n</code></pre><h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><h3 id=\"1、摘要\"><a href=\"#1、摘要\" class=\"headerlink\" title=\"1、摘要\"></a>1、摘要</h3><pre><code>&gt;  &lt;   &gt;= &lt;= ==  !=\n</code></pre><h3 id=\"2、特点\"><a href=\"#2、特点\" class=\"headerlink\" title=\"2、特点\"></a>2、特点</h3><pre><code>①属于二元操作符\n②关系表达式的结果类型肯定是 boolean类型\n③关系表达式一般当作条件放在if结构或循环结构中\n</code></pre><h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><h3 id=\"1、引入\"><a href=\"#1、引入\" class=\"headerlink\" title=\"1、引入\"></a>1、引入</h3><pre><code>需求：如果令狐冲 java成绩&gt;90,则岳灵珊就和他在一起\n    if(javaScore&gt;90){\n    }\n进阶：如果令狐冲 java成绩&gt;90并且music&gt;85并且 dance==100 或 html&gt;70 则岳灵珊就和他在一起\n    if(java&gt;90&amp;&amp;music&gt;85&amp;&amp;dance==100||html&gt;70){}\n作用：为了连接多个关系表达式的，最终的结果依然是boolean类型\n</code></pre><h3 id=\"2、摘要\"><a href=\"#2、摘要\" class=\"headerlink\" title=\"2、摘要\"></a>2、摘要</h3><pre><code>        名称          写法              特点\n&amp;&amp;      短路与         条件1 &amp;&amp; 条件2      两个条件都成立，结果为true\n||      短路或         条件1 || 条件2      只要有一个条件成立，结果为true\n！       非               !条件             如果条件本身成立，结果为false\n&amp;       逻辑与         条件1 &amp; 条件2       两个条件都成立，结果为true\n|       逻辑或         条件1 | 条件2       只要有一个条件成立，结果为true\n&amp;&amp;和&amp;的区别：\n&amp;&amp;      如果第一个条件不成立，则不再判断第二个条件，直接结果为false\n&amp;       不管第一个条件是否成立，都要判断第二个条件\n||和|的区别：\n||      如果第一个条件成立，则不再判断第二个条件，直接结果为true\n|       不管第一个条件是否成立，都要判断第二个条件\n</code></pre><h2 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><pre><code>语法：\n条件?表达式1:表达式2\n特点：\n①如果条件成立，结果为表达式1的值，否则为表达式2的值\n②表达式1和表达式2的类型要求一致或兼容\n③如果条件成立，则表达式2根本不用计算；\n如果条件不成立，则表达式1根本不用计算。\n</code></pre><h2 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h2><pre><code>() \n自增、自减 ！\n算术运算符\n    * / %    \n    + -\n关系运算符\n    &gt; &lt; &gt;= &lt;=\n    == !=\n逻辑运算符\n    &amp;&amp; \n    ||\n三元运算符\n赋值运算符\n</code></pre><h1 id=\"2-1-关键字与保留字\"><a href=\"#2-1-关键字与保留字\" class=\"headerlink\" title=\"2-1 关键字与保留字\"></a>2-1 关键字与保留字</h1><p>关键字(keyword)的定义和特点</p>\n<ul>\n<li>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</li>\n<li>特点：关键字中所有字母都为小写</li>\n<li>官方地址：<br><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcFWDg.png\" alt=\"EcFWDg.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EckYIs.png\" alt=\"EckYIs.png\"></p>\n<p>保留字(reserved word)</p>\n<pre><code>ava保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 \ngoto 、const\n</code></pre><h1 id=\"2-2-标识符-Identifier\"><a href=\"#2-2-标识符-Identifier\" class=\"headerlink\" title=\"2-2 标识符(Identifier)\"></a>2-2 标识符(Identifier)</h1><h2 id=\"标识符：\"><a href=\"#标识符：\" class=\"headerlink\" title=\"标识符：\"></a>标识符：</h2><blockquote>\n<ul>\n<li>Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符</li>\n<li>技巧：凡是自己可以起名字的地方都叫标识符。</li>\n<li>定义合法标识符规则：<br>由26个英文字母大小写，0-9 ，_或 $ 组成 </li>\n<li>数字不可以开头。</li>\n<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>\n<li>Java中严格区分大小写，长度无限制。</li>\n<li>标识符不能包含空格。</li>\n</ul>\n</blockquote>\n<h2 id=\"Java中的名称命名规范\"><a href=\"#Java中的名称命名规范\" class=\"headerlink\" title=\"Java中的名称命名规范\"></a>Java中的名称命名规范</h2><blockquote>\n<ul>\n<li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li>\n<li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li>\n<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个&gt;- 单词开始每个单词首字母大写：xxxYyyZzz</li>\n<li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>注意1：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</li>\n<li>注意2：java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。</li>\n</ul>\n</blockquote>\n<ul>\n<li>更多细节详见《<strong>代码整洁之道.pdf</strong>》<a href=\"https://pan.baidu.com/s/1B_EW3BKPBA03A1fmisA9rg\" target=\"_blank\" rel=\"noopener\">点击下载</a></li>\n</ul>\n<h1 id=\"2-3-变量\"><a href=\"#2-3-变量\" class=\"headerlink\" title=\"2-3 变量\"></a>2-3 变量</h1><h2 id=\"变量的概念：\"><a href=\"#变量的概念：\" class=\"headerlink\" title=\"变量的概念：\"></a>变量的概念：</h2><blockquote>\n<ul>\n<li>内存中的一个存储区域</li>\n<li>该区域的数据可以在同一类型范围内不断变化</li>\n<li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的作用：\"><a href=\"#变量的作用：\" class=\"headerlink\" title=\"变量的作用：\"></a>变量的作用：</h2><blockquote>\n<ul>\n<li>用于在内存中保存数据</li>\n</ul>\n</blockquote>\n<h2 id=\"使用变量注意：\"><a href=\"#使用变量注意：\" class=\"headerlink\" title=\"使用变量注意：\"></a>使用变量注意：</h2><blockquote>\n<ul>\n<li>Java中每个变量必须先声明，后使用</li>\n<li>使用变量名来访问这块区域的数据</li>\n<li>变量的作用域：其定义所在的一对{ }内</li>\n<li>变量只有在其作用域内才有效</li>\n<li>同一个作用域内，不能定义重名的变量</li>\n</ul>\n</blockquote>\n<h2 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h2><blockquote>\n<ul>\n<li>语法：&lt;数据类型&gt;  &lt;变量名称&gt;</li>\n<li>例如：int var;</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h2><blockquote>\n<ul>\n<li>语法：&lt;变量名称&gt; =  &lt;值&gt;</li>\n<li>例如：var = 10;</li>\n</ul>\n</blockquote>\n<h2 id=\"声明和赋值变量\"><a href=\"#声明和赋值变量\" class=\"headerlink\" title=\"声明和赋值变量\"></a>声明和赋值变量</h2><blockquote>\n<ul>\n<li>语法： &lt;数据类型&gt;  &lt;变量名&gt;  =  &lt;初始化值&gt;</li>\n<li>例如：int var = 10;</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的分类-按数据类型\"><a href=\"#变量的分类-按数据类型\" class=\"headerlink\" title=\"变量的分类-按数据类型\"></a>变量的分类-按数据类型</h2><pre><code>对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。\n</code></pre><p><a href=\"https://imgchr.com/i/EcAdkd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/08/EcAdkd.md.png\" alt=\"EcAdkd.md.png\"></a></p>\n<p>补充：变量的分类-按声明的位置的不同  </p>\n<blockquote>\n<p>在方法体外，类体内声明的变量称为<strong>成员变量</strong>。<br>在方法体内部声明的变量称为<strong>局部变量</strong>。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcEnjf.png\" alt=\"EcEnjf.png\"></p>\n<ul>\n<li><strong>注意：二者在初始化值方面的异同</strong>:<blockquote>\n<ul>\n<li><strong>同</strong>：都有生命周期      </li>\n<li><strong>异</strong>：局部变量除形参外，需显式初始化。</li>\n</ul>\n</blockquote>\n<h1 id=\"2-4-基本数据类型\"><a href=\"#2-4-基本数据类型\" class=\"headerlink\" title=\"2-4 基本数据类型\"></a>2-4 基本数据类型</h1><h2 id=\"整数类型-byte、short、int、long\"><a href=\"#整数类型-byte、short、int、long\" class=\"headerlink\" title=\"整数类型:byte、short、int、long\"></a>整数类型:byte、short、int、long</h2><blockquote>\n<p>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。</p>\n<ul>\n<li><strong>java的整型常量默认为 int 型，声明long型常量须后加‘l’或‘L’</strong></li>\n<li><strong>java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcE3Nj.png\" alt=\"EcE3Nj.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class VariableTest &#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">          int number1;</span><br><span class=\"line\">          number1 = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">          int number2;</span><br><span class=\"line\">          number2 = 20;</span><br><span class=\"line\"> </span><br><span class=\"line\">          int number3;</span><br><span class=\"line\">        number3 = number1 + number2;</span><br><span class=\"line\">        System.out.println(&quot;Number3 = &quot; + number3);</span><br><span class=\"line\"></span><br><span class=\"line\">        int number4 = 50;</span><br><span class=\"line\">        int number5 = number4 - number3;</span><br><span class=\"line\">        System.out.println(&quot;Number5 = &quot; + number5);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮点类型-float、double\"><a href=\"#浮点类型-float、double\" class=\"headerlink\" title=\"浮点类型:float、double\"></a>浮点类型:float、double</h2><p>与整数类型类似，Java <strong>浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响</strong>。<br>浮点型常量有两种表示形式：</p>\n<ul>\n<li>十进制数形式：如：5.12       512.0f        .512   (必须有小数点）</li>\n<li>科学计数法形式:如：5.12e2      512E2     100E-2<blockquote>\n<p>float:单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。<br>double:双精度，精度是float的两倍。通常采用此类型。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Java 的浮点型常量默认为double型，声明float型常量，须后加‘f’或‘F’</strong>。</p>\n<h2 id=\"字符类型：char\"><a href=\"#字符类型：char\" class=\"headerlink\" title=\"字符类型：char\"></a>字符类型：char</h2><blockquote>\n<ul>\n<li>char 型数据用来表示通常意义上“<strong>字符</strong>”(2字节)</li>\n<li>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。 </li>\n</ul>\n</blockquote>\n<p>字符型变量的三种表现形式：</p>\n<blockquote>\n<ul>\n<li>字符常量是用单引号(‘ ’)括起来的单个字符。例如：char c1 = ‘a’;   char c2 = ‘中’; char c3 =  ‘9’;</li>\n<li>Java中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。例如：char c3 = ‘\\n’;  // ‘\\n’表示换行符</li>\n<li>直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX代表一个十六进制整数。如：\\u000a 表示 \\n。</li>\n</ul>\n</blockquote>\n<p>char类型是可以进行运算的。因为它都对应有Unicode码。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcQXqI.png\" alt=\"EcQXqI.png\"></p>\n<h1 id=\"了解：\"><a href=\"#了解：\" class=\"headerlink\" title=\"了解：\"></a>了解：</h1><h2 id=\"ASCII-码\"><a href=\"#ASCII-码\" class=\"headerlink\" title=\"ASCII 码\"></a>ASCII 码</h2><blockquote>\n<ul>\n<li>在计算机内部，所有数据都使用二进制表示。每一个二进制位（bit）有 0 和 1 两种状态，因此 8 个二进制位就可以组合出 256 种状态，这被称为一个字节（byte）。一个字节一共可以用来表示 256 种不同的状态，每一个状态对应一个符号，就是 256 个符号，从 0000000 到 11111111。</li>\n<li>ASCII码：上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</li>\n</ul>\n</blockquote>\n<h3 id=\"ASCII码缺点：\"><a href=\"#ASCII码缺点：\" class=\"headerlink\" title=\"ASCII码缺点：\"></a>ASCII码缺点：</h3><blockquote>\n<ul>\n<li>不能表示所有字符。</li>\n<li>相同的编码表示的字符不一样：比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)<br>了解： Unicode 编码<br>乱码：世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。</li>\n</ul>\n</blockquote>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，使用 Unicode 没有乱码的问题。</p>\n<h3 id=\"Unicode-的缺点：\"><a href=\"#Unicode-的缺点：\" class=\"headerlink\" title=\"Unicode 的缺点：\"></a>Unicode 的缺点：</h3><p>Unicode 只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储;<br>无法区别 Unicode 和ASCII：<br>计算机无法区分三个字节表示一个符号还是分别表示三个符号。<br>另外，我们知道，英文字母只用一个字节表示就够了，<br>如果unicode统一规定，每个符号用三个或四个字节表示，<br>那么每个英文字母前都必然有二到三个字节是0，<br>这对于存储空间来说是极大的浪费。  </p>\n<h2 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h2><blockquote>\n<ul>\n<li>UTF-8 是在互联网上使用最广的一种 Unicode 的实现方式。</li>\n<li>UTF-8 是一种变长的编码方式。它可以使用 1-6 个字节表示一个符号，根据不同的符号而变化字节长度。</li>\n</ul>\n</blockquote>\n<h3 id=\"UTF-8的编码规则：\"><a href=\"#UTF-8的编码规则：\" class=\"headerlink\" title=\"UTF-8的编码规则：\"></a>UTF-8的编码规则：</h3><ul>\n<li>对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）。</li>\n<li>对于多字节的UTF-8编码，如果编码包含 n 个字节，那么第一个字节的前 n 位为1，第一个字节的第 n+1 位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是最高两位为”10”，其余6位用来对字符进行编码。 </li>\n</ul>\n<h1 id=\"布尔类型：boolean\"><a href=\"#布尔类型：boolean\" class=\"headerlink\" title=\"布尔类型：boolean\"></a>布尔类型：boolean</h1><p>boolean 类型用来判断逻辑条件，一般用于程序流程控制：</p>\n<ul>\n<li>if条件控制语句；                 </li>\n<li>while循环控制语句；</li>\n<li>do-while循环控制语句；     </li>\n<li>for循环控制语句； </li>\n</ul>\n<p>boolean类型数据只允许取值true和false，无null。</p>\n<ul>\n<li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li>\n<li>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。———《java虚拟机规范 8版》<h1 id=\"基本数据类型转换\"><a href=\"#基本数据类型转换\" class=\"headerlink\" title=\"基本数据类型转换\"></a>基本数据类型转换</h1>自动类型转换：容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：<br><img src=\"https://s2.ax1x.com/2019/05/08/Ec34Zn.png\" alt=\"Ec34Zn.png\"><br>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</li>\n<li>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</li>\n<li>boolean类型不能与其它数据类型运算。<br>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。<br>字符串类型：String<br>String不是基本数据类型，属于引用数据类型<br>使用方式与基本数据类型一致。例如：String str = “abcd”;<br>一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = str + “xyz” ;</span><br><span class=\"line\">int n = 100;</span><br><span class=\"line\">str = str + n;</span><br></pre></td></tr></table></figure>\n<h1 id=\"示-例—StringTest类\"><a href=\"#示-例—StringTest类\" class=\"headerlink\" title=\"示 例—StringTest类\"></a>示 例—StringTest类</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StringTest &#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">          int no = 10;</span><br><span class=\"line\">          String str = &quot;abcdef&quot;;</span><br><span class=\"line\">          String str1 = str + “xyz” + no;</span><br><span class=\"line\"></span><br><span class=\"line\">          str1 = str1 + &quot;123&quot;;</span><br><span class=\"line\">          char c = &apos;国&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">         double pi = 3.1416;</span><br><span class=\"line\">         str1 = str1 + pi;</span><br><span class=\"line\">         boolean b = false;</span><br><span class=\"line\">         str1 = str1 + b;</span><br><span class=\"line\">         str1 = str1 + c;</span><br><span class=\"line\"></span><br><span class=\"line\">         System.out.println(&quot;str1 = &quot; + str1);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>练习1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = 4;        //判断对错：no</span><br><span class=\"line\">String str2 = 3.5f + “”;             //判断str2对错：yes</span><br><span class=\"line\">System.out.println(str2);        //输出：”3.5”</span><br><span class=\"line\">System.out .println(3+4+“Hello!”);     //输出：7Hello!</span><br><span class=\"line\">System.out.println(“Hello!”+3+4);      //输出：Hello!34</span><br><span class=\"line\">System.out.println(‘a’+1+“Hello!”);    //输出：98Hello!</span><br><span class=\"line\">System.out.println(“Hello”+‘a’+1);     //输出：Helloa1</span><br></pre></td></tr></table></figure>\n<h1 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h1><ul>\n<li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。</li>\n<li>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。<br>如： </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = “43”; int i = Integer.parseInt(a);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>boolean类型不可以转换为其它的数据类型。<br>练习2<br>判断是否能通过编译</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）short  s = 5;</span><br><span class=\"line\">      s = s-2;                       //判断：no</span><br><span class=\"line\">2） byte b = 3;</span><br><span class=\"line\">       b = b + 4;                  //判断：no</span><br><span class=\"line\">       b = (byte)(b+4);        //判断：yes</span><br><span class=\"line\">3）char c = ‘a’;</span><br><span class=\"line\">      int  i = 5;</span><br><span class=\"line\">      float d = .314F;</span><br><span class=\"line\">      double result = c+i+d;     //判断：yes</span><br><span class=\"line\">4） byte b = 5;</span><br><span class=\"line\">       short s = 3;</span><br><span class=\"line\">       short t = s + b;          //判断：no</span><br></pre></td></tr></table></figure>\n<h1 id=\"进-制\"><a href=\"#进-制\" class=\"headerlink\" title=\"进  制\"></a>进  制</h1><p>==世界上有10种人 ，认识和不认识二进制的。==</p>\n<h2 id=\"关于进制\"><a href=\"#关于进制\" class=\"headerlink\" title=\"关于进制\"></a>关于进制</h2><ul>\n<li>所有数字在计算机底层都以二进制形式存在。<br>对于整数，有四种表示方式：<blockquote>\n<ul>\n<li>二进制(binary)：0,1 ，满2进1.以0b或0B开头。</li>\n<li>十进制(decimal)：0-9 ，满10进1。</li>\n<li>八进制(octal)：0-7 ，满8进1. 以数字0开头表示。</li>\n<li>十六进制(hex)：0-9及A-F，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。<br>如：0x21AF +1= 0X21B0</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/Ec6GgH\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ec6GgH.png\" alt=\"Ec6GgH.png\"></a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/Ec6Ubt.png\" alt=\"Ec6Ubt.png\"></p>\n<h2 id=\"二进制\"><a href=\"#二进制\" class=\"headerlink\" title=\"二进制\"></a>二进制</h2><p><strong>Java整数常量默认是int类型，当用二进制定义整数时，其第32位是符号位；当是long类型时，二进制默认占64位，第64位是符号位</strong></p>\n<h2 id=\"二进制的整数有如下三种形式：\"><a href=\"#二进制的整数有如下三种形式：\" class=\"headerlink\" title=\"二进制的整数有如下三种形式：\"></a>二进制的整数有如下三种形式：</h2><ul>\n<li>原码：直接将一个数值换成二进制数。最高位是符号位</li>\n<li>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。</li>\n<li>负数的补码：其反码加1。</li>\n</ul>\n<h2 id=\"计算机以二进制补码的形式保存所有的整数。\"><a href=\"#计算机以二进制补码的形式保存所有的整数。\" class=\"headerlink\" title=\"计算机以二进制补码的形式保存所有的整数。\"></a>计算机以二进制补码的形式保存所有的整数。</h2><ul>\n<li>正数的原码、反码、补码都相同</li>\n<li>负数的补码是其反码+1</li>\n</ul>\n<p>使用原码、反码、补码表示形式的原因</p>\n<blockquote>\n<p>计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/Ec6xPO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ec6xPO.md.png\" alt=\"Ec6xPO.md.png\"></a></p>\n<h2 id=\"二进制-gt-十进制\"><a href=\"#二进制-gt-十进制\" class=\"headerlink\" title=\"二进制-&gt;十进制\"></a>二进制-&gt;十进制</h2><p><a href=\"https://imgchr.com/i/EccPsA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EccPsA.md.png\" alt=\"EccPsA.md.png\"></a><br>在计算机底层，都是以补码的方式存储数值的。<br><strong>对于正数来说：原码、反码、补码是相同的，三码合一</strong></p>\n<p><a href=\"https://imgchr.com/i/EccKMj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EccKMj.md.png\" alt=\"EccKMj.md.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/EcczT0\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EcczT0.md.png\" alt=\"EcczT0.md.png\"></a></p>\n<h2 id=\"进制间转化\"><a href=\"#进制间转化\" class=\"headerlink\" title=\"进制间转化\"></a>进制间转化</h2><ul>\n<li>十进制  二进制互转</li>\n</ul>\n<blockquote>\n<p>   二进制转成十进制  乘以2的幂数<br>   十进制转成二进制  除以2取余数</p>\n</blockquote>\n<ul>\n<li>二进制  八进制互转</li>\n<li>二进制   十六进制互转</li>\n<li>十进制 八进制互转</li>\n<li>十进制 十六进制互转</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcgeTx.png\" alt=\"EcgeTx.png\"></p>\n<p><a href=\"https://imgchr.com/i/Ecgl1e\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ecgl1e.md.png\" alt=\"Ecgl1e.md.png\"></a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcgJ0I.png\" alt=\"EcgJ0I.png\"></p>\n<h1 id=\"2-4-运算符\"><a href=\"#2-4-运算符\" class=\"headerlink\" title=\"2-4 运算符\"></a>2-4 运算符</h1><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p>\n<h2 id=\"算术运算符-1\"><a href=\"#算术运算符-1\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/EcgTBR.png\" alt=\"EcgTBR.png\"><br><strong>如果对负数取模，可以把模数负号忽略不记，如：5%-2=1。 但被模数是负数则不可忽略。此外，取模运算的结果不一定总是整数。</strong><br>对于除号“/”，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。 例如：int x=3510;x=x/1000*1000;  x的结果是？<br>“+”除字符串相加功能外，还能把非字符串转换成字符串.例如：System.out.println(“5+5=”+5+5); //打印结果是？ 5+5=55 ? </p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><strong>符号：=</strong></p>\n<ul>\n<li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li>\n<li>支持连续赋值。</li>\n</ul>\n<p>扩展赋值运算符： +=, -=, *=, /=, %=</p>\n<h2 id=\"比较运算符（关系运算符）\"><a href=\"#比较运算符（关系运算符）\" class=\"headerlink\" title=\"比较运算符（关系运算符）\"></a>比较运算符（关系运算符）</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/Ec288U.png\" alt=\"Ec288U.png\"></p>\n<ul>\n<li>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</li>\n<li>比较运算符“==”不能误写成“=” 。<h2 id=\"逻辑运算符-1\"><a href=\"#逻辑运算符-1\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2>&amp;—逻辑与  　　　 | —逻辑或 　　　 ！—逻辑非<br>&amp;&amp; —短路与　　　 || —短路或 　　 ^ —逻辑异或<br><img src=\"https://s2.ax1x.com/2019/05/09/EcRkZR.png\" alt=\"EcRkZR.png\"><br>逻辑运算符用于连接布尔型表达式，在Java中不可以写成3&lt;x&lt;6，应该写成x&gt;3 &amp; x&lt;6 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class  Test  &#123;</span><br><span class=\"line\">        public static void main (String []  args)  &#123;</span><br><span class=\"line\">           boolean x=true;</span><br><span class=\"line\">           boolean y=false;</span><br><span class=\"line\">           short z=42;</span><br><span class=\"line\">      //if(y == true)</span><br><span class=\"line\">             if((z++==42)&amp;&amp;(y=true))z++;</span><br><span class=\"line\">             if((x=false) || (++z==45))  z++;</span><br><span class=\"line\"></span><br><span class=\"line\">           System. out.println(“z=”+z);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">        //结果: z=46</span><br></pre></td></tr></table></figure>\n<h3 id=\"“-amp-”和“-amp-amp-”的区别：\"><a href=\"#“-amp-”和“-amp-amp-”的区别：\" class=\"headerlink\" title=\"“&amp;”和“&amp;&amp;”的区别：\"></a>“&amp;”和“&amp;&amp;”的区别：</h3><ul>\n<li>单&amp;时，左边无论真假，右边都进行运算；</li>\n<li>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</li>\n</ul>\n<blockquote>\n<p>“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。</p>\n</blockquote>\n<blockquote>\n<p>异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。<br>      理解：<strong>异或，追求的是“异”!</strong></p>\n</blockquote>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/EcRmRO.png\" alt=\"EcRmRO.png\"><br><strong>位运算是直接对整数的二进制进行的运算</strong><br><img src=\"https://s2.ax1x.com/2019/05/09/EcRaQg.png\" alt=\"EcRaQg.png\"></p>\n<h2 id=\"三元运算符-1\"><a href=\"#三元运算符-1\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><p>格式:</p>\n<ul>\n<li>(条件表达式)?表达式1：表达式2；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(条件表达式)为true，运算后的结果是表达式1；</span><br><span class=\"line\">(条件表达式)为false，运算后的结果是表达式2；</span><br></pre></td></tr></table></figure>\n<ul>\n<li>表达式1和表达式2为同种类型</li>\n<li>三元运算符与if-else的联系与区别：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）三元运算符可简化if-else语句</span><br><span class=\"line\">2）三元运算符要求必须返回一个结果。</span><br><span class=\"line\">3）if后的代码块可有多个语句</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h2><h3 id=\"变量与运算符\"><a href=\"#变量与运算符\" class=\"headerlink\" title=\"变量与运算符\"></a>变量与运算符</h3><p>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。<br>如下表，上一行运算符总优先于下一行。<br>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcW1cF.png\" alt=\"EcW1cF.png\"></p>\n","categories":["技术"],"tags":["Java SE"]},{"title":"16. JavaSE-网络编程","url":"http://yoursite.com/2017/02/26/16. JavaSE-网络编程/","content":"<h1 id=\"16-1-网络编程概述\"><a href=\"#16-1-网络编程概述\" class=\"headerlink\" title=\"16.1 网络编程概述\"></a>16.1 网络编程概述</h1><h2 id=\"16-1-1-网络编程概述\"><a href=\"#16-1-1-网络编程概述\" class=\"headerlink\" title=\"16.1.1 网络编程概述\"></a>16.1.1 网络编程概述</h2><p>•    Java是 Internet   上的语言，它从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络应用程序。<br>•    Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java   实现了一个跨平台的网络库，程序员面对的是一个统一的网络编程环境。  </p>\n<h2 id=\"16-1-2-网络基础\"><a href=\"#16-1-2-网络基础\" class=\"headerlink\" title=\"16.1.2 网络基础\"></a>16.1.2 网络基础</h2><ul>\n<li>计算机网络：  <ul>\n<li>把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>网络编程的目的：  <ul>\n<li>直接或间接地通过网络协议与其它计算机进行通讯。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>网络编程中有两个主要的问题：<ul>\n<li>如何准确地定位网络上一台或多台主机</li>\n<li>找到主机后如何可靠高效地进行数据传输</li>\n</ul>\n</li>\n</ul>\n<p>地球村</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162248.png\" alt></p>\n<h1 id=\"16-2-网络通信要素\"><a href=\"#16-2-网络通信要素\" class=\"headerlink\" title=\"16.2 网络通信要素\"></a>16.2 网络通信要素</h1><p>如何实现网络中的主机互相通信：</p>\n<ul>\n<li>通信双方地址 </li>\n<li>一定的规则（有两套参考模型）<ul>\n<li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广</li>\n<li>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162351.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162435.png\" alt></p>\n<h1 id=\"16-3-InetAddress类\"><a href=\"#16-3-InetAddress类\" class=\"headerlink\" title=\"16.3 InetAddress类\"></a>16.3 InetAddress类</h1><h2 id=\"16-3-1通讯要素1：IP-和-端口号\"><a href=\"#16-3-1通讯要素1：IP-和-端口号\" class=\"headerlink\" title=\"16.3.1通讯要素1：IP 和 端口号\"></a>16.3.1通讯要素1：IP 和 端口号</h2><p>IP 地址：InetAddress</p>\n<ul>\n<li>唯一的标识 Internet 上的计算机</li>\n<li>本地回环地址(hostAddress)：127.0.0.1      主机名(hostName)：localhost</li>\n<li>不易记忆</li>\n<li>端口号标识正在计算机上运行的进程（程序）<ul>\n<li>不同的进程有不同的端口号</li>\n<li>被规定为一个 16 位的整数 0~65535。其中，0~1023被预先定义的服务通信占用（如http占用端口80，Tomcat占用端口8080，MySql占用端口3306,Oracle占用端口1521等）。除非我们需要访问这些特定服务，否则，就应该使用 1024~65535 这些端口中的某一个进行通信，以免发生端口冲突。 </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>端口号与IP地址的组合得出一个网络套接字：Socket。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162542.png\" alt></p>\n<h2 id=\"16-3-2-InetAddress类\"><a href=\"#16-3-2-InetAddress类\" class=\"headerlink\" title=\"16.3.2 InetAddress类\"></a>16.3.2 InetAddress类</h2><ul>\n<li>Internet上的主机有两种方式表示地址：<ul>\n<li>域名(hostName)：<a href=\"http://www.atguigu.com\" target=\"_blank\" rel=\"noopener\">www.atguigu.com</a></li>\n<li>IP 地址(hostAddress)：202.108.35.210</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p>\n</li>\n<li><p>InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址：<a href=\"http://www.atguigu.com\" target=\"_blank\" rel=\"noopener\">www.atguigu.com</a> 和 202.108.35.210。</p>\n</li>\n<li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器（DNS）负责将域名转化成IP地址，这样才能和主机建立连接。 ——-域名解析</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162706.png\" alt></p>\n<ul>\n<li>InetAddress类没有提供公共的构造器，而是提供了如下两个静态方法来获取InetAddress实例</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162827.png\" alt></p>\n<ul>\n<li>InetAddress提供了如下几个常用的方法</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162859.png\" alt></p>\n<h2 id=\"16-3-2-InetAddress类代码实例\"><a href=\"#16-3-2-InetAddress类代码实例\" class=\"headerlink\" title=\"16.3.2 InetAddress类代码实例\"></a>16.3.2 InetAddress类代码实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InetAddress address = InetAddress.getByName(&quot;www.atguigu.com&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(address);</span><br><span class=\"line\">\t\t//获取InetAddress 对象所含的域名</span><br><span class=\"line\">\t\tSystem.out.println(address.getHostName());</span><br><span class=\"line\">\t\t//获取InetAddress 对象所含的IP地址</span><br><span class=\"line\">\t\tSystem.out.println(address.getHostAddress());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//获取本机的域名和IP地址</span><br><span class=\"line\">\t\tInetAddress address2 = InetAddress.getLocalHost();</span><br><span class=\"line\">\t\tSystem.out.println(address2);</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-4-TCP网络通信\"><a href=\"#16-4-TCP网络通信\" class=\"headerlink\" title=\"16.4 TCP网络通信\"></a>16.4 TCP网络通信</h1><h2 id=\"16-4-1-通讯要素2：网络通信协议\"><a href=\"#16-4-1-通讯要素2：网络通信协议\" class=\"headerlink\" title=\"16.4.1 通讯要素2：网络通信协议\"></a>16.4.1 通讯要素2：网络通信协议</h2><p>网络通信协议  </p>\n<ul>\n<li>计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。</li>\n</ul>\n<p>通信协议分层的思想</p>\n<ul>\n<li>由于结点之间联系很复杂，在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。</li>\n</ul>\n<h2 id=\"16-4-2-TCP-IP协议簇\"><a href=\"#16-4-2-TCP-IP协议簇\" class=\"headerlink\" title=\"16.4.2 TCP/IP协议簇\"></a>16.4.2 TCP/IP协议簇</h2><ul>\n<li>传输层协议中有两个非常重要的协议：<ul>\n<li>传输控制协议TCP(Transmission Control Protocol)</li>\n<li>用户数据报协议UDP(User Datagram Protocol)。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>TCP/IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li>\n<li>IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。</li>\n<li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。</li>\n</ul>\n<h2 id=\"16-4-3-TCP-和-UDP\"><a href=\"#16-4-3-TCP-和-UDP\" class=\"headerlink\" title=\"16.4.3 TCP 和 UDP\"></a>16.4.3 TCP 和 UDP</h2><p>TCP协议：</p>\n<ul>\n<li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>\n<li>传输前，采用“三次握手”方式，是可靠的</li>\n<li>TCP协议进行通信的两个应用进程：客户端、服务端</li>\n<li>在连接中可进行大数据量的传输</li>\n<li>传输完毕，需释放已建立的连接，效率低</li>\n</ul>\n<p>UDP协议：</p>\n<ul>\n<li>将数据、源、目的封装成数据包，不需要建立连接</li>\n<li>每个数据报的大小限制在64K内</li>\n<li>因无需连接，故是不可靠的</li>\n<li>发送数据结束时无需释放资源，速度快</li>\n</ul>\n<h2 id=\"16-4-4-Socket\"><a href=\"#16-4-4-Socket\" class=\"headerlink\" title=\"16.4.4 Socket\"></a>16.4.4 Socket</h2><ul>\n<li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。</li>\n<li>通信的两端都要有Socket，是两台机器间通信的端点</li>\n<li>网络通信其实就是Socket间的通信。</li>\n<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li>\n<li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</li>\n</ul>\n<h2 id=\"16-4-5-基于Socket的TCP编程\"><a href=\"#16-4-5-基于Socket的TCP编程\" class=\"headerlink\" title=\"16.4.5 基于Socket的TCP编程\"></a>16.4.5 基于Socket的TCP编程</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603163320.png\" alt></p>\n<h2 id=\"16-4-6-Socket类的常用方法\"><a href=\"#16-4-6-Socket类的常用方法\" class=\"headerlink\" title=\"16.4.6 Socket类的常用方法\"></a>16.4.6 Socket类的常用方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603163339.png\" alt></p>\n<h2 id=\"16-4-7-ServerSocket类的常用方法\"><a href=\"#16-4-7-ServerSocket类的常用方法\" class=\"headerlink\" title=\"16.4.7 ServerSocket类的常用方法\"></a>16.4.7 ServerSocket类的常用方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603163401.png\" alt></p>\n<h2 id=\"16-4-8-基于Socket的TCP编程\"><a href=\"#16-4-8-基于Socket的TCP编程\" class=\"headerlink\" title=\"16.4.8 基于Socket的TCP编程\"></a>16.4.8 基于Socket的TCP编程</h2><p>客户端Socket的工作过程包含以下四个基本的步骤：</p>\n<ul>\n<li>创建 Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li>\n<li>打开连接到 Socket 的输入/出流： 使用 getInputStream()方法获得输入流，使用 getOutputStream()方法获得输出流，进行数据传输</li>\n<li>按照一定的协议对 Socket  进行读/写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li>\n<li>关闭 Socket：断开客户端到服务器的连接，释放线路 </li>\n</ul>\n<h2 id=\"4-8-1-客户端创建Socket对象\"><a href=\"#4-8-1-客户端创建Socket对象\" class=\"headerlink\" title=\"4.8.1 客户端创建Socket对象\"></a>4.8.1 客户端创建Socket对象</h2><p>客户端程序可以使用Socket类创建对象，创建的同时会自动向服务器方发起连接。Socket的构造方法是：</p>\n<ul>\n<li>Socket(String host,int port)throws UnknownHostException,IOException：向服务器(域名是host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。</li>\n<li>Socket(InetAddress address,int port)throws IOException：根据InetAddress对象所表示的IP地址以及端口号port发起连接。</li>\n</ul>\n<p>客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Socket s = new Socket(“192.168.40.165”,9999);</span><br><span class=\"line\">OutputStream out = s.getOutputStream();</span><br><span class=\"line\">out.write(“hello”.getBytes());</span><br><span class=\"line\">s.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-8-2服务器程序的工作过程包含以下四个基本的步骤：\"><a href=\"#4-8-2服务器程序的工作过程包含以下四个基本的步骤：\" class=\"headerlink\" title=\"4.8.2服务器程序的工作过程包含以下四个基本的步骤：\"></a>4.8.2服务器程序的工作过程包含以下四个基本的步骤：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用 ServerSocket(int port) ：</span><br><span class=\"line\">    创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</span><br><span class=\"line\"></span><br><span class=\"line\">调用 accept()：</span><br><span class=\"line\">    监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</span><br><span class=\"line\"></span><br><span class=\"line\">调用 该Socket类对象的 getOutputStream() 和 getInputStream ()：</span><br><span class=\"line\">    获取输出流和输入流，开始网络数据的发送和接收。</span><br><span class=\"line\"></span><br><span class=\"line\">关闭ServerSocket和Socket对象：</span><br><span class=\"line\">    客户端访问结束，关闭通信套接字。</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-8-3服务器建立-ServerSocket-对象\"><a href=\"#4-8-3服务器建立-ServerSocket-对象\" class=\"headerlink\" title=\"4.8.3服务器建立 ServerSocket 对象\"></a>4.8.3服务器建立 ServerSocket 对象</h2><ul>\n<li>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，服务器必须事先建立一个等待客户请求建立套接字连接的ServerSocket对象。</li>\n<li>所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerSocket ss = new ServerSocket(9999);</span><br><span class=\"line\">Socket s = ss.accept ();</span><br><span class=\"line\">InputStream in = s.getInputStream();</span><br><span class=\"line\">byte[] buf = new byte[1024];</span><br><span class=\"line\">int num = in.read(buf);</span><br><span class=\"line\">String str = new String(buf,0,num);</span><br><span class=\"line\">System.out.println(s.getInetAddress().toString()+”:”+str);</span><br><span class=\"line\">s.close();</span><br><span class=\"line\">ss.close();</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-5-UDP网络通信\"><a href=\"#16-5-UDP网络通信\" class=\"headerlink\" title=\"16.5 UDP网络通信\"></a>16.5 UDP网络通信</h1><h2 id=\"16-5-1-UDP网络通信\"><a href=\"#16-5-1-UDP网络通信\" class=\"headerlink\" title=\"16.5.1 UDP网络通信\"></a>16.5.1 UDP网络通信</h2><ul>\n<li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li>\n<li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li>\n<li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</li>\n<li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</li>\n</ul>\n<h2 id=\"16-5-2-流程\"><a href=\"#16-5-2-流程\" class=\"headerlink\" title=\"16.5.2 流程\"></a>16.5.2 流程</h2><p>流  程：</p>\n<ol>\n<li>DatagramSocket与DatagramPacket  </li>\n<li>建立发送端，接收端  </li>\n<li>建立数据包  </li>\n<li>调用Socket的发送、接收方法  </li>\n<li>关闭Socket  </li>\n</ol>\n<ul>\n<li>发送端与接收端是两个独立的运行程序</li>\n</ul>\n<h2 id=\"16-5-3-发送端\"><a href=\"#16-5-3-发送端\" class=\"headerlink\" title=\"16.5.3 发送端\"></a>16.5.3 发送端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DatagramSocket ds = new DatagramSocket();</span><br><span class=\"line\">byte[] by = “hello,atguigu.com”.getBytes();</span><br><span class=\"line\">DatagramPacket dp = new DatagramPacket(by,0,by.length,</span><br><span class=\"line\">InetAddress.getByName(“127.0.0.1”),10000);</span><br><span class=\"line\">ds.send(dp);</span><br><span class=\"line\">ds.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-5-4-接收端\"><a href=\"#16-5-4-接收端\" class=\"headerlink\" title=\"16.5.4 接收端\"></a>16.5.4 接收端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在接收端，要指定监听的端口。</span><br><span class=\"line\">DatagramSocket ds = new DatagramSocket(10000);</span><br><span class=\"line\">byte[] by = new byte[1024];</span><br><span class=\"line\">DatagramPacket dp = new DatagramPacket(by,by.length);</span><br><span class=\"line\">ds.receive(dp);</span><br><span class=\"line\">String str = new String(dp.getData(),0,dp.getLength());</span><br><span class=\"line\">System.out.println(str+&quot;--&quot;+dp.getAddress());</span><br><span class=\"line\">ds.close();</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-6-URL编程\"><a href=\"#16-6-URL编程\" class=\"headerlink\" title=\"16.6 URL编程\"></a>16.6 URL编程</h1><h2 id=\"16-6-1-简介\"><a href=\"#16-6-1-简介\" class=\"headerlink\" title=\"16.6.1 简介\"></a>16.6.1 简介</h2><ul>\n<li>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址。通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。 </li>\n<li>URL的基本结构由5部分组成：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;</span><br><span class=\"line\">例如: http://192.168.1.100:8080/helloworld/index.jsp</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public URL (String spec)：</span><br><span class=\"line\">通过一个表示URL地址的字符串可以构造一个URL对象。</span><br><span class=\"line\">例如：URL url = new URL (&quot;http://www. atguigu.com/&quot;); </span><br><span class=\"line\"></span><br><span class=\"line\">public URL(URL context, String spec)：</span><br><span class=\"line\">通过基 URL 和相对 URL 构造一个 URL 对象。</span><br><span class=\"line\">例如：URL downloadUrl = new URL(url, “download.html&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">public URL(String protocol, String host, String file); </span><br><span class=\"line\">例如：new URL(&quot;http&quot;, &quot;www.atguigu.com&quot;, “download. html&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">public URL(String protocol, String host, int port, String file); </span><br><span class=\"line\">例如: URL gamelan = new URL(&quot;http&quot;, &quot;www.atguigu.com&quot;, 80, “download.html&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>类URL的构造方法都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</li>\n<li>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String getProtocol(  )        获取该URL的协议名</span><br><span class=\"line\">public String getHost(  )            获取该URL的主机名</span><br><span class=\"line\">public String getPort(  )            获取该URL的端口号</span><br><span class=\"line\">public String getPath(  )            获取该URL的文件路径</span><br><span class=\"line\">public String getFile(  )             获取该URL的文件名</span><br><span class=\"line\">public String getQuery(   )          获取该URL的查询名</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-6-2-代码\"><a href=\"#16-6-2-代码\" class=\"headerlink\" title=\"16.6.2 代码\"></a>16.6.2 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = new URL(&quot;http://localhost:8080/examples/myTest.txt&quot;);</span><br><span class=\"line\">System.out.println(&quot;getProtocol() :&quot;+url.getProtocol());</span><br><span class=\"line\">System.out.println(&quot;getHost() :&quot;+url.getHost());</span><br><span class=\"line\">System.out.println(&quot;getPort() :&quot;+url.getPort());</span><br><span class=\"line\">System.out.println(&quot;getPath() :&quot;+url.getPath());</span><br><span class=\"line\">System.out.println(&quot;getFile() :&quot;+url.getFile());</span><br><span class=\"line\">System.out.println(&quot;getQuery() :&quot;+url.getQuery());</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-6-3-针对HTTP协议的URLConnection类\"><a href=\"#16-6-3-针对HTTP协议的URLConnection类\" class=\"headerlink\" title=\"16.6.3 针对HTTP协议的URLConnection类\"></a>16.6.3 针对HTTP协议的URLConnection类</h2><ul>\n<li>URL的方法 openStream()：能从网络上读取数据</li>\n<li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。</li>\n<li>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection 对象。如果连接过程失败，将产生IOException. </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL netchinaren = new URL (&quot;http://www.atguigu.com/index.shtml&quot;); </span><br><span class=\"line\">URLConnectonn u = netchinaren.openConnection( );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object getContent( ) throws IOException</span><br><span class=\"line\">public int getContentLength( )</span><br><span class=\"line\">public String getContentType( )</span><br><span class=\"line\">public long getDate( )</span><br><span class=\"line\">public long getLastModified( )</span><br><span class=\"line\">public InputStream getInputStream( )throws IOException</span><br><span class=\"line\">public OutputSteram getOutputStream( )throws IOException</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-6-4-小结\"><a href=\"#16-6-4-小结\" class=\"headerlink\" title=\"16.6.4 小结\"></a>16.6.4 小结</h2><ul>\n<li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li>\n<li>客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。</li>\n<li>Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP 地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li>\n<li>类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li>\n<li>类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示 Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * T代表JavaBean类型</span><br><span class=\"line\"> * P代表主键类型</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface DAO&lt;T,P&gt;&#123;</span><br><span class=\"line\">\tboolean add(T t);</span><br><span class=\"line\">\tboolean deleteById(P id);</span><br><span class=\"line\">\tboolean update(T t);</span><br><span class=\"line\">\tT findById(P id);</span><br><span class=\"line\">\tList&lt;T&gt; getAll();</span><br><span class=\"line\">\tint getCount();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserDAOImpl implements DAO&lt;User,String&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean add(User t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean deleteById(String id) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean update(User t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic User findById(String id) &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;User&gt; getAll() &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int getCount() &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GoodsDAOImpl implements DAO&lt;Goods,Integer&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean add(Goods t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean deleteById(Integer id) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean update(Goods t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Goods findById(Integer id) &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;Goods&gt; getAll() &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int getCount() &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class User&#123;</span><br><span class=\"line\">\tprivate String username;</span><br><span class=\"line\">\tprivate String password;</span><br><span class=\"line\">\tpublic String getUsername() &#123;</span><br><span class=\"line\">\t\treturn username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setUsername(String username) &#123;</span><br><span class=\"line\">\t\tthis.username = username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getPassword() &#123;</span><br><span class=\"line\">\t\treturn password;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setPassword(String password) &#123;</span><br><span class=\"line\">\t\tthis.password = password;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Goods&#123;</span><br><span class=\"line\">\tprivate int gid;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic int getGid() &#123;</span><br><span class=\"line\">\t\treturn gid;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setGid(int gid) &#123;</span><br><span class=\"line\">\t\tthis.gid = gid;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、编写程序，在main方法中接收5个参数整数字符串；  </p>\n<ul>\n<li>创建TreeSet类型的集合（使用泛型），将5个字符串以整数形式添加到集合中；<br>增强型for循环遍历该集合，打印所有元素，并将所有元素之和打印出来。</li>\n</ul>\n<p>6、编写代码，存储丈夫与妻子，Map&lt;丈夫,妻子&gt;，并遍历输出</p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"15. JavaSE-多线程","url":"http://yoursite.com/2017/02/19/15. JavaSE-多线程/","content":"<h1 id=\"15-1-程序、进程、线程的概念\"><a href=\"#15-1-程序、进程、线程的概念\" class=\"headerlink\" title=\"15.1 程序、进程、线程的概念\"></a>15.1 程序、进程、线程的概念</h1><ul>\n<li>程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</li>\n<li><p>进程(process)是程序的一次执行过程，或是正在运行的一个程序。动态过程：有它自身的产生、存在和消亡的过程。</p>\n<ul>\n<li>如：运行中的QQ，运行中的MP3播放器</li>\n<li>程序是静态的，进程是动态的</li>\n</ul>\n</li>\n<li><p>线程(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p>\n<ul>\n<li>若一个程序可同一时间执行多个线程，就是支持多线程的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-1-1-进程与多线程\"><a href=\"#15-1-1-进程与多线程\" class=\"headerlink\" title=\"15.1.1 进程与多线程\"></a>15.1.1 进程与多线程</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154431.png\" alt></p>\n<h2 id=\"15-1-2-何时需要多线程\"><a href=\"#15-1-2-何时需要多线程\" class=\"headerlink\" title=\"15.1.2 何时需要多线程\"></a>15.1.2 何时需要多线程</h2><ul>\n<li>程序需要同时执行两个或多个任务。</li>\n<li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</li>\n<li>需要一些后台运行的程序时。</li>\n</ul>\n<h1 id=\"15-2-Java中多线程的创建和使用\"><a href=\"#15-2-Java中多线程的创建和使用\" class=\"headerlink\" title=\"15.2 Java中多线程的创建和使用\"></a>15.2 Java中多线程的创建和使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Sample &#123;</span><br><span class=\"line\">\tpublic void method1(String str)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void method2(String str)&#123;</span><br><span class=\"line\">\t\tmethod1(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSample  s = new Sample();</span><br><span class=\"line\">\t\ts.method2(&quot;hello!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-2-1-多线程的创建和启动\"><a href=\"#15-2-1-多线程的创建和启动\" class=\"headerlink\" title=\"15.2.1 多线程的创建和启动\"></a>15.2.1 多线程的创建和启动</h2><ul>\n<li>Java语言的JVM允许程序运行多个线程，它通过java.lang.Thread类来实现。</li>\n<li>Thread类的特性<ul>\n<li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体</li>\n<li>通过该Thread对象的start()方法来调用这个线程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-2-2-子线程的创建和启动过程\"><a href=\"#15-2-2-子线程的创建和启动过程\" class=\"headerlink\" title=\"15.2.2 子线程的创建和启动过程\"></a>15.2.2 子线程的创建和启动过程</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154639.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154701.png\" alt></p>\n<h2 id=\"15-2-3-Thread类\"><a href=\"#15-2-3-Thread类\" class=\"headerlink\" title=\"15.2.3 Thread类\"></a>15.2.3 Thread类</h2><ul>\n<li>构造方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread()：创建新的Thread对象</span><br><span class=\"line\">Thread(String threadname)：创建线程并指定线程实例名</span><br><span class=\"line\">Thread(Runnable target)：指定创建线程的目标对象，它实现了Runnable接口中的run方法</span><br><span class=\"line\">Thread(Runnable target, String name)：创建新的Thread对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建线程的两种方式\"><a href=\"#创建线程的两种方式\" class=\"headerlink\" title=\"创建线程的两种方式\"></a>创建线程的两种方式</h3><h4 id=\"一-继承Thread类\"><a href=\"#一-继承Thread类\" class=\"headerlink\" title=\"一 继承Thread类\"></a>一 继承Thread类</h4><p> 1)  定义子类继承Thread类。<br> 2)  子类中重写Thread类中的run方法。<br> 3)  创建Thread子类对象，即创建了线程对象。<br> 4)  调用线程对象start方法：启动线程，调用run方法  </p>\n<h4 id=\"二-实现Runnable接口\"><a href=\"#二-实现Runnable接口\" class=\"headerlink\" title=\"二 实现Runnable接口\"></a>二 实现Runnable接口</h4><p>1）定义子类，实现Runnable接口。<br>2）子类中重写Runnable接口中的run方法。<br>3）通过Thread类含参构造器创建线程对象。<br>4）将Runnable接口的子类对象作为实际参数传递给Thread类的构造方法中。<br>5）调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。  </p>\n<h2 id=\"15-2-4-继承方式和实现方式的联系与区别\"><a href=\"#15-2-4-继承方式和实现方式的联系与区别\" class=\"headerlink\" title=\"15.2.4 继承方式和实现方式的联系与区别\"></a>15.2.4 继承方式和实现方式的联系与区别</h2><p>【区别】  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）继承Thread:       线程代码存放Thread子类run方法中。</span><br><span class=\"line\">2）实现Runnable：线程代码存在接口的子类的run方法</span><br></pre></td></tr></table></figure>\n<p>。<br>【实现方法的好处】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）避免了单继承的局限性</span><br><span class=\"line\">2）多个线程可以共享同一个接口子类的对象，非常适合多个相同线程来处理同一份资源。</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-2-6-Thread类的有关方法-1\"><a href=\"#15-2-6-Thread类的有关方法-1\" class=\"headerlink\" title=\"15.2.6 Thread类的有关方法(1)\"></a>15.2.6 Thread类的有关方法(1)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   void start():  启动线程，并执行对象的run()方法</span><br><span class=\"line\">run():  线程在被调度时执行的操作</span><br><span class=\"line\">String getName():  返回线程的名称</span><br><span class=\"line\">void setName(String name):设置该线程名称</span><br><span class=\"line\">static currentThread(): 返回当前线程</span><br></pre></td></tr></table></figure>\n<p>线程的调度</p>\n<ul>\n<li>调度策略<br>时间片</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155028.png\" alt><br>抢占式：高优先级的线程抢占CPU </p>\n<ul>\n<li>Java的调度方法</li>\n</ul>\n<blockquote>\n<ul>\n<li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</li>\n<li>对高优先级，使用优先调度的抢占式策略</li>\n</ul>\n</blockquote>\n<p>线程的优先级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   MAX_PRIORITY（10）;    </span><br><span class=\"line\">MIN _PRIORITY （1）;  </span><br><span class=\"line\">NORM_PRIORITY （5）;</span><br><span class=\"line\">涉及的方法：</span><br><span class=\"line\">getPriority() ：返回线程优先值 </span><br><span class=\"line\">setPriority(int newPriority) ：改变线程的优先级</span><br><span class=\"line\">线程创建时继承父线程的优先级</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-2-7-Thread类的有关方法-2\"><a href=\"#15-2-7-Thread类的有关方法-2\" class=\"headerlink\" title=\"15.2.7 Thread类的有关方法(2)\"></a>15.2.7 Thread类的有关方法(2)</h2><p>static  void  yield()：线程让步</p>\n<blockquote>\n<ul>\n<li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</li>\n<li>若队列中没有同优先级的线程，忽略此方法</li>\n</ul>\n</blockquote>\n<p>join() ：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止   </p>\n<blockquote>\n<ul>\n<li>低优先级的线程也可以获得执行 </li>\n</ul>\n</blockquote>\n<p>static  void  sleep(long millis)：(指定时间:毫秒)</p>\n<blockquote>\n<ul>\n<li>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</li>\n<li>抛出InterruptedException异常</li>\n</ul>\n</blockquote>\n<p>stop(): 强制线程生命期结束<br>boolean isAlive()：返回boolean，判断线程是否还活着</p>\n<h2 id=\"15-2-8-使用多线程的优点\"><a href=\"#15-2-8-使用多线程的优点\" class=\"headerlink\" title=\"15.2.8 使用多线程的优点\"></a>15.2.8 使用多线程的优点</h2><p>背景：只使用单个线程完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？<br>多线程程序的优点：</p>\n<ol>\n<li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。  </li>\n<li>提高计算机系统CPU的利用率  </li>\n<li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改  </li>\n</ol>\n<h1 id=\"15-3-线程的生命周期\"><a href=\"#15-3-线程的生命周期\" class=\"headerlink\" title=\"15.3 线程的生命周期\"></a>15.3 线程的生命周期</h1><p>JDK中用Thread.State枚举表示了线程的几种状态</p>\n<ul>\n<li>要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态：<ul>\n<li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>\n<li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件</li>\n<li>运行：当就绪的线程被调度并获得处理器资源时,便进入运行状态， run()方法定义了线程的操作和功能</li>\n<li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</li>\n<li>死亡：线程完成了它的全部工作或线程被提前强制性地中止   </li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155642.png\" alt></p>\n<h1 id=\"15-4-线程的同步\"><a href=\"#15-4-线程的同步\" class=\"headerlink\" title=\"15.4 线程的同步\"></a>15.4 线程的同步</h1><p>问题的提出</p>\n<ul>\n<li>多个线程执行的不确定性引起执行结果的不稳定</li>\n<li>多个线程对账本的共享，会造成操作的不完整性，会破坏数据。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155722.png\" alt></p>\n<h2 id=\"15-4-1例-题\"><a href=\"#15-4-1例-题\" class=\"headerlink\" title=\"15.4.1例  题\"></a>15.4.1例  题</h2><p>模拟火车站售票程序，开启三个窗口售票。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Ticket implements Runnable &#123;</span><br><span class=\"line\">\tprivate int tick = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run()&#123;</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tif (tick &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;售出车票，tick号为：&quot; + tick--);</span><br><span class=\"line\">\t\t\t&#125; else</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TicketDemo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = new Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = new Thread(t);</span><br><span class=\"line\">\t\tThread t2 = new Thread(t);</span><br><span class=\"line\">\t\tThread t3 = new Thread(t);</span><br><span class=\"line\">\t\tt1.setName(&quot;t1窗口&quot;);</span><br><span class=\"line\">\t\tt2.setName(&quot;t2窗口&quot;);</span><br><span class=\"line\">\t\tt3.setName(&quot;t3窗口&quot;);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155810.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155831.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int tick = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tif (tick &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(10);</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;售出车票，tick号为：&quot; + tick--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>1）    多线程出现了安全问题<br>2）    问题的原因：<br>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。<br>3）    解决办法<br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。</p>\n<h2 id=\"15-4-2-Synchronized的使用方法\"><a href=\"#15-4-2-Synchronized的使用方法\" class=\"headerlink\" title=\"15.4.2 Synchronized的使用方法\"></a>15.4.2 Synchronized的使用方法</h2><ul>\n<li>Java对于多线程的安全问题提供了专业的解决方式： 同步代码块</li>\n</ul>\n<p>1）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (对象)&#123;</span><br><span class=\"line\">          // 需要被同步的代码；</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>2）    synchronized还可以放在方法声明中，表示整个方法<br>      为同步方法。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public synchronized void show (String name)&#123; </span><br><span class=\"line\">            ….</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603160032.png\" alt></p>\n<h2 id=\"15-4-3-同步锁-Lock\"><a href=\"#15-4-3-同步锁-Lock\" class=\"headerlink\" title=\"15.4.3 同步锁(Lock)\"></a>15.4.3 同步锁(Lock)</h2><ul>\n<li>从Java 5开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</li>\n<li>Lock是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</li>\n<li>在实现线程安全的控制中，比较常用的是ReentrantLock(可重入锁)，可以显式加锁、释放锁。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">\tprivate final ReentrantLock lock = new ReenTrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void m() &#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// 保证线程安全的代码;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-4-4-互斥锁\"><a href=\"#15-4-4-互斥锁\" class=\"headerlink\" title=\"15.4.4 互斥锁\"></a>15.4.4 互斥锁</h2><ul>\n<li>在Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。<ul>\n<li>每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</li>\n<li>关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由一个线程访问。</li>\n<li>同步的局限性：导致程序的执行效率要降低</li>\n<li>同步方法（非静态的）的锁为this。</li>\n<li>同步方法（静态的）的锁为当前类本身。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton &#123;</span><br><span class=\"line\">\tprivate static Singleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate Singleton() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static Singleton getInstance() &#123;</span><br><span class=\"line\">\t\tif (instance == null) &#123;</span><br><span class=\"line\">\t\t\tsynchronized (Singleton.class) &#123;</span><br><span class=\"line\">\t\t\t\tif (instance == null) &#123;</span><br><span class=\"line\">\t\t\t\t\tinstance = new Singleton();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestSingleton &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSingleton s1 = Singleton.getInstance();</span><br><span class=\"line\">\t\tSingleton s2 = Singleton.getInstance();</span><br><span class=\"line\">\t\tSystem.out.println(s1 == s2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-4-6-小结：释放锁的操作\"><a href=\"#15-4-6-小结：释放锁的操作\" class=\"headerlink\" title=\"15.4.6 小结：释放锁的操作\"></a>15.4.6 小结：释放锁的操作</h2><ul>\n<li>当前线程的同步方法、同步代码块执行结束</li>\n<li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行。</li>\n<li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</li>\n<li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁。</li>\n</ul>\n<h2 id=\"15-4-7-线程的死锁问题\"><a href=\"#15-4-7-线程的死锁问题\" class=\"headerlink\" title=\"15.4.7 线程的死锁问题\"></a>15.4.7 线程的死锁问题</h2><ul>\n<li><p>死锁</p>\n<ul>\n<li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li>\n</ul>\n</li>\n<li><p>解决方法</p>\n<ul>\n<li>专门的算法、原则</li>\n<li>尽量减少同步资源的定义</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestDeadLock &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tfinal StringBuffer s1 = new StringBuffer();</span><br><span class=\"line\">\t\tfinal StringBuffer s2 = new StringBuffer();</span><br><span class=\"line\">\t\tnew Thread() &#123;</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tsynchronized (s1) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.append(&quot;A&quot;);</span><br><span class=\"line\">\t\t\t\t\tsynchronized (s2) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ts2.append(&quot;B&quot;);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s1);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s2);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.start();</span><br><span class=\"line\">\t\tnew Thread() &#123;</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tsynchronized (s2) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.append(&quot;C&quot;);</span><br><span class=\"line\">\t\t\t\t\tsynchronized (s1) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ts1.append(&quot;D&quot;);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s2);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s1);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-5-线程的通信\"><a href=\"#15-5-线程的通信\" class=\"headerlink\" title=\"15.5 线程的通信\"></a>15.5 线程的通信</h1><ul>\n<li><p>wait() 与 notify() 和 notifyAll()</p>\n<ul>\n<li>wait()：令当前线程挂起并放弃CPU、同步资源，使别的线程可访问并修改共享资源，而当前线程排队等候再次对资源的访问</li>\n<li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</li>\n<li>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待.</li>\n</ul>\n</li>\n<li><p>Java.lang.Object提供的这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报java.lang.IllegalMonitorStateException异常</p>\n</li>\n</ul>\n<h2 id=\"15-5-1-wait-方法\"><a href=\"#15-5-1-wait-方法\" class=\"headerlink\" title=\"15.5.1 wait() 方法\"></a>15.5.1 wait() 方法</h2><ul>\n<li>在当前线程中调用方法：  对象名.wait()</li>\n<li>使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify (或notifyAll) 为止。</li>\n<li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li>\n<li>调用此方法后，当前线程将释放对象监控权  ，然后进入等待</li>\n<li>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</li>\n</ul>\n<h2 id=\"15-5-2-notify-notifyAll\"><a href=\"#15-5-2-notify-notifyAll\" class=\"headerlink\" title=\"15.5.2 notify()/notifyAll()\"></a>15.5.2 notify()/notifyAll()</h2><ul>\n<li>在当前线程中调用方法：  对象名.notify()</li>\n<li>功能：唤醒等待该对象监控权的一个线程。</li>\n<li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li>\n</ul>\n<h2 id=\"15-5-3-例-题\"><a href=\"#15-5-3-例-题\" class=\"headerlink\" title=\"15.5.3 例 题\"></a>15.5.3 例 题</h2><p>使用两个线程打印 1-100. 线程1, 线程2 交替打印</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Communication implements Runnable &#123;</span><br><span class=\"line\">\tint i = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tsynchronized (this) &#123;</span><br><span class=\"line\">\t\t\t\tnotify();</span><br><span class=\"line\">\t\t\t\tif (i &lt;= 100) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;:&quot; + i++);</span><br><span class=\"line\">\t\t\t\t&#125; else</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\twait();</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经典例题：生产者/消费者问题</p>\n<ul>\n<li><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p>\n</li>\n<li><p>这里可能出现两个问题：</p>\n<ul>\n<li>生产者比消费者快时，消费者会漏掉一些数据没有取到。</li>\n<li>消费者比生产者快时，消费者会取相同的数据。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestProduct &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tClerk clerk = new Clerk();</span><br><span class=\"line\">\t\tThread productorThread = new Thread(new Productor(clerk));</span><br><span class=\"line\">\t\tThread consumerThread = new Thread(new Consumer(clerk));</span><br><span class=\"line\">\t\tproductorThread.start();</span><br><span class=\"line\">\t\tconsumerThread.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Clerk &#123; // 售货员</span><br><span class=\"line\">\tprivate int product = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic synchronized void addProduct() &#123;</span><br><span class=\"line\">\t\tif (product &gt;= 20) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tproduct++;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;生产者生产了第&quot; + product + &quot;个产品&quot;);</span><br><span class=\"line\">\t\t\tnotifyAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic synchronized void getProduct() &#123;</span><br><span class=\"line\">\t\tif (this.product &lt;= 0) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;消费者取走了第&quot; + product + &quot;个产品&quot;);</span><br><span class=\"line\">\t\t\tproduct--;</span><br><span class=\"line\">\t\t\tnotifyAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Productor implements Runnable &#123; // 生产者</span><br><span class=\"line\">\tClerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Productor(Clerk clerk) &#123;</span><br><span class=\"line\">\t\tthis.clerk = clerk;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;生产者开始生产产品&quot;);</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep((int) Math.random() * 1000);</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclerk.addProduct();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Consumer implements Runnable &#123; // 消费者</span><br><span class=\"line\">\tClerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Consumer(Clerk clerk) &#123;</span><br><span class=\"line\">\t\tthis.clerk = clerk;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;消费者开始取走产品&quot;);</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep((int) Math.random() * 1000);</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclerk.getProduct();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>15.5.4 练习1<br>模拟银行取钱的问题<br>1.定义一个Account类<br>1）该Account类封装了账户编号（String）和余额（double）两个属性<br>2）设置相应属性的getter和setter方法<br>3）提供无参和有两个参数的构造器<br>4）系统根据账号判断与用户是否匹配，需提供hashCode()和equals()方法的重写<br>2.提供一个取钱的线程类<br>1）提供了Account类的account属性和double类的取款额的属性<br>2）提供带线程名的构造方法<br>3）run()方法中提供取钱的操作<br>3.在主类中创建线程进行测试。考虑线程安全问题。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Account &#123;</span><br><span class=\"line\">\tprivate String accountId;</span><br><span class=\"line\">\tprivate double balance;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Account() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Account(String accountId, double balance) &#123;</span><br><span class=\"line\">\t\tthis.accountId = accountId;</span><br><span class=\"line\">\t\tthis.balance = balance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getAccountId() &#123;</span><br><span class=\"line\">\t\treturn accountId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setAccountId(String accountId) &#123;</span><br><span class=\"line\">\t\tthis.accountId = accountId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic double getBalance() &#123;</span><br><span class=\"line\">\t\treturn balance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setBalance(double balance) &#123;</span><br><span class=\"line\">\t\tthis.balance = balance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;Account [accountId=&quot; + accountId + &quot;, balance=&quot; + balance + &quot;]&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int hashCode() &#123;</span><br><span class=\"line\">\t\tfinal int prime = 31;</span><br><span class=\"line\">\t\tint result = 1;</span><br><span class=\"line\">\t\tresult = prime * result + ((accountId == null) ? 0 : accountId.hashCode());</span><br><span class=\"line\">\t\tlong temp;</span><br><span class=\"line\">\t\ttemp = Double.doubleToLongBits(balance);</span><br><span class=\"line\">\t\tresult = prime * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\tif (this == obj)</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\tif (obj == null)</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\tif (getClass() != obj.getClass())</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\tAccount other = (Account) obj;</span><br><span class=\"line\">\t\tif (accountId == null) &#123;</span><br><span class=\"line\">\t\t\tif (other.accountId != null)</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125; else if (!accountId.equals(other.accountId))</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\tif (Double.doubleToLongBits(balance) != Double.doubleToLongBits(other.balance))</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class WithDrawThread extends Thread &#123;</span><br><span class=\"line\">\t\tAccount account;</span><br><span class=\"line\">\t\t// 要取款的额度</span><br><span class=\"line\">\t\tdouble withDraw;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic WithDrawThread(String name, Account account, double amt) &#123;</span><br><span class=\"line\">\t\t\tsuper(name);</span><br><span class=\"line\">\t\t\tthis.account = account;</span><br><span class=\"line\">\t\t\tthis.withDraw = amt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tsynchronized (account) &#123;</span><br><span class=\"line\">\t\t\t\tif (account.getBalance() &gt; withDraw) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;:取款成功，取现的金额为：&quot; + withDraw);</span><br><span class=\"line\">\t\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\t\tThread.sleep(50);</span><br><span class=\"line\">\t\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\taccount.setBalance(account.getBalance() - withDraw);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;取现额度超过账户余额，取款失败&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;现在账户的余额为：&quot; + account.getBalance());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class WithDrawThread extends Thread &#123;</span><br><span class=\"line\">\t\tAccount account;</span><br><span class=\"line\">\t\t// 要取款的额度</span><br><span class=\"line\">\t\tdouble withDraw;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic WithDrawThread(String name, Account account, double amt) &#123;</span><br><span class=\"line\">\t\t\tsuper(name);</span><br><span class=\"line\">\t\t\tthis.account = account;</span><br><span class=\"line\">\t\t\tthis.withDraw = amt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tsynchronized (account) &#123;</span><br><span class=\"line\">\t\t\t\tif (account.getBalance() &gt; withDraw) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;:取款成功，取现的金额为：&quot; + withDraw);</span><br><span class=\"line\">\t\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\t\tThread.sleep(50);</span><br><span class=\"line\">\t\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\taccount.setBalance(account.getBalance() - withDraw);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;取现额度超过账户余额，取款失败&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;现在账户的余额为：&quot; + account.getBalance());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;public class TestWithDrawThread &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tAccount account = new Account(&quot;1234567&quot;, 10000);</span><br><span class=\"line\">\t\tThread t1 = new WithDrawThread(&quot;小明&quot;, account, 8000);</span><br><span class=\"line\">\t\tThread t2 = new WithDrawThread(&quot;小明&apos;s wife&quot;, account, 2800);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-6-线程池\"><a href=\"#15-6-线程池\" class=\"headerlink\" title=\"15.6 线程池\"></a>15.6 线程池</h1><ul>\n<li>系统启动一个新线程的成本是比较高的，因为它涉及与os交互。这种情况下，系统启动时即创建大量空闲的线程，就可以很好地提高性能，尤其是当程序需要创建大量生存期很短暂的线程时。</li>\n<li>除此之外，使用线程池可以有效地控制系统中并发线程的数量。避免因并发创建的线程过多，导致系统性能下降，JVM崩溃。</li>\n<li>Java 5以前，需要手动创建自己的线程池；Java 5开始，新增了Executors工厂类产生线程池。<br>使用线程池执行线程任务的步骤如下：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.调用Executors 类的静态方法newFixedThreadPool(int nThreads)，</span><br><span class=\"line\">    创建一个可重用的、具有固定线程数的线程池ExecutorService对象  </span><br><span class=\"line\">2.创建Runnable实例，作为线程执行任务  </span><br><span class=\"line\">3.调用ExecutorService对象的submit()提交Runnable实例  </span><br><span class=\"line\">4.调用ExecutorService对象的shutDown()方法关闭线程池。</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"14. JavaSE-Java反射机制","url":"http://yoursite.com/2017/02/16/14. JavaSE-Java反射机制/","content":"<h1 id=\"14-1-Java反射机制概述\"><a href=\"#14-1-Java反射机制概述\" class=\"headerlink\" title=\"14.1 Java反射机制概述\"></a>14.1 Java反射机制概述</h1><ul>\n<li>Java Reflection<br>   Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</li>\n</ul>\n<ul>\n<li><p>Java反射机制提供的功能</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法</li>\n<li>在运行时调用任意一个对象的成员变量和方法</li>\n<li>生成动态代理</li>\n</ul>\n</li>\n<li><p>反射相关的主要API：</p>\n<ul>\n<li>java.lang.Class:代表一个类</li>\n<li>java.lang.reflect.Method:代表类的方法</li>\n<li>java.lang.reflect.Field:代表类的成员变量</li>\n<li>java.lang.reflect.Constructor:代表类的构造方法</li>\n<li>。。。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"14-2-理解Class类并获取Class的实例\"><a href=\"#14-2-理解Class类并获取Class的实例\" class=\"headerlink\" title=\"14.2 理解Class类并获取Class的实例\"></a>14.2 理解Class类并获取Class的实例</h1><h3 id=\"14-2-1-Class-类\"><a href=\"#14-2-1-Class-类\" class=\"headerlink\" title=\"14.2.1 Class 类\"></a>14.2.1 Class 类</h3><p>在Object类中定义了以下的方法，此方法将被所有子类继承：<br>●  public final Class getClass()<br>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604003545.png\" alt></p>\n<ul>\n<li>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个类的有关信息。</li>\n<li>Class本身也是一个类</li>\n<li>Class 对象只能由系统建立对象</li>\n<li>一个类在 JVM 中只会有一个Class实例 </li>\n<li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li>\n<li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li>\n<li>通过Class可以完整地得到一个类中的完整结构 </li>\n</ul>\n<h2 id=\"14-2-2-Class类的常用方法\"><a href=\"#14-2-2-Class类的常用方法\" class=\"headerlink\" title=\"14.2.2 Class类的常用方法\"></a>14.2.2 Class类的常用方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151527.png\" alt></p>\n<h2 id=\"14-2-3\"><a href=\"#14-2-3\" class=\"headerlink\" title=\"14.2.3\"></a>14.2.3</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">•\tString str = &quot;test4.Person&quot;;</span><br><span class=\"line\">•\tClass clazz = Class.forName(str);</span><br><span class=\"line\">•\tObject obj = clazz.newInstance();</span><br><span class=\"line\">•\tField field = clazz.getField(&quot;name&quot;);</span><br><span class=\"line\">•\tfield.set(obj, &quot;Peter&quot;);</span><br><span class=\"line\">•\tObject obj2 = field.get(obj);</span><br><span class=\"line\">•\tSystem.out.println(obj2);</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-2-4-实例化Class类对象-四种方法\"><a href=\"#14-2-4-实例化Class类对象-四种方法\" class=\"headerlink\" title=\"14.2.4 实例化Class类对象(四种方法)\"></a>14.2.4 实例化Class类对象(四种方法)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）前提：若已知具体的类，通过类的class属性获取，该方法 </span><br><span class=\"line\">                    最为安全可靠，程序性能最高</span><br><span class=\"line\">       实例：Class clazz = String.class;</span><br><span class=\"line\">2）前提：已知某个类的实例，调用该实例的getClass()方法获</span><br><span class=\"line\">                    取Class对象</span><br><span class=\"line\">       实例：Class clazz = “www.atguigu.com”.getClass();</span><br><span class=\"line\">3）前提：已知一个类的全类名，且该类在类路径下，可通过</span><br><span class=\"line\">       Class类的静态方法forName()获取，可能抛出ClassNotFoundException</span><br><span class=\"line\">       实例：Class clazz = Class.forName(“java.lang.String”);</span><br><span class=\"line\">4）其他方式(不做要求)</span><br><span class=\"line\">ClassLoader cl = this.getClass().getClassLoader();</span><br><span class=\"line\">Class clazz4 = cl.loadClass(“类的全类名”);</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-3-类的加载与ClassLoader的理解\"><a href=\"#14-3-类的加载与ClassLoader的理解\" class=\"headerlink\" title=\"14.3 类的加载与ClassLoader的理解\"></a>14.3 类的加载与ClassLoader的理解</h1><h2 id=\"14-3-1-了解：类的加载过程\"><a href=\"#14-3-1-了解：类的加载过程\" class=\"headerlink\" title=\"14.3.1 了解：类的加载过程\"></a>14.3.1 了解：类的加载过程</h2><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151722.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151758.png\" alt></p>\n<h2 id=\"14-3-2-了解：ClassLoader\"><a href=\"#14-3-2-了解：ClassLoader\" class=\"headerlink\" title=\"14.3.2 了解：ClassLoader\"></a>14.3.2 了解：ClassLoader</h2><p>类加载器是用来把类(class)装载进内存的。JVM 规范定义了两种类型的类加载器：启动类加载器(bootstrap)和用户自定义加载器(user-defined class loader)。 JVM在运行时会产生3个类加载器组成的初始化加载器层次结构 ，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151830.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">•\t//1.获取一个系统类加载器</span><br><span class=\"line\">•\tClassLoader classloader = ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//2.获取系统类加载器的父类加载器，即扩展类加载器</span><br><span class=\"line\">•\tclassloader = classloader.getParent();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//3.获取扩展类加载器的父类加载器，即引导类加载器</span><br><span class=\"line\">•\tclassloader = classloader.getParent();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//4.测试当前类由哪个类加载器进行加载</span><br><span class=\"line\">•\tclassloader = </span><br><span class=\"line\">•\tClass.forName(&quot;exer2.ClassloaderDemo&quot;).getClassLoader();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//5.测试JDK提供的Object类由哪个类加载器加载</span><br><span class=\"line\">•\tclassloader = </span><br><span class=\"line\">•\tClass.forName(&quot;java.lang.Object&quot;).getClassLoader();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//*6.关于类加载器的一个主要方法：</span><br><span class=\"line\">    getResourceAsStream(String str):获取类路径下的指定文件的输入流</span><br><span class=\"line\">•\tInputStream in = null;</span><br><span class=\"line\">•\tin = this.getClass().getClassLoader().getResourceAsStream(&quot;exer2\\\\test.properties&quot;);</span><br><span class=\"line\">•\tSystem.out.println(in);</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-4-创建运行时类的对象\"><a href=\"#14-4-创建运行时类的对象\" class=\"headerlink\" title=\"14.4 创建运行时类的对象\"></a>14.4 创建运行时类的对象</h1><p>[问题] 有了Class对象，能做什么？</p>\n<p>创建类的对象：调用Class对象的newInstance()方法<br>要  求：  </p>\n<p>1）类必须有一个无参数的构造器。<br>2）类的构造器的访问权限需要足够。  </p>\n<p>难道没有无参的构造器就不能创建对象了吗？<br>不是！只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。步骤如下：<br>1）通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器<br>2）向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。<br>3）在Constructor类中存在一个方法:<br>     Public T newInstance(Object … initargs);<br>以上是反射机制用的最多的地方</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.根据全类名获取对应的Class对象</span><br><span class=\"line\">String name = “atguigu.java.Person&quot;;</span><br><span class=\"line\">Class clazz = null;</span><br><span class=\"line\">clazz = Class.forName(name);</span><br><span class=\"line\">//2.调用指定参数结构的构造器，生成Constructor的实例</span><br><span class=\"line\">Constructor con = clazz.getConstructor(String.class,Integer.class);</span><br><span class=\"line\">//3.通过Constructor的实例创建对应类的对象，并初始化类属性</span><br><span class=\"line\">Person p2 = (Person) \tcon.newInstance(&quot;Peter&quot;,20);</span><br><span class=\"line\">System.out.println(p2);</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-5-获取运行时类的完整结构\"><a href=\"#14-5-获取运行时类的完整结构\" class=\"headerlink\" title=\"14.5 获取运行时类的完整结构\"></a>14.5 获取运行时类的完整结构</h1><h2 id=\"14-5-1-通过反射获取运行时类的完整结构\"><a href=\"#14-5-1-通过反射获取运行时类的完整结构\" class=\"headerlink\" title=\"14.5.1 通过反射获取运行时类的完整结构\"></a>14.5.1 通过反射获取运行时类的完整结构</h2><p>Field、Method、Constructor、Superclass、Interface、Annotation</p>\n<ul>\n<li>实现的全部接口</li>\n<li>所继承的父类</li>\n<li>全部的构造器</li>\n<li>全部的方法</li>\n<li>全部的Field</li>\n</ul>\n<h2 id=\"14-5-2-通过反射获取运行时类的完整结构\"><a href=\"#14-5-2-通过反射获取运行时类的完整结构\" class=\"headerlink\" title=\"14.5.2 通过反射获取运行时类的完整结构\"></a>14.5.2 通过反射获取运行时类的完整结构</h2><p>使用反射可以取得：<br>1 实现的全部接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Class&lt;?&gt;[] getInterfaces()     </span><br><span class=\"line\">确定此对象所表示的类或接口实现的接口。</span><br></pre></td></tr></table></figure>\n<p>2 所继承的父类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Class&lt;? Super T&gt; getSuperclass()</span><br><span class=\"line\">返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的 Class。</span><br></pre></td></tr></table></figure>\n<p>3 全部的构造器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Constructor&lt;T&gt;[] getConstructors()</span><br><span class=\"line\">返回此 Class 对象所表示的类的所有public构造方法。</span><br><span class=\"line\">public Constructor&lt;T&gt;[] getDeclaredConstructors()</span><br><span class=\"line\">返回此 Class 对象表示的类声明的所有构造方法。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Constructor类中：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   取得修饰符: public int getModifiers();</span><br><span class=\"line\">取得方法名称: public String getName();</span><br><span class=\"line\">取得参数的类型：public Class&lt;?&gt;[] getParameterTypes();</span><br></pre></td></tr></table></figure>\n<p>4 全部的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public Method[] getDeclaredMethods()</span><br><span class=\"line\">返回此Class对象所表示的类或接口的全部方法</span><br><span class=\"line\">\tpublic Method[] getMethods()  </span><br><span class=\"line\">返回此Class对象所表示的类或接口的public的方法</span><br></pre></td></tr></table></figure>\n<p>Method类中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   public Class&lt;?&gt; getReturnType()取得全部的返回值</span><br><span class=\"line\">public Class&lt;?&gt;[] getParameterTypes()取得全部的参数</span><br><span class=\"line\">public int getModifiers()取得修饰符</span><br><span class=\"line\">public Class&lt;?&gt;[] getExceptionTypes()取得异常信息</span><br></pre></td></tr></table></figure>\n<p>5.全部的Field</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Field[] getFields() </span><br><span class=\"line\">\t返回此Class对象所表示的类或接口的public的Field。</span><br><span class=\"line\">public Field[] getDeclaredFields() </span><br><span class=\"line\">\t返回此Class对象所表示的类或接口的全部Field。</span><br></pre></td></tr></table></figure>\n<p>Field方法中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int getModifiers() </span><br><span class=\"line\">\t以整数形式返回此Field的修饰符</span><br><span class=\"line\">public Class&lt;?&gt; getType()</span><br><span class=\"line\">    得到Field的属性类型</span><br><span class=\"line\">public String getName() </span><br><span class=\"line\">\t返回Field的名称。</span><br></pre></td></tr></table></figure></p>\n<ol start=\"6\">\n<li>Annotation相关</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get Annotation(Class&lt;T&gt; annotationClass) </span><br><span class=\"line\">getDeclaredAnnotations()</span><br></pre></td></tr></table></figure>\n<p>7.泛型相关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取父类泛型类型：Type getGenericSuperclass()</span><br><span class=\"line\">泛型类型：ParameterizedType</span><br><span class=\"line\">获取实际的泛型类型参数数组：getActualTypeArguments()</span><br></pre></td></tr></table></figure>\n<p>8.类所在的包    Package getPackage() </p>\n<p>小 结：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在实际的操作中，取得类的信息的操作代码，并不会经常开发。</span><br><span class=\"line\">2.一定要熟悉java.lang.reflect包的作用，反射机制。</span><br><span class=\"line\">3.如何取得属性、方法、构造器的名称，修饰符等。</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-6-调用运行时类的指定属性、指定方法等\"><a href=\"#14-6-调用运行时类的指定属性、指定方法等\" class=\"headerlink\" title=\"14.6 调用运行时类的指定属性、指定方法等\"></a>14.6 调用运行时类的指定属性、指定方法等</h1><h2 id=\"14-6-1-通过反射调用类中的指定方法、指定属性\"><a href=\"#14-6-1-通过反射调用类中的指定方法、指定属性\" class=\"headerlink\" title=\"14.6.1 通过反射调用类中的指定方法、指定属性\"></a>14.6.1 通过反射调用类中的指定方法、指定属性</h2><p>1.调用指定方法<br>通过反射，调用类中的方法，通过Method类完成。步骤： </p>\n<ul>\n<li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li>\n<li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153110.png\" alt></p>\n<p>2.通过反射调用类中的指定方法、指定属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object obj, Object …  args)</span><br></pre></td></tr></table></figure>\n<p>1）说明：</p>\n<blockquote>\n<p>   1.Object 对应原方法的返回值，若原方法无返回值，此时返回null<br>   2.若原方法若为静态方法，此时形参Object obj可为null<br>   3.若原方法形参列表为空，则Object[] args为null<br>   4.若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</p>\n</blockquote>\n<p>2）调用指定属性  </p>\n<ul>\n<li>在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public Field getField(String name)</span><br><span class=\"line\">返回此Class对象表示的类或接口的指定的public的Field。</span><br><span class=\"line\">    public Field getDeclaredField(String name)</span><br><span class=\"line\">返回此Class对象表示的类或接口的指定的Field。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Field中：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object get(Object obj)</span><br><span class=\"line\">    取得指定对象obj上此Field的属性内容</span><br><span class=\"line\">public void set(Object obj,Object value)</span><br><span class=\"line\">\t设置指定对象obj上此Field的属性内容</span><br></pre></td></tr></table></figure>\n<p>注：在类中属性都设置为private的前提下，在使用set()和get()方法时，首先要使用Field类中的setAccessible(true)方法将需要操作的属性设置为可以被外部访问。</p>\n<ul>\n<li>public void setAccessible(true)访问私有属性时，让这个属性可见。 </li>\n</ul>\n<h1 id=\"14-7-反射的应用：动态代理\"><a href=\"#14-7-反射的应用：动态代理\" class=\"headerlink\" title=\"14.7 反射的应用：动态代理\"></a>14.7 反射的应用：动态代理</h1><h2 id=\"14-7-1-Java动态代理\"><a href=\"#14-7-1-Java动态代理\" class=\"headerlink\" title=\"14.7.1 Java动态代理\"></a>14.7.1 Java动态代理</h2><ul>\n<li>之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。</li>\n<li>最好可以通过一个代理类完成全部的代理功能</li>\n<li>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。</li>\n<li><p>动态代理使用场合:</p>\n<ul>\n<li>调试</li>\n<li>远程方法调用</li>\n</ul>\n</li>\n<li><p>代理设计模式的原理:<br>使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上.</p>\n</li>\n<li><p>Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。</p>\n</li>\n<li>提供用于创建动态代理类和动态代理对象的静态方法<ul>\n<li>static Class&lt;?&gt;   getProxyClass(ClassLoader loader, Class&lt;?&gt;… interfaces)  创建一个动态代理类所对应的Class对象</li>\n<li>static Object   newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)  直接创建一个动态代理对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassLoader : 类加载器</span><br><span class=\"line\">Class&lt;?&gt;[] : 得到全部的接口</span><br><span class=\"line\">InvocationHandler : 得到InvocationHandler接口的子类实例</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-7-2-动态代理步骤\"><a href=\"#14-7-2-动态代理步骤\" class=\"headerlink\" title=\"14.7.2 动态代理步骤\"></a>14.7.2 动态代理步骤</h2><p>1.创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object invoke(Object theProxy, Method method, Object[] params) throws Throwable&#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         Object retval = method.invoke(targetObj, params);</span><br><span class=\"line\">         // Print out the result</span><br><span class=\"line\">           System.out.println(retval);</span><br><span class=\"line\">            return retval;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      catch (Exception exc)&#123;&#125;</span><br><span class=\"line\">Object theProxy : 被代理对象</span><br><span class=\"line\">Method method : 要调用的方法</span><br><span class=\"line\">Object[] params : 方法调用时所需要的参数</span><br></pre></td></tr></table></figure>\n<p>2.创建被代理的类以及接口</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153731.png\" alt></p>\n<p>3.通过Proxy的静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建一个Subject接口代理</span><br><span class=\"line\">   RealSubject target = new RealSubject();</span><br><span class=\"line\">// Create a proxy to wrap the original implementation</span><br><span class=\"line\">            DebugProxy proxy = new DebugProxy(target);</span><br><span class=\"line\"> // Get a reference to the proxy through the Subject interface</span><br><span class=\"line\">          Subject sub = (Subject) Proxy.newProxyInstance(</span><br><span class=\"line\">            Subject.class.getClassLoader(),</span><br><span class=\"line\">            new Class[] &#123; Subject.class &#125;, proxy);</span><br></pre></td></tr></table></figure>\n<p>4.通过 Subject代理调用RealSubject实现类的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String info = sub.say(“Peter&quot;, 24);</span><br><span class=\"line\"> System.out.println(info);</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-7-3-动态代理与AOP（Aspect-Orient-Programming\"><a href=\"#14-7-3-动态代理与AOP（Aspect-Orient-Programming\" class=\"headerlink\" title=\"14.7.3 动态代理与AOP（Aspect Orient Programming)\"></a>14.7.3 动态代理与AOP（Aspect Orient Programming)</h2><p>前面介绍的Proxy和InvocationHandler，很难看出这种动态代理的优势，下面介绍一种更实用的动态代理机制</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153928.png\" alt></p>\n<p>改进后的说明：代码段1、代码段2、代码段3和深色代码段分离开了，但代码段1、2、3又和一个特定的方法A耦合了！最理想的效果是：代码块1、2、3既可以执行方法A，又无须在程序中以硬编码的方式直接调用深色代码的方法</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153949.png\" alt></p>\n<p>代码演示 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Dog &#123;</span><br><span class=\"line\">\tvoid info();</span><br><span class=\"line\"></span><br><span class=\"line\">\tvoid run();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HuntingDog implements Dog &#123;</span><br><span class=\"line\">\tpublic void info() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;我是一只猎狗&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;我奔跑迅速&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DogUtil &#123;</span><br><span class=\"line\">\tpublic void method1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法一=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法二=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DogUtil &#123;</span><br><span class=\"line\">\tpublic void method1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法一=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法二=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DogUtil &#123;</span><br><span class=\"line\">\tpublic void method1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法一=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法二=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\">\t// 需要被代理的对象</span><br><span class=\"line\">\tprivate Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTarget(Object target) &#123;</span><br><span class=\"line\">\t\tthis.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 执行动态代理对象的所有方法时，都会被替换成执行如下的invoke方法</span><br><span class=\"line\">\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tDogUtil du = new DogUtil();</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method1。</span><br><span class=\"line\">\t\tdu.method1();</span><br><span class=\"line\">\t\t// 以target作为主调来执行method方法</span><br><span class=\"line\">\t\tObject result = method.invoke(target, args);</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method2。</span><br><span class=\"line\">\t\tdu.method2();</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\">\t// 需要被代理的对象</span><br><span class=\"line\">\tprivate Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTarget(Object target) &#123;</span><br><span class=\"line\">\t\tthis.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 执行动态代理对象的所有方法时，都会被替换成执行如下的invoke方法</span><br><span class=\"line\">\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tDogUtil du = new DogUtil();</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method1。</span><br><span class=\"line\">\t\tdu.method1();</span><br><span class=\"line\">\t\t// 以target作为主调来执行method方法</span><br><span class=\"line\">\t\tObject result = method.invoke(target, args);</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method2。</span><br><span class=\"line\">\t\tdu.method2();</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyProxyFactory &#123;</span><br><span class=\"line\">\t// 为指定target生成动态代理对象</span><br><span class=\"line\">\tpublic static Object getProxy(Object target) throws Exception &#123;</span><br><span class=\"line\">\t\t// 创建一个MyInvokationHandler对象</span><br><span class=\"line\">\t\tMyInvokationHandler handler = new MyInvokationHandler();</span><br><span class=\"line\">\t\t// 为MyInvokationHandler设置target对象</span><br><span class=\"line\">\t\thandler.setTarget(target);</span><br><span class=\"line\">\t\t// 创建、并返回一个动态代理对象</span><br><span class=\"line\">\t\treturn Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyProxyFactory &#123;</span><br><span class=\"line\">\t// 为指定target生成动态代理对象</span><br><span class=\"line\">\tpublic static Object getProxy(Object target) throws Exception &#123;</span><br><span class=\"line\">\t\t// 创建一个MyInvokationHandler对象</span><br><span class=\"line\">\t\tMyInvokationHandler handler = new MyInvokationHandler();</span><br><span class=\"line\">\t\t// 为MyInvokationHandler设置target对象</span><br><span class=\"line\">\t\thandler.setTarget(target);</span><br><span class=\"line\">\t\t// 创建、并返回一个动态代理对象</span><br><span class=\"line\">\t\treturn Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) </span><br><span class=\"line\">\t\tthrows Exception&#123;</span><br><span class=\"line\">\t\t// 创建一个原始的HuntingDog对象，作为target</span><br><span class=\"line\">\t\tDog target = new HuntingDog();</span><br><span class=\"line\">\t\t// 以指定的target来创建动态代理</span><br><span class=\"line\">\t\tDog dog = (Dog)MyProxyFactory.getProxy(target);</span><br><span class=\"line\">\t\tdog.info();</span><br><span class=\"line\">\t\tdog.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Proxy生成一个动态代理时，往往并不会凭空产生一个动态代理，这样没有太大的意义。通常都是为指定的目标对象生成动态代理</li>\n<li>这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154040.png\" alt></p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"13. JavaSE-IO流","url":"http://yoursite.com/2017/01/29/13. JavaSE-IO流/","content":"<h1 id=\"13-1-File类的使用\"><a href=\"#13-1-File类的使用\" class=\"headerlink\" title=\"13.1 File类的使用\"></a>13.1 File类的使用</h1><h2 id=\"13-1-1-File类\"><a href=\"#13-1-1-File类\" class=\"headerlink\" title=\"13.1.1 File类\"></a>13.1.1 File类</h2><ul>\n<li>java.io.File类：文件和目录路径名的抽象表示形式，与平台无关</li>\n<li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。</li>\n<li>File对象可以作为参数传递给流的构造器</li>\n</ul>\n<h2 id=\"13-1-2-File类的常见构造器\"><a href=\"#13-1-2-File类的常见构造器\" class=\"headerlink\" title=\"13.1.2 File类的常见构造器\"></a>13.1.2 File类的常见构造器</h2><ul>\n<li>public File(String pathname)<br>以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。</li>\n<li>public File(String parent,String child)<br>以parent为父路径，child为子路径创建File对象。</li>\n<li>File的静态属性String separator存储了当前系统的路径分隔符。</li>\n<li>在UNIX中，此字段为‘/’，在Windows中，为‘\\’</li>\n</ul>\n<h2 id=\"13-1-3-File类常用API\"><a href=\"#13-1-3-File类常用API\" class=\"headerlink\" title=\"13.1.3 File类常用API\"></a>13.1.3 File类常用API</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问文件名：</span><br><span class=\"line\">getName()</span><br><span class=\"line\">getPath()</span><br><span class=\"line\">getAbsoluteFile()</span><br><span class=\"line\">getAbsolutePath()</span><br><span class=\"line\">getParent()</span><br><span class=\"line\">toPath()</span><br><span class=\"line\">renameTo(File newName)</span><br><span class=\"line\"></span><br><span class=\"line\">文件检测</span><br><span class=\"line\">exists()</span><br><span class=\"line\">canWrite()</span><br><span class=\"line\">canRead()</span><br><span class=\"line\">isFile()</span><br><span class=\"line\">isDirectory()</span><br><span class=\"line\"></span><br><span class=\"line\">获取常规文件信息</span><br><span class=\"line\">lastModified()</span><br><span class=\"line\">length()</span><br><span class=\"line\"></span><br><span class=\"line\">文件操作相关</span><br><span class=\"line\">createNewFile()</span><br><span class=\"line\">delete()</span><br><span class=\"line\"></span><br><span class=\"line\">目录操作相关</span><br><span class=\"line\">mkdir()</span><br><span class=\"line\">mkdirs()</span><br><span class=\"line\">delete()</span><br><span class=\"line\">list()</span><br><span class=\"line\">listFiles()</span><br></pre></td></tr></table></figure>\n<p>案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File dir1 = new File(&quot;D:/IOTest/dir1&quot;);</span><br><span class=\"line\">if (!dir1.exists()) &#123;     // 如果D:/IOTest/dir1不存在，就创建为目录</span><br><span class=\"line\">\tdir1.mkdir(); &#125;</span><br><span class=\"line\">// 创建以dir1为父目录,名为&quot;dir2&quot;的File对象</span><br><span class=\"line\">File dir2 = new File(dir1, &quot;dir2&quot;); </span><br><span class=\"line\">if (!dir2.exists()) &#123; // 如果还不存在，就创建为目录</span><br><span class=\"line\">\tdir2.mkdirs(); &#125;</span><br><span class=\"line\">File dir4 = new File(dir1, &quot;dir3/dir4&quot;);</span><br><span class=\"line\">if (!dir4.exists()) &#123;</span><br><span class=\"line\">\tdir4.mkdirs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 创建以dir2为父目录,名为&quot;test.txt&quot;的File对象</span><br><span class=\"line\">File file = new File(dir2, &quot;test.txt&quot;); \t</span><br><span class=\"line\">if (!file.exists()) &#123; // 如果还不存在，就创建为文件</span><br><span class=\"line\">\tfile.createNewFile();&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-2-IO流原理及流的分类\"><a href=\"#13-2-IO流原理及流的分类\" class=\"headerlink\" title=\"13.2 IO流原理及流的分类\"></a>13.2 IO流原理及流的分类</h1><h2 id=\"13-2-1-Java-IO流原理\"><a href=\"#13-2-1-Java-IO流原理\" class=\"headerlink\" title=\"13.2.1 Java IO流原理\"></a>13.2.1 Java IO流原理</h2><ul>\n<li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</li>\n<li>Java程序中，对于数据的输入/输出操作以”流(stream)” 的方式进行。java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115552.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115622.png\" alt></p>\n<h2 id=\"13-2-2-流的分类\"><a href=\"#13-2-2-流的分类\" class=\"headerlink\" title=\"13.2.2 流的分类\"></a>13.2.2 流的分类</h2><ul>\n<li>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)  </li>\n<li>按数据流的流向不同分为：输入流，输出流</li>\n<li>按流的角色的不同分为：节点流，处理流</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115659.png\" alt></p>\n<ol>\n<li>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。  </li>\n<li>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115728.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115754.png\" alt></p>\n<h3 id=\"节点流和处理流\"><a href=\"#节点流和处理流\" class=\"headerlink\" title=\"节点流和处理流\"></a>节点流和处理流</h3><p>1.节点流可以从一个特定的数据源读写数据</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115830.png\" alt></p>\n<ol start=\"2\">\n<li>处理流是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603140827.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603141027.png\" alt></p>\n<p>InputStream &amp; Reader</p>\n<ul>\n<li>InputStream 和 Reader 是所有输入流的基类。</li>\n<li><p>InputStream（典型实现：FileInputStream）</p>\n<ul>\n<li>int read()</li>\n<li>int read(byte[] b)</li>\n<li>int read(byte[] b, int off, int len)</li>\n</ul>\n</li>\n<li><p>Reader（典型实现：FileReader）</p>\n<ul>\n<li>int read()</li>\n<li>int read(char [] c)</li>\n<li>int read(char [] c, int off, int len)</li>\n</ul>\n</li>\n<li><p>程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该显式关闭文件 IO 资源。</p>\n</li>\n</ul>\n<h2 id=\"13-2-3-节点流-文件流\"><a href=\"#13-2-3-节点流-文件流\" class=\"headerlink\" title=\"13.2.3 节点流(文件流)\"></a>13.2.3 节点流(文件流)</h2><h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><p>1 建立一个流对象，将已存在的一个文件加载进流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader fr = new FileReader(“Test.txt”);</span><br></pre></td></tr></table></figure>\n<p>2 创建一个临时存放数据的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char[] ch = new char[1024];</span><br></pre></td></tr></table></figure>\n<p>3 调用流对象的读取方法将流中的数据读入到数组中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fr.read(ch);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader fr = null;</span><br><span class=\"line\">\ttry&#123;</span><br><span class=\"line\">\t\tfr = new FileReader(&quot;c:\\\\test.txt&quot;);</span><br><span class=\"line\">\t\tchar[] buf = new char[1024];</span><br><span class=\"line\">\t\tint len= 0;</span><br><span class=\"line\">\t\twhile((len=fr.read(buf))!=-1)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(new String(buf ,0,len));&#125;</span><br><span class=\"line\">\t&#125;catch (IOException e)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;read-Exception :&quot;+e.toString());&#125;</span><br><span class=\"line\">\tfinally&#123;</span><br><span class=\"line\">\t\tif(fr!=null)&#123;</span><br><span class=\"line\">\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\tfr.close();</span><br><span class=\"line\">\t\t\t&#125;catch (IOException e)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;close-Exception :&quot;+e.toString());</span><br><span class=\"line\">\t\t\t&#125; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>1.创建流对象，建立数据存放文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileWriter fw = new FileWriter(“Test.txt”);</span><br></pre></td></tr></table></figure>\n<p>2.调用流对象的写入方法，将数据写入流</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fw.write(“text”);</span><br></pre></td></tr></table></figure>\n<p>3.关闭流资源，并将流中的数据清空到文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fw.close();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileWriter fw = null;</span><br><span class=\"line\">\ttry&#123;</span><br><span class=\"line\">\t\tfw = new FileWriter(&quot;Test.txt&quot;);</span><br><span class=\"line\">\t\tfw.write(&quot;text&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (IOException e)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfinally&#123;</span><br><span class=\"line\">\t\tIf(fw!=null)</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t fw.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (IOException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());&#125;\t&#125;</span><br></pre></td></tr></table></figure>\n<p>注  意</p>\n<ul>\n<li>定义文件路径时，注意：可以用“/”或者“\\”。</li>\n<li>在写入一个文件时，如果目录下有同名文件将被覆盖。<br>在读取文件时，必须保证该文件已存在，否则出异常</li>\n</ul>\n<h2 id=\"13-2-4-缓冲流\"><a href=\"#13-2-4-缓冲流\" class=\"headerlink\" title=\"13.2.4 缓冲流\"></a>13.2.4 缓冲流</h2><ul>\n<li>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组</li>\n<li><p>根据数据操作单位可以把缓冲流分为：</p>\n<ul>\n<li>BufferedInputStream 和 BufferedOutputStream</li>\n<li>BufferedReader 和 BufferedWriter</li>\n</ul>\n</li>\n<li><p>缓冲流要“套接”在相应的节点流之上，对读写的数据提供了缓冲的功能，提高了读写的效率，同时增加了一些新的方法</p>\n</li>\n<li>对于输出的缓冲流，写出的数据会先在内存中缓存，使用flush()将会使内存中的数据立刻写出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader br = null;</span><br><span class=\"line\">BufferedWriter bw = null;\t\t</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">//step1:创建缓冲流对象：它是过滤流，是对节点流的包装</span><br><span class=\"line\">br = new  BufferedReader(new FileReader(&quot;d:\\\\IOTest\\\\source.txt&quot;));</span><br><span class=\"line\">bw = new BufferedWriter(new FileWriter(&quot;d:\\\\IOTest\\\\destBF.txt&quot;));</span><br><span class=\"line\">String str = null;</span><br><span class=\"line\">while ((str = br.readLine()) != null) &#123; //一次读取字符文本文件的一行字符</span><br><span class=\"line\">bw.write(str); //一次写入一行字符串</span><br><span class=\"line\">bw.newLine();  //写入行分隔符</span><br><span class=\"line\">bw.flush();  //step2:刷新缓冲区</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">// step3: 关闭IO流对象</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">if (bw != null) &#123;</span><br><span class=\"line\">bw.close();  //关闭过滤流时,会自动关闭它所包装的底层节点流</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">if (br != null) &#123;</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-5-转换流\"><a href=\"#13-2-5-转换流\" class=\"headerlink\" title=\"13.2.5 转换流\"></a>13.2.5 转换流</h2><h3 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h3><ul>\n<li>转换流提供了在字节流和字符流之间的转换</li>\n<li>Java API提供了两个转换流：<ul>\n<li><code>InputStreamReader和OutputStreamWriter</code></li>\n</ul>\n</li>\n<li>字节流中的数据都是字符时，转成字符流操作更高效。</li>\n</ul>\n<h3 id=\"InputStreamReader\"><a href=\"#InputStreamReader\" class=\"headerlink\" title=\"InputStreamReader`\"></a>InputStreamReader`</h3><ul>\n<li>用于将字节流中读取到的字节按指定字符集解码成字符。需要和InputStream“套接”。</li>\n<li>构造方法<ul>\n<li>public InputStreamReader(InputStream in)</li>\n<li>public InputSreamReader(InputStream in,String charsetName)  </li>\n</ul>\n</li>\n</ul>\n<p>如： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isr = new </span><br><span class=\"line\">    InputStreamReader(System.in,”gb2312”);</span><br></pre></td></tr></table></figure>\n<h3 id=\"OutputStreamWriter\"><a href=\"#OutputStreamWriter\" class=\"headerlink\" title=\"OutputStreamWriter\"></a>OutputStreamWriter</h3><ul>\n<li>用于将要写入到字节流中的字符按指定字符集编码成字节。需要和OutputStream“套接”。</li>\n<li>构造方法<ul>\n<li>public OutputStreamWriter(OutputStream out)</li>\n<li>public OutputSreamWriter(OutputStream out,String charsetName)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603142510.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testMyInput() throws Exception&#123;</span><br><span class=\"line\">    FileInputStream fis = new FileInputStream(&quot;dbcp.txt&quot;);</span><br><span class=\"line\">    FileOutputStream fos = new FileOutputStream(&quot;dbcp5.txt&quot;);</span><br><span class=\"line\">    InputStreamReader isr = new InputStreamReader(fis,&quot;GBK&quot;);</span><br><span class=\"line\">    OutputStreamWriter osw = new OutputStreamWriter(fos,&quot;GBK&quot;);</span><br><span class=\"line\">    BufferedReader br = new BufferedReader(isr);</span><br><span class=\"line\">    BufferedWriter bw = new BufferedWriter(osw);</span><br><span class=\"line\">    String str = null;</span><br><span class=\"line\">    while((str = br.readLine()) != null)&#123;</span><br><span class=\"line\">        bw.write(str);</span><br><span class=\"line\">        bw.newLine();</span><br><span class=\"line\">        bw.flush();</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">bw.close();  </span><br><span class=\"line\">br.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充：字符编码</p>\n<ul>\n<li>编码表的由来<br>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</li>\n<li>常见的编码表</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASCII：美国标准信息交换码。</span><br><span class=\"line\">\t用一个字节的7位可以表示。</span><br><span class=\"line\"></span><br><span class=\"line\">ISO8859-1：拉丁码表。欧洲码表</span><br><span class=\"line\">\t用一个字节的8位表示。</span><br><span class=\"line\"></span><br><span class=\"line\">GB2312：中国的中文编码表。</span><br><span class=\"line\"></span><br><span class=\"line\">GBK：中国的中文编码表升级，融合了更多的中文文字符号。</span><br><span class=\"line\"></span><br><span class=\"line\">Unicode：国际标准码，融合了多种文字。</span><br><span class=\"line\">\t所有文字都用两个字节来表示,Java语言使用的就是unicode</span><br><span class=\"line\">\tUTF-8：最多用三个字节来表示一个字符</span><br><span class=\"line\">\t</span><br><span class=\"line\">编码：字符串字节数组</span><br><span class=\"line\"></span><br><span class=\"line\">解码：字节数组字符串</span><br><span class=\"line\"></span><br><span class=\"line\">转换流的编码应用</span><br><span class=\"line\">\t可以将字符按指定编码格式存储。</span><br><span class=\"line\">\t可以对文本数据按指定编码格式来解读。</span><br><span class=\"line\">\t指定编码表的动作由构造函数完成。</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-6-标准输入-输出流\"><a href=\"#13-2-6-标准输入-输出流\" class=\"headerlink\" title=\"13.2.6 标准输入/输出流\"></a>13.2.6 标准输入/输出流</h2><h3 id=\"标准输入-输出流\"><a href=\"#标准输入-输出流\" class=\"headerlink\" title=\"标准输入/输出流\"></a>标准输入/输出流</h3><ul>\n<li>System.in和System.out分别代表了系统标准的输入和输出设备</li>\n<li>默认输入设备是键盘，输出设备是显示器</li>\n<li>System.in的类型是InputStream</li>\n<li>System.out的类型是PrintStream，其是OutputStream的子类FilterOutputStream 的子类<br>λ    通过System类的setIn，setOut方法对默认设备进行改变。<ul>\n<li>public static void setIn(InputStream in)</li>\n<li>public static void setOut(PrintStream out)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"例-1\"><a href=\"#例-1\" class=\"headerlink\" title=\"例 1\"></a>例 1</h3><p>从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(&quot;请输入信息(退出输入e或exit):&quot;);</span><br><span class=\"line\">\t\t// 把&quot;标准&quot;输入流(键盘输入)这个字节流包装成字符流,再包装成缓冲流</span><br><span class=\"line\">\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));</span><br><span class=\"line\">\t\tString s = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// 读取用户输入的一行数据 --&gt; 阻塞程序</span><br><span class=\"line\">\t\t\twhile ((s = br.readLine()) != null) &#123;</span><br><span class=\"line\">\t\t\t\tif (s.equalsIgnoreCase(&quot;e&quot;) || s.equalsIgnoreCase(&quot;exit&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;安全退出!!&quot;);</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t// 将读取到的整行字符串转成大写输出</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;--&gt;:&quot; + s.toUpperCase());</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;继续输入信息&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; castch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif (br != null) &#123;</span><br><span class=\"line\">\t\t\t\t\tbr.close(); // 关闭过滤流时,会自动关闭它包装的底层节点流</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-7-打印流\"><a href=\"#13-2-7-打印流\" class=\"headerlink\" title=\"13.2.7 打印流\"></a>13.2.7 打印流</h2><ul>\n<li>实现将基本数据类型的数据格式转化为字符串输出</li>\n<li>打印流：PrintStream和PrintWriter<ul>\n<li>提供了一系列重载的print和println方法，用于多种数据类型的输出</li>\n<li>PrintStream和PrintWriter的输出不会抛出异常</li>\n<li>PrintStream和PrintWriter有自动flush功能</li>\n<li>System.out返回的是PrintStream的实例</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream fos = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tfos = new FileOutputStream(new File(&quot;D:\\\\IO\\\\text.txt&quot;));</span><br><span class=\"line\">\t\t&#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; // 创建打印输出流,设置为自动刷新模式(写入换行符或字节 &apos;\\n&apos; 时都会刷新输出缓冲区)</span><br><span class=\"line\">\t\tPrintStream ps = new PrintStream(fos, true);</span><br><span class=\"line\">\t\tif (ps != null) &#123; // 把标准输出流(控制台输出)改成文件</span><br><span class=\"line\">\t\t\tSystem.setOut(ps);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt;= 255; i++) &#123; // 输出ASCII字符</span><br><span class=\"line\">\t\t\tSystem.out.print((char) i);</span><br><span class=\"line\">\t\t\tif (i % 50 == 0) &#123; // 每50个数据一行</span><br><span class=\"line\">\t\t\t\tSystem.out.println(); // 换行</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tps.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-8-数据流\"><a href=\"#13-2-8-数据流\" class=\"headerlink\" title=\"13.2.8 数据流\"></a>13.2.8 数据流</h2><ul>\n<li>为了方便地操作Java语言的基本数据类型的数据，可以使用数据流。</li>\n<li>数据流有两个类：(用于读取和写出基本数据类型的数据）<ul>\n<li>DataInputStream 和 DataOutputStream</li>\n<li>分别“套接”在 InputStream 和 OutputStream 节点流上</li>\n</ul>\n</li>\n<li>DataInputStream中的方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean readBoolean()\t\tbyte readByte()</span><br><span class=\"line\">     char readChar()\t\t\tfloat readFloat()</span><br><span class=\"line\">     double readDouble()\t\tshort readShort()</span><br><span class=\"line\">     long readLong()\t\t\tint readInt()</span><br><span class=\"line\">     String readUTF()           void readFully(byte[] b)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>DataOutputStream中的方法<br>将上述的方法的read改为相应的write即可。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataOutputStream dos = null;</span><br><span class=\"line\">\t\ttry &#123; // 创建连接到指定文件的数据输出流对象</span><br><span class=\"line\">\t\t\tdos=newDataOutputStream(new FileOutputStream(&quot;d:\\\\IOTest\\\\destData.dat&quot;));</span><br><span class=\"line\">\t\t\tdos.writeUTF(&quot;ab中国&quot;); // 写UTF字符串</span><br><span class=\"line\">\t\t\tdos.writeBoolean(false); // 写入布尔值</span><br><span class=\"line\">\t\t\tdos.writeLong(1234567890L); // 写入长整数</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;写文件成功!&quot;);</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; finally &#123; // 关闭流对象</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif (dos != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 关闭过滤流时,会自动关闭它包装的底层节点流</span><br><span class=\"line\">\t\t\t\t\tdos.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-9-对象流\"><a href=\"#13-2-9-对象流\" class=\"headerlink\" title=\"13.2.9 对象流\"></a>13.2.9 对象流</h2><h3 id=\"对象流\"><a href=\"#对象流\" class=\"headerlink\" title=\"对象流\"></a>对象流</h3><ul>\n<li><p>ObjectInputStream和OjbectOutputSteam</p>\n<ul>\n<li>用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</li>\n</ul>\n</li>\n<li><p>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制</p>\n</li>\n<li>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制<ul>\n<li>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对象的序列化\"><a href=\"#对象的序列化\" class=\"headerlink\" title=\"对象的序列化\"></a>对象的序列化</h3><ul>\n<li>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</li>\n<li>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原</li>\n<li>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是 JavaEE 平台的基础</li>\n<li><p>如果需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：</p>\n<ul>\n<li>Serializable</li>\n<li>Externalizable</li>\n</ul>\n</li>\n<li><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p>\n<ul>\n<li>private static final long serialVersionUID;</li>\n<li>serialVersionUID用来表明类的不同版本间的兼容性</li>\n<li>如果类没有显示定义这个静态变量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的源代码作了修改，serialVersionUID 可能发生变化。故建议，显示声明</li>\n</ul>\n</li>\n<li><p>显示定义serialVersionUID的用途</p>\n<ul>\n<li>希望类的不同版本对序列化兼容，因此需确保类的不同版本具有相同的serialVersionUID</li>\n<li>不希望类的不同版本对序列化兼容，因此需确保类的不同版本具有不同的serialVersionUID</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用对象流序列化对象\"><a href=\"#使用对象流序列化对象\" class=\"headerlink\" title=\"使用对象流序列化对象\"></a>使用对象流序列化对象</h3><ul>\n<li><p>若某个类实现了 Serializable 接口，该类的对象就是可序列化的：</p>\n<ul>\n<li>创建一个 ObjectOutputStream</li>\n<li>调用 ObjectOutputStream 对象的 writeObject(对象) 方法输出可序列化对象。注意写出一次，操作flush()</li>\n</ul>\n</li>\n<li><p>反序列化</p>\n<ul>\n<li>创建一个 ObjectInputStream</li>\n<li>调用 readObject() 方法读取流中的对象</li>\n</ul>\n</li>\n<li><p>强调：如果某个类的字段不是基本数据类型或 String  类型，而是另一个引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的 Field 的类也不能序列化</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectOutputStream oos = </span><br><span class=\"line\">\t\t\t\tnew ObjectOutputStream(new FileOutputStream(&quot;test3.txt&quot;));</span><br><span class=\"line\">\t\tPerson p = new Person(&quot;韩梅梅&quot;, 18, &quot;中华大街&quot;, new Pet());</span><br><span class=\"line\">\t\toos.writeObject(p);</span><br><span class=\"line\">\t\toos.flush();</span><br><span class=\"line\">\t\toos.close();</span><br><span class=\"line\">\t\t// 反序列化：将磁盘中的对象数据源读出。</span><br><span class=\"line\">\t\tObjectInputStream ois = </span><br><span class=\"line\">\t\t\t\tnew ObjectInputStream(new FileInputStream(&quot;test3.txt&quot;));</span><br><span class=\"line\">\t\tPerson p1 = (Person) ois.readObject();</span><br><span class=\"line\">\t\tSystem.out.println(p1.toString());</span><br><span class=\"line\">\t\tois.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-10-随机存取文件流\"><a href=\"#13-2-10-随机存取文件流\" class=\"headerlink\" title=\"13.2.10 随机存取文件流\"></a>13.2.10 随机存取文件流</h2><h3 id=\"RandomAccessFile-类\"><a href=\"#RandomAccessFile-类\" class=\"headerlink\" title=\"RandomAccessFile 类\"></a>RandomAccessFile 类</h3><ul>\n<li>RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件<ul>\n<li>支持只访问文件的部分内容</li>\n<li>可以向已存在的文件后追加内容</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针：<ul>\n<li>long getFilePointer()：获取文件记录指针的当前位置</li>\n<li>void seek(long pos)：将文件记录指针定位到 pos 位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"读取文件内容\"><a href=\"#读取文件内容\" class=\"headerlink\" title=\"读取文件内容\"></a>读取文件内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile raf = new RandomAccessFile(“test.txt”, “rw”）;\traf.seek(5);</span><br><span class=\"line\">\tbyte [] b = new byte[1024];</span><br><span class=\"line\">\tint off = 0;</span><br><span class=\"line\">\tint len = 5;</span><br><span class=\"line\">\traf.read(b, off, len);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tString str = new String(b, 0, len);</span><br><span class=\"line\">\tSystem.out.println(str);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\traf.close();</span><br></pre></td></tr></table></figure>\n<h3 id=\"写入文件内容\"><a href=\"#写入文件内容\" class=\"headerlink\" title=\"写入文件内容\"></a>写入文件内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile raf = new RandomAccessFile(&quot;test.txt&quot;, &quot;rw&quot;);</span><br><span class=\"line\">\traf.seek(5);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t//先读出来</span><br><span class=\"line\">\tString temp = raf.readLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\traf.seek(5);</span><br><span class=\"line\">\traf.write(&quot;xyz&quot;.getBytes());</span><br><span class=\"line\">\traf.write(temp.getBytes());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\traf.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-11-流的基本应用小节\"><a href=\"#13-2-11-流的基本应用小节\" class=\"headerlink\" title=\"13.2.11 流的基本应用小节\"></a>13.2.11 流的基本应用小节</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流是用来处理数据的。</span><br><span class=\"line\"></span><br><span class=\"line\">处理数据时，一定要先明确数据源，与数据目的地</span><br><span class=\"line\">\t数据源可以是文件，可以是键盘。</span><br><span class=\"line\">\t数据目的地可以是文件、显示器或者其他设备。</span><br><span class=\"line\"></span><br><span class=\"line\">而流只是在帮助数据进行传输,并对传输的数据进行处理，比如过滤处理、转换处理等。</span><br><span class=\"line\"></span><br><span class=\"line\">字节流-缓冲流（重点）</span><br><span class=\"line\">\t输入流InputStream-FileInputStream-BufferedInputStream</span><br><span class=\"line\">\t输出流OutputStream-FileOutputStream-BufferedOutputStream</span><br><span class=\"line\"></span><br><span class=\"line\">字符流-缓冲流（重点）</span><br><span class=\"line\">\t输入流Reader-FileReader-BufferedReader</span><br><span class=\"line\">\t输出流Writer-FileWriter-BufferedWriter</span><br><span class=\"line\"></span><br><span class=\"line\">转换流</span><br><span class=\"line\">\tInputSteamReader和OutputStreamWriter</span><br><span class=\"line\"></span><br><span class=\"line\">对象流ObjectInputStream和ObjectOutputStream（难点）</span><br><span class=\"line\">\t序列化</span><br><span class=\"line\">\t反序列化</span><br><span class=\"line\"></span><br><span class=\"line\">随机存取流RandomAccessFile（掌握读取、写入）</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"12. JavaSE-泛型","url":"http://yoursite.com/2017/01/15/12. JavaSE-泛型/","content":"<h1 id=\"12-1-泛型的概念\"><a href=\"#12-1-泛型的概念\" class=\"headerlink\" title=\"12.1 泛型的概念\"></a>12.1 泛型的概念</h1><p>泛型：标签<br>举例：  </p>\n<blockquote>\n<ul>\n<li>超市购物架上很多瓶子，每个瓶子装的是什么，有标签</li>\n<li>中药店，每个抽屉外面贴着标签</li>\n</ul>\n</blockquote>\n<ul>\n<li>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection<e>，List<e>，ArrayList<e>   这个<e>就是类型参数，即泛型</e></e></e></e></li>\n<li>从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，正如：List<string>，这表明该List只能保存字符串类型的对象。</string></li>\n<li>所谓泛型，就是允许在定义类、接口时指定类型参数（我们称为类型形参），这个类型形参将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。</li>\n</ul>\n<h2 id=\"12-1-1-为什么要使用泛型\"><a href=\"#12-1-1-为什么要使用泛型\" class=\"headerlink\" title=\"12.1.1 为什么要使用泛型\"></a>12.1.1 为什么要使用泛型</h2><p>那么为什么要有泛型呢，直接Object不是也可以存储数据吗？<br>1 解决元素存储的安全性问题，好比商品、药品标签，不会弄错<br>2 解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603111458.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603111516.png\" alt></p>\n<p>泛型就是为了解决哪种在声明时不能确定类型，但在使用时才能确定类型的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t/*ArrayList list = new ArrayList();</span><br><span class=\"line\">\t\tlist.add(1);</span><br><span class=\"line\">\t\tlist.add(&quot;java&quot;);</span><br><span class=\"line\">\t\tlist.add(2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//麻烦</span><br><span class=\"line\">\t\tint i = (int) list.get(0);</span><br><span class=\"line\">\t\t//不安全</span><br><span class=\"line\">\t\tint j = (int) list.get(1);*/</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist.add(1);</span><br><span class=\"line\">//\t\tlist.add(&quot;java&quot;);//类型检查，安全   在编译期间就确保类型安全</span><br><span class=\"line\">\t\tlist.add(2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//省事</span><br><span class=\"line\">\t\tint i = list.get(0);</span><br><span class=\"line\">\t\tint j = list.get(1);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-1-2-掌握集合中的泛型使用\"><a href=\"#12-1-2-掌握集合中的泛型使用\" class=\"headerlink\" title=\"12.1.2 掌握集合中的泛型使用\"></a>12.1.2 掌握集合中的泛型使用</h2><h1 id=\"12-2-自定义泛型\"><a href=\"#12-2-自定义泛型\" class=\"headerlink\" title=\"12.2 自定义泛型\"></a>12.2 自定义泛型</h1><h2 id=\"泛型字母\"><a href=\"#泛型字母\" class=\"headerlink\" title=\"泛型字母\"></a>泛型字母</h2><ul>\n<li>形式类型参数（formal type parameters）即泛型字母</li>\n<li>命名：泛型字母可以随意指定，尽量使用单个的大写字母（有时候多个泛型类型时会加上数字，比如T1，T2）</li>\n<li>常见字母（见名知意）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T：Type</span><br><span class=\"line\">K V：Key Value</span><br><span class=\"line\">E：Element</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-2-1-泛型声明形式之一：泛型类、接口\"><a href=\"#12-2-1-泛型声明形式之一：泛型类、接口\" class=\"headerlink\" title=\"12.2.1  泛型声明形式之一：泛型类、接口\"></a>12.2.1  泛型声明形式之一：泛型类、接口</h2><p>需求：定义学生类，其中有学生成绩</p>\n<ul>\n<li>整数</li>\n<li>小数</li>\n<li>字符串“优秀、良好、合格、不及格”</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student&lt;T&gt;&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate T score;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Student() &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Student(String name, T score) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic T getScore() &#123;</span><br><span class=\"line\">\t\treturn score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setScore(T score) &#123;</span><br><span class=\"line\">\t\tthis.score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名：&quot; + name + &quot;, 成绩：&quot; + score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestStudentScore &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tStudent&lt;Integer&gt; s1 = new Student&lt;Integer&gt;(&quot;张三&quot;,89);</span><br><span class=\"line\">\t\tInteger score = s1.getScore();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStudent&lt;Integer&gt; s2 = new Student&lt;Integer&gt;();</span><br><span class=\"line\">//\t\ts2.setScore(&quot;优秀&quot;);</span><br><span class=\"line\">\t\ts2.setScore(99);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明时的要点\"><a href=\"#声明时的要点\" class=\"headerlink\" title=\"声明时的要点\"></a>声明时的要点</h3><ul>\n<li>在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型</li>\n<li>在类/接口上声明的泛型不能使用在静态成员上</li>\n<li>泛型类的构造器如下：public GenericClass(){}。</li>\n<li>而如下是错误的：public GenericClass<e>(){}</e></li>\n<li>泛型类在声明时还可以指定泛型的上限</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.generic.classtype;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestPerson &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">//\t\tPerson&lt;Dog&gt; p = new Person&lt;Dog&gt;();</span><br><span class=\"line\">//\t\tPerson&lt;Object&gt; = new Person&lt;Object&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*class Human&lt;T super Person&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\">class Person&lt;T extends Person&gt;&#123;</span><br><span class=\"line\">\tprivate T parnter;//伴侣</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Man extends Person&lt;Woman&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Woman extends Person&lt;Man&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Dog&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"指定时的要点\"><a href=\"#指定时的要点\" class=\"headerlink\" title=\"指定时的要点\"></a>指定时的要点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当类或接口被使用时，会使用具体的实际类型参数（actual type argument）代替</span><br><span class=\"line\">泛型的指定中不能使用基本数据类型，可以使用包装类替换</span><br><span class=\"line\">泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();  </span><br><span class=\"line\">声明集合变量或创建集合对象，指定泛型</span><br><span class=\"line\">（2）class Dog implements Comparable&lt;Dog&gt;&#123;...&#125;  </span><br><span class=\"line\">实现接口时，指定泛型</span><br><span class=\"line\">（3）public void test(ArrayList&lt;Student&gt; list)&#123;&#125;  </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为学生类型</span><br><span class=\"line\">（4）public void test(ArrayList&lt;?&gt; list)&#123;&#125;     </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为任意类型</span><br><span class=\"line\">（5）public void test(ArrayList&lt;? extends Person&gt; </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为Person或其子类</span><br><span class=\"line\">（6）public void test(ArrayList&lt;? super Son&gt;    </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为Son或其父类</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于泛型类-接口的继承-实现说明\"><a href=\"#关于泛型类-接口的继承-实现说明\" class=\"headerlink\" title=\"关于泛型类/接口的继承/实现说明\"></a>关于泛型类/接口的继承/实现说明</h3><p>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型：</p>\n<ul>\n<li>子类不保留父类的泛型：按需实现</li>\n</ul>\n<blockquote>\n<ul>\n<li>没有类型  擦除</li>\n<li>具体类型</li>\n</ul>\n</blockquote>\n<ul>\n<li>子类保留父类的泛型：泛型子类<blockquote>\n<ul>\n<li>全部保留</li>\n<li>部分保留        </li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>结论：子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类不保留父类的泛型</span><br><span class=\"line\">//1)没有类型  擦除</span><br><span class=\"line\">class Son extends Father&#123;//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//2)具体类型</span><br><span class=\"line\">class Son2 extends Father&lt;Integer,String&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类保留父类的泛型</span><br><span class=\"line\">//1)全部保留</span><br><span class=\"line\">class Son3&lt;T1,T2&gt; extends Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2)部分保留</span><br><span class=\"line\">class Son4&lt;T2&gt; extends Father&lt;Integer,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类不保留父类的泛型</span><br><span class=\"line\">//1)没有类型  擦除</span><br><span class=\"line\">class Son&lt;A,B&gt; extends Father&#123;//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2)具体类型</span><br><span class=\"line\">class Son2&lt;A,B&gt; extends Father&lt;Integer,String&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类保留父类的泛型</span><br><span class=\"line\">//1)全部保留</span><br><span class=\"line\">class Son3&lt;T1,T2,A,B&gt; extends Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2)部分保留</span><br><span class=\"line\">class Son4&lt;T2,A,B&gt; extends Father&lt;Integer,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体示例代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Dog implements Comparable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int compareTo(Object o) &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Cat implements Comparable&lt;Cat&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int compareTo(Cat o) &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MySet&lt;E&gt; implements Collection&lt;E&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean add(E e) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">......\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于泛型的擦除说明\"><a href=\"#关于泛型的擦除说明\" class=\"headerlink\" title=\"关于泛型的擦除说明\"></a>关于泛型的擦除说明</h3><p>使用泛型类时未指定泛型的具体类型：类似于Object，不等同于Object</p>\n<ul>\n<li>泛型擦除，默认按照Object处理但编译不会类型检查</li>\n<li>明确指定Object，编译会按Object类型检查</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestGenericErasure &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//1、使用时：类似于Object，不等同于Object</span><br><span class=\"line\">\t\tArrayList list = new ArrayList();</span><br><span class=\"line\">//\t\tlist.add(new Date());//有风险</span><br><span class=\"line\">\t\tlist.add(&quot;hello&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttest(list);//泛型擦除，编译不会类型检查</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\tArrayList&lt;Object&gt; list2 = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">//\t\ttest(list2);//一旦指定Object，编译会类型检查，必须按照Object处理</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;String&gt; list)&#123;</span><br><span class=\"line\">\t\tString str = &quot;&quot;;</span><br><span class=\"line\">\t\tfor(String s:list)&#123;</span><br><span class=\"line\">\t\t\tstr += s + &quot;,&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;元素:&quot;+str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-2-2-泛型形式之二：泛型方法\"><a href=\"#12-2-2-泛型形式之二：泛型方法\" class=\"headerlink\" title=\"12.2.2 泛型形式之二：泛型方法\"></a>12.2.2 泛型形式之二：泛型方法</h2><ul>\n<li>如果某个类不是泛型类，而某个方法需要使用泛型</li>\n<li>如果某个类是泛型类，但是需要在静态方法上使用泛型</li>\n</ul>\n<h3 id=\"泛型方法的格式：\"><a href=\"#泛型方法的格式：\" class=\"headerlink\" title=\"泛型方法的格式：\"></a>泛型方法的格式：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问权限]  &lt;泛型字母&gt;  返回类型  方法名([泛型字母 参数名称])  抛出的异常</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.generic.method;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestMyArrays &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tInteger[] arr = &#123;1,2,3,4&#125;;</span><br><span class=\"line\">\t\tString str = MyArrays.toString(arr);</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyArrays&#123;</span><br><span class=\"line\">\tpublic static &lt;T&gt; String toString(T[] arr)&#123;</span><br><span class=\"line\">\t\tString str = &quot;[&quot;;</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\tfor (T t : arr) &#123;</span><br><span class=\"line\">\t\t\tstr += t;</span><br><span class=\"line\">\t\t\tif(i!=arr.length-1)&#123;</span><br><span class=\"line\">\t\t\t\tstr += &quot;,&quot;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstr += &quot;]&quot;;</span><br><span class=\"line\">\t\treturn str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例：java-util-Arrays类\"><a href=\"#示例：java-util-Arrays类\" class=\"headerlink\" title=\"示例：java.util.Arrays类\"></a>示例：java.util.Arrays类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; List&lt;T&gt; asList(T... a)</span><br><span class=\"line\">注意：Arrays.asList(…) 方法返回的 List 集合既不是 ArrayList 实例，也不是 Vector 实例。 Arrays.asList(…)  返回值是一个固定长度的 List 集合</span><br><span class=\"line\">public static &lt;T&gt; T[] copyOf(T[] original, int newLength)</span><br><span class=\"line\">public static &lt;T&gt; T[] copyOfRange(T[] original, int from,int to)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//public static &lt;T&gt; List&lt;T&gt; asList(T... a)</span><br><span class=\"line\">\t\tList&lt;String&gt; list = Arrays.asList(&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;);</span><br><span class=\"line\">\t\tList&lt;Integer&gt; list2 = Arrays.asList(1,2,3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//public static &lt;T&gt; T[] copyOf(T[] original, int newLength)</span><br><span class=\"line\">\t\tString[] str = &#123;&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;&#125;;</span><br><span class=\"line\">\t\tString[] array = Arrays.copyOf(str, 10);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//public static &lt;T&gt; T[] copyOfRange(T[] original, int from,int to)</span><br><span class=\"line\">\t\tString[] as = Arrays.copyOfRange(array, 0, 3);</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(str));</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(array));</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(as));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>泛型方法可以是静态方法也可以是非静态方法</li>\n<li>泛型方法声明泛型时也可以指定上限</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.generic.method;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestMyArrays &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist.add(2);</span><br><span class=\"line\">\t\tlist.add(3);</span><br><span class=\"line\">\t\tlist.add(4);</span><br><span class=\"line\">\t\tlist.add(5);</span><br><span class=\"line\">\t\tlist.add(1);</span><br><span class=\"line\">\t\tMyArrays.sort(list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (Integer integer : list) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(integer);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyArrays&#123;</span><br><span class=\"line\">\tpublic static &lt;T extends Comparable&lt;T&gt;&gt; void sort(List&lt;T&gt; list)&#123;</span><br><span class=\"line\">\t\tfor(int i=0; i&lt;list.size()-1; i++)&#123;</span><br><span class=\"line\">\t\t\tfor(int j=0; j&lt;list.size()-i-1; j++)&#123;</span><br><span class=\"line\">\t\t\t\tComparable&lt;T&gt; c1 = (Comparable&lt;T&gt;)list.get(j);</span><br><span class=\"line\">\t\t\t\tif(c1.compareTo(list.get(j+1))&lt;0)&#123;</span><br><span class=\"line\">\t\t\t\t\tT temp = list.get(j);</span><br><span class=\"line\">\t\t\t\t\tlist.set(j, list.get(j+1));</span><br><span class=\"line\">\t\t\t\t\tlist.set(j+1, temp);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">/*\t\ttest(new String());</span><br><span class=\"line\">\t\ttest(new Object());*/</span><br><span class=\"line\">\t\ttest(new Person());</span><br><span class=\"line\">\t\ttest(new Man());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static &lt;T extends Person&gt; void test(T t)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/*public static &lt;T super Person&gt; void test(T t)&#123;</span><br><span class=\"line\">\t\t//错误</span><br><span class=\"line\">\t&#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Man extends Person&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T extends Closeable&gt; void free(T... t)&#123;</span><br><span class=\"line\">\tfor(T c : t)&#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tif(c!=null)&#123;</span><br><span class=\"line\">\t\t\t\tc.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-3-泛型通配符\"><a href=\"#12-3-泛型通配符\" class=\"headerlink\" title=\"12.3 泛型通配符\"></a>12.3 泛型通配符</h1><ul>\n<li>只能用于声明变量|形参上，一般是形参类型上，表示可以接收任意</li>\n<li>不能用在<ul>\n<li>1、创建对象，即new 后面</li>\n<li>2、声明泛型类、泛型接口，即class和interface</li>\n<li>3、声明泛型方法，即返回值类型前面&lt;&gt;中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1、匹配任意类型的通配符\"><a href=\"#1、匹配任意类型的通配符\" class=\"headerlink\" title=\"1、匹配任意类型的通配符\"></a>1、匹配任意类型的通配符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * ?  通配符，类型不确定</span><br><span class=\"line\"> * 1、用于声明变量|形参上</span><br><span class=\"line\"> * 不能用在</span><br><span class=\"line\"> * 1、创建对象</span><br><span class=\"line\"> * 2、声明泛型类、泛型接口、泛型方法</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestGenericWildcard &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tArrayList&lt;?&gt; list = new ArrayList();</span><br><span class=\"line\">\t\tlist = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tlist = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlist = Collections.list(new StringTokenizer(&quot;this is a test&quot;));</span><br><span class=\"line\">\t\t//但是此list不能添加任意类型的对象，除了null</span><br><span class=\"line\">\t\tlist.add(null);</span><br><span class=\"line\">//\t\tlist.add(&quot;&quot;);//因为?类似于Object,但不等价与Object，所以还是类型不确定，所以除了null可以给任意引用类型之外，其他类型对象都不能随便赋</span><br><span class=\"line\">\t\tObject obj = list.get(0);//可以调用get()方法并使用其返回值。返回值是一个未知的类型，但是我们知道，它总是一个Object</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttest(new ArrayList&lt;Object&gt;());</span><br><span class=\"line\">\t\ttest(new ArrayList&lt;String&gt;());</span><br><span class=\"line\">\t\ttest(new ArrayList&lt;Integer&gt;());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//编译错误：不能用在创建对象上，右边属于创建集合对象</span><br><span class=\"line\">//\t\tArrayList&lt;?&gt; list2 = new ArrayList&lt;?&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;?&gt; list)&#123;</span><br><span class=\"line\">\t\tlist.add(null);</span><br><span class=\"line\">//\t\tlist.add(&quot;&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//编译错误：不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?</span><br><span class=\"line\">//\tpublic static &lt;?&gt; void test(ArrayList&lt;?&gt; list)&#123;</span><br><span class=\"line\">//\t\t</span><br><span class=\"line\">//\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译错误：不能用在泛型类的声明上</span><br><span class=\"line\">/*class GenericTypeClass&lt;?&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、受限泛型：上限、下限\"><a href=\"#2、受限泛型：上限、下限\" class=\"headerlink\" title=\"2、受限泛型：上限、下限\"></a>2、受限泛型：上限、下限</h2><h3 id=\"（1）通配符指定上限\"><a href=\"#（1）通配符指定上限\" class=\"headerlink\" title=\"（1）通配符指定上限\"></a>（1）通配符指定上限</h3><p>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;= ，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? extends Person</span><br><span class=\"line\">? extends Comparable</span><br></pre></td></tr></table></figure>\n<h4 id=\"满足以下规则\"><a href=\"#满足以下规则\" class=\"headerlink\" title=\"满足以下规则\"></a>满足以下规则</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Fruit&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;Apple&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;FujiApple&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;? extends Apple&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;?&gt; 不满足 List&lt;? extends Fruit&gt; 因为List&lt;?&gt; 等价于List&lt;? extends Object&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tArrayList&lt;Fruit&gt; list1= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list1);</span><br><span class=\"line\">\t\tArrayList&lt;Apple&gt; list2= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list2);</span><br><span class=\"line\">\t\tArrayList&lt;FujiApple&gt; list3= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">\t\ttest(list3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrayList&lt;? extends Fruit&gt; list= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrayList&lt;? extends Apple&gt; list4= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">\t\ttest(list4);</span><br><span class=\"line\">\t\tArrayList&lt;? extends Apple&gt; list5= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list5);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//编译错误，因为ArrayList&lt;?&gt;类似于ArrayList&lt;? extends Object&gt;</span><br><span class=\"line\">\t\t//而且list6有可能赋值new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t//而且list6有可能赋值new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\tArrayList&lt;?&gt; list6 = new ArrayList();</span><br><span class=\"line\">//\t\ttest(list6);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;? extends Fruit&gt; list)&#123;</span><br></pre></td></tr></table></figure>\n<p>如果使用“？ extends  类型”接收泛型对象的时候，则不能设置被泛型指定的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void test(ArrayList&lt;? extends Fruit&gt; list)&#123;</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * 通通编译错误</span><br><span class=\"line\">\t\t * 只能接收使用，不能修改</span><br><span class=\"line\">\t\t * 因为不知道list最终传入的到底是什么样的集合</span><br><span class=\"line\">\t\tlist.add(new Fruit());</span><br><span class=\"line\">\t\tlist.add(new Apple());</span><br><span class=\"line\">\t\tlist.add(new Peach());*/</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//此处只能是Fruit或以上，不能是Apple等子类，因为可能传入的是ArrayList&lt;Fruit&gt;或ArrayList&lt;Peach&gt;</span><br><span class=\"line\">\t\tfor(Fruit f:list)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(f);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//Iterator只能使用Iterator&lt;?&gt;或Iterator&lt;? extends Fruit&gt;</span><br><span class=\"line\">\t\tIterator&lt;? extends Fruit&gt; iter = list.iterator();</span><br><span class=\"line\">          // Iterator&lt;Fruit&gt; iter = list.iterator();//编译错误，因为泛型不支持多态</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）通配符指定下限\"><a href=\"#（2）通配符指定下限\" class=\"headerlink\" title=\"（2）通配符指定下限\"></a>（2）通配符指定下限</h3><p>下限super：使用时指定的类型不能小于操作的类，即&gt;=，如<br>? super Apple<br>存在以下规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Apple&gt;  满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;Fruit&gt;  满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;Object&gt;  满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;? super Apple&gt; 满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;? super Fruit&gt; 满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;?&gt; 不满足 ArrayList&lt;? super Apple&gt;因为List&lt;?&gt; 等价于List&lt;? extends Object&gt;，那么可能ArrayList&lt;String&gt;</span><br><span class=\"line\">ArrayList&lt;? super FujiApple&gt; 不满足 ArrayList&lt;? super Apple&gt; 因为可能ArrayList&lt; FujiApple&gt;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tArrayList&lt;Apple&gt; list1= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list1);</span><br><span class=\"line\">\t\tArrayList&lt;Fruit&gt; list2= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list2);</span><br><span class=\"line\">\t\tArrayList&lt;Object&gt; list3= new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\ttest(list3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrayList&lt;? super Apple&gt; list4= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list4);</span><br><span class=\"line\">\t\tArrayList&lt;? super Fruit&gt; list5= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list5);</span><br><span class=\"line\">\t\tArrayList&lt;? super Fruit&gt; list6= new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\ttest(list6);</span><br><span class=\"line\">\t//编译错误</span><br><span class=\"line\">\t/*\tArrayList&lt;? super FujiApple&gt; list= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">\t\ttest(list);*/</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\t//编译错误，因为FujiApple是Apple的子类</span><br><span class=\"line\">//\t\tArrayList&lt;? super Apple&gt; list7= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">//\t\ttest(list7);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//编译错误，因为ArrayList&lt;?&gt;类似于ArrayList&lt;? extends Object&gt;</span><br><span class=\"line\">\t\t//而且list8有可能赋值new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tArrayList&lt;?&gt; list8 = new ArrayList();</span><br><span class=\"line\">//\t\ttest(list8);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;? super Apple&gt; list)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果使用“？ super类型”接收泛型对象的时候，则能够添加数据，但是不能添加父对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void test(ArrayList&lt;? super Apple&gt; list)&#123;</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * 通通编译错误</span><br><span class=\"line\">\t\t * 只能接收本类或子类对象</span><br><span class=\"line\">\t\t * 因为不知道list最终传入的到底是什么样的集合，如果传入的是ArrayList&lt;Apple&gt;，那添加Fruit对象就有问题了*/</span><br><span class=\"line\">\t\tlist.add(new FujiApple());</span><br><span class=\"line\">\t\tlist.add(new Apple());</span><br><span class=\"line\">//\t\tlist.add(new Fruit());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//此处只能是Object,不能是Apple,Fruit，因为可能传入的是ArrayList&lt;Object&gt;</span><br><span class=\"line\">\t\tfor(Object a:list)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-4-泛型嵌套：由外到内分析\"><a href=\"#12-4-泛型嵌套：由外到内分析\" class=\"headerlink\" title=\"12.4 泛型嵌套：由外到内分析\"></a>12.4 泛型嵌套：由外到内分析</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tHashMap&lt;String,ArrayList&lt;Citizen&gt;&gt; map = new HashMap&lt;String,ArrayList&lt;Citizen&gt;&gt;();</span><br><span class=\"line\">\t\tArrayList&lt;Citizen&gt; list = new ArrayList&lt;Citizen&gt;();</span><br><span class=\"line\">\t\tlist.add(new Citizen(&quot;刘恺威&quot;));</span><br><span class=\"line\">\t\tlist.add(new Citizen(&quot;杨幂&quot;));</span><br><span class=\"line\">\t\tlist.add(new Citizen(&quot;小糯米&quot;));</span><br><span class=\"line\">\t\tmap.put(&quot;刘恺威&quot;, list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSet&lt;Entry&lt;String, ArrayList&lt;Citizen&gt;&gt;&gt; entrySet = map.entrySet();</span><br><span class=\"line\">\t\tIterator&lt;Entry&lt;String, ArrayList&lt;Citizen&gt;&gt;&gt; iterator = entrySet.iterator();</span><br><span class=\"line\">\t\twhile(iterator.hasNext())&#123;</span><br><span class=\"line\">\t\t\tEntry&lt;String, ArrayList&lt;Citizen&gt;&gt; next = iterator.next();</span><br><span class=\"line\">\t\t\tString key = next.getKey();</span><br><span class=\"line\">\t\t\tArrayList&lt;Citizen&gt; value = next.getValue();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;户主：&quot;+key);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;家庭成员：&quot;+value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-5-泛型的特殊点\"><a href=\"#12-5-泛型的特殊点\" class=\"headerlink\" title=\"12.5 泛型的特殊点\"></a>12.5 泛型的特殊点</h1><h2 id=\"1、泛型没有多态\"><a href=\"#1、泛型没有多态\" class=\"headerlink\" title=\"1、泛型没有多态\"></a>1、泛型没有多态</h2><p>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<b>并不是G<a>的子类型！<br>比如：</a></b></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String是Object的子类，但是List&lt;String &gt;并不是List&lt;Object&gt;的子类。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603113046.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tFruit f = new Apple();//多态</span><br><span class=\"line\">\t\t//泛型没有多态</span><br><span class=\"line\">//\t\tArrayList&lt;Fruit&gt; list = new ArrayList&lt;Apple&gt;();//泛型没有多态</span><br><span class=\"line\">\t\tArrayList&lt;? extends Fruit&gt; list = new ArrayList&lt;Apple&gt;();//使用通配符可以</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、没有泛型数组\"><a href=\"#2、没有泛型数组\" class=\"headerlink\" title=\"2、没有泛型数组\"></a>2、没有泛型数组</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestGenericPolymophism &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//泛型没有数组</span><br><span class=\"line\">//\t\tTiger&lt;String&gt;[] as = new Tiger&lt;String&gt;[];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Tiger&lt;T&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ArrayList源代码</span><br><span class=\"line\">public class ArrayList&lt;E&gt;  。。。&#123;</span><br><span class=\"line\">    transient Object[] elementData;</span><br><span class=\"line\">    public boolean add(E e) &#123;</span><br><span class=\"line\">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">        elementData[size++] = e;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    public E get(int index) &#123;</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        return elementData(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    E elementData(int index) &#123;</span><br><span class=\"line\">        return (E) elementData[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、jdk1-7简化泛型\"><a href=\"#3、jdk1-7简化泛型\" class=\"headerlink\" title=\"3、jdk1.7简化泛型\"></a>3、jdk1.7简化泛型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//jdk1.7，泛型的简化操作</span><br><span class=\"line\">\tArrayList&lt;Fruit&gt; flist = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、不能在try-catch中使用泛型定义\"><a href=\"#4、不能在try-catch中使用泛型定义\" class=\"headerlink\" title=\"4、不能在try-catch中使用泛型定义\"></a>4、不能在try-catch中使用泛型定义</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try&#123;</span><br><span class=\"line\">&#125;catch(T t)&#123;&#125;\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-6-Collections工具类\"><a href=\"#12-6-Collections工具类\" class=\"headerlink\" title=\"12.6 Collections工具类\"></a>12.6 Collections工具类</h1><ul>\n<li>参考操作数组的工具类：Arrays</li>\n<li>Collections 是一个操作 Set、List 和 Map 等集合的工具类</li>\n<li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</li>\n</ul>\n<ul>\n<li>排序操作：（均为static方法）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c,T... elements)</span><br><span class=\"line\">将所有指定元素添加到指定 collection 中。</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list,T key)</span><br><span class=\"line\">在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象</span><br><span class=\"line\">，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; int binarySearch(List&lt;? extends T&gt; list,T key,Comparator&lt;? super T&gt; c)</span><br><span class=\"line\">在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，</span><br><span class=\"line\">而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T max(Collection&lt;? extends T&gt; coll)</span><br><span class=\"line\">在coll集合中找出最大的元素，集合中的对象必须是T或T的子类对象，而且支持自然排序</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; T max(Collection&lt;? extends T&gt; coll,Comparator&lt;? super T&gt; comp)</span><br><span class=\"line\">在coll集合中找出最大的元素，集合中的对象必须是T或T的子类对象，</span><br><span class=\"line\"></span><br><span class=\"line\">public static void reverse</span><br><span class=\"line\">反转指定列表List中元素的顺序。</span><br><span class=\"line\"></span><br><span class=\"line\">public static void shuffle(List&lt;?&gt; list) List</span><br><span class=\"line\">集合元素进行随机排序，类似洗牌</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</span><br><span class=\"line\">根据元素的自然顺序对指定 List 集合元素按升序排序</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super T&gt; c)</span><br><span class=\"line\">根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span><br><span class=\"line\"></span><br><span class=\"line\">public static void swap(List&lt;?&gt; list,int i,int j)</span><br><span class=\"line\">将指定 list 集合中的 i 处元素和 j 处元素进行交换</span><br><span class=\"line\"></span><br><span class=\"line\">public static int frequency(Collection&lt;?&gt; c,Object o)</span><br><span class=\"line\">返回指定集合中指定元素的出现次数</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; void copy(List&lt;? super T&gt; dest,List&lt;? extends T&gt; src)</span><br><span class=\"line\">将src中的内容复制到dest中</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; boolean replaceAll(List&lt;T&gt; list，T oldVal，T newVal)</span><br><span class=\"line\">使用新值替换 List 对象的所有旧值</span><br><span class=\"line\"></span><br><span class=\"line\">Collections 类中提供了多个 synchronizedXxx() 方法，</span><br><span class=\"line\">该方法可使将指定集合包装成线程同步的集合</span><br><span class=\"line\">，从而可以解决多线程并发访问集合时的线程安全问题</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"11. JavaSE-集合","url":"http://yoursite.com/2017/01/10/11. JavaSE-集合/","content":"<h1 id=\"11-1-数组与集合\"><a href=\"#11-1-数组与集合\" class=\"headerlink\" title=\"11.1 数组与集合\"></a>11.1 数组与集合</h1><h2 id=\"11-1-1数组\"><a href=\"#11-1-1数组\" class=\"headerlink\" title=\"11.1.1数组\"></a>11.1.1数组</h2><ul>\n<li>逻辑结构：线性的</li>\n<li>物理结构：顺序的存储结构</li>\n<li>申请内存：一次申请一大段连续的空间，一旦申请到了，内存就固定了。</li>\n<li>存储特点：所有数据存储在这个连续的空间中，数组中的每一个元素都是一个具体的数据（或对象），所有数据都紧密排布，不能有间隔。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603084709.png\" alt></p>\n<ul>\n<li>操作<ul>\n<li>查询：每一个元素都有一个数值下标，可以通过下标瞬间定位到某个元素</li>\n<li>增加：</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>从尾部增加：数组名[total++]=新元素</li>\n<li>从其他位置插入：先把index位置开始所有元素后移，然后数组名[index]=新元素</li>\n</ul>\n</blockquote>\n<ul>\n<li><ul>\n<li>删除：先把index后面的元素前移，然后数组名[total–]=null</li>\n<li>改：直接数组名[index]=新元素</li>\n</ul>\n</li>\n<li><p>优缺点</p>\n<ul>\n<li>优点：查询效率高</li>\n<li>缺点：添加/删除效率低，因为都涉及到移动元素；无法直接获取有效元素的个数，需要total来辅助</li>\n</ul>\n</li>\n<li><p>使用范围：查询操作远多于插入和删除操作的场景</p>\n</li>\n</ul>\n<h3 id=\"11-1-2集合\"><a href=\"#11-1-2集合\" class=\"headerlink\" title=\"11.1.2集合\"></a>11.1.2集合</h3><p>为了可以满足用户数据更多种的逻辑关系，而设计的一系列的不同于数组的可变的聚合的抽象数据类型。<br>总的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、只能存对象</span><br><span class=\"line\">2、容量可以自动调节</span><br><span class=\"line\">3、可以直接获取有效元素的个数：size()</span><br></pre></td></tr></table></figure>\n<h4 id=\"1、集合的几个常用接口\"><a href=\"#1、集合的几个常用接口\" class=\"headerlink\" title=\"1、集合的几个常用接口\"></a>1、集合的几个常用接口</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603101859.png\" alt></p>\n<h4 id=\"2、详细描述\"><a href=\"#2、详细描述\" class=\"headerlink\" title=\"2、详细描述\"></a>2、详细描述</h4><ul>\n<li>Collection 层次结构中的根接口。Collection 表示一组对象，这些对象也称为 collection 的元素。一些 collection 允许有重复的元素，而另一些则不允许。一些 collection 是有序的，而另一些则是无序的。JDK 不提供此接口的任何直接实现：它提供更具体的子接口（如 Set 和 List）实现。此接口通常用来传递 collection，并在需要最大普遍性的地方操作这些 collection。 <ul>\n<li>List：有序的 collection（也称为序列）。此接口的用户可以对列表中每个元素的插入位置进行精确地控制。用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。</li>\n<li>Set：一个不包含重复元素的 collection。更确切地讲，set 不包含满足 e1.equals(e2) 的元素对 e1 和 e2，并且最多包含一个 null 元素。正如其名称所暗示的，此接口模仿了数学上的 set 抽象。 </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>SortedSet进一步提供关于元素的总体排序 的 Set。这些元素使用其自然顺序进行排序，或者根据通常在创建有序 set 时提供的 Comparator进行排序。该 set 的迭代器将按元素升序遍历 set。提供了一些附加的操作来利用这种排序。（此接口是 SortedMap 的 set 对应接口）。 </li>\n</ul>\n</blockquote>\n<ul>\n<li>Map：将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值。 Map 接口提供三种collection 视图，允许以键集、值集或键-值映射关系集的形式查看某个映射的内容。映射顺序 定义为迭代器在映射的 collection 视图上返回其元素的顺序。某些映射实现可明确保证其顺序，如 TreeMap 类；另一些映射实现则不保证顺序，如 HashMap 类。<ul>\n<li>SortedMap进一步提供关于键的总体排序 的 Map。该映射是根据其键的自然顺序进行排序的，或者根据通常在创建有序映射时提供的 Comparator 进行排序。对有序映射的 collection 视图（由 entrySet、keySet 和 values 方法返回）进行迭代时，此顺序就会反映出来。要采用此排序方式，还需要提供一些其他操作（此接口是 SortedSet 的对应映射）。 </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、概况总结\"><a href=\"#3、概况总结\" class=\"headerlink\" title=\"3、概况总结\"></a>3、概况总结</h4><ul>\n<li>Collection接口：定义了存取一组对象的方法，其子接口Set和List分别定义了存储方式<ul>\n<li>Set：中的数据对象没有顺序且不可以重复</li>\n<li>List：中的数据对象有顺序且可以重复</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Map接口定义了存储“键（key）-值（value）映射对”的方法</li>\n</ul>\n<h1 id=\"11-2-Collection接口\"><a href=\"#11-2-Collection接口\" class=\"headerlink\" title=\"11.2 Collection接口\"></a>11.2 Collection接口</h1><p>Collection 层次结构 中的根接口。<br>常用方法：</p>\n<h2 id=\"1、添加\"><a href=\"#1、添加\" class=\"headerlink\" title=\"1、添加\"></a>1、添加</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）add(Object obj)</span><br><span class=\"line\">（2）addAll(Collection coll)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、获取有效元素的个数\"><a href=\"#2、获取有效元素的个数\" class=\"headerlink\" title=\"2、获取有效元素的个数\"></a>2、获取有效元素的个数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int size()</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、清空集合\"><a href=\"#3、清空集合\" class=\"headerlink\" title=\"3、清空集合\"></a>3、清空集合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void clear();</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、是否包含某个元素\"><a href=\"#4、是否包含某个元素\" class=\"headerlink\" title=\"4、是否包含某个元素\"></a>4、是否包含某个元素</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）boolean contains(Object obj)：是通过元素的equals方法来判断是否是同一个对象</span><br><span class=\"line\"></span><br><span class=\"line\">coll.add(&quot;柴林燕&quot;);</span><br><span class=\"line\">coll.contains(&quot;柴林燕&quot;)  true</span><br><span class=\"line\"></span><br><span class=\"line\">本质上是拿集合中的元素与”柴林燕”比较，如果存在就会出现&quot;柴林燕&quot;.equals(&quot;柴林燕&quot;)所以返回true，</span><br><span class=\"line\">因为String类对equals进行了重写，表示比较的字符串的内容</span><br><span class=\"line\"></span><br><span class=\"line\">coll.add(new Student(&quot;柴林燕&quot;))</span><br><span class=\"line\">coll.contains(new Student(&quot;柴林燕&quot;)) false</span><br><span class=\"line\">本质上调用new Student(&quot;柴林燕&quot;).equals(new Student(&quot;柴林燕&quot;)) </span><br><span class=\"line\">用的是Student类中equals，而这个没有重写equals，用的是父类Object的equals，</span><br><span class=\"line\">默认比较的是地址值和“==”等价，所以返回false</span><br><span class=\"line\"> </span><br><span class=\"line\">（2）boolean containsAll(Collection c)也是调用元素的equals方法来比较的。</span><br><span class=\"line\">拿两个集合的元素挨个比较。</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、是否空集合\"><a href=\"#5、是否空集合\" class=\"headerlink\" title=\"5、是否空集合\"></a>5、是否空集合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isEmpty()</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、删除\"><a href=\"#6、删除\" class=\"headerlink\" title=\"6、删除\"></a>6、删除</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1） boolean remove(Object obj) 通过元素的equals方法判断是否是要删除的那个元素</span><br><span class=\"line\"> \t只会删除找到的第一个元素</span><br><span class=\"line\">    只是把元素从集合删除，内存中还是存在的。</span><br><span class=\"line\">（2）boolean removeAll(Collection coll)</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、取两个集合的交集\"><a href=\"#7、取两个集合的交集\" class=\"headerlink\" title=\"7、取两个集合的交集\"></a>7、取两个集合的交集</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean retainAll(Collection c)</span><br><span class=\"line\"></span><br><span class=\"line\">把交集的结果存在当前集合中，不影响c</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、转成对象数组\"><a href=\"#8、转成对象数组\" class=\"headerlink\" title=\"8、转成对象数组\"></a>8、转成对象数组</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] toArray()</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-3-集合的遍历\"><a href=\"#11-3-集合的遍历\" class=\"headerlink\" title=\"11.3 集合的遍历\"></a>11.3 集合的遍历</h1><h2 id=\"11-3-1-foreach迭代\"><a href=\"#11-3-1-foreach迭代\" class=\"headerlink\" title=\"11.3.1 foreach迭代\"></a>11.3.1 foreach迭代</h2><p>Java 5 提供了 foreach 循环迭代访问 Collection<br>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(元素的类型  迭代变量 : 数组/集合名称)&#123;</span><br><span class=\"line\">\t  //迭代变量代表的是每一个元素</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collection coll = new ArrayList();</span><br><span class=\"line\">coll.add(1);</span><br><span class=\"line\">coll.add(2);</span><br><span class=\"line\">coll.add(3);</span><br><span class=\"line\">coll.add(4);</span><br><span class=\"line\"></span><br><span class=\"line\">for(Object obj : coll)&#123;</span><br><span class=\"line\">System.out.println(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foreach循环4次，obj每一次代表一个元素</span><br><span class=\"line\">注意：</span><br><span class=\"line\">foreach遍历只适用于查看/查找集合中的元素，不能在遍历集合时有任何影响集合中元素个数或数据的操作，否则操作结果将不确定。</span><br><span class=\"line\">for(Object obj : coll)&#123;</span><br><span class=\"line\">coll.remove(obj);//错误</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-3-2-Iterator迭代\"><a href=\"#11-3-2-Iterator迭代\" class=\"headerlink\" title=\"11.3.2 Iterator迭代\"></a>11.3.2 Iterator迭代</h2><h3 id=\"1、迭代器概述\"><a href=\"#1、迭代器概述\" class=\"headerlink\" title=\"1、迭代器概述\"></a>1、迭代器概述</h3><ul>\n<li>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</li>\n<li>因为Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</li>\n<li>仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</li>\n<li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603102703.png\" alt></p>\n<ul>\n<li>在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常。</li>\n<li>如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator iter = coll.iterator();//多态引用</span><br><span class=\"line\">while(iter.hasNext())&#123;</span><br><span class=\"line\">\tObject obj = iter.next();</span><br><span class=\"line\">\tSystem.out.println(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Iterator iter = coll.iterator();//回到起点</span><br><span class=\"line\">while(iter.hasNext())&#123;</span><br><span class=\"line\">\tObject obj = iter.next();</span><br><span class=\"line\">\tif(obj.equals(&quot;李四&quot;))&#123;</span><br><span class=\"line\">\t\titer.remove();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法</p>\n<h3 id=\"2、查看Iterator迭代器源码\"><a href=\"#2、查看Iterator迭代器源码\" class=\"headerlink\" title=\"2、查看Iterator迭代器源码\"></a>2、查看Iterator迭代器源码</h3><ul>\n<li>概念：迭代器（iterator）有时又称为游标（cursor），提供一种方法访问一个容器（container）对象中各个元素，而又不需要暴露该对象的内部细节。</li>\n<li>作用：是为容器遍历而生，用以方便的实现对容器内元素的遍历操作。类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”，售票员关注公交车上的每个乘客。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603102930.png\" alt></p>\n<ul>\n<li>走到每个座位之前，看看是否有乘客，如果有检查该乘客，如果该乘客未购票，可以请他下车，也只能请刚刚检查过的乘客下车。</li>\n<li>每一类集合都有自己的迭代器，迭代器是为对应的集合服务的，因此迭代器都是作为对应集合的内部类定义的。</li>\n</ul>\n<p>示例：只摘取关键代码ArrayList的内部迭代器Itr</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class=\"line\">        int cursor;       // index of next element to return</span><br><span class=\"line\">        int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class=\"line\"></span><br><span class=\"line\">        public boolean hasNext() &#123;</span><br><span class=\"line\">            return cursor != size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public E next() &#123;</span><br><span class=\"line\">            int i = cursor;</span><br><span class=\"line\">            cursor = i + 1;</span><br><span class=\"line\">            return (E) elementData[lastRet = i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void remove() &#123;</span><br><span class=\"line\">            if (lastRet &lt; 0)</span><br><span class=\"line\">                throw new IllegalStateException();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                ArrayList.this.remove(lastRet);</span><br><span class=\"line\">                cursor = lastRet;</span><br><span class=\"line\">                lastRet = -1;</span><br><span class=\"line\">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">                throw new ConcurrentModificationException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    public E remove(int index) &#123;</span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        int numMoved = size - index - 1;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class=\"line\">                             numMoved);</span><br><span class=\"line\">        elementData[--size] = null; // clear to let GC do its work</span><br><span class=\"line\"></span><br><span class=\"line\">        return oldValue;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-4-List接口\"><a href=\"#11-4-List接口\" class=\"headerlink\" title=\"11.4 List接口\"></a>11.4 List接口</h1><ul>\n<li>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</li>\n<li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li>\n<li>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</li>\n</ul>\n<h2 id=\"11-4-1-List接口的方法\"><a href=\"#11-4-1-List接口的方法\" class=\"headerlink\" title=\"11.4.1 List接口的方法\"></a>11.4.1 List接口的方法</h2><ul>\n<li>List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法<ul>\n<li>void add(int index, Object ele)</li>\n<li>boolean addAll(int index, Collection eles)</li>\n<li>Object get(int index)</li>\n<li>int indexOf(Object obj)</li>\n<li>int lastIndexOf(Object obj)</li>\n<li>Object remove(int index)</li>\n<li>Object set(int index, Object ele)</li>\n<li>List subList(int fromIndex, int toIndex)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-4-2-List接口的迭代器ListIterator\"><a href=\"#11-4-2-List接口的迭代器ListIterator\" class=\"headerlink\" title=\"11.4.2 List接口的迭代器ListIterator\"></a>11.4.2 List接口的迭代器ListIterator</h2><p>除了foreach和Iterator迭代器之外，List 额外提供了一个 listIterator() 方法，该方法返回一个 ListIterator 对象， ListIterator 接口继承了 Iterator 接口，提供了专门操作 List 的方法：</p>\n<ul>\n<li>void add()</li>\n<li>void set(Object obj)</li>\n<li><p>void remove()</p>\n</li>\n<li><p>boolean hasPrevious()</p>\n</li>\n<li>Object previous()</li>\n<li><p>int previousIndex()</p>\n</li>\n<li><p>boolean hasNext()</p>\n</li>\n<li>Object next()</li>\n<li>int nextIndex()</li>\n</ul>\n<h2 id=\"11-4-3-List的实现类\"><a href=\"#11-4-3-List的实现类\" class=\"headerlink\" title=\"11.4.3 List的实现类\"></a>11.4.3 List的实现类</h2><ul>\n<li>ArrayList：底层实现是数组，线程不安全，效率高，所以，查询块，修改、插入、删除慢</li>\n<li>LinkedList：底层实现是链表，线程不安全，效率高。所以，查询慢，修改、插入、删除快</li>\n<li>Vector：底层实现是数组，线程安全，效率低。但是即使为保证 List 集合线程安全，也不推荐使用Vector。</li>\n</ul>\n<p>ArrayList的JDK1.8之前与之后的实现区别？</p>\n<ul>\n<li>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组</li>\n<li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元素时再创建一个始容量为10的数组</li>\n</ul>\n<h3 id=\"1、ArrayList与Vector的区别？\"><a href=\"#1、ArrayList与Vector的区别？\" class=\"headerlink\" title=\"1、ArrayList与Vector的区别？\"></a>1、ArrayList与Vector的区别？</h3><ul>\n<li>底层都是数组，Vector默认初始容量是10，ArrayList看版本.</li>\n<li>ArrayList扩容增加原来的50%，Vector扩容增加原来的1倍。</li>\n<li>ArrayList线程不安全，效率高，Vector线程安全，效率低。</li>\n<li>Vector因为版本古老，支持Enumeration 迭代器。但是该迭代器不支持快速失败。而Iterator和ListIterator迭代器支持快速失败。如果在迭代器创建后的任意时间从结构上修改了向量（通过迭代器自身的 remove 或 add 方法之外的任何其他方式），则迭代器将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就完全失败，而不是冒着在将来不确定的时间任意发生不确定行为的风险。<br>自学：Enumeration 迭代器的使用</li>\n</ul>\n<h3 id=\"2、LinkedList的特点\"><a href=\"#2、LinkedList的特点\" class=\"headerlink\" title=\"2、LinkedList的特点\"></a>2、LinkedList的特点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkedList：双向链表，除了保存数据，还定义了两个变量：</span><br><span class=\"line\">prev变量记录前一个元素的位置</span><br><span class=\"line\">next变量记录下一个元素的位置</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604002932.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604003005.png\" alt></p>\n<p>例如：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604003031.png\" alt></p>\n<p><img src=\"http://note.youdao.com/yws/res/6876/B1A9D580AE5F46BFBDEE4663E6D0D869\" alt=\"image\"></p>\n<p>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高。新增方法：</p>\n<ul>\n<li>void addFirst(Object obj)</li>\n<li>void addLast(Object obj)    </li>\n<li>Object getFirst()</li>\n<li>Object getLast()</li>\n<li>Object removeFirst()</li>\n<li>Object removeLast()</li>\n</ul>\n<h1 id=\"11-5-Set接口\"><a href=\"#11-5-Set接口\" class=\"headerlink\" title=\"11.5 Set接口\"></a>11.5 Set接口</h1><ul>\n<li>Set接口是Collection的子接口，set接口没有提供额外的方法。</li>\n<li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。</li>\n<li>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals 方法。因此存放到Set集合中的元素一定要注意equals方法的重写。  </li>\n</ul>\n<p>Set的常用实现类有：HashSet、TreeSet、LinkedHashSet。</p>\n<h2 id=\"11-5-1-HashSet\"><a href=\"#11-5-1-HashSet\" class=\"headerlink\" title=\"11.5.1 HashSet\"></a>11.5.1 HashSet</h2><h3 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h3><ul>\n<li>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</li>\n<li>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。</li>\n<li>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。<ul>\n<li>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象在 HashSet 中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好）</li>\n<li>如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败，如果为false，那么会保存该元素，但是该数组的位置已经有元素了，那么会通过链表的方式继续链接。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>HashSet 具有以下特点：<ul>\n<li>不能保证元素的排列顺序</li>\n<li>HashSet 不是线程安全的</li>\n<li>集合元素可以有一个是 null</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603104425.png\" alt></p>\n<p>底层也是数组，初始容量为16，当如果使用率超过0.75，（16*0.75=12）就会扩大容量为原来的2倍。（16扩容为32，依次为64,128….等）</p>\n<p><strong>结论：存放到Set集合中的元素一定要注意equals和hashcode方法的重写。</strong></p>\n<h3 id=\"2、hashCode和equals方法\"><a href=\"#2、hashCode和equals方法\" class=\"headerlink\" title=\"2、hashCode和equals方法\"></a>2、hashCode和equals方法</h3><p>重写equals()方法的原则：</p>\n<ul>\n<li>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</li>\n<li>自反性：x.equals(x)必须返回是“true”。</li>\n<li>类推性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</li>\n<li>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</li>\n<li>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。</li>\n<li>重写 hashCode() 方法的基本原则</li>\n<li>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值</li>\n<li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode() 方法的返回值也应相等</li>\n<li>对象中用作 equals() 方法比较的属性Field，都应该用来计算 hashCode 值</li>\n</ul>\n<h2 id=\"11-5-2-LinkedHashSet\"><a href=\"#11-5-2-LinkedHashSet\" class=\"headerlink\" title=\"11.5.2 LinkedHashSet\"></a>11.5.2 LinkedHashSet</h2><ul>\n<li>LinkedHashSet 是 HashSet 的子类</li>\n<li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</li>\n<li>LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</li>\n<li>LinkedHashSet 不允许集合元素重复。</li>\n</ul>\n<h2 id=\"11-5-3-TreeSet\"><a href=\"#11-5-3-TreeSet\" class=\"headerlink\" title=\"11.5.3 TreeSet\"></a>11.5.3 TreeSet</h2><ul>\n<li>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</li>\n<li>TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</li>\n</ul>\n<h3 id=\"1、自然排序\"><a href=\"#1、自然排序\" class=\"headerlink\" title=\"1、自然排序\"></a>1、自然排序</h3><ul>\n<li>TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序排列，如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。</li>\n<li>向 TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。</li>\n<li>因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是同一个类的对象</li>\n<li>对于 TreeSet 集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过 compareTo(Object obj) 方法比较返回值</li>\n<li>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过 equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。否则让人难以理解。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Comparable 的典型实现：</span><br><span class=\"line\">BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</span><br><span class=\"line\">Character：按字符的 unicode值来进行比较</span><br><span class=\"line\">Boolean：true 对应的包装类实例大于 false 对应的包装类实例</span><br><span class=\"line\">String：按字符串中字符的 unicode 值进行比较</span><br><span class=\"line\">Date、Time：后边的时间、日期比前面的时间、日期大</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、定制排序\"><a href=\"#2、定制排序\" class=\"headerlink\" title=\"2、定制排序\"></a>2、定制排序</h3><ul>\n<li>TreeSet的自然排序是根据集合元素的大小，进行元素升序排列。如果需要定制排序，比如降序排列，可通过Comparator接口的帮助。需要重写compare(T o1,T o2)方法。利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li>\n<li>要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。</li>\n<li>此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异常。</li>\n<li>使用定制排序判断两个元素相等的标准是：通过Comparator比较两个元素返回了0。</li>\n<li>当使用具有与 equals 不一致的强行排序能力的 Comparator 对有序 set（或有序映射）进行排序时，应该小心谨慎。假定一个带显式 Comparator c 的有序 set（或有序映射）与从 set S 中抽取出来的元素（或键）一起使用。如果 c 强行对 S 进行的排序是与 equals 不一致的，那么有序 set（或有序映射）将是行为“怪异的”。</li>\n</ul>\n<h3 id=\"3、结论\"><a href=\"#3、结论\" class=\"headerlink\" title=\"3、结论\"></a>3、结论</h3><ul>\n<li>放到TreeSet集合中的元素必须是同一个类型的元素</li>\n<li>放到TreeSet集合中的元素必须实现Comparable接口，重写compareTo(Object obj)方法，并且需要使得equals方法的与compareTo方法结果一直，即如果两个对象通过 equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。</li>\n<li>TreeSet的自然排序是根据集合元素的大小，进行元素升序排列。如果需要定制排序，比如降序排列，可以将实现Comparator接口的实例作为形参传递给TreeSet的构造器，那么添加元素时，将调用compare(T o1,T o2)方法作为排序依据。同时也应该注意equals方法与compare(T o1,T o2)方法的结果一致。</li>\n</ul>\n<h1 id=\"11-6-Collection集合框架集\"><a href=\"#11-6-Collection集合框架集\" class=\"headerlink\" title=\"11.6 Collection集合框架集\"></a>11.6 Collection集合框架集</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603104836.png\" alt></p>\n<h1 id=\"11-7-Map\"><a href=\"#11-7-Map\" class=\"headerlink\" title=\"11.7 Map\"></a>11.7 Map</h1><h2 id=\"11-7-1-Map概述\"><a href=\"#11-7-1-Map概述\" class=\"headerlink\" title=\"11.7.1 Map概述\"></a>11.7.1 Map概述</h2><ul>\n<li>Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value</li>\n<li>Map 中的 key 和 value 都可以是任何引用类型的数据</li>\n<li>Map 中的 key 不允许重复</li>\n<li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value。</li>\n<li>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。</li>\n<li>HashMap是 Map 接口使用频率最高的实现类。</li>\n<li>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</li>\n</ul>\n<h3 id=\"Map的常用方法：\"><a href=\"#Map的常用方法：\" class=\"headerlink\" title=\"Map的常用方法：\"></a>Map的常用方法：</h3><h4 id=\"1、添加、删除操作：\"><a href=\"#1、添加、删除操作：\" class=\"headerlink\" title=\"1、添加、删除操作：\"></a>1、添加、删除操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object put(Object key,Object value)</span><br><span class=\"line\">Object remove(Object key)</span><br><span class=\"line\">void putAll(Map t)</span><br><span class=\"line\">void clear()</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、元素查询的操作：\"><a href=\"#2、元素查询的操作：\" class=\"headerlink\" title=\"2、元素查询的操作：\"></a>2、元素查询的操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object get(Object key)</span><br><span class=\"line\">boolean containsKey(Object key)</span><br><span class=\"line\">boolean containsValue(Object value)</span><br><span class=\"line\">int size()</span><br><span class=\"line\">boolean isEmpty()</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、元视图操作的方法：\"><a href=\"#3、元视图操作的方法：\" class=\"headerlink\" title=\"3、元视图操作的方法：\"></a>3、元视图操作的方法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set keySet()</span><br><span class=\"line\">Collection values()</span><br><span class=\"line\">Set entrySet()</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-7-2-Map的遍历\"><a href=\"#11-7-2-Map的遍历\" class=\"headerlink\" title=\"11.7.2 Map的遍历\"></a>11.7.2 Map的遍历</h2><p>Collection集合的遍历： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）foreach</span><br><span class=\"line\">（2）通过Iterator对象遍历</span><br></pre></td></tr></table></figure>\n<p>Map的遍历，不能支持foreach</p>\n<ul>\n<li><p>分开遍历：</p>\n<ul>\n<li>单独遍历所有key，还可以根据key获取对应value</li>\n<li>单独遍历所有value</li>\n</ul>\n</li>\n<li><p>成对遍历：遍历的是映射关系Map.Entry<br>Map.Entry是Map接口的内部接口。每一种Map内部有自己的Map.Entry的实现类<br>在Map中存储数据，实际上是将Key—-&gt;value的数据存储在Map.Entry接口的实例中，再在Map集合中插入Map.Entry的实例化对象，如图示： </p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105233.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tMap map = new HashMap();</span><br><span class=\"line\">\t\tmap.put(&quot;邢涛&quot;, 60);</span><br><span class=\"line\">\t\tmap.put(&quot;林明明&quot;, 70);</span><br><span class=\"line\">\t\tmap.put(&quot;田杰&quot;, 80);</span><br><span class=\"line\">\t\tmap.put(&quot;李铠&quot;, 90);</span><br><span class=\"line\">\t\tmap.put(&quot;李信&quot;, 60);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map的所有key:&quot;);</span><br><span class=\"line\">\t\tSet keys = map.keySet();//HashSet</span><br><span class=\"line\">\t\tfor(Object key : keys)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(key+&quot;-&gt;&quot;+map.get(key));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map的所有的value：&quot;);</span><br><span class=\"line\">\t\tCollection values = map.values();</span><br><span class=\"line\">\t\tIterator iter = values.iterator();</span><br><span class=\"line\">\t\twhile(iter.hasNext())&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(iter.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map所有的映射关系：&quot;);</span><br><span class=\"line\">\t\t//映射关系的类型是Map.Entry类型，它是Map接口的内部接口</span><br><span class=\"line\">\t\tSet mappings = map.entrySet();</span><br><span class=\"line\">\t\tfor(Object mapping : mappings)&#123;</span><br><span class=\"line\">\t\t\t//System.out.println(mapping);</span><br><span class=\"line\">\t\t\tMap.Entry entry = (Map.Entry)mapping;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;key是：&quot;+ entry.getKey()+ &quot;，value是：&quot;+entry.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-7-3-Map的实现类\"><a href=\"#11-7-3-Map的实现类\" class=\"headerlink\" title=\"11.7.3 Map的实现类\"></a>11.7.3 Map的实现类</h2><h3 id=\"1、HashMap\"><a href=\"#1、HashMap\" class=\"headerlink\" title=\"1、HashMap\"></a>1、HashMap</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</span><br><span class=\"line\">HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</span><br><span class=\"line\">HashMap线程不安全</span><br></pre></td></tr></table></figure>\n<h4 id=\"JDK1-8之前：\"><a href=\"#JDK1-8之前：\" class=\"headerlink\" title=\"JDK1.8之前：\"></a>JDK1.8之前：</h4><ul>\n<li>HashMap的内部存储结构其实是数组和链表的结合。当实例化一个HashMap时，系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</li>\n<li>每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105350.png\" alt></p>\n<ul>\n<li>HashMap的扩容<ul>\n<li>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>那么HashMap什么时候进行扩容呢？</p>\n<ul>\n<li>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)<em>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16</em>0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"JDK1-8之后：\"><a href=\"#JDK1-8之后：\" class=\"headerlink\" title=\"JDK1.8之后：\"></a>JDK1.8之后：</h4><ul>\n<li>HashMap的内部存储结构其实是数组和链表/树的结合。当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</li>\n<li>每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last,或树的叶子结点。（七上八下）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105548.png\" alt></p>\n<p>那么HashMap什么时候进行扩容和树形化呢？</p>\n<ul>\n<li><p>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)<em>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16</em>0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p>\n</li>\n<li><p>当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize方法时判断树的结点个数低于6个，也会把树在转为链表。</p>\n</li>\n</ul>\n<p>关于映射关系的key是否可以修改？</p>\n<ul>\n<li>映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</li>\n</ul>\n<p>HashSet的底层实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HashSet&lt;E&gt; ......&#123;</span><br><span class=\"line\">    private transient HashMap&lt;E,Object&gt; map;</span><br><span class=\"line\">private static final Object PRESENT = new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    public HashSet() &#123;</span><br><span class=\"line\">        map = new HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public HashSet(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">        map = new HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public HashSet(int initialCapacity) &#123;</span><br><span class=\"line\">        map = new HashMap&lt;&gt;(initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class=\"line\">        return map.keySet().iterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return map.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isEmpty() &#123;</span><br><span class=\"line\">        return map.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean contains(Object o) &#123;</span><br><span class=\"line\">        return map.containsKey(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean add(E e) &#123;</span><br><span class=\"line\">        return map.put(e, PRESENT)==null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean remove(Object o) &#123;</span><br><span class=\"line\">        return map.remove(o)==PRESENT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void clear() &#123;</span><br><span class=\"line\">        map.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、LinkedHashMap\"><a href=\"#2、LinkedHashMap\" class=\"headerlink\" title=\"2、LinkedHashMap\"></a>2、LinkedHashMap</h3><p>LinkedHashMap 是 HashMap 的子类<br>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代顺序与 Key-Value 对的插入顺序一致</p>\n<h3 id=\"3、TreeMap\"><a href=\"#3、TreeMap\" class=\"headerlink\" title=\"3、TreeMap\"></a>3、TreeMap</h3><ul>\n<li>TreeMap存储 Key-Value 对时，需要根据 key进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。</li>\n<li><p>TreeMap 的 Key 的排序：</p>\n<ul>\n<li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li>\n</ul>\n</li>\n<li><p>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。</p>\n</li>\n<li>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</li>\n<li>若使用自定义类作为TreeMap的key，所属类需要重写equals()和hashCode()方法，且equals()方法返回true时，compareTo()方法应返回0。</li>\n</ul>\n<h3 id=\"4、Hashtable\"><a href=\"#4、Hashtable\" class=\"headerlink\" title=\"4、Hashtable\"></a>4、Hashtable</h3><ul>\n<li>Hashtable是个古老的 Map 实现类，线程安全。</li>\n<li>与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value</li>\n<li>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</li>\n<li>Hashtable判断两个key相等、两个value相等的标准，与hashMap一致。</li>\n</ul>\n<h3 id=\"5、Properties\"><a href=\"#5、Properties\" class=\"headerlink\" title=\"5、Properties\"></a>5、Properties</h3><ul>\n<li>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</li>\n<li>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</li>\n<li>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</li>\n</ul>\n<h2 id=\"11-7-4-Map集合框架集\"><a href=\"#11-7-4-Map集合框架集\" class=\"headerlink\" title=\"11.7.4 Map集合框架集\"></a>11.7.4 Map集合框架集</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105930.png\" alt></p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"10. JavaSE-常用类","url":"http://yoursite.com/2017/01/01/10. JavaSE-常用类/","content":"<h1 id=\"10-1包装类Wrapper\"><a href=\"#10-1包装类Wrapper\" class=\"headerlink\" title=\"10.1包装类Wrapper\"></a>10.1包装类Wrapper</h1><p>学习API更深的意义在于复习面向对象的知识。查看源代码，学习源代码。</p>\n<h2 id=\"10-1-1-为什么需要包装类\"><a href=\"#10-1-1-为什么需要包装类\" class=\"headerlink\" title=\"10.1.1 为什么需要包装类\"></a>10.1.1 为什么需要包装类</h2><p>Java并不是纯面向对象的语言。Java语言是一个面向对象的语言，但是Java中的基本数据类型却是不面向对象的。基本数据类型有它的优势：性能（效率高，节省空间）。<br>但是我们在实际使用中经常需要将基本数据类型转化成对象，便于操作。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）集合的操作，</span><br><span class=\"line\">（2）使用Object类型接收任意类型的数据等，</span><br><span class=\"line\">（3）泛型实参，这时，我们就需要将基本数据类型数据转化为对象。</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-1-2-包装类\"><a href=\"#10-1-2-包装类\" class=\"headerlink\" title=\"10.1.2 包装类\"></a>10.1.2 包装类</h2><p>包装类均位于java.lang包，包装类和基本数据类型的对应关系，如图10-1：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530233521.png\" alt></p>\n<p>其中有六个都是继承自java.lang.Number类：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530234032.png\" alt></p>\n<h2 id=\"10-1-3自动装箱（auto-boxing）与自动拆箱（unboxing）\"><a href=\"#10-1-3自动装箱（auto-boxing）与自动拆箱（unboxing）\" class=\"headerlink\" title=\"10.1.3自动装箱（auto_boxing）与自动拆箱（unboxing）\"></a>10.1.3自动装箱（auto_boxing）与自动拆箱（unboxing）</h2><p>JDK1.5之前需要手动装箱与拆箱，JDK1.5之后支持自动装箱与自动拆箱。</p>\n<h3 id=\"自动装箱\"><a href=\"#自动装箱\" class=\"headerlink\" title=\". 自动装箱\"></a>. 自动装箱</h3><p>基本数据类型就自动的封装到与它相同类型的包装中，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = 100;</span><br></pre></td></tr></table></figure>\n<p>本质上是，编译器编译时为我们添加了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-自动拆箱\"><a href=\"#2-自动拆箱\" class=\"headerlink\" title=\"2. 自动拆箱\"></a>2. 自动拆箱</h3><p>包装类对象自动转换成基本类型数据。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = new Integer(100);</span><br></pre></td></tr></table></figure>\n<p>本质上，编译器编译时为我们添加了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = new Integer(100).intValue();</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-1-4-包装类的作用\"><a href=\"#10-1-4-包装类的作用\" class=\"headerlink\" title=\"10.1.4 包装类的作用\"></a>10.1.4 包装类的作用</h2><h3 id=\"1-数据类型的范围\"><a href=\"#1-数据类型的范围\" class=\"headerlink\" title=\"1 数据类型的范围\"></a>1 数据类型的范围</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIN_VALUE、MAX_VALUE</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Float和Double中还有正无穷大POSITIVE_INFINITY、负无穷大NEGATIVE_INFINITY，还NaN，是Not a Number的缩写。NaN 用于处理计算中出现的错误情况，比如 0.0 除以 0.0 或者求负数的平方根。</li>\n<li>程序员可以利用这种定制的 NaN 值中的特定位模式来表达某些诊断信息。</li>\n</ul>\n<h3 id=\"2-数据类型的转换\"><a href=\"#2-数据类型的转换\" class=\"headerlink\" title=\"2 数据类型的转换\"></a>2 数据类型的转换</h3><h4 id=\"1、字符串转成包装类对象\"><a href=\"#1、字符串转成包装类对象\" class=\"headerlink\" title=\"1、字符串转成包装类对象\"></a>1、字符串转成包装类对象</h4><p>（1）使用包装类型的构造方法<br>除了Character类型，其他7中类型都有1个构造方法，其参数是字符串类型<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer t2=new Integer(&quot;500&quot;);//参数是字符串，字符串的值是必须对应的数值</span><br><span class=\"line\">Integer t3=new Integer(&quot;abc&quot;);// java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br></pre></td></tr></table></figure>\n<p>（2）使用包装类的valueOf方法<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i=Integer.valueOf(&quot;500&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、字符串转成基本数据类型\"><a href=\"#2、字符串转成基本数据类型\" class=\"headerlink\" title=\"2、字符串转成基本数据类型\"></a>2、字符串转成基本数据类型</h4><p>通过包装类的parseXxx(String s)静态方法<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i=Integer.parseInt(&quot;500&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-包装类的其他方法\"><a href=\"#3-包装类的其他方法\" class=\"headerlink\" title=\"3. 包装类的其他方法\"></a>3. 包装类的其他方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Integer类型</span><br><span class=\"line\">public static String toBinaryString(int i)  //把十进制转成二进制</span><br><span class=\"line\">public static String toHexString(int i)     //把十进制转成十六进制</span><br><span class=\"line\">public static String toOctalString(int i)   //把十进制转成八进制</span><br><span class=\"line\">2、Character类型</span><br><span class=\"line\">public static char toUpperCase(char ch)  //转成大写字母</span><br><span class=\"line\">public static char toLowerCase(char ch)  //转成小写字母</span><br><span class=\"line\">其他的查看相关API文档即可</span><br><span class=\"line\">3、equals</span><br><span class=\"line\">按照包装的基本数据类型的值比较</span><br><span class=\"line\">4、compareTo</span><br><span class=\"line\">按照包装的基本数据类型的值比较</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-1-5-缓存问题\"><a href=\"#10-1-5-缓存问题\" class=\"headerlink\" title=\"10.1.5 缓存问题\"></a>10.1.5 缓存问题</h2><p>我们在编程时大量需要值在-128到127范围之间的Integer对象。如果只能通过new来创建，需要在堆中开辟大量值一样的Integer对象。这是相当不划算的，IntegerCache.cache很好的起到了缓存的作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缓存</span><br><span class=\"line\">byte Byte -128–127</span><br><span class=\"line\">short Short -128–127</span><br><span class=\"line\">int Integer -128—127</span><br><span class=\"line\">long Long -128—127</span><br><span class=\"line\">float Float 不缓存</span><br><span class=\"line\">double Double 不缓存</span><br><span class=\"line\">char Character 0–127</span><br><span class=\"line\">boolean Boolean TURE，FALSE</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-2-字符串String类\"><a href=\"#10-2-字符串String类\" class=\"headerlink\" title=\"10.2 字符串String类\"></a>10.2 字符串String类</h1><h2 id=\"10-2-1-字符串String类的特点\"><a href=\"#10-2-1-字符串String类的特点\" class=\"headerlink\" title=\"10.2.1 字符串String类的特点\"></a>10.2.1 字符串String类的特点</h2><p>字符串的学习，有的同学就看看API，记下方法，有的同学看看源代码，还有的同学画画图，自然学的深度是不一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The &#123;@code String&#125; class represents character strings. All</span><br><span class=\"line\"> * string literals in Java programs, such as &#123;@code &quot;abc&quot;&#125;, are</span><br><span class=\"line\"> * implemented as instances of this class.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * Strings are constant; their values cannot be changed after they</span><br><span class=\"line\"> * are created. String buffers support mutable strings.</span><br><span class=\"line\"> * Because String objects are immutable they can be shared. For example:</span><br><span class=\"line\"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class=\"line\"> *     String str = &quot;abc&quot;;</span><br><span class=\"line\"> * &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;</span><br><span class=\"line\"> * is equivalent to:</span><br><span class=\"line\"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class=\"line\"> *     char data[] = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;;</span><br><span class=\"line\"> *     String str = new String(data);</span><br><span class=\"line\"> * &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;</span><br><span class=\"line\"> * Here are some more examples of how strings can be used:</span><br><span class=\"line\"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class=\"line\"> *     System.out.println(&quot;abc&quot;);</span><br><span class=\"line\"> *     String cde = &quot;cde&quot;;</span><br><span class=\"line\"> *     System.out.println(&quot;abc&quot; + cde);</span><br><span class=\"line\"> *     String c = &quot;abc&quot;.substring(2,3);</span><br><span class=\"line\"> *     String d = cde.substring(1, 2);</span><br><span class=\"line\"> * &lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * The class &#123;@code String&#125; includes methods for examining</span><br><span class=\"line\"> * individual characters of the sequence, for comparing strings, for</span><br><span class=\"line\"> * searching strings, for extracting substrings, and for creating a</span><br><span class=\"line\"> * copy of a string with all characters translated to uppercase or to</span><br><span class=\"line\"> * lowercase. Case mapping is based on the Unicode Standard version</span><br><span class=\"line\"> * specified by the &#123;@link java.lang.Character Character&#125; class.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * The Java language provides special support for the string</span><br><span class=\"line\"> * concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of</span><br><span class=\"line\"> * other objects to strings. String concatenation is implemented</span><br><span class=\"line\"> * through the &#123;@code StringBuilder&#125;(or &#123;@code StringBuffer&#125;)</span><br><span class=\"line\"> * class and its &#123;@code append&#125; method.</span><br><span class=\"line\"> * String conversions are implemented through the method</span><br><span class=\"line\"> * &#123;@code toString&#125;, defined by &#123;@code Object&#125; and</span><br><span class=\"line\"> * inherited by all classes in Java. For additional information on</span><br><span class=\"line\"> * string concatenation and conversion, see Gosling, Joy, and Steele,</span><br><span class=\"line\"> * &lt;i&gt;The Java Language Specification&lt;/i&gt;.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String 类代表字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。 </li>\n<li>字符串是常量；它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。例如： </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = &quot;abc&quot;;</span><br></pre></td></tr></table></figure>\n<p> 等效于： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char data[] = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;;</span><br><span class=\"line\">     String str = new String(data);</span><br></pre></td></tr></table></figure>\n<p>下面给出了一些如何使用字符串的更多示例： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(&quot;abc&quot;);</span><br><span class=\"line\">     String cde = &quot;cde&quot;;</span><br><span class=\"line\">     System.out.println(&quot;abc&quot; + cde);</span><br><span class=\"line\">     String c = &quot;abc&quot;.substring(2,3);</span><br><span class=\"line\">     String d = cde.substring(1, 2);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。</li>\n<li><p>大小写映射基于 Character 类指定的 Unicode 标准版。 </p>\n</li>\n<li><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。</p>\n</li>\n<li>字符串串联是通过 StringBuilder（或 StringBuffer）类及其 append 方法实现的。</li>\n<li>字符串转换是通过 toString 方法实现的，该方法由 Object 类定义，并可被 Java 中的所有类继承。</li>\n<li>有关字符串串联和转换的更多信息，请参阅 Gosling、Joy 和 Steele 合著的 The Java Language Specification。 </li>\n</ul>\n<h3 id=\"1-String是个final类\"><a href=\"#1-String是个final类\" class=\"headerlink\" title=\"1 String是个final类\"></a>1 String是个final类</h3><h3 id=\"2-String是不可变的字符序列\"><a href=\"#2-String是不可变的字符序列\" class=\"headerlink\" title=\"2 String是不可变的字符序列\"></a>2 String是不可变的字符序列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class String</span><br><span class=\"line\">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class=\"line\">    /** The value is used for character storage. */</span><br><span class=\"line\">    private final char value[];</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Cache the hash code for the string */</span><br><span class=\"line\">    private int hash; // Default to 0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String对象的字符内容是存储在一个字符数组中的。</li>\n<li>private意味着外面无法直接获取字符数组，而且String没有提供value的get和set方法，</li>\n<li>final意味着字符数组的引用不可改变，即通过让value指向新的数组对象来实现修改String对象，</li>\n<li>而且String也没有提供方法来修改value数组某个元素值，因此字符串的字符数组内容也不可变。</li>\n</ul>\n<p>疑问？那么字符串的拼接、字符串的截取、字符串的替换等操作是如何实现的呢？<br>每次修改都创建一个新的char数组表示修改结果。</p>\n<h3 id=\"3-String对象的创建\"><a href=\"#3-String对象的创建\" class=\"headerlink\" title=\"3 String对象的创建\"></a>3 String对象的创建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = “hello”;</span><br><span class=\"line\">String  s1 = new String();   //  本质上  this.value = new char[0];</span><br><span class=\"line\">String  s2 = new String(String original);  //this.value = original.value;</span><br><span class=\"line\">String  s3 = new String(char[] a);  //this.value = Arrays.copyOf(value, value.length);</span><br><span class=\"line\">String  s4 = new String(char[] a,int startIndex,int count)</span><br><span class=\"line\">.......</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235002.png\" alt></p>\n<h3 id=\"4-字符串对象是如何存储的\"><a href=\"#4-字符串对象是如何存储的\" class=\"headerlink\" title=\"4 字符串对象是如何存储的\"></a>4 字符串对象是如何存储的</h3><p>字符串常量存储在字符串常量池，目的是共享<br>字符串非常量对象存储在堆中。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235346.png\" alt></p>\n<h3 id=\"5-String的拼接\"><a href=\"#5-String的拼接\" class=\"headerlink\" title=\"5 String的拼接\"></a>5 String的拼接</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235426.png\" alt></p>\n<p>结论：<br>常量与常量的拼接结果在常量池<br>只要其中有一个是变量，结果就在堆中<br>如果拼接的结果调用intern()方法，就在常量池中</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235538.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235559.png\" alt></p>\n<h3 id=\"6、String对象的比较\"><a href=\"#6、String对象的比较\" class=\"headerlink\" title=\"6、String对象的比较\"></a>6、String对象的比较</h3><p><strong>==比较的是地址。</strong><br>equals比较的是字符串的内容，重写了Object的equals方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object anObject) &#123;</span><br><span class=\"line\">        if (this == anObject) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (anObject instanceof String) &#123;</span><br><span class=\"line\">            String anotherString = (String)anObject;</span><br><span class=\"line\">            int n = value.length;</span><br><span class=\"line\">            if (n == anotherString.value.length) &#123;</span><br><span class=\"line\">                char v1[] = value;</span><br><span class=\"line\">                char v2[] = anotherString.value;</span><br><span class=\"line\">                int i = 0;</span><br><span class=\"line\">                while (n-- != 0) &#123;</span><br><span class=\"line\">                    if (v1[i] != v2[i])</span><br><span class=\"line\">                        return false;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-2-2-String类的常用方法\"><a href=\"#10-2-2-String类的常用方法\" class=\"headerlink\" title=\"10.2.2 String类的常用方法\"></a>10.2.2 String类的常用方法</h2><h3 id=\"1、常用方法系列之一\"><a href=\"#1、常用方法系列之一\" class=\"headerlink\" title=\"1、常用方法系列之一\"></a>1、常用方法系列之一</h3><ul>\n<li>int length()：返回字符串的长度： return value.length;</li>\n<li>boolean isEmpty()：判断是否是空字符串：return value.length == 0;</li>\n<li>String toLowerCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</li>\n<li>String toUpperCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</li>\n<li>String trim()：返回字符串的副本，忽略前导空白和尾部空白。</li>\n<li>boolean equals(Object obj)：比较字符串的内容</li>\n<li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</li>\n<li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li>\n</ul>\n<h3 id=\"2-String类和字符相关操作\"><a href=\"#2-String类和字符相关操作\" class=\"headerlink\" title=\"2 String类和字符相关操作\"></a>2 String类和字符相关操作</h3><ul>\n<li>char charAt(int index)： 返回某索引处的字符return value[index];</li>\n<li>char[ ] toCharArray()：将此字符串转换为一个新的字符数组</li>\n<li>String(char[ ] value)：分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。 </li>\n<li>String(char[ ] value, int offset, int count)：分配一个新的 String，它包含取自字符数组参数一个子数组的字符。 </li>\n</ul>\n<h3 id=\"3-String类字节与字符串操作方法\"><a href=\"#3-String类字节与字符串操作方法\" class=\"headerlink\" title=\"3 String类字节与字符串操作方法\"></a>3 String类字节与字符串操作方法</h3><p>编码：把字符–&gt;字节</p>\n<ul>\n<li>byte[ ] getBytes()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</li>\n<li>byte[ ] getBytes(Charset charset) ：使用给定的 charset 将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</li>\n<li>byte[ ] getBytes(String charsetName) ：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。<br>解码：把字节–&gt;字符</li>\n<li>String(byte[] bytes) ：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, Charset charset)：通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, int offset, int length) ：通过使用平台的默认字符集解码指定的 byte 子数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, int offset, int length, Charset charset)：通过使用指定的 charset 解码指定的 byte 子数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, int offset, int length, String charsetName)：通过使用指定的字符集解码指定的 byte 子数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, String charsetName)：通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。 </li>\n</ul>\n<h3 id=\"4-String类判断是否以指定内容开头或结尾\"><a href=\"#4-String类判断是否以指定内容开头或结尾\" class=\"headerlink\" title=\"4 String类判断是否以指定内容开头或结尾\"></a>4 String类判断是否以指定内容开头或结尾</h3><ul>\n<li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束。 </li>\n<li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始。 </li>\n<li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</li>\n</ul>\n<h3 id=\"5-String类字符串查找操作\"><a href=\"#5-String类字符串查找操作\" class=\"headerlink\" title=\"5 String类字符串查找操作\"></a>5 String类字符串查找操作</h3><ul>\n<li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true。</li>\n<li>int indexOf(int ch)：返回指定字符在此字符串中第一次出现处的索引。 </li>\n<li>int indexOf(int ch, int fromIndex)：返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。 </li>\n<li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引。 </li>\n<li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。 </li>\n<li>int lastIndexOf(int ch)：返回指定字符在此字符串中最后一次出现处的索引。 </li>\n<li>int lastIndexOf(int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。 </li>\n<li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引。 </li>\n<li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。<br>indexOf和lastIndexOf方法如果未找到都是返回-1</li>\n</ul>\n<h3 id=\"6-String类字符串截取操作\"><a href=\"#6-String类字符串截取操作\" class=\"headerlink\" title=\"6 String类字符串截取操作\"></a>6 String类字符串截取操作</h3><ul>\n<li>String substring(int beginIndex) <pre><code>返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。 \n</code></pre></li>\n<li>String substring(int beginIndex, int endIndex) <pre><code>返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。 \n</code></pre></li>\n</ul>\n<h3 id=\"7-String类是否匹配正则\"><a href=\"#7-String类是否匹配正则\" class=\"headerlink\" title=\"7 String类是否匹配正则\"></a>7 String类是否匹配正则</h3><ul>\n<li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tString str = &quot;12345&quot;;</span><br><span class=\"line\">\t\t//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span><br><span class=\"line\">\t\tboolean matches = str.matches(&quot;\\\\d+&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(matches);</span><br><span class=\"line\">\t\tString tel = &quot;0571-4534289&quot;;</span><br><span class=\"line\">\t\t//判断这是否是一个杭州的固定电话</span><br><span class=\"line\">\t\tboolean result = tel.matches(&quot;0571-\\\\d&#123;7,8&#125;&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-String类替换操作\"><a href=\"#8-String类替换操作\" class=\"headerlink\" title=\"8 String类替换操作\"></a>8 String类替换操作</h3><ul>\n<li>String replace(char oldChar, char newChar)： <pre><code>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 \n</code></pre></li>\n<li>String replace(CharSequence target, CharSequence replacement)： <pre><code>使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 \n</code></pre></li>\n<li>replaceAll(String regex, String replacement)： <pre><code>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 \n</code></pre></li>\n<li>String replaceFirst(String regex, String replacement)： <pre><code>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 \n</code></pre></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tString str = &quot;12hello34world5java7891mysql456&quot;;</span><br><span class=\"line\">\t\t//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span><br><span class=\"line\">\t\tString string = str.replaceAll(&quot;\\\\d+&quot;, &quot;,&quot;).replaceAll(&quot;^,|,$&quot;, &quot;&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(string);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-String类字符串拆分操作\"><a href=\"#9-String类字符串拆分操作\" class=\"headerlink\" title=\"9 String类字符串拆分操作\"></a>9 String类字符串拆分操作</h3><ul>\n<li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。 </li>\n<li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tString str = &quot;hello|world|java&quot;;</span><br><span class=\"line\">\t\tString[] strings = str.split(&quot;\\\\|&quot;);</span><br><span class=\"line\">\t\tfor (String string : strings) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString str2 = &quot;hello.world.java&quot;;</span><br><span class=\"line\">\t\tString[] strings2 = str2.split(&quot;\\\\.&quot;);</span><br><span class=\"line\">\t\tfor (String string : strings2) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-3-可变字符序列：字符串缓冲区\"><a href=\"#10-3-可变字符序列：字符串缓冲区\" class=\"headerlink\" title=\"10.3 可变字符序列：字符串缓冲区\"></a>10.3 可变字符序列：字符串缓冲区</h1><h2 id=\"10-3-1-StringBuffer、StringBuilder、String的区别\"><a href=\"#10-3-1-StringBuffer、StringBuilder、String的区别\" class=\"headerlink\" title=\"10.3.1 StringBuffer、StringBuilder、String的区别\"></a>10.3.1 StringBuffer、StringBuilder、String的区别</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000436.png\" alt></p>\n<h3 id=\"1-一个类似于-String\"><a href=\"#1-一个类似于-String\" class=\"headerlink\" title=\"1 一个类似于 String\"></a>1 一个类似于 String</h3><p>的字符串缓冲区，但能被修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容，所有对StringBuffer或StringBuilder对象的字符序列的修改不会产生新的StringBuffer或StringBuilder对象，这点和String很大的不同。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000517.png\" alt></p>\n<p>value没有final声明,value可以不断扩容，count记录有效字符的个数。</p>\n<h3 id=\"2-StringBuilder：\"><a href=\"#2-StringBuilder：\" class=\"headerlink\" title=\"2 StringBuilder：\"></a>2 StringBuilder：</h3><p>线程安全，效率低；StringBuffer：线程不安全，效率高</p>\n<h2 id=\"10-3-2-StringBuffer和StringBuilder不同的API\"><a href=\"#10-3-2-StringBuffer和StringBuilder不同的API\" class=\"headerlink\" title=\"10.3.2 StringBuffer和StringBuilder不同的API\"></a>10.3.2 StringBuffer和StringBuilder不同的API</h2><h3 id=\"1、构造器\"><a href=\"#1、构造器\" class=\"headerlink\" title=\"1、构造器\"></a>1、构造器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuffer或StringBuilder对象的创建必须用new+构造器。</span><br><span class=\"line\">StringBuffer()   初始容量为16的字符串缓冲区</span><br><span class=\"line\">StringBuffer(int size)   构造指定容量的字符串缓冲区</span><br><span class=\"line\">StringBuffer(String str)  将内容初始化为指定字符串内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、和字符序列改变有关的方法\"><a href=\"#2、和字符序列改变有关的方法\" class=\"headerlink\" title=\"2、和字符序列改变有关的方法\"></a>2、和字符序列改变有关的方法</h3><p>而且所有这些方法支持方法链</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串拼接</span><br><span class=\"line\">StringBuffer delete(int start,int end)：删除指定位置的内容</span><br><span class=\"line\">StringBuffer insert(int offset, xx)：在指定位置插入xx</span><br><span class=\"line\">StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span><br><span class=\"line\">StringBuffer reverse() ：把当前字符序列逆转</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tStringBuffer sf = new StringBuffer();</span><br><span class=\"line\">\t\tsf.append(&quot;hello&quot;).append(&quot;world&quot;).append(&quot;java&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(sf);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>方法链的原理</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000702.png\" alt></p>\n<p>当append和insert时，如果原来value数组长度不够，可扩容</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000722.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000744.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000842.png\" alt></p>\n<h2 id=\"10-3-3-效率测试\"><a href=\"#10-3-3-效率测试\" class=\"headerlink\" title=\"10.3.3 效率测试\"></a>10.3.3 效率测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.api.string;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestStringBuilder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttestStringBuilder();</span><br><span class=\"line\">\t\ttestStringBuffer();</span><br><span class=\"line\">\t\ttestString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void testString()&#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\tString s = new String(&quot;0&quot;);</span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=10000;i++)&#123;</span><br><span class=\"line\">\t\t\ts += i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\tlong end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;String拼接+用时：&quot;+(end-start));</span><br><span class=\"line\">\t\tlong memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class=\"line\">        System.out.println(&quot;String拼接+memory: &quot; + memory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void testStringBuilder()&#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\tStringBuilder s = new StringBuilder(&quot;0&quot;);</span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=10000;i++)&#123;</span><br><span class=\"line\">\t\t\ts.append(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\tlong end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;StringBuilder拼接+用时：&quot;+(end-start));</span><br><span class=\"line\">\t\tlong memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class=\"line\">        System.out.println(&quot;StringBuilder拼接+memory: &quot; + memory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void testStringBuffer()&#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\tStringBuffer s = new StringBuffer(&quot;0&quot;);</span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=10000;i++)&#123;</span><br><span class=\"line\">\t\t\ts.append(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\tlong end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;StringBuffer拼接+用时：&quot;+(end-start));</span><br><span class=\"line\">\t\tlong memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class=\"line\">        System.out.println(&quot;StringBuffer拼接+memory: &quot; + memory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-4-System系统类\"><a href=\"#10-4-System系统类\" class=\"headerlink\" title=\"10.4 System系统类\"></a>10.4 System系统类</h1><ul>\n<li>System 类包含一些有用的类字段和方法。它不能被实例化。 </li>\n<li>在 System 类提供的设施中，有标准输入、标准输出和错误输出流；对外部定义的属性和环境变量的访问；加载文件和库的方法；还有快速复制数组的一部分的实用方法。 </li>\n</ul>\n<h2 id=\"10-4-1-标准输入、标准输出和错误输出流对象\"><a href=\"#10-4-1-标准输入、标准输出和错误输出流对象\" class=\"headerlink\" title=\"10.4.1 标准输入、标准输出和错误输出流对象\"></a>10.4.1 标准输入、标准输出和错误输出流对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrintStream err：“标准”错误输出流。 </span><br><span class=\"line\">InputStream in：“标准”输入流。 </span><br><span class=\"line\">PrintStream out：“标准”输出流。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestSystem&#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)&#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;请输入成绩：&quot;);</span><br><span class=\"line\">\t\tint score = input.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(score&gt;=0 &amp;&amp; score&lt;=100)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;成绩是：&quot; + score);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tSystem.err.println(&quot;输入有误，成绩应该在[0,100]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-4-2-常用方法\"><a href=\"#10-4-2-常用方法\" class=\"headerlink\" title=\"10.4.2 常用方法\"></a>10.4.2 常用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) ：从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。</span><br><span class=\"line\">long currentTimeMillis() ：返回以毫秒为单位的当前时间。  </span><br><span class=\"line\">void exit(int status) ：终止当前正在运行的 Java 虚拟机。</span><br><span class=\"line\">void gc()：运行垃圾回收器。  </span><br><span class=\"line\">Properties getProperties()：确定当前的系统属性。 </span><br><span class=\"line\">String getProperty(String key)：获取指定键指示的系统属性。 </span><br><span class=\"line\">void setErr(PrintStream err) ：重新分配“标准”错误输出流。 </span><br><span class=\"line\">void setIn(InputStream in)：重新分配“标准”输入流。 </span><br><span class=\"line\">void setOut(PrintStream out)：重新分配“标准”输出流。 </span><br><span class=\"line\">String setProperty(String key, String value) ：设置指定键指示的系统属性。</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-5-JDK1-8之前日期时间类\"><a href=\"#10-5-JDK1-8之前日期时间类\" class=\"headerlink\" title=\"10.5 JDK1.8之前日期时间类\"></a>10.5 JDK1.8之前日期时间类</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531001054.png\" alt></p>\n<h2 id=\"10-5-1-java-lang-System类\"><a href=\"#10-5-1-java-lang-System类\" class=\"headerlink\" title=\"10.5.1 java.lang.System类\"></a>10.5.1 java.lang.System类</h2><p>System类提供的public static long currentTimeMillis()用来返回当前时间与1970年1月1日0时0分0秒GMT之间以毫秒为单位的时间差。此方法适于计算时间差。</p>\n<h2 id=\"10-5-2-java-util-Date\"><a href=\"#10-5-2-java-util-Date\" class=\"headerlink\" title=\"10.5.2 java.util.Date\"></a>10.5.2 java.util.Date</h2><p>它的对象表示一个特定的瞬间，精确到毫秒。<br>Java中时间的表示说白了也是数字，是从标准纪元1970年1月1日0时0分0秒GMT到某个时刻的毫秒数，类型是long<br>理解：一维的时间轴，选择1970年1月1日0时0分0秒时间为0刻度，1毫秒一刻度  </p>\n<h3 id=\"构造方法：\"><a href=\"#构造方法：\" class=\"headerlink\" title=\"构造方法：\"></a>构造方法：</h3><ul>\n<li>Date()：      源代码：this(System.currentTimeMillis());</li>\n<li>Date(long date)</li>\n</ul>\n<h3 id=\"常用方法：\"><a href=\"#常用方法：\" class=\"headerlink\" title=\"常用方法：\"></a>常用方法：</h3><ul>\n<li>getTime():返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li>\n<li>toString():把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中：<br> dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)， zzz是时间标准。</li>\n</ul>\n<h3 id=\"已过时的方法：\"><a href=\"#已过时的方法：\" class=\"headerlink\" title=\"已过时的方法：\"></a>已过时的方法：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-public Date(int year,int month,int date,int hrs,int min,int sec)</span><br><span class=\"line\">参数：</span><br><span class=\"line\"></span><br><span class=\"line\">year - 减 1900 的年份。</span><br><span class=\"line\">month - 0-11 之间的月份。</span><br><span class=\"line\">date - 一月中 1-31 之间的某一天。</span><br><span class=\"line\">hrs - 0-23 之间的小时数。</span><br><span class=\"line\">min - 0-59 之间的分钟数。</span><br><span class=\"line\">sec - 0-59 之间的秒数。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>getYear() 从 JDK 1.1 开始，由 Calendar.get(Calendar.YEAR) - 1900 取代。</li>\n<li>getMonth()从 JDK 1.1 开始，由 Calendar.get(Calendar.MONTH) 取代。返回的值在 0 和 11 之间，值 0 表示 1 月。 </li>\n<li>getDate() JDK 1.1 开始，由 Calendar.get(Calendar.DAY_OF_MONTH) 取代。返回的值在 1 和 31 之间</li>\n<li>getDay()从 JDK 1.1 开始，由 Calendar.get(Calendar.DAY_OF_WEEK) 取代。 返回值 (0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday) 表示一周中的某一天</li>\n<li>getHours()从 JDK 1.1 开始，由 Calendar.get(Calendar.HOUR_OF_DAY) 取代。返回值是一个数字（0 至 23）</li>\n<li>getMinutes()从 JDK 1.1 开始，由 Calendar.get(Calendar.MINUTE) 取代。 返回值在 0 和 59 之间。 </li>\n<li>getSeconds()从 JDK 1.1 开始，由 Calendar.get(Calendar.SECOND) 取代。回的值在 0 和 61 之间。值 60 和 61 只可能发生在考虑了闰秒的 Java 虚拟机上。 </li>\n</ul>\n<h2 id=\"10-5-3-java-util-TimeZone和Locale\"><a href=\"#10-5-3-java-util-TimeZone和Locale\" class=\"headerlink\" title=\"10.5.3 java.util.TimeZone和Locale\"></a>10.5.3 java.util.TimeZone和Locale</h2><ul>\n<li>Locale 对象表示了特定的地理、政治和文化地区。需要 Locale 来执行其任务的操作称为语言环境敏感的 操作，它使用 Locale 为用户量身定制信息。例如，显示一个数值，日期就是语言环境敏感的操作，应该根据用户的国家、地区或文化的风俗/传统来格式化该数值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取Locale对象：</span><br><span class=\"line\"> Locale(String language)</span><br><span class=\"line\"> Locale(String language, String country)</span><br><span class=\"line\"> Locale.CHINA、Locale.US等</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocale loc = Locale.CHINA;</span><br><span class=\"line\">\t\tSystem.out.println(loc);//zh_CN</span><br><span class=\"line\">\t\tSystem.out.println(Locale.US);//en_US</span><br><span class=\"line\">\t\tSystem.out.println(Locale.JAPAN);//ja_JP</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tLocale c = new Locale(&quot;zh&quot;,&quot;CN&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>通常，使用 TimeZone的getDefault 获取 TimeZone，getDefault 基于程序运行所在的时区创建 TimeZone。例如，对于在日本运行的程序，getDefault 基于日本标准时间创建 TimeZone 对象。 </p>\n</li>\n<li><p>也可以用TimeZone的 getTimeZone 及时区 ID 获取 TimeZone 。例如美国太平洋时区的时区 ID 是 “America/Los_Angeles”。因此，可以使用下面语句获得美国太平洋时间 TimeZone 对象： </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TimeZone tz = TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;);</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTimeZone t = TimeZone.getDefault();</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTimeZone t1 = TimeZone.getTimeZone(&quot;America/New_York&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(t1);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTimeZone t2 = TimeZone.getTimeZone(&quot;Asia/Shanghai&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(t2);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] all = TimeZone.getAvailableIDs();</span><br><span class=\"line\">for (String id : all) &#123;</span><br><span class=\"line\">\tSystem.out.println(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-5-4-java-util-Calendar\"><a href=\"#10-5-4-java-util-Calendar\" class=\"headerlink\" title=\"10.5.4 java.util.Calendar\"></a>10.5.4 java.util.Calendar</h2><ul>\n<li>Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等 日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。瞬间可用毫秒值来表示，它是距历元（即格林威治标准时间 1970 年 1 月 1 日的 00:00:00.000，格里高利历）的偏移量。 </li>\n<li>人们对于时间的认识是：某年某月某日，这样的日期概念。计算机是long类型的数字。通过Calendar在二者之间搭起桥梁。而且Calendar提供了很多关于日期时间计算的方法。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531001631.png\" alt></p>\n<ul>\n<li>GregorianCalendar（公历）是Calendar的一个具体子类，提供了世界上大多数国家/地区使用的标准日历系统。</li>\n</ul>\n<p>注意：<br>月份：一月是0，二月是1，以此类推，12月是11<br>星期：周日是1，周二是2,。。。。周六是7</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531001747.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认语言环境的时间（时区）</span><br><span class=\"line\">\t\tCalendar c = new GregorianCalendar();</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * java.util.GregorianCalendar[</span><br><span class=\"line\">\t\t * time=1480667849712,</span><br><span class=\"line\">\t\t * areFieldsSet=true,</span><br><span class=\"line\">\t\t * areAllFieldsSet=true,</span><br><span class=\"line\">\t\t * lenient=true,</span><br><span class=\"line\">\t\t * zone=sun.util.calendar.ZoneInfo[id=&quot;Asia/Shanghai&quot;,offset=28800000,dstSavings=0,useDaylight=false,transitions=19,lastRule=null],</span><br><span class=\"line\">\t\t * firstDayOfWeek=1,</span><br><span class=\"line\">\t\t * minimalDaysInFirstWeek=1,</span><br><span class=\"line\">\t\t * ERA=1,</span><br><span class=\"line\">\t\t * YEAR=2016,</span><br><span class=\"line\">\t\t * MONTH=11,</span><br><span class=\"line\">\t\t * WEEK_OF_YEAR=49,//本年第49周</span><br><span class=\"line\">\t\t * WEEK_OF_MONTH=1,//本月第1周</span><br><span class=\"line\">\t\t * DAY_OF_MONTH=2,</span><br><span class=\"line\">\t\t * DAY_OF_YEAR=337,//本年第337天</span><br><span class=\"line\">\t\t * DAY_OF_WEEK=6,</span><br><span class=\"line\">\t\t * DAY_OF_WEEK_IN_MONTH=1,\t\t</span><br><span class=\"line\">\t\t * AM_PM=1, //下午</span><br><span class=\"line\">\t\t * HOUR=4,</span><br><span class=\"line\">\t\t * HOUR_OF_DAY=16,  //HOUR是12小时制， HOUR_OF_DAY是24小时制</span><br><span class=\"line\">\t\t * MINUTE=37,</span><br><span class=\"line\">\t\t * SECOND=29,</span><br><span class=\"line\">\t\t * MILLISECOND=712,</span><br><span class=\"line\">\t\t * ZONE_OFFSET=28800000,</span><br><span class=\"line\">\t\t * DST_OFFSET=0]</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//默认语言环境的时间（时区）</span><br><span class=\"line\">\t\tCalendar c = new GregorianCalendar();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tint year=c.get(Calendar.YEAR);</span><br><span class=\"line\">\t\tint month=c.get(Calendar.MONTH);</span><br><span class=\"line\">\t\tint date=c.get(Calendar.DAY_OF_MONTH);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tint hour=c.get(Calendar.HOUR_OF_DAY);</span><br><span class=\"line\">\t\tint minute=c.get(Calendar.MINUTE);</span><br><span class=\"line\">\t\tint second=c.get(Calendar.SECOND);</span><br><span class=\"line\">\t\tint mill=c.get(Calendar.MILLISECOND);</span><br><span class=\"line\">\t\tint week=c.get(Calendar.DAY_OF_WEEK);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStringBuffer dateStr=new StringBuffer();</span><br><span class=\"line\">\t\tdateStr.append(year).append(&quot;年&quot;);</span><br><span class=\"line\">\t\tdateStr.append(month+1).append(&quot;月&quot;);</span><br><span class=\"line\">\t\tdateStr.append(date).append(&quot;日&quot;).append(&quot;  &quot;);</span><br><span class=\"line\">\t\tdateStr.append(hour).append(&quot;时&quot;);</span><br><span class=\"line\">\t\tdateStr.append(minute).append(&quot;分&quot;);</span><br><span class=\"line\">\t\tdateStr.append(second).append(&quot;秒&quot;);</span><br><span class=\"line\">\t\tdateStr.append(mill).append(&quot;毫秒&quot;).append(&quot;  &quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString[] weeks=&#123;&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;&#125;;</span><br><span class=\"line\">\t\tdateStr.append(&quot;星期&quot;).append(weeks[week-1]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(dateStr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tCalendar c = new GregorianCalendar(2015, 6, 13);</span><br><span class=\"line\">//\t\tc.set(2016, Calendar.DECEMBER, 4, 12, 12, 0);</span><br><span class=\"line\">//\t\tc.setTime(new Date());</span><br><span class=\"line\">\t\t//15天之后</span><br><span class=\"line\">\t\t//c.add(Calendar.DATE, 15);</span><br><span class=\"line\">\t\t//2个月之前</span><br><span class=\"line\">\t\t//c.add(Calendar.DAY_OF_MONTH, -2);</span><br><span class=\"line\">\t\t//12小时之后</span><br><span class=\"line\">\t\tc.add(Calendar.HOUR, 12);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDate time = c.getTime();//转成日期</span><br><span class=\"line\">\t\tSystem.out.println(time);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>public static Calendar getInstance()使用默认时区和语言环境获得一个日历。返回的 Calendar 基于当前时间，使用了默认时区和默认语言环境。 </li>\n<li>public static Calendar getInstance(TimeZone zone, Locale aLocale)使用指定时区和语言环境获得一个日历。返回的 Calendar 基于当前时间，使用了给定的时区和给定的语言环境。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tCalendar c = Calendar.getInstance();</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tCalendar c2 = Calendar.getInstance(TimeZone.getTimeZone(&quot;Asia/Shanghai&quot;), Locale.CHINA);</span><br><span class=\"line\">\t\tSystem.out.println(c2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tCalendar c3 = Calendar.getInstance(TimeZone.getTimeZone(&quot;America/New_York&quot;), Locale.US);</span><br><span class=\"line\">\t\tSystem.out.println(c3);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-5-5-java-text-DateFormat和SimpleDateFormat\"><a href=\"#10-5-5-java-text-DateFormat和SimpleDateFormat\" class=\"headerlink\" title=\"10.5.5 java.text.DateFormat和SimpleDateFormat\"></a>10.5.5 java.text.DateFormat和SimpleDateFormat</h2><p>完成字符串和时间对象的转化：</p>\n<ul>\n<li>format(date)</li>\n<li>Date parse(string)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tDate date = new Date();</span><br><span class=\"line\">\t\tSimpleDateFormat sf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss 是本年的第几D&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(sf.format(date));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString s = &quot;2016-12-01 14:12:23&quot;;</span><br><span class=\"line\">\t\tSimpleDateFormat sf2 = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tDate d = sf2.parse(s);</span><br><span class=\"line\">\t\t\tSystem.out.println(d);</span><br><span class=\"line\">\t\t&#125; catch (ParseException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531002016.png\" alt></p>\n<h1 id=\"10-6-数学相关类Math、BigInteger、BigDecimal\"><a href=\"#10-6-数学相关类Math、BigInteger、BigDecimal\" class=\"headerlink\" title=\"10.6 数学相关类Math、BigInteger、BigDecimal\"></a>10.6 数学相关类Math、BigInteger、BigDecimal</h1><h2 id=\"10-6-1-java-lang-Math类\"><a href=\"#10-6-1-java-lang-Math类\" class=\"headerlink\" title=\"10.6.1 java.lang.Math类\"></a>10.6.1 java.lang.Math类</h2><p>java.lang.Math提供了一系列静态方法用于科学计算；<br>其方法的参数和返回值类型一般为double型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abs     绝对值</span><br><span class=\"line\">acos,asin,atan,cos,sin,tan  三角函数</span><br><span class=\"line\">sqrt     平方根</span><br><span class=\"line\">pow(double a,doble b)     a的b次幂</span><br><span class=\"line\">log    自然对数</span><br><span class=\"line\">exp    e为底指数</span><br><span class=\"line\">max(double a,double b)</span><br><span class=\"line\">min(double a,double b)</span><br><span class=\"line\">random()      返回0.0到1.0的随机数</span><br><span class=\"line\">long round(double a)     double型数据a转换为long型（四舍五入）</span><br><span class=\"line\">toDegrees(double angrad)     弧度—&gt;角度</span><br><span class=\"line\">toRadians(double angdeg)     角度—&gt;弧度</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Math.random());//随机值</span><br><span class=\"line\">\t\tSystem.out.println(Math.round(1.8));//四舍五入  保留整数部分</span><br><span class=\"line\">\t\tSystem.out.println(Math.floor(1.2));//1.0  向下取</span><br><span class=\"line\">\t\tSystem.out.println(Math.ceil(1.2));//2.0  向上取</span><br><span class=\"line\">\t\tSystem.out.println(Math.floor(-2.4));//-3.0</span><br><span class=\"line\">\t\tSystem.out.println(Math.ceil(-2.4));//-2.0</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-6-2-java-math包的BigInteger和BigDecimal\"><a href=\"#10-6-2-java-math包的BigInteger和BigDecimal\" class=\"headerlink\" title=\"10.6.2 java.math包的BigInteger和BigDecimal\"></a>10.6.2 java.math包的BigInteger和BigDecimal</h2><p>Integer类作为int的包装类，能存储的最大整型值为231-1，Long类也是有限的，最大为263-1如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。<br>java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。 </p>\n<ul>\n<li>构造方法<ul>\n<li>BigInteger(String val)：根据字符串构建BigInteger对象</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>常用方法<ul>\n<li>BigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger。 </li>\n<li>BigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger。</li>\n<li>BigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger。</li>\n<li>BigInteger divide(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数相除只保留整数部分。</li>\n<li>BigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。</li>\n<li>BigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this / val) 后跟 (this % val) 的两个 BigInteger 的数组。</li>\n<li>BigInteger pow(int exponent) ：返回其值为 (thisexponent) 的 BigInteger。 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test2()&#123;</span><br><span class=\"line\">//\t\tlong num1 = 12345678901234567890L;//out of range 超过long的范围</span><br><span class=\"line\">\t\tBigInteger num1 = new BigInteger(&quot;12345678901234567890&quot;);</span><br><span class=\"line\">\t\tBigInteger num2 = new BigInteger(&quot;92345678901234567890&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\tSystem.out.println(&quot;和：&quot; + (num1 + num2));//错误的</span><br><span class=\"line\">\t\tSystem.out.println(&quot;和：&quot; + num1.add(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;减：&quot; + num1.subtract(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;乘：&quot; + num1.multiply(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1));//两个整数相除只保留整数部分</span><br><span class=\"line\">\t\tSystem.out.println(&quot;幂次方：&quot; + num2.pow(5));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>一般的Float类和Double类可以用来做科学计算或工程计算，但是在商业计算中，要求数字精度比较高，所以用到java.math.BigDecimal类。BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</p>\n<ul>\n<li>构造器<ul>\n<li>BigDecimal(double val)</li>\n<li>BigDecimal(String val)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>常用方法<ul>\n<li>BigDecimal add(BigDecimal augend) :返回一个 BigDecimal，其值为 (this + augend)，其标度为 max(this.scale(), augend.scale())。</li>\n<li>BigDecimal subtract(BigDecimal subtrahend) ：返回一个 BigDecimal，其值为 (this - subtrahend)，其标度为 max(this.scale(), subtrahend.scale())。 </li>\n<li>BigDecimal multiply(BigDecimal multiplicand)：返回一个 BigDecimal，其值为 (this × multiplicand)，其标度为 (this.scale() + multiplicand.scale())。</li>\n<li>BigDecimal pow(int n) ：返回其值为 (thisn) 的 BigDecimal，准确计算该幂，使其具有无限精度。</li>\n<li>BigDecimal divide(BigDecimal divisor)： 返回一个 BigDecimal，其值为 (this / divisor)，其首选标度为 (this.scale() - divisor.scale())；如果无法表示准确的商值（因为它有无穷的十进制扩展），则抛出 ArithmeticException。</li>\n<li>BigDecimal divide(BigDecimal divisor, int roundingMode) ：返回一个 BigDecimal，其值为 (this / divisor)，其标度为 this.scale()。  </li>\n<li>BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) ：返回一个 BigDecimal，其值为 (this / divisor)，其标度为指定标度。 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test3()&#123;</span><br><span class=\"line\">\t\tBigDecimal num1 = new BigDecimal(&quot;-12.1234567890123456567899554544444332&quot;);</span><br><span class=\"line\">\t\tBigDecimal num2 = new BigDecimal(&quot;89.6734567890123456567899554544444333&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;和：&quot; + num1.add(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;减：&quot; + num1.subtract(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;乘：&quot; + num1.multiply(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(new BigDecimal(&quot;2&quot;)));//可以整除（除尽）就对，不能整除就报异常</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_HALF_UP));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_DOWN));//往零的方向舍去</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_FLOOR));//往小的方向舍去</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_CEILING));//往大的方向舍去</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-7-比较器：自然排序与定制排序\"><a href=\"#10-7-比较器：自然排序与定制排序\" class=\"headerlink\" title=\"10.7 比较器：自然排序与定制排序\"></a>10.7 比较器：自然排序与定制排序</h1><h2 id=\"10-7-1-自然排序：java-lang-Comparable\"><a href=\"#10-7-1-自然排序：java-lang-Comparable\" class=\"headerlink\" title=\"10.7.1 自然排序：java.lang.Comparable\"></a>10.7.1 自然排序：java.lang.Comparable</h2><ul>\n<li><p>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo(T t) 方法被称为它的自然比较方法。当前对象this与指定对象t比较“大小”，如果当前对象this大于指定对象t，则返回正整数，如果当前对象this小于指定对象t，则返回负整数，如果当前对象this等于指定对象t，则返回零。</p>\n</li>\n<li><p>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort（和 Arrays.sort）进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p>\n</li>\n<li><p>Comparable的典型实现：</p>\n<ul>\n<li>String：按照字符串中字符的Unicode值进行比较</li>\n<li>Character：按照字符的Unicode值来进行比较</li>\n<li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li>\n<li>Date、Time等：后面的日期时间比前面的日期时间大</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"10-7-2-定制排序：java-util-Compartor\"><a href=\"#10-7-2-定制排序：java-util-Compartor\" class=\"headerlink\" title=\"10.7.2 定制排序：java.util.Compartor\"></a>10.7.2 定制排序：java.util.Compartor</h2><ul>\n<li><p>强行对某个对象 collection 进行整体排序 的比较函数。可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p>\n</li>\n<li><p>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序。</p>\n</li>\n</ul>\n<h2 id=\"10-7-3-示例\"><a href=\"#10-7-3-示例\" class=\"headerlink\" title=\"10.7.3 示例\"></a>10.7.3 示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.api.compare;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.Collator;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\">import java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestCompare &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tGoods[] all = new Goods[4];</span><br><span class=\"line\">\t\tall[0] = new Goods(&quot;《红楼梦》&quot;,100);</span><br><span class=\"line\">\t\tall[1] = new Goods(&quot;《西游记》&quot;,80);</span><br><span class=\"line\">\t\tall[2] = new Goods(&quot;《三国演义》&quot;,140);</span><br><span class=\"line\">\t\tall[3] = new Goods(&quot;《水浒传》&quot;,120);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrays.sort(all);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(all));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrays.sort(all , new Comparator() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic int compare(Object o1, Object o2) &#123;</span><br><span class=\"line\">\t\t\t\tGoods g1 = (Goods) o1;</span><br><span class=\"line\">\t\t\t\tGoods g2 = (Goods) o2;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\treturn Collator.getInstance(Locale.CHINA).compare(g1.getName(),g2.getName());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(all));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Goods implements Comparable&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate double price;</span><br><span class=\"line\">\tpublic Goods(String name, double price) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.price = price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic double getPrice() &#123;</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setPrice(double price) &#123;</span><br><span class=\"line\">\t\tthis.price = price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;商品名：&quot; + name + &quot;, 价格：&quot; + price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int compareTo(Object o) &#123;</span><br><span class=\"line\">\t\tGoods other = (Goods) o;</span><br><span class=\"line\">\t\tif(this.price &gt; other.price)&#123;</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;else if(this.price &lt; other.price)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-8-JDK1-8新增日期时间类型\"><a href=\"#10-8-JDK1-8新增日期时间类型\" class=\"headerlink\" title=\"10.8 JDK1.8新增日期时间类型\"></a>10.8 JDK1.8新增日期时间类型</h1><p>如果我们可以跟别人说：“我们在1502643933071见面，别晚了！”那么就再简单不过了。但是我们希望时间与昼夜和四季有关，于是事情就变复杂了。Java1.0中包含了一个Date类，但是它的大多数方法已经在Java 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：</p>\n<ul>\n<li>可变性：象日期和时间这样的类应该是不可变的。Calendar类中可以使用三种方法更改日历字段：set()、add() 和 roll()。</li>\n<li>偏移性：Date中的年份是从1900开始的，而月份都是从0开始的。</li>\n<li>格式化：格式化只对Date有用，Calendar则不行。</li>\n<li>此外，它们也不是线程安全的，不能处理闰秒等。</li>\n</ul>\n<p>Date的API： </p>\n<blockquote>\n<p>尽管 Date 类打算反映协调世界时 (UTC)，但无法做到如此准确，这取决于 Java 虚拟机的主机环境。当前几乎所有操作系统都假定 1 天 = 24 × 60 × 60 = 86400 秒。但对于 UTC，大约每一两年出现一次额外的一秒，称为“闰秒”。闰秒始终作为当天的最后一秒增加，并且始终在 12 月 31 日或 6 月 30 日增加。例如，1995 年的最后一分钟是 61 秒，因为增加了闰秒。大多数计算机时钟不是特别的准确，因此不能反映闰秒的差别。<br>在类 Date 所有可以接受或返回年、月、日期、小时、分钟和秒值的方法中，将使用下面的表示形式： </p>\n</blockquote>\n<ul>\n<li>年份 y 由整数 y - 1900 表示。 </li>\n<li>月份由从 0 至 11 的整数表示；0 是一月、1 是二月等等；因此 11 是十二月。 </li>\n<li>日期（一月中的某天）按通常方式由整数 1 至 31 表示。 </li>\n<li>小时由从 0 至 23 的整数表示。因此，从午夜到 1 a.m. 的时间是 0 点，从中午到 1 p.m. 的时间是 12 点。 </li>\n<li>分钟按通常方式由 0 至 59 的整数表示。 </li>\n<li>秒由 0 至 61 的整数表示；值 60 和 61 只对闰秒发生，尽管那样，也只用在实际正确跟踪闰秒的 Java 实现中。于按当前引入闰秒的方式，两个闰秒在同一分钟内发生是极不可能的，但此规范遵循 ISO C 的日期和时间约定。 </li>\n</ul>\n<p>在所有情形中，针对这些目的赋予方法的参数不需要在指定的范围内；例如，可以把日期指定为 1 月 32 日，并把它解释为 2 月 1 日的相同含义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date date = new Date(2017-1900,8-1,28);</span><br><span class=\"line\">System.out.println(date);//Mon Aug 28 00:00:00 CST 2017</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以说，对日期和时间的操作一直是Java程序员最痛苦的地方之一。第三次引入的API是成功的，并且java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。  </li>\n<li>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.time – 包含值对象的基础包</span><br><span class=\"line\">java.time.chrono – 提供对不同的日历系统的访问。</span><br><span class=\"line\">java.time.format – 格式化和解析时间和日期</span><br><span class=\"line\">java.time.temporal – 包括底层框架和扩展特性</span><br><span class=\"line\">java.time.zone – 包含时区支持的类</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于时钟（Clock），本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了了日期时间和本地化的管理。</p>\n</blockquote>\n<ul>\n<li>说明：大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531003328.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531003703.png\" alt></p>\n<h2 id=\"10-8-1-java-time\"><a href=\"#10-8-1-java-time\" class=\"headerlink\" title=\"10.8.1 java.time\"></a>10.8.1 java.time</h2><h3 id=\"1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）\"><a href=\"#1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）\" class=\"headerlink\" title=\"1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）\"></a>1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。</span><br><span class=\"line\">LocalTime表示一个时间，而不是日期</span><br><span class=\"line\">LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</span><br></pre></td></tr></table></figure>\n<p>描述<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now() / now(ZoneId zone)</span><br><span class=\"line\">静态方法，根据当前时间创建对象/指定时区的对象</span><br><span class=\"line\">of()</span><br><span class=\"line\">静态方法，根据指定日期/时间创建对象</span><br><span class=\"line\">getDayOfMonth()/getDayOfYear()</span><br><span class=\"line\">获得月份天数(1-31) /获得年份天数(1-366)</span><br><span class=\"line\">getDayOfWeek()</span><br><span class=\"line\">获得星期几(返回一个 DayOfWeek 枚举值)</span><br><span class=\"line\">getMonth()</span><br><span class=\"line\">获得月份, 返回一个 Month 枚举值</span><br><span class=\"line\">getMonthValue() / getYear()</span><br><span class=\"line\">获得月份(1-12) /获得年份</span><br><span class=\"line\">getHours()/getMinute()/getSecond()</span><br><span class=\"line\">获得当前对象对应的小时、分钟、秒</span><br><span class=\"line\">withDayOfMonth()/withDayOfYear()/withMonth()/withYear()</span><br><span class=\"line\">将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</span><br><span class=\"line\"> with(TemporalAdjuster  t)</span><br><span class=\"line\">将当前日期时间设置为校对器指定的日期时间</span><br><span class=\"line\">plusDays(), plusWeeks(), plusMonths(), plusYears(),plusHours()</span><br><span class=\"line\">向当前对象添加几天、几周、几个月、几年、几小时</span><br><span class=\"line\">minusMonths() / minusWeeks()/minusDays()/minusYears()/minusHours()</span><br><span class=\"line\">从当前对象减去几月、几周、几天、几年、几小时</span><br><span class=\"line\">plus(TemporalAmount t)/minus(TemporalAmount t)</span><br><span class=\"line\">添加或减少一个 Duration 或 Period</span><br><span class=\"line\">isBefore()/isAfter()</span><br><span class=\"line\">比较两个 LocalDate</span><br><span class=\"line\">isLeapYear()</span><br><span class=\"line\">判断是否是闰年（在LocalDate类中声明）</span><br><span class=\"line\"> format(DateTimeFormatter  t)</span><br><span class=\"line\">格式化本地日期、时间，返回一个字符串</span><br><span class=\"line\"> parse(Charsequence text)</span><br><span class=\"line\">将指定格式的字符串解析为日期、时间</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//now()</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">\tpublic void testLocalDateTime()&#123;</span><br><span class=\"line\">\t\tLocalDate date = LocalDate.now();</span><br><span class=\"line\">\t\tLocalTime time = LocalTime.now();</span><br><span class=\"line\">\t\tLocalDateTime datetime = LocalDateTime.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //of()或parse</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testLocalDate() &#123;</span><br><span class=\"line\">\t\t// LocalDate date = LocalDate.now();</span><br><span class=\"line\">\t\t// LocalDate date = LocalDate.of(2017, 3, 20);</span><br><span class=\"line\">\t\tLocalDate date = LocalDate.parse(&quot;2017-03-12&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDateTime t = LocalDateTime.now();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;这一天是这一年的第几天：&quot;+t.getDayOfYear());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;年：&quot;+t.getYear());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;月：&quot;+t.getMonth());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;月份值：&quot;+t.getMonthValue());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;日：&quot;+t.getDayOfMonth());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;星期：&quot;+t.getDayOfWeek());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;时：&quot;+t.getHour());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;分：&quot;+t.getMinute());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;秒：&quot;+t.getSecond());</span><br><span class=\"line\">\t\tSystem.out.println(t.getMonthValue());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testLocalDate2() &#123;</span><br><span class=\"line\">\tLocalDate date = LocalDate.now();</span><br><span class=\"line\"></span><br><span class=\"line\">       //withXxx()方法，不改变原来的date对象，返回一个新的对象，不可变性</span><br><span class=\"line\">\t// LocalDate date2 = date.withDayOfMonth(1);//获取这个月的第一天</span><br><span class=\"line\">\tLocalDate date2 = date.with(TemporalAdjusters.firstDayOfMonth());// 获取这个月的第一天</span><br><span class=\"line\">\tSystem.out.println(date2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 获取这个月的最后一天</span><br><span class=\"line\">\tLocalDate date3 = date.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class=\"line\">\tSystem.out.println(date3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//45天后的日期</span><br><span class=\"line\">\tLocalDate date4 = date.plusDays(45);</span><br><span class=\"line\">\tSystem.out.println(date4);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//20天前的日期</span><br><span class=\"line\">\tLocalDate date5 = date.minusDays(20);</span><br><span class=\"line\">\tSystem.out.println(date5);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tboolean before = date.isBefore(date5);</span><br><span class=\"line\">\tSystem.out.println(date+&quot;是否比&quot;+date5+&quot;早&quot; + before);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tSystem.out.println(date+&quot;是否是闰年：&quot;+date.isLeapYear());</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MonthDay month = MonthDay.of(8, 14);</span><br><span class=\"line\">MonthDay today = MonthDay.from(date);</span><br><span class=\"line\">System.out.println(&quot;今天是否是生日：&quot; + month.equals(today));</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、瞬时：Instant\"><a href=\"#2、瞬时：Instant\" class=\"headerlink\" title=\"2、瞬时：Instant\"></a>2、瞬时：Instant</h3><ul>\n<li>Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。</li>\n<li>在处理时间和日期的时候，我们通常会想到年,月,日,时,分,秒。然而，这只是时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中，也是从1970年开始，但以毫秒为单位。</li>\n<li>java.time包通过值类型Instant提供机器视图。Instant表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为java.time包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531004049.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531004148.png\" alt></p>\n<p>时间戳：指格林威治时间1970年01月01日00时00分00秒（北京时间1970年01月01日08时00分00秒）起至现在的总秒数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tInstant t = Instant.now();</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//偏移8个小时</span><br><span class=\"line\">\t\tOffsetDateTime atOffset = t.atOffset(ZoneOffset.ofHours(8));</span><br><span class=\"line\">\t\tSystem.out.println(atOffset);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlong milli = t.toEpochMilli();</span><br><span class=\"line\">\t\tSystem.out.println(milli);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tInstant in2 = Instant.ofEpochSecond(10000000);</span><br><span class=\"line\">\t\tSystem.out.println(in2);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、带时区的日期、时间的处理\"><a href=\"#3、带时区的日期、时间的处理\" class=\"headerlink\" title=\"3、带时区的日期、时间的处理\"></a>3、带时区的日期、时间的处理</h3><p>作为一个开发者，如果不用去处理时区和它带来的复杂性，那是幸运的。java.time包下的LocalDate、LocalTime、LocalDateTime和Instant基本能满足需求。当你不可避免时区时，ZonedDateTime等类可以满足我们的需求。  </p>\n<p>ZonedDateTime：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe/Paris。</p>\n<ul>\n<li>其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式，例如：Asia/Shanghai等</li>\n<li>now()：使用系统时间获取当前的ZonedDateTime</li>\n<li>now(ZoneId)：返回指定时区的ZonedDateTime</li>\n</ul>\n<p>ZoneId：该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris</p>\n<ul>\n<li>getAvailableZoneIds()：静态方法，可以获取所有时区信息</li>\n<li>of(String id)：静态方法，用指定的时区信息获取ZoneId对象</li>\n</ul>\n<p>Clock：使用时区提供对当前即时、日期和时间的访问的时钟。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();</span><br><span class=\"line\">\t\tfor (String string : availableZoneIds) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tZonedDateTime t = ZonedDateTime.now();</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tZonedDateTime t1 = ZonedDateTime.now(ZoneId.of(&quot;America/New_York&quot;));</span><br><span class=\"line\">\t\tSystem.out.println(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">//\t\tClock clock = Clock.systemDefaultZone();</span><br><span class=\"line\">\t\tClock c = Clock.system(ZoneId.of(&quot;America/New_York&quot;));</span><br><span class=\"line\">\t\tSystem.out.println(c.getZone());</span><br><span class=\"line\">\t\tSystem.out.println(c.instant());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、持续时间：Duration\"><a href=\"#4、持续时间：Duration\" class=\"headerlink\" title=\"4、持续时间：Duration\"></a>4、持续时间：Duration</h3><p>Duration:用于计算两个“时间”间隔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDateTime t1 = LocalDateTime.now();</span><br><span class=\"line\">\t\tLocalDateTime t2 = LocalDateTime.of(2017, 8, 29, 0, 0, 0, 0);</span><br><span class=\"line\">\t\tDuration between = Duration.between(t1, t2);</span><br><span class=\"line\">\t\tSystem.out.println(between);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总天数：&quot;+between.toDays());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总小时数：&quot;+between.toHours());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总分钟数：&quot;+between.toMinutes());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总秒数：&quot;+between.getSeconds());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总毫秒数：&quot;+between.toMillis());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总纳秒数：&quot;+between.toNanos());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;不够一秒的纳秒数：&quot;+between.getNano());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、日期间隔：Period\"><a href=\"#5、日期间隔：Period\" class=\"headerlink\" title=\"5、日期间隔：Period\"></a>5、日期间隔：Period</h3><p>Period:用于计算两个“日期”间隔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDate t1 = LocalDate.now();</span><br><span class=\"line\">\t\tLocalDate t2 = LocalDate.of(2018, 12, 31);</span><br><span class=\"line\">\t\tPeriod between = Period.between(t1, t2);</span><br><span class=\"line\">\t\tSystem.out.println(between);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的年数：&quot;+between.getYears());//1年</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的月数：&quot;+between.getMonths());//又7个月</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的天数：&quot;+between.getDays());//零25天</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总数：&quot;+between.toTotalMonths());//总共19个月</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-8-2-java-time-temporal-TemporalAdjuster-时间校正器\"><a href=\"#10-8-2-java-time-temporal-TemporalAdjuster-时间校正器\" class=\"headerlink\" title=\"10.8.2 java.time.temporal.TemporalAdjuster : 时间校正器\"></a>10.8.2 java.time.temporal.TemporalAdjuster : 时间校正器</h2><ul>\n<li>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。</li>\n<li>TemporalAdjusters : 该类通过静态方法(firstDayOfXxx()/lastDayOfXxx()/nextXxx())提供了大量的常用 TemporalAdjuster 的实现。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDate now = LocalDate.now();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;下一个周日:&quot;+now.with(TemporalAdjusters.next(DayOfWeek.SUNDAY)));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;下周五&quot; + now.with(TemporalAdjusters.next(DayOfWeek.FRIDAY)));</span><br><span class=\"line\">        System.out.println(&quot;本月最后一天:&quot;+now.with(TemporalAdjusters.lastDayOfMonth()));//2017-08-31</span><br><span class=\"line\">\t\tLocalDate week = LocalDate.now().with(new TemporalAdjuster()&#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Temporal adjustInto(Temporal temporal) &#123;</span><br><span class=\"line\">\t\t\t\tLocalDate date = (LocalDate) temporal;</span><br><span class=\"line\">\t\t\t\tif(date.getDayOfWeek().equals(DayOfWeek.MONDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(7);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.TUESDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(6);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.WEDNESDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(5);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.THURSDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(4);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.FRIDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(3);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.SATURDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(2);</span><br><span class=\"line\">\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;下一个工作日：&quot; + week);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-8-3-java-time-format-DateTimeFormatter-类\"><a href=\"#10-8-3-java-time-format-DateTimeFormatter-类\" class=\"headerlink\" title=\"10.8.3 java.time.format.DateTimeFormatter 类\"></a>10.8.3 java.time.format.DateTimeFormatter 类</h2><ul>\n<li>该类提供了三种格式化方法：</li>\n<li>预定义的标准格式。如：ISO_DATE_TIME;ISO_DATE</li>\n<li>本地化相关的格式。如：ofLocalizedDate(FormatStyle.MEDIUM)</li>\n<li>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ISO_DATE.format(LocalDate.now()));</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ISO_DATE_TIME.format(LocalDateTime.now()));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//FULL和SHORT适用于LocalDate和LocalTime</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).format(LocalDate.now()));</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT).format(LocalTime.now()));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//LONG和MEDIUM适用于LocalDateTime</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).format(LocalDateTime.now()));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tDateTimeFormatter op = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(op.format(LocalDateTime.now()));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-8-4-与传统日期处理的转换\"><a href=\"#10-8-4-与传统日期处理的转换\" class=\"headerlink\" title=\"10.8.4 与传统日期处理的转换\"></a>10.8.4 与传统日期处理的转换</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531004958.png\" alt></p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"9. JavaSE-Java异常处理","url":"http://yoursite.com/2016/12/24/9. JavaSE-Java异常处理/","content":"<p>#9.1 异常的概述</p>\n<h2 id=\"9-1-1-什么是异常\"><a href=\"#9-1-1-什么是异常\" class=\"headerlink\" title=\"9.1.1 什么是异常\"></a>9.1.1 什么是异常</h2><blockquote>\n<ul>\n<li>异常，又称为例外，是指不可预知的非正常的情况，例如：正常开车突然路口窜出一条狗来，或者正常上下班的路上，某个街角偶遇了爱情，或者在每天晨跑的小树林遭遇了歹徒。这些突发的情况的发生是不可预知的，where,when……，但是如果处理好了，美好的生活不受影响，可以继续，如果处理不好，可能就“挂”了。</li>\n<li>Java语言将程序执行中发生的不正常情况称为“异常”，异常是一种对程序运行过程中发生错误时进行通知的机制。如：网络连接失败、用户输入错误或打开文件失败等。</li>\n</ul>\n</blockquote>\n<p> <img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530165032.png\" alt></p>\n<h2 id=\"9-1-2-Java异常的堆栈式抛出机制\"><a href=\"#9-1-2-Java异常的堆栈式抛出机制\" class=\"headerlink\" title=\"9.1.2 Java异常的堆栈式抛出机制\"></a>9.1.2 Java异常的堆栈式抛出机制</h2><p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\">public class TestException &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint a = Integer.parseInt(args[0]);</span><br><span class=\"line\">\t\tint b = Integer.parseInt(args[1]);</span><br><span class=\"line\">\t\tSystem.out.println(a + &quot;/&quot; + b + &quot;=&quot; + a/b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException  12  3</span><br></pre></td></tr></table></figure>\n<p>运行结果显示12/3=4，结果正常。</p>\n<h3 id=\"1-ArrayIndexOutOfBoundsException数组下标越界异常\"><a href=\"#1-ArrayIndexOutOfBoundsException数组下标越界异常\" class=\"headerlink\" title=\"1. ArrayIndexOutOfBoundsException数组下标越界异常\"></a>1. ArrayIndexOutOfBoundsException数组下标越界异常</h3><p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException</span><br></pre></td></tr></table></figure>\n<p>出现异常形式，如图9-1：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530165238.png\" alt></p>\n<h3 id=\"2-NumberFormatException数字格式化异常\"><a href=\"#2-NumberFormatException数字格式化异常\" class=\"headerlink\" title=\"2. NumberFormatException数字格式化异常\"></a>2. NumberFormatException数字格式化异常</h3><p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException  a  b</span><br></pre></td></tr></table></figure>\n<p>出现异常形式，如图9-2：</p>\n<p><img src=\"http://note.youdao.com/yws/res/6111/E0EEA67E326B44F88C522355472DF277\" alt=\"image\"></p>\n<h3 id=\"3-ArithmeticException算术异常\"><a href=\"#3-ArithmeticException算术异常\" class=\"headerlink\" title=\"3. ArithmeticException算术异常\"></a>3. ArithmeticException算术异常</h3><p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException  12  0</span><br></pre></td></tr></table></figure>\n<p>出现异常形式，如图9-3：</p>\n<p><img src=\"http://note.youdao.com/yws/res/6115/6B2236572F2549EEA6C1290778B0667D\" alt=\"image\"></p>\n<h3 id=\"4-结论\"><a href=\"#4-结论\" class=\"headerlink\" title=\"4. 结论\"></a>4. 结论</h3><p>在Java中异常以对象的形式出现，不同的异常对象中封装了相应的错误信息。<br>Java是采用面向对象的方式来处理异常的。处理过程：</p>\n<ul>\n<li>抛出异常：在执行一个方法时，如果在某句代码发生异常，则会在该句代码处生成代表该异常的一个对象，停止当前执行路径，并把异常对象提交给JRE，不同的异常对象中封装了相应的错误信息。</li>\n<li>捕获异常：JRE得到该异常后，寻找相应的代码来处理该异常。JRE在方法的调用栈中查找，从生成异常的方法开始回溯，直到找到相应的异常处理代码为止。如果没有找到处理代码，那么程序终止运行<br>Java中异常的是以堆栈式抛出机制来进行错误通知的，如图10-4。</li>\n</ul>\n<p><img src=\"http://note.youdao.com/yws/res/6118/2A148296222146499CEC8890FAE7A502\" alt=\"image\"></p>\n<h1 id=\"9-2-异常体系结构\"><a href=\"#9-2-异常体系结构\" class=\"headerlink\" title=\"9.2 异常体系结构\"></a>9.2 异常体系结构</h1><p>如10.1.2所示的ArrayIndexOutOfBoundsException数组下标越界异常，NumberFormatException数字格式化异常，ArithmeticException算术异常，查看它们的API，例如图9-5,9-6,9-7。</p>\n<p><img src=\"http://note.youdao.com/yws/res/6120/E6C67A0CEABC4234A6F158AB8563DAAD\" alt=\"image\"></p>\n<p><img src=\"http://note.youdao.com/yws/res/6122/047861140C034F1AA897892453C30046\" alt=\"image\"></p>\n<p><img src=\"http://note.youdao.com/yws/res/6124/6B44AF6FC34148B9A9EE29CB92F31693\" alt=\"image\"></p>\n<h2 id=\"9-2-1-异常的分类\"><a href=\"#9-2-1-异常的分类\" class=\"headerlink\" title=\"9.2.1 异常的分类\"></a>9.2.1 异常的分类</h2><p>Java语言提供了两大类异常，如图9-8：</p>\n<ul>\n<li>编译时异常（受检异常Checked）<br>编译时异常：指程序中必须接受检查和处理的异常，由Exception 类表示。</li>\n<li>运行时异常（非受检异常UnChecked）<br>运行时异常：程序中可以不接受检查和处理，或致命性错误异常，由RuntimeException类或Error类表示。</li>\n</ul>\n<p><img src=\"http://note.youdao.com/yws/res/6131/C962A64258584FDEB8E0ADEF0B71771E\" alt=\"image\"></p>\n<h2 id=\"9-2-2-Throwable\"><a href=\"#9-2-2-Throwable\" class=\"headerlink\" title=\"9.2.2 Throwable\"></a>9.2.2 Throwable</h2><ul>\n<li>Throwable 类是 Java 语言中所有错误或异常的超类。只有当对象是此类（或其子类之一）的实例时，才能通过 Java 虚拟机或者 Java throw 语句抛出。类似地，只有此类或其子类之一才可以是 catch 子句中的参数类型。 </li>\n<li>两个子类的实例，Error 和 Exception，通常用于指示发生了异常情况。通常，这些实例是在异常情况的上下文中新近创建的，因此包含了相关的信息（比如堆栈跟踪数据）。 <h2 id=\"9-2-3-Error\"><a href=\"#9-2-3-Error\" class=\"headerlink\" title=\"9.2.3 Error\"></a>9.2.3 Error</h2></li>\n<li>Error 是 Throwable 的子类，用于指示合理的应用程序不应该试图捕获的严重问题。大多数这样的错误都是异常条件。虽然 ThreadDeath 错误是一个“正规”的条件，但它也是 Error 的子类，因为大多数应用程序都不应该试图捕获它。 </li>\n<li>在执行该方法期间，无需在其 throws 子句中声明可能抛出但是未能捕获的 Error 的任何子类，因为这些错误可能是再也不会发生的异常条件。 <h2 id=\"9-2-4-Exception\"><a href=\"#9-2-4-Exception\" class=\"headerlink\" title=\"9.2.4 Exception\"></a>9.2.4 Exception</h2>Exception 类及其子类是 Throwable 的一种形式，它指出了合理的应用程序想要捕获的条件。<br>应该在程序中尽可能的预知并处理异常。</li>\n<li>checkedException：受检异常。这一类异常，编译时必须对其进行处理，如果不处理，编译不通过。（checked表示编译器检查过已经处理过的）。例如：疲劳必须休息、喝酒必须不能开车、刹车必须好用。</li>\n<li>RuntimeException（uncheckedException）：运行时异常（非受检异常）。一类特殊的异常，如被0除、数组下标越界等，其产生比较频繁，处理麻烦，如果显式的声明或捕获将会对程序可读性和运行效率影响很大。因此由系统自动检测并将它们交给缺省的异常处理程序，即交给JVM处理，用户不显式处理。但是应该尽量避免！！！<br>例如：前车急刹车、有人加塞、路口突然窜出的电动车等等。换句话说，出现RuntimeException一定是你的问题，可以不捕获，因为小心点这些异常是可以避免的，例如：数组下标越界异常ArrayIndexOutOfBoundsException，空指针异常NullPointerException，类型转换异常ClassCastException等等。<h1 id=\"9-3-异常处理机制\"><a href=\"#9-3-异常处理机制\" class=\"headerlink\" title=\"9.3 异常处理机制\"></a>9.3 异常处理机制</h1><h2 id=\"9-3-1-捕获异常（try…catch…finally）\"><a href=\"#9-3-1-捕获异常（try…catch…finally）\" class=\"headerlink\" title=\"9.3.1 捕获异常（try…catch…finally）\"></a>9.3.1 捕获异常（try…catch…finally）</h2>可使用try…catch…finally语句捕获异常，避免程序不正常终止  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\t\t……</span><br><span class=\"line\">\t&#125; [catch (&lt;异常类型&gt;  &lt;异常引用变量&gt;) &#123;</span><br><span class=\"line\">\t\t……</span><br><span class=\"line\">\t&#125; ]*  </span><br><span class=\"line\">[finally &#123;</span><br><span class=\"line\">\t\t……</span><br><span class=\"line\">\t&#125;]</span><br></pre></td></tr></table></figure>\n<p>说明：<br>（1）*可使用多个catch子句捕获多个异常，[]表示可选。<br>（2）可以有如下组合形式：<code>try...catch，try...finally，try...catch...finally</code>。  </p>\n<h3 id=\"1-try\"><a href=\"#1-try\" class=\"headerlink\" title=\"1. try\"></a>1. try</h3><ul>\n<li>try块中是可能发生异常的代码。其中某句代码发生异常，就会跳过try块中该句后面的代码，该句代码处会产生并抛出一种或几种类型的异常对象，它后面的catch语句要分别对这些异常做相应的处理。  </li>\n<li>注意：<br>一个try必须带一个catch块或finally块或两者都有，即try块不能单独存在。<br>当异常处理的代码执行结束以后，是不会回到try语句块去执行尚未执行的代码的。只会执行try…catch…finally后面的代码。  <h3 id=\"2-catch\"><a href=\"#2-catch\" class=\"headerlink\" title=\"2. catch\"></a>2. catch</h3></li>\n<li>每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。  </li>\n<li>catch块如果多个，异常对象将从上到下依次匹配类型，一旦某个catch的异常类型匹配成功，其他的catch将不再执行，即一个异常只能进入一个catch块。  </li>\n<li>catch可以有多个，但是多个catch中的异常类型如果是“互斥关系（没有继承关系）”，顺序随意；如果是“包含关系（继承关系）”，必须小上大下/子上父下。<h3 id=\"3-finally\"><a href=\"#3-finally\" class=\"headerlink\" title=\"3. finally\"></a>3. finally</h3></li>\n<li>有些语句，不管是否发生了异常，都必须要执行，那么就可以把这样的语句放到finally语句块中。</li>\n<li>通常在finally中关闭程序块已打开的资源，比如：文件流、释放数据库连接等。<h3 id=\"4-运行示意图\"><a href=\"#4-运行示意图\" class=\"headerlink\" title=\"4. 运行示意图\"></a>4. 运行示意图</h3>try…catch…finally的运行示意图，如图10-9</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530171700.png\" alt></p>\n<h3 id=\"5-示例\"><a href=\"#5-示例\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><p>####（1）示例1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tint a = Integer.parseInt(args[0]);</span><br><span class=\"line\">\t\t\tint b = Integer.parseInt(args[1]);</span><br><span class=\"line\">\t\t\tSystem.out.println(a + &quot;/&quot; + b + &quot;=&quot; + a/b);</span><br><span class=\"line\">\t\t&#125; catch (NumberFormatException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (ArithmeticException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;程序继续...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####（2）示例2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.FileNotFoundException;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestFileReader &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tFileReader fr = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tfr = new FileReader(&quot;d:/a.txt&quot;);</span><br><span class=\"line\">\t\t\tchar c = (char) fr.read();</span><br><span class=\"line\">\t\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\t&#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t//IOException不能放前面，因为FileNotFoundException 是子类</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; finally&#123;</span><br><span class=\"line\">              //可以嵌套</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif(fr!=null)&#123;//需要判断非空</span><br><span class=\"line\">\t\t\t\t\tfr.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;程序继续...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-3-2-显式声明抛出异常（throws）\"><a href=\"#9-3-2-显式声明抛出异常（throws）\" class=\"headerlink\" title=\"9.3.2 显式声明抛出异常（throws）\"></a>9.3.2 显式声明抛出异常（throws）</h3><ul>\n<li>如果一个方法出现Checked Exception，但是并不能确定如何处理这种异常或者不立刻处理它，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</li>\n<li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。如果一个方法抛出多个受检异常，就必须在方法的签名中列出所有的异常，之间以逗号隔开。<h4 id=\"1-示例代码\"><a href=\"#1-示例代码\" class=\"headerlink\" title=\"1. 示例代码\"></a>1. 示例代码</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.FileNotFoundException;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestFileReader2 &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\treadFile(&quot;d:/a.txt&quot;);</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void readFile(String filename) throws FileNotFoundException,IOException&#123;</span><br><span class=\"line\">\t\tFileReader fr = new FileReader(&quot;d:/a.txt&quot;);</span><br><span class=\"line\">\t\tchar c = (char) fr.read();</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\tfr.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-重写方法对throws异常的要求\"><a href=\"#2-重写方法对throws异常的要求\" class=\"headerlink\" title=\"2. 重写方法对throws异常的要求\"></a>2. 重写方法对throws异常的要求</h4><p>重写方法不能抛出比被重写方法范围更大的异常类型。在多态的情况下，对重写方法的调用–异常的捕获按父类声明的异常处理。即</p>\n<ul>\n<li>父类被重写的方法没有声明抛出checked受检异常，那么重写的方法也不能声明抛出异常</li>\n<li>子类重写方法声明抛出的异常的类型和父类被重写的方法声明抛出异常类型一致</li>\n<li>子类重写方法声明抛出的异常的类型是父类被重写的方法声明抛出异常的子类</li>\n<li>子类重写方法可以在方法内部处理异常，而不声明抛出异常<br>正确的示例代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tpublic void method()throws IOException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class B extends A&#123;</span><br><span class=\"line\">\tpublic void method()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class C extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws FileNotFoundException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class D extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws IOException,FileNotFoundException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class E extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws IOException,RuntimeException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>错误的示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tpublic void method()throws IOException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class F extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws Exception &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class G extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws IOException,SQLException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-4-手动抛出异常（throw）\"><a href=\"#9-4-手动抛出异常（throw）\" class=\"headerlink\" title=\"9.4 手动抛出异常（throw）\"></a>9.4 手动抛出异常（throw）</h1><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可以根据需要手动创建并抛出。可以抛出的异常必须是Throwable或其子类的实例。<br>首先要创建异常类对象，然后通过throw语句实现抛出操作，提交给Java运行环境。<br>语法格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw 异常对象;</span><br></pre></td></tr></table></figure>\n<p>不管系统自动生成的还是手动创建的，异常对象一旦抛出都需要使用捕获try…catch或继续抛出throws的方式处理。<br>其次，throw语句可以代替return语句结束方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestThrow &#123;</span><br><span class=\"line\">\tpublic static void check(String username,String password)&#123;</span><br><span class=\"line\">\t\tif(username==null || &quot;&quot;.equals(username.trim()))&#123;</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(&quot;用户名不能为空&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(password==null || &quot;&quot;.equals(password.trim()))&#123;</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(&quot;密码不能为空&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-5-自定义异常\"><a href=\"#9-5-自定义异常\" class=\"headerlink\" title=\"9.5 自定义异常\"></a>9.5 自定义异常</h1><ul>\n<li>在程序中，可能会遇到任何标准异常类都没能充分的描述清楚的问题，这种情况下可以创建自己的异常类。</li>\n<li>从Exception类或者它的子类派生一个子类即可</li>\n<li>习惯上，自定义异常类应该包含2个构造器：一个是无参构造，另一个是带有详细信息的构造器</li>\n<li>自定义的异常只能通过throw抛出。</li>\n<li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestMyException &#123;</span><br><span class=\"line\">\tpublic static void login(String username,String password) throws WrongUsernameOrPassWordException&#123;</span><br><span class=\"line\">\t\tif(!(&quot;admin&quot;.equals(username) &amp;&amp; &quot;123&quot;.equals(password)))&#123;</span><br><span class=\"line\">\t\t\tthrow new WrongUsernameOrPassWordException(&quot;用户名或密码错误&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;登录成功&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class WrongUsernameOrPassWordException extends Exception&#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic WrongUsernameOrPassWordException() &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic WrongUsernameOrPassWordException(String message) &#123;</span><br><span class=\"line\">\t\tsuper(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-6-finally与return\"><a href=\"#9-6-finally与return\" class=\"headerlink\" title=\"9.6 finally与return\"></a>9.6 finally与return</h1><p>执行顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、执行try,catch，给“返回值”临时变量赋值</span><br><span class=\"line\">2、执行finally</span><br><span class=\"line\">3、return</span><br><span class=\"line\">return语句两个作用：给返回值赋值，结束方法运行</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-6-1-从finally的return回来\"><a href=\"#9-6-1-从finally的return回来\" class=\"headerlink\" title=\"9.6.1 从finally的return回来\"></a>9.6.1 从finally的return回来</h2><p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestReturn &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint result = test(&quot;a&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int test(String str)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tInteger.parseInt(str);</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;catch(NumberFormatException e)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;finally&#123;</span><br><span class=\"line\">            System.out.println(&quot;test结束&quot;);</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test结束</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-6-2-从catch的return回来\"><a href=\"#9-6-2-从catch的return回来\" class=\"headerlink\" title=\"9.6.2 从catch的return回来\"></a>9.6.2 从catch的return回来</h2><p>示例代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestReturn &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint result = test(&quot;a&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int test(String str)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tInteger.parseInt(str);</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;catch(NumberFormatException e)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;finally&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;test结束&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test结束</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-6-3-从try的return回来\"><a href=\"#9-6-3-从try的return回来\" class=\"headerlink\" title=\"9.6.3 从try的return回来\"></a>9.6.3 从try的return回来</h2><p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestReturn &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint result = test(&quot;12&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int test(String str)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tInteger.parseInt(str);</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;catch(NumberFormatException e)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;finally&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;test结束&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test结束</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-7-小结\"><a href=\"#9-7-小结\" class=\"headerlink\" title=\"9.7 小结\"></a>9.7 小结</h1><ul>\n<li>要避免使用异常处理代替错误处理，这样会降低程序的清晰性，并且效率低下。</li>\n<li>不要进行小粒度的异常处理——应该将整个任务包装在一个try语句块中。</li>\n<li>异常往往在高层处理。例如：（高层）领导—&gt;员工。调用关系。有问题赶紧上报<br>Java的异常处理机制总体示意图，如图10-10：</li>\n</ul>\n<p><img src=\"http://note.youdao.com/yws/res/6167/B96E6C21D3064CFE8883B3FD2DD151A2\" alt=\"image\"></p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"8. JavaSE-枚举与注解","url":"http://yoursite.com/2016/11/12/8. JavaSE-枚举与注解/","content":"<h1 id=\"8-1-枚举\"><a href=\"#8-1-枚举\" class=\"headerlink\" title=\"8.1 枚举\"></a>8.1 枚举</h1><h2 id=\"8-1-1-什么是枚举\"><a href=\"#8-1-1-什么是枚举\" class=\"headerlink\" title=\"8.1.1 什么是枚举\"></a>8.1.1 什么是枚举</h2><p>类的对象只有有限个的、确定的<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">星期：Monday(星期一)......Sunday(星期天)</span><br><span class=\"line\">性别：Man(男)、Woman(女)</span><br><span class=\"line\">月份：January(1月)......December(12月)</span><br><span class=\"line\">季节：Spring(春节)......Winter(冬天)</span><br><span class=\"line\">七彩标准色：Red(红)......Purple(紫)</span><br><span class=\"line\">支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</span><br><span class=\"line\">就职状态：Busy、Free、Vocation、Dimission</span><br><span class=\"line\">订单状态：Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Return（退货）、Checked（已确认）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-1-2-如何定义枚举类型\"><a href=\"#8-1-2-如何定义枚举类型\" class=\"headerlink\" title=\"8.1.2 如何定义枚举类型\"></a>8.1.2 如何定义枚举类型</h2><p>要点：</p>\n<ul>\n<li>私有化类的构造器，保证不能在类的外部创建其对象 </li>\n<li>在类的内部创建枚举类的实例。声明为：public static final </li>\n</ul>\n<p>JDK1.5之前：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestEnumType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSeason s = Season.SPRING;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Season&#123;</span><br><span class=\"line\">\tpublic static final Season SPRING = new Season();</span><br><span class=\"line\">\tpublic static final Season SUMMER = new Season();</span><br><span class=\"line\">\tpublic static final Season AUTUMN = new Season();</span><br><span class=\"line\">\tpublic static final Season WINTER = new Season();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate Season()&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String toString()&#123;</span><br><span class=\"line\">\t\tif(this == SPRING)&#123;</span><br><span class=\"line\">\t\t\treturn &quot;SPRING&quot;;</span><br><span class=\"line\">\t\t&#125;else if(this == SUMMER)&#123;</span><br><span class=\"line\">\t\t\treturn &quot;SUMMER&quot;;</span><br><span class=\"line\">\t\t&#125;else if(this == AUTUMN)&#123;</span><br><span class=\"line\">\t\t\treturn &quot;AUTUMN&quot;;</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\treturn &quot;WINTER&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK1.5之后：</p>\n<ul>\n<li>使用 enum 定义的枚举类默认继承了 java.lang.Enum类。因此不能再继承其他类。</li>\n<li>枚举类的所有构造器只能使用 private 访问控制符</li>\n<li>枚举类的所有实例必须在枚举类中显式列出(, 分隔    ; 结尾)，必须在枚举类的第一行声明枚举类对象。列出的实例系统会自动添加 public static final 修饰</li>\n<li>JDK 1.5 之后可以在 switch 表达式中使用Enum定义的枚举类的对象作为表达式, case 子句可以直接使用枚举值的名字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.enumtype.after15;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestEnumType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSeason s = Season.SPRING;</span><br><span class=\"line\">\t\tswitch(s)&#123;</span><br><span class=\"line\">\t\tcase SPRING:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;春暖花开&quot;);break;</span><br><span class=\"line\">\t\tcase SUMMER:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;夏日炎炎&quot;);break;</span><br><span class=\"line\">\t\tcase AUTUMN:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;秋高气爽&quot;);break;</span><br><span class=\"line\">\t\tcase WINTER:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;白雪皑皑&quot;);break;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Season&#123;</span><br><span class=\"line\">\tSPRING,SUMMER,AUTUMN,WINTER;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-1-3-java-lang-Enum类的方法\"><a href=\"#8-1-3-java-lang-Enum类的方法\" class=\"headerlink\" title=\"8.1.3 java.lang.Enum类的方法\"></a>8.1.3 java.lang.Enum类的方法</h2><p>除了toString方法，都是final修饰的方法，因此都不能重写</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530132629.png\" alt></p>\n<p>还有两个API文档中没有，但枚举类类拥有并且常用的方法</p>\n<ul>\n<li>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</li>\n<li>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常。</li>\n</ul>\n<h2 id=\"8-1-4-枚举的特别说明\"><a href=\"#8-1-4-枚举的特别说明\" class=\"headerlink\" title=\"8.1.4 枚举的特别说明\"></a>8.1.4 枚举的特别说明</h2><h3 id=\"1、枚举中定义属性\"><a href=\"#1、枚举中定义属性\" class=\"headerlink\" title=\"1、枚举中定义属性\"></a>1、枚举中定义属性</h3><ul>\n<li>枚举类对象的属性不应允许被改动, 所以应该使用 private final修饰。不是语法要求，而是语义要求。</li>\n<li>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值。</li>\n<li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.enumtype.before15;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestWeekField &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tWeek w = Week.MONDAY;</span><br><span class=\"line\">\t\tSystem.out.println(w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Week&#123;</span><br><span class=\"line\">\tMONDAY(&quot;星期一&quot;),</span><br><span class=\"line\">\tTUESDAY(&quot;星期二&quot;),</span><br><span class=\"line\">\tWEDNESDAY(&quot;星期三&quot;),</span><br><span class=\"line\">\tTHURSDAY(&quot;星期四&quot;),</span><br><span class=\"line\">\tFRIDAY(&quot;星期五&quot;),</span><br><span class=\"line\">\tSATURDAY(&quot;星期六&quot;),</span><br><span class=\"line\">\tSUNDAY(&quot;星期日&quot;);</span><br><span class=\"line\">\tprivate final String DESCRPTION;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate Week(String dESCRPTION) &#123;</span><br><span class=\"line\">\t\tDESCRPTION = dESCRPTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String toString()&#123;</span><br><span class=\"line\">\t\treturn DESCRPTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、枚举类可以自定义方法\"><a href=\"#2、枚举类可以自定义方法\" class=\"headerlink\" title=\"2、枚举类可以自定义方法\"></a>2、枚举类可以自定义方法</h3><p>静态和非静态</p>\n<h3 id=\"3、枚举类可以实现一个或者多个接口（了解）\"><a href=\"#3、枚举类可以实现一个或者多个接口（了解）\" class=\"headerlink\" title=\"3、枚举类可以实现一个或者多个接口（了解）\"></a>3、枚举类可以实现一个或者多个接口（了解）</h3><ul>\n<li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li>\n<li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式, 则可以让每个枚举值分别来实现该方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Change&#123;</span><br><span class=\"line\">\tvoid degenerate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Checkable&#123;</span><br><span class=\"line\">\tvoid check();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Gender implements Change,Checkable&#123;</span><br><span class=\"line\">\tMAN&#123;</span><br><span class=\"line\">\t\tpublic void degenerate()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;咔嚓一刀&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,WOMAN&#123;</span><br><span class=\"line\">\t\tpublic void degenerate()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;比较复杂&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tpublic void check()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;脱光&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、枚举类可以自己定义抽象方法（了解）\"><a href=\"#4、枚举类可以自己定义抽象方法（了解）\" class=\"headerlink\" title=\"4、枚举类可以自己定义抽象方法（了解）\"></a>4、枚举类可以自己定义抽象方法（了解）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Payment&#123;</span><br><span class=\"line\">\tCASH&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;现金支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tWECHAT&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;微信支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tALIPAY&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;支付鸨支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tCARD&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;银行卡支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tCREDIT&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;信用卡支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tpublic abstract void pay();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-1-5-关于枚举的拓展\"><a href=\"#8-1-5-关于枚举的拓展\" class=\"headerlink\" title=\"8.1.5 关于枚举的拓展\"></a>8.1.5 关于枚举的拓展</h2><p>java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复；EnumMap中的key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档。</p>\n<h1 id=\"8-2-注解Annotation\"><a href=\"#8-2-注解Annotation\" class=\"headerlink\" title=\"8.2 注解Annotation\"></a>8.2 注解Annotation</h1><p>注解Annotation是从JDK5.0开始引入的新特性。</p>\n<h2 id=\"8-2-1-注解的概述\"><a href=\"#8-2-1-注解的概述\" class=\"headerlink\" title=\"8.2.1 注解的概述\"></a>8.2.1 注解的概述</h2><h3 id=\"1、Annotation的作用\"><a href=\"#1、Annotation的作用\" class=\"headerlink\" title=\"1、Annotation的作用\"></a>1、Annotation的作用</h3><ul>\n<li>注解不是程序本身，可以对程序作出解释。（这一点，跟注释没什么区别）</li>\n<li>可以被其他程序（比如：编译器，Checker Framework等）读取。（注解信息处理流程，是注解和注释的重大区别。如果没有注解信息处理流程，则注解毫无意义）<h3 id=\"2、Annotation的格式\"><a href=\"#2、Annotation的格式\" class=\"headerlink\" title=\"2、Annotation的格式\"></a>2、Annotation的格式</h3>注解是以“@注释名”在代码中存在的，还可以添加一些参数值，例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SuppressWarnings(value=”unchecked”)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、Annotation在哪里使用\"><a href=\"#3、Annotation在哪里使用\" class=\"headerlink\" title=\"3、Annotation在哪里使用\"></a>3、Annotation在哪里使用</h3><p>Annotation 可以像修饰符一样被使用, 可用于修饰包，类, 构造器, 方法, 成员变量, 参数, 局部变量。相当于给它们添加了额外的辅助信息，而且有些注解我们可以通过反射机制编程实现对这些元数据的访问。</p>\n<h2 id=\"8-2-2-常见的注解示例\"><a href=\"#8-2-2-常见的注解示例\" class=\"headerlink\" title=\"8.2.2 常见的注解示例\"></a>8.2.2 常见的注解示例</h2><h3 id=\"1、生成文档\"><a href=\"#1、生成文档\" class=\"headerlink\" title=\"1、生成文档\"></a>1、生成文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@author 标明开发该类模块的作者，多个作者之间使用,分割</span><br><span class=\"line\">@version 标明该类模块的版本</span><br><span class=\"line\">@see 参考转向，也就是相关主题</span><br><span class=\"line\">@since 从哪个版本开始增加的</span><br><span class=\"line\">@param 对方法中某参数的说明，如果没有参数就不能写</span><br><span class=\"line\">@return 对方法返回值的说明，如果方法的返回值类型是void就不能写</span><br><span class=\"line\">@exception 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写</span><br><span class=\"line\">其中 @param  @return 和 @exception 这三个标记都是只用于方法的。</span><br><span class=\"line\">@param的格式要求：@param 形参名 形参类型  形参说明</span><br><span class=\"line\">@return 的格式要求：@return 返回值类型 返回值说明</span><br><span class=\"line\">@exception的格式要求：@exception 异常类型 异常说明</span><br><span class=\"line\">@param和@exception可以并列多个</span><br><span class=\"line\">javadoc.exe就是这些注解的信息处理流程</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.annotation.javadoc;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author Irene</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @see Math.java</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestJavadoc &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 程序的主方法，程序的入口</span><br><span class=\"line\">\t * @param args String[] 命令行参数</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 求圆面积的方法</span><br><span class=\"line\">\t * @param radius double 半径值</span><br><span class=\"line\">\t * @return double 圆的面积</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double getArea(double radius)&#123;</span><br><span class=\"line\">\t\treturn Math.PI * radius * radius;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530133407.png\" alt></p>\n<h3 id=\"2、在编译时进行格式检查\"><a href=\"#2、在编译时进行格式检查\" class=\"headerlink\" title=\"2、在编译时进行格式检查\"></a>2、在编译时进行格式检查</h3><p> JDK中系统内置了常用的三个注解：<br> （1）@Override：按照重写的要求检查方法的格式<br> （2）@Deprecated：过时，表示不鼓励程序员使用这样的元素，因为存在危险或有更好的实现<br> （3）@SuppressWarnings：抑制警告 </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000425.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.annotation.javadoc;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t@SuppressWarnings(&quot;unused&quot;)</span><br><span class=\"line\">\t\tint a = 10;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Deprecated</span><br><span class=\"line\">\tpublic void print()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;过时的方法&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;重写的toString方法()&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、跟踪代码依赖性，实现替代配置文件功能\"><a href=\"#3、跟踪代码依赖性，实现替代配置文件功能\" class=\"headerlink\" title=\"3、跟踪代码依赖性，实现替代配置文件功能\"></a>3、跟踪代码依赖性，实现替代配置文件功能</h3><p>Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.annotation.WebServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">@WebServlet(&quot;/login&quot;)</span><br><span class=\"line\">public class LoginServlet extends HttpServlet &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;servlet-class&gt;com.servlet.LoginServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;url-pattern&gt;/login&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>spring框架中关于“事务”的管理<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(propagation=Propagation.REQUIRES_NEW,</span><br><span class=\"line\">\t\t\t\tisolation=Isolation.READ_COMMITTED,</span><br><span class=\"line\">\t\t\t\treadOnly=false,</span><br><span class=\"line\">                timeout=3)</span><br><span class=\"line\">\tpublic void buyBook(String username, String isbn) &#123;</span><br><span class=\"line\">\t\t//1.查询书的单价</span><br><span class=\"line\">\t\tint price = bookShopDao.findBookPriceByIsbn(isbn);</span><br><span class=\"line\">\t\t//2. 更新库存</span><br><span class=\"line\">\t\tbookShopDao.updateBookStock(isbn);\t</span><br><span class=\"line\">\t\t//3. 更新用户的余额</span><br><span class=\"line\">\t\tbookShopDao.updateUserAccount(username, price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">     &lt;!-- 配置事务属性 --&gt;</span><br><span class=\"line\">\t &lt;tx:advice transaction-manager=&quot;dataSourceTransactionManager&quot; id=&quot;txAdvice&quot;&gt;</span><br><span class=\"line\">\t \t &lt;tx:attributes&gt;</span><br><span class=\"line\">\t \t \t\t&lt;!-- 配置每个方法使用的事务属性 --&gt;</span><br><span class=\"line\">\t \t \t\t&lt;tx:method name=&quot;buyBook&quot; propagation=&quot;REQUIRES_NEW&quot; </span><br><span class=\"line\">\t \t \t\t\t\t   isolation=&quot;READ_COMMITTED&quot;  read-only=&quot;false&quot; </span><br><span class=\"line\">\t \t \t\t\t\t   timeout=&quot;3&quot; /&gt;</span><br><span class=\"line\">\t \t &lt;/tx:attributes&gt;</span><br><span class=\"line\">\t &lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4、JUnit框架中的注解\"><a href=\"#4、JUnit框架中的注解\" class=\"headerlink\" title=\"4、JUnit框架中的注解\"></a>4、JUnit框架中的注解</h3><ul>\n<li>JUnit是由 Erich Gamma 和 Kent Beck 编写的一个回归测试框架（regression testing framework）,供Java开发人员编写单元测试之用。多数Java的开发环境都已经集成了JUnit作为单元测试的工具。</li>\n<li>Junit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。<h4 id=\"1-如何使用JUnit\"><a href=\"#1-如何使用JUnit\" class=\"headerlink\" title=\"1 如何使用JUnit\"></a>1 如何使用JUnit</h4>要使用JUnit，必须在项目的编译路径中必须引入JUnit的库，即相关的.class文件组成的jar包。<br>如何把JUnit的jar添加到编译路径如图所示：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134033.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134123.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134149.png\" alt></p>\n<h4 id=\"2-JUnit的常用注解\"><a href=\"#2-JUnit的常用注解\" class=\"headerlink\" title=\"2 JUnit的常用注解\"></a>2 JUnit的常用注解</h4><ul>\n<li>使用JUnit测试的类必须是public的。</li>\n<li>JUnit4常见的注解和要求：这些方法都必须是public，无参，无返回值。</li>\n<li>@Test：标记在非静态的测试方法上。只有标记@Test的方法才能被作为一个测试方法单独测试。一个类中可以有多个@Test标记的方法。运行时如果只想运行其中一个@Test标记的方法，那么选择这个方法名，然后单独运行，否则整个类的所有标记了@Test的方法都会被执行。-</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test(timeout=1000)：设置超时时间，如果测试时间超过了你定义的timeout，测试失败</span><br><span class=\"line\">@Test(expected)： 申明出会发生的异常，比如 @Test（expected = Exception.class）</span><br><span class=\"line\">了解：</span><br><span class=\"line\">@BeforeClass：标记在静态方法上。因为这个方法只执行一次。在类初始化时执行。</span><br><span class=\"line\">@AfterClass：标记在静态方法上。因为这个方法只执行一次。在所有方法完成后执行。</span><br><span class=\"line\">@Before：标记在非静态方法上。在@Test方法前面执行，而且是在每一个@Test方法前面都执行</span><br><span class=\"line\">@After：标记在非静态方法上。在@Test方法后面执行，而且是在每一个@Test方法后面都执行</span><br><span class=\"line\">@Ignore：标记在本次不参与测试的方法上。这个注解的含义就是“某些方法尚未完成，暂不参与此次测试”。</span><br><span class=\"line\">@BeforeClass、@AfterClass、@Before、@After、@Ignore都是配合@Test它使用的，单独使用没有意义。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.junit.After;</span><br><span class=\"line\">import org.junit.AfterClass;</span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.BeforeClass;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestJUnit2 &#123;</span><br><span class=\"line\">\tprivate static Object[] array;</span><br><span class=\"line\">\tprivate static int total;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@BeforeClass</span><br><span class=\"line\">\tpublic static void init()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;初始化数组&quot;);</span><br><span class=\"line\">\t\tarray = new Object[5];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Before</span><br><span class=\"line\">\tpublic void before()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;调用之前total=&quot; + total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void add()&#123;</span><br><span class=\"line\">\t\t//往数组中存储一个元素</span><br><span class=\"line\">\t\tSystem.out.println(&quot;add&quot;);</span><br><span class=\"line\">\t\tarray[total++] = &quot;hello&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@After</span><br><span class=\"line\">\tpublic void after()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;调用之前total=&quot; + total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@AfterClass</span><br><span class=\"line\">\tpublic static void destroy()&#123;</span><br><span class=\"line\">\t\tarray = null;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;销毁数组&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-如何运行Junit测试方法\"><a href=\"#3-如何运行Junit测试方法\" class=\"headerlink\" title=\"3 如何运行Junit测试方法\"></a>3 如何运行Junit测试方法</h4><p>一个类中可以有多个@Test标记的方法，运行时如果只想运行其中一个@Test标记的方法，那么选择这个方法名，然后单独运行，否则整个类的所有标记了@Test的方法都会被执行。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134423.png\" alt></p>\n<h2 id=\"8-2-3-自定义注解与反射读取注解\"><a href=\"#8-2-3-自定义注解与反射读取注解\" class=\"headerlink\" title=\"8.2.3 自定义注解与反射读取注解\"></a>8.2.3 自定义注解与反射读取注解</h2><ul>\n<li>定义新的 Annotation 类型使用 @interface 关键字</li>\n<li>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明. 其方法名和返回值定义了该成员的名字和类型. 我们称为配置参数。类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</li>\n<li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用 default 关键字</li>\n<li>如果只有一个参数成员，建议使用参数名为value</li>\n<li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 = 参数值”，如果只有一个参数成员，且名称为value，可以省略“value=”</li>\n<li>没有成员定义的 Annotation 称为标记; 包含成员变量的 Annotation 称为元数据 Annotation</li>\n<li>注意：自定义注解必须配上注解的信息处理流程才有意义。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.annotation.javadoc;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">@MyAnnotation(value=&quot;尚硅谷&quot;)</span><br><span class=\"line\">public class TestMyAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tClass clazz = TestMyAnnotation.class;</span><br><span class=\"line\">\t\tAnnotation a = clazz.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">\t\tMyAnnotation m = (MyAnnotation) a;</span><br><span class=\"line\">\t\tString info = m.value();</span><br><span class=\"line\">\t\tSystem.out.println(info);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.TYPE)</span><br><span class=\"line\">@interface MyAnnotation&#123;</span><br><span class=\"line\">\tString value() default &quot;auguigu&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-4-元注解\"><a href=\"#8-2-4-元注解\" class=\"headerlink\" title=\"8.2.4 元注解\"></a>8.2.4 元注解</h2><blockquote>\n<p>Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）@Target</span><br><span class=\"line\">（2）@Retention</span><br><span class=\"line\">（3）@Documented</span><br><span class=\"line\">（4）@Inherited</span><br></pre></td></tr></table></figure>\n<p>在java.lang.annotation包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、@Target</span><br><span class=\"line\">作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134908.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2、@Retention</span><br><span class=\"line\">@Retention定义了该Annotation被保留的时间长短</span><br><span class=\"line\">作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</span><br><span class=\"line\">@Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指定值:</span><br><span class=\"line\">取值（RetentionPoicy）有：</span><br><span class=\"line\">SOURCE:在源文件中有效（即源文件保留）</span><br><span class=\"line\">CLASS:在class文件中有效（即class保留） 这是默认值</span><br><span class=\"line\">RUNTIME:在运行时有效（即运行时保留）当运行 Java 程序时, JVM 会保留注释. 程序可以通过反射获取该注释</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000638.png\" alt><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3、@Documented</span><br><span class=\"line\">Documented 注解表明这个注解应该被 javadoc工具记录。默认情况下,javadoc是不包括注解的，但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理。</span><br><span class=\"line\">4、@Inherited</span><br><span class=\"line\">允许子类继承父类中的注解</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-2-5-JDK1-8注解的新特性\"><a href=\"#8-2-5-JDK1-8注解的新特性\" class=\"headerlink\" title=\"8.2.5 JDK1.8注解的新特性\"></a>8.2.5 JDK1.8注解的新特性</h2><p>Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。  </p>\n<h3 id=\"1、可重复注解\"><a href=\"#1、可重复注解\" class=\"headerlink\" title=\"1、可重复注解\"></a>1、可重复注解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class TestOldAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RoleAnnotations(&#123;@RoleAnnotation(role=&quot;admin&quot;),@RoleAnnotation(role=&quot;manager&quot;),@RoleAnnotation(role=&quot;saler&quot;)&#125;)</span><br><span class=\"line\">\tpublic void add()&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@interface RoleAnnotation&#123;</span><br><span class=\"line\">\tString role() default &quot;admin&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//表示target是所有</span><br><span class=\"line\">@interface RoleAnnotations&#123;</span><br><span class=\"line\">\tRoleAnnotation[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK1.8之后，可读性更好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Repeatable;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestNewAnnotation &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@LimitAnnotation(role=&quot;admin&quot;)</span><br><span class=\"line\">\t@LimitAnnotation(role=&quot;manager&quot;)</span><br><span class=\"line\">\t@LimitAnnotation(role=&quot;saler&quot;)</span><br><span class=\"line\">\tpublic void test()&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Target(ElementType.METHOD)      此处的target必须与LimitAnnotation一致</span><br><span class=\"line\">@interface LimitAnnotations&#123;</span><br><span class=\"line\">\tLimitAnnotation[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Repeatable(LimitAnnotations.class)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@interface LimitAnnotation&#123;</span><br><span class=\"line\">\tString role() default &quot;admin&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、类型注解\"><a href=\"#2、类型注解\" class=\"headerlink\" title=\"2、类型注解\"></a>2、类型注解</h3><p>JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ElementType &#123;</span><br><span class=\"line\">    /** Class, interface (including annotation type), or enum declaration */</span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Field declaration (includes enum constants) */</span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Method declaration */</span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Formal parameter declaration */</span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Constructor declaration */</span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Local variable declaration */</span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Annotation type declaration */</span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Package declaration */</span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Type parameter declaration</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @since 1.8</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Use of a type</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @since 1.8</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在java 8之前，注解只能是在声明的地方所使用，java8开始，注解可以应用在任何地方。</li>\n<li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（eg：泛型声明）。</li>\n<li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.com.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestTypeDefine&lt;@TypeDefine() U&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate U u;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic &lt;@TypeDefine() T&gt; void test(T t)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Target(&#123;ElementType.TYPE_PARAMETER&#125;)</span><br><span class=\"line\">@interface TypeDefine&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">package com.atguigu.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">@MyAnnotation</span><br><span class=\"line\">public class TestAnnotation&lt;U&gt;&#123;</span><br><span class=\"line\">\t@MyAnnotation</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTestAnnotation &lt;@MyAnnotation String&gt; t = null;</span><br><span class=\"line\">\t\tint a = (@MyAnnotation int)2L;</span><br><span class=\"line\">\t\t@MyAnnotation int b = 10;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static &lt;@MyAnnotation T&gt; void method(T t)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(@MyAnnotation String arg)throws @MyAnnotation Exception&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Target(ElementType.TYPE_USE)</span><br><span class=\"line\">@interface MyAnnotation&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类型注解被用来支持在Java的程序中做强类型检查。配合第三方插件工具Checker Framework（使用Checker Framework可以找到类型注解出现的地方并检查），可以在编译的时候检测出<code>runtime error（eg：UnsupportedOperationException； NumberFormatException；NullPointerException异常等都是runtime error）</code>，以提高代码质量。这就是类型注解的作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package checker;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.checkerframework.checker.nullness.qual.NonNull;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestChecker &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tObject obj = null;</span><br><span class=\"line\">\t\tprintNonNullToString(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void printNonNullToString(@NonNull Object object) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(object.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000751.png\" alt></p>\n<p>进入源代码目录   通过javac编译  -processor 后面接注释处理流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac  -processor org.checkerframework.checker.nullness.NullnessChecker TestChecker.java</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000832.png\" alt></p>\n<p>警告处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -Xbootclasspath/p:D:\\software\\eclipse\\checker-framework-2.1.13\\checker\\dist\\jdk8.jar -processor org.checkerframework.checker.nullness.NullnessChecker TestChecker.java</span><br></pre></td></tr></table></figure>\n<p>要配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classpath=.;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar;D:\\software\\eclipse\\checker-framework-2.1.13\\checker\\dist\\checker.jar;D:\\software\\eclipse\\checker-framework-2.1.13\\checker\\dist\\checker-qual.jar;</span><br></pre></td></tr></table></figure>\n<p>注意</p>\n<ul>\n<li>java 5,6,7版本是不支持注解@NonNull，但checker framework 有个向下兼容的解决方案，就是将类型注解@NonNull 用/**/注释起来。 </li>\n</ul>\n<p>这样javac编译器就会忽略掉注释块，但用checker framework里面的javac编译器同样能够检测出@NonNull错误。</p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"7. JavaSE-面向对象高级特性","url":"http://yoursite.com/2016/10/28/7. JavaSE-面向对象高级特性/","content":"<h1 id=\"7-1-Object类\"><a href=\"#7-1-Object类\" class=\"headerlink\" title=\"7.1 Object类\"></a>7.1 Object类</h1><h2 id=\"7-1-1-Object类的特点\"><a href=\"#7-1-1-Object类的特点\" class=\"headerlink\" title=\"7.1.1 Object类的特点\"></a>7.1.1 Object类的特点</h2><blockquote>\n<p>Object类是所有类的根父类, 也就是说如果一个类没有显式声明父类, 那么这个类的父类就是Object类,<br>所以, Object类中的属性和方法会被所有类继承, 都可以直接调用.</p>\n</blockquote>\n<h2 id=\"7-1-2-类中的典型方法\"><a href=\"#7-1-2-类中的典型方法\" class=\"headerlink\" title=\"7.1.2 类中的典型方法\"></a>7.1.2 类中的典型方法</h2><h3 id=\"1-toString\"><a href=\"#1-toString\" class=\"headerlink\" title=\"1. toString()\"></a>1. toString()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String toString()</span><br></pre></td></tr></table></figure>\n<p>这个方法返回当前对象的一个字符串表示, 通常用于描述这个对象的内容.<br>这个方法也会在对象被打印和与字符串拼接时自动调用, 结果还是一个字符串.</p>\n<h3 id=\"2-equals\"><a href=\"#2-equals\" class=\"headerlink\" title=\"2. equals()\"></a>2. equals()</h3><p>表示两个对象内容是否相等, 通常情况下, 两个不同的对象是不相等的, 但是我们可以通过覆盖这个方法,实现两个内容相等, 但不同的对象之间具有等同性比较能力. </p>\n<h3 id=\"3-hashCode\"><a href=\"#3-hashCode\" class=\"headerlink\" title=\"3. hashCode()\"></a>3. hashCode()</h3><p>当两个对象的内容相等时, <strong>equals方法的结果就应该返回true</strong>, 但同时这两个对象调用hashCode方法返回的哈希码值也必须要相等, 相同的道理, 两个hashCode码值不同的对象, <strong>equals方法一定返回false</strong>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Point &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate int x;</span><br><span class=\"line\">\tprivate int y;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Point() &#123;&#125;</span><br><span class=\"line\">\tpublic Point(int x, int y) &#123;</span><br><span class=\"line\">\t\tthis.x = x;</span><br><span class=\"line\">\t\tthis.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setX(int x) &#123;</span><br><span class=\"line\">\t\tthis.x = x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getX() &#123;</span><br><span class=\"line\">\t\treturn x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setY(int y) &#123;</span><br><span class=\"line\">\t\tthis.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getY() &#123;</span><br><span class=\"line\">\t\treturn y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;X:&quot; + x + &quot;,Y:&quot; + y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override // 可以完成真实的比较</span><br><span class=\"line\">\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\tif (obj instanceof Point &amp;&amp; this.x == ((Point)obj).x &amp;&amp; this.y == ((Point)obj).y) &#123;</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int hashCode() &#123;</span><br><span class=\"line\">\t\treturn Integer.parseInt(x * 10 + &quot;&quot; + y * 10);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 返回对象的字符串表示, 通常在打印对象时调用</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;x:&quot; + x + &quot;,y:&quot; + y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PointTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tPoint p1 = new Point(10, 20);</span><br><span class=\"line\">\t\tPoint p2 = new Point(10, 20);</span><br><span class=\"line\">\t\tSystem.out.println(p1 == p2); // 打印false, 因为比较两个对象的地址</span><br><span class=\"line\">\t\tboolean b = p1.equals(p2); // 返回true, 因为比较两个对象的内容</span><br><span class=\"line\">\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(p1.hashCode()); // 两个对象的哈希码也都一样</span><br><span class=\"line\">\t\tSystem.out.println(p2.hashCode());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(p1); // 打印对象时, 打印的其实是对象的toString()方法的结果</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-1-3-Object的使用\"><a href=\"#7-1-3-Object的使用\" class=\"headerlink\" title=\"7.1.3 Object的使用\"></a>7.1.3 Object的使用</h2><p>Object类型通常用于表示任意对象的引用类型, 使用Object类型可以兼容任意对象, 很灵活方便, 也因为Object类是根父类, 所以其中的方法具有普遍性, 便于统一处理.</p>\n<h2 id=\"7-1-4-Object的注意点\"><a href=\"#7-1-4-Object的注意点\" class=\"headerlink\" title=\"7.1.4 Object的注意点\"></a>7.1.4 Object的注意点</h2><p>因为Object类型是父类类型, 所以Object类型的对象究竟是什么类型的对象就变得非常复杂, 所以想要处理不同的子类对象, 比较麻烦, 需要配合instanceof操作符和类型转换. </p>\n<h1 id=\"7-2-static关键字\"><a href=\"#7-2-static关键字\" class=\"headerlink\" title=\"7.2 static关键字\"></a>7.2 static关键字</h1><h2 id=\"7-2-1-static关键字含义\"><a href=\"#7-2-1-static关键字含义\" class=\"headerlink\" title=\"7.2.1 static关键字含义\"></a>7.2.1 static关键字含义</h2><h3 id=\"1-为什么要使用static\"><a href=\"#1-为什么要使用static\" class=\"headerlink\" title=\"1. 为什么要使用static\"></a>1. 为什么要使用static</h3><blockquote>\n<ul>\n<li>有一些数据不必要隶属于每个对象, 例如Chinese类的country属性就应该是China,并且所有对象都应该是相同的, 这样的数据就可以声明成static的, 这样的数据就隶属于类, 通过类就可以直接访问, 当然通过对象也可以访问. </li>\n<li>有一些方法也是相同的道理, 可以被static修饰, 这样的方法只需要通过类调用即可, 不需要创建对象.</li>\n</ul>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530095828.png\" alt></p>\n<h3 id=\"2-使用了static后的变化\"><a href=\"#2-使用了static后的变化\" class=\"headerlink\" title=\"2. 使用了static后的变化\"></a>2. 使用了static后的变化</h3><p>使用了static以后的数据不再是不确定的, 就像对象的创建就是不确定的(也可称之为动态), static是确定的, 和动态形成对比, 所以称之为静态. </p>\n<h3 id=\"3-使用范围：\"><a href=\"#3-使用范围：\" class=\"headerlink\" title=\"3.使用范围：\"></a>3.使用范围：</h3><p>在Java类中，可用static修饰属性、方法、代码块、内部类</p>\n<h3 id=\"4-被修饰后的成员具备以下特点：\"><a href=\"#4-被修饰后的成员具备以下特点：\" class=\"headerlink\" title=\"4.被修饰后的成员具备以下特点：\"></a>4.被修饰后的成员具备以下特点：</h3><p>①    随着类的加载而加载<br>②    优先于对象存在<br>③    修饰的成员，被所有对象所共享<br>④    访问权限允许时，可不创建对象，直接被类调用  </p>\n<h2 id=\"7-2-2-static修饰属性\"><a href=\"#7-2-2-static修饰属性\" class=\"headerlink\" title=\"7.2.2 static修饰属性\"></a>7.2.2 static修饰属性</h2><h3 id=\"1-类属性\"><a href=\"#1-类属性\" class=\"headerlink\" title=\"1. 类属性\"></a>1. 类属性</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530095936.png\" alt></p>\n<h3 id=\"2-类属性的存储\"><a href=\"#2-类属性的存储\" class=\"headerlink\" title=\"2. 类属性的存储\"></a>2. 类属性的存储</h3><p>类属性保存在方法区的类信息数据区中</p>\n<h3 id=\"3-类属性的使用\"><a href=\"#3-类属性的使用\" class=\"headerlink\" title=\"3. 类属性的使用\"></a>3. 类属性的使用</h3><p>类属性可以直接通过类名使用</p>\n<h3 id=\"4-静态属性的特点\"><a href=\"#4-静态属性的特点\" class=\"headerlink\" title=\"4. 静态属性的特点\"></a>4. 静态属性的特点</h3><p>因为隶属于类, 所以静态属性通常是共享数据</p>\n<h2 id=\"7-2-3-static-修饰方法\"><a href=\"#7-2-3-static-修饰方法\" class=\"headerlink\" title=\"7.2.3 static 修饰方法\"></a>7.2.3 static 修饰方法</h2><h3 id=\"1-类方法-class-Method\"><a href=\"#1-类方法-class-Method\" class=\"headerlink\" title=\"1. 类方法(class Method)\"></a>1. 类方法(class Method)</h3><ul>\n<li>没有对象的实例时，可以用类名.方法名()的形式访问由static标记的类方法。</li>\n<li>在static方法内部只能访问类的static属性，不能访问类的非static属性。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">private int id;</span><br><span class=\"line\">       private static int total = 0;</span><br><span class=\"line\">       public static int getTotalPerson() &#123; </span><br><span class=\"line\">\t    \t\tid++;\t//非法</span><br><span class=\"line\">\t\t\t\treturn total;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       public Person() &#123;</span><br><span class=\"line\">         \ttotal++;</span><br><span class=\"line\"> \t\t\t\tid = total;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       public static void main(String[] args) &#123;</span><br><span class=\"line\"> \t\t\t\tSystem.out.println(&quot;Number of total is &quot; +Person.getTotalPerson());</span><br><span class=\"line\">\t\t\t\t//没有创建对象也可以访问静态方法</span><br><span class=\"line\"> \t\t\t\tPerson p1 = new Person();</span><br><span class=\"line\">     \t\t\tSystem.out.println( &quot;Number of total is &quot;+ p1.getTotalPerson());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-类方法特点\"><a href=\"#2-类方法特点\" class=\"headerlink\" title=\"2. 类方法特点\"></a>2. 类方法特点</h3><p>类方法隶属于类, 不能在其中直接访问对象属性, 如果想要访问对象属性, 必须先创建对象, 通过对象再访问对象属性. 而在非静态方法中, 可以直接调用类方法.</p>\n<h2 id=\"7-2-4单例设计模式\"><a href=\"#7-2-4单例设计模式\" class=\"headerlink\" title=\"7.2.4单例设计模式\"></a>7.2.4单例设计模式</h2><blockquote>\n<ul>\n<li>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式。设计模式就像是经典的棋谱，不同的棋局，我们用不同的棋谱，免去我们自己再思考和摸索。</li>\n<li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造方法的访问权限设置为private，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的该类对象的变量也必须定义成静态的。</li>\n</ul>\n</blockquote>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530100642.png\" alt></p>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><p><img src=\"http://note.youdao.com/yws/res/5869/67679F24EB994B5487180C512B907812\" alt=\"image\"></p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530100824.png\" alt></p>\n<h1 id=\"7-3-代码块\"><a href=\"#7-3-代码块\" class=\"headerlink\" title=\"7.3 代码块\"></a>7.3 代码块</h1><h2 id=\"7-3-1-什么是代码块\"><a href=\"#7-3-1-什么是代码块\" class=\"headerlink\" title=\"7.3.1 什么是代码块\"></a>7.3.1 什么是代码块</h2><h3 id=\"1-什么是代码块\"><a href=\"#1-什么是代码块\" class=\"headerlink\" title=\"1. 什么是代码块\"></a>1. 什么是代码块</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530100959.png\" alt></p>\n<h3 id=\"2-静态代码块\"><a href=\"#2-静态代码块\" class=\"headerlink\" title=\"2.静态代码块\"></a>2.静态代码块</h3><ul>\n<li>一个类中初始化块若有修饰符，则只能被static修饰，称为静态代码块(static block )，当类被载入时，类属性的声明和静态代码块先后顺序被执行，且只被执行一次。</li>\n<li>static块通常用于初始化static (类)属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">\tpublic static int total;</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t        total = 100;//为total赋初值 </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t…… //其它属性或方法声明</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-非静态代码块\"><a href=\"#3-非静态代码块\" class=\"headerlink\" title=\"3. 非静态代码块\"></a>3. 非静态代码块</h3><ul>\n<li>概念：没有static修饰的代码块</li>\n<li>特点：<br>①    可以有输出语句。<br>②    可以对类的属性、类的声明进行初始化操作。<br>③    可以调用静态的变量或方法。<br>④    若有多个非静态的代码块，那么按照从上到下的顺序依次执行。<br>⑤    每次创建对象的时候，都会执行一次。且先于构造器执行  </li>\n</ul>\n<h3 id=\"4-静态和非静态关系\"><a href=\"#4-静态和非静态关系\" class=\"headerlink\" title=\"4 静态和非静态关系\"></a>4 静态和非静态关系</h3><h4 id=\"非静态的本质是什么\"><a href=\"#非静态的本质是什么\" class=\"headerlink\" title=\"非静态的本质是什么\"></a>非静态的本质是什么</h4><p>非静态也可以称为动态, 意思是确定的, 在程序中对象的创建是不确定的, 因为只要new就会产生对象, 所以非静态的概念必然是和对象相关的.</p>\n<h4 id=\"静态的本质是什么\"><a href=\"#静态的本质是什么\" class=\"headerlink\" title=\"静态的本质是什么\"></a>静态的本质是什么</h4><p>静态的就是确定的, 唯一的, 在程序中是稳定的, 和有无对象无关, 也和有多少对象无关, 只和类相关, 所以, 所以静态成员是稳定并唯一的.</p>\n<h4 id=\"如何互相使用\"><a href=\"#如何互相使用\" class=\"headerlink\" title=\"如何互相使用\"></a>如何互相使用</h4><p>在非静态环境中可以中直接使用静态成员, 因为在非静态环境中, 对象必然是已经创建了, 对象既然已经创建, 类也肯定已经加载过了, 所以在使用上并不会有问题.</p>\n<blockquote>\n<p>但是 在静态环境中却不可以直接使用非静态成员, 因为静态成员可以使用, 不要求对象,只要求类加载好就可以了, 但是类加载, 并不意味着一定要创建对象, 并且对象创建在哪里也不知道. 所以在静态环境中不可以直接访问非静态成员, 因为非静态成员隶属于对象, 所以在静态环境中只能通过创建对象, 并再通过对象来间接访问非静态成员.</p>\n</blockquote>\n<h2 id=\"7-3-2-执行顺序\"><a href=\"#7-3-2-执行顺序\" class=\"headerlink\" title=\"7.3.2 执行顺序\"></a>7.3.2 执行顺序</h2><h3 id=\"1-创建对象时-在同一个类中执行顺序\"><a href=\"#1-创建对象时-在同一个类中执行顺序\" class=\"headerlink\" title=\"1. 创建对象时, 在同一个类中执行顺序\"></a>1. 创建对象时, 在同一个类中执行顺序</h3><p>在同一个类中, 如果创建这个类的对象, 执行顺序是</p>\n<blockquote>\n<p>1静态属性声明<br>2静态语句块或静态属性的显式初始化<br>3非静态属性声明<br>4非静态语句块或非静态属性的显式初始化<br>构造器</p>\n</blockquote>\n<h3 id=\"2-创建对象时-有继承关系存在时执行顺序\"><a href=\"#2-创建对象时-有继承关系存在时执行顺序\" class=\"headerlink\" title=\"2. 创建对象时, 有继承关系存在时执行顺序\"></a>2. 创建对象时, 有继承关系存在时执行顺序</h3><p>a)    父类的静态属性声明<br>b)    父类的静态语句块或父类静态属性的显式赋值<br>c)    子类的静态属性声明<br>d)    子类的静态语句块或子类静态属性的显式赋值<br>e)    父类非静态属性的声明<br>f)    子类非静态属性的声明<br>g)    父类的非静态语句块或父类非静态属性的显式赋值<br>h)    父类构造器<br>i)    子类的非静态语句块或子类非静态属性的显式赋值<br>j)    子类构造器  </p>\n<h1 id=\"7-4-final关键字\"><a href=\"#7-4-final关键字\" class=\"headerlink\" title=\"7.4 final关键字\"></a>7.4 final关键字</h1><h2 id=\"7-4-1-final关键字的含义\"><a href=\"#7-4-1-final关键字的含义\" class=\"headerlink\" title=\"7.4.1 final关键字的含义\"></a>7.4.1 final关键字的含义</h2><h3 id=\"1-final的作用\"><a href=\"#1-final的作用\" class=\"headerlink\" title=\"1. final的作用\"></a>1. final的作用</h3><ul>\n<li>在Java中声明类、属性和方法时，可使用关键字final来修饰,表示“最终”。</li>\n<li>final标记的类不能被继承。提高安全性，提高程序的可读性。<br><code>比如：String类、System类、StringBuffer类</code></li>\n<li>final标记的方法不能被子类重写。<br><code>比如：Object类中的getClass()。</code></li>\n<li>final标记的变量(成员变量或局部变量)即称为常量。名称大写，且只能被赋值一次。</li>\n<li>final标记的成员变量必须在声明的同时或在每个构造方法中或代码块中显式赋值，然后才能使用。<br><code>比如：final double PI=3.14;</code></li>\n</ul>\n<h2 id=\"7-4-2-final修饰类\"><a href=\"#7-4-2-final修饰类\" class=\"headerlink\" title=\"7.4.2 final修饰类\"></a>7.4.2 final修饰类</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530101645.png\" alt></p>\n<h2 id=\"7-4-3-final修饰方法\"><a href=\"#7-4-3-final修饰方法\" class=\"headerlink\" title=\"7.4.3 final修饰方法\"></a>7.4.3 final修饰方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530101723.png\" alt></p>\n<h2 id=\"7-4-4-final修饰变量\"><a href=\"#7-4-4-final修饰变量\" class=\"headerlink\" title=\"7.4.4 final修饰变量\"></a>7.4.4 final修饰变量</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530101918.png\" alt></p>\n<h2 id=\"7-7-5-空final量和final修饰局部变量\"><a href=\"#7-7-5-空final量和final修饰局部变量\" class=\"headerlink\" title=\"7.7.5 空final量和final修饰局部变量\"></a>7.7.5 空final量和final修饰局部变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int totalNumber = 5 ;</span><br><span class=\"line\">\tpublic final int ID; // 空final量, 在构造器中初始化</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Test()&#123;</span><br><span class=\"line\">\t\tID = ++totalNumber;  //可在构造方法中给final变量赋值</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTest t = new Test();</span><br><span class=\"line\">\t\tSystem.out.println(t.ID);\t\t</span><br><span class=\"line\">\t\tfinal int I = 10;</span><br><span class=\"line\">\t\tfinal int J;</span><br><span class=\"line\">\t\tJ = 20;</span><br><span class=\"line\">\t\tJ = 30; // 不可以再次赋值</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-5-native关键字\"><a href=\"#7-5-native关键字\" class=\"headerlink\" title=\"7.5 native关键字\"></a>7.5 native关键字</h1><h2 id=\"7-5-1-native含义\"><a href=\"#7-5-1-native含义\" class=\"headerlink\" title=\"7.5.1 native含义\"></a>7.5.1 native含义</h2><blockquote>\n<p>native表示本地的意思, 可以修饰方法, 被native修饰的方法没有方法体, 所谓本地就是代码是和当前操作系统密切相关的. 方法没有java代码的方法体, 但是一定是使用了C/C++等编写成的, 并且封装在操作系统相关的库文件中. 在执行这样的方法时, 实际执行的是库中的代码.</p>\n</blockquote>\n<h2 id=\"7-5-2-native关键字使用场景\"><a href=\"#7-5-2-native关键字使用场景\" class=\"headerlink\" title=\"7.5.2 native关键字使用场景\"></a>7.5.2 native关键字使用场景</h2><p>有一些代码需要和底层设备交互, 而这些交互的功能并未由JDK提供现成的类库, 那么必须使用native方式让java程序和库交互, 再由库完成对底层设备的使用.</p>\n<h2 id=\"7-5-3-native关键字特点\"><a href=\"#7-5-3-native关键字特点\" class=\"headerlink\" title=\"7.5.3 native关键字特点\"></a>7.5.3 native关键字特点</h2><p><strong>特点</strong>：用native修饰的方法是调用的库中的代码, 所以这样的代码如果再换一个平台就会出现问题, 无法实现跨平台.</p>\n<h1 id=\"7-6-抽象类\"><a href=\"#7-6-抽象类\" class=\"headerlink\" title=\"7.6 抽象类\"></a>7.6 抽象类</h1><h2 id=\"7-6-1-抽象类概念\"><a href=\"#7-6-1-抽象类概念\" class=\"headerlink\" title=\"7.6.1 抽象类概念\"></a>7.6.1 抽象类概念</h2><h3 id=\"1-抽象类-abstract-class\"><a href=\"#1-抽象类-abstract-class\" class=\"headerlink\" title=\"1.抽象类(abstract class)\"></a>1.抽象类(abstract class)</h3><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类就可以声明为抽象类。</p>\n<h3 id=\"2-抽象类和具体类\"><a href=\"#2-抽象类和具体类\" class=\"headerlink\" title=\"2. 抽象类和具体类\"></a>2. 抽象类和具体类</h3><p>抽象类与具体类</p>\n<ul>\n<li>具体类—对现实世界一种实体的抽象定义。</li>\n<li>抽象类—对现实世界一种类型的多种实体的统一抽象定义。<br>例如： </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pet类应定义为抽象类</span><br><span class=\"line\">Bird类应定义为具体类</span><br><span class=\"line\">抽象类中可声明抽象方法</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\">\tpublic abstract class Pet &#123;</span><br><span class=\"line\">            public abstract void speak();</span><br><span class=\"line\">            ……</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-6-2特点\"><a href=\"#7-6-2特点\" class=\"headerlink\" title=\"7.6.2特点\"></a>7.6.2特点</h2><p>①用abstract关键字来修饰一个类时，这个类叫做抽象类；<br>②用abstract来修饰一个方法时，该方法叫做抽象方法。<br>抽象方法：只有方法的声明，没有方法的实现。以分号结束：<code>abstract int abstractMethod( int a );</code><br>含有抽象方法的类必须被声明为抽象类。</p>\n<ul>\n<li>抽象类不能被实例化。抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。  </li>\n<li>若没有重写全部的抽象方法，仍为抽象类。  </li>\n<li>不能用abstract修饰属性、私有方法、构造器、静态方法、final的方法。</li>\n</ul>\n<h2 id=\"7-6-3抽象类使用\"><a href=\"#7-6-3抽象类使用\" class=\"headerlink\" title=\"7.6.3抽象类使用\"></a>7.6.3抽象类使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Pet &#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate int weight;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Pet(String name, int age, int weight) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.weight = weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic abstract void speak(); // 抽象方法,仅有方法签名没有方法体,因此不能执行</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic abstract void eat(); </span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird extends Pet &#123;</span><br><span class=\"line\">\tprivate int flySpeed;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Bird(String name, int age, int weight, int flySpeed) &#123;</span><br><span class=\"line\">\t\tsuper(name, age, weight);</span><br><span class=\"line\">\t\tthis. flySpeed = flySpeed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getFlySpeed() &#123;</span><br><span class=\"line\">\t\treturn flySpeed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void speak() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;布谷布谷...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void eat() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Eating...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestAbstract &#123;</span><br><span class=\"line\">    public static void main(String args[]) &#123;</span><br><span class=\"line\">        Pet pet = new Bird(&quot;小布&quot;, 1, 100, 20); // 抽象类适用于多态</span><br><span class=\"line\">        pet.speak(); // 虚拟方法调用, 执行子类方法, 父类方法是抽象的, 无法执行</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-6-4-使用场景\"><a href=\"#7-6-4-使用场景\" class=\"headerlink\" title=\"7.6.4 使用场景\"></a>7.6.4 使用场景</h2><p>解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java允许类设计者指定：</span><br><span class=\"line\">\t    超类声明一个方法但不提供实现，</span><br><span class=\"line\">\t    该方法的实现由子类提供。</span><br><span class=\"line\">\t    这样的方法称为抽象方法。</span><br><span class=\"line\">\t    有一个或更多抽象方法的类称为抽象类。</span><br></pre></td></tr></table></figure>\n<p>Vehicle是一个抽象类，有两个抽象方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Vehicle&#123;</span><br><span class=\"line\">\tpublic abstract double calcFuelEfficiency();\t//计算燃料效率的抽象方法</span><br><span class=\"line\">\tpublic abstract double calcTripDistance();\t//计算行驶距离的抽象方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Truck extends Vehicle&#123;</span><br><span class=\"line\">\tpublic double calcFuelEfficiency( )   &#123; //写出计算卡车的燃料效率的具体方法   &#125;</span><br><span class=\"line\">\tpublic double calcTripDistance( )    &#123;  //写出计算卡车行驶距离的具体方法   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class RiverBarge extends Vehicle&#123;</span><br><span class=\"line\">\t public double calcFuelEfficiency( ) &#123; //写出计算驳船的燃料效率的具体方法  &#125;</span><br><span class=\"line\">\t public double calcTripDistance( )  &#123;  //写出计算驳船行驶距离的具体方法&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：抽象类不能实例化   new Vihicle()是非法的</p>\n<h1 id=\"7-7-接口\"><a href=\"#7-7-接口\" class=\"headerlink\" title=\"7.7 接口\"></a>7.7 接口</h1><h2 id=\"7-7-1-接口的概念\"><a href=\"#7-7-1-接口的概念\" class=\"headerlink\" title=\"7.7.1 接口的概念\"></a>7.7.1 接口的概念</h2><h3 id=\"1-什么是接口\"><a href=\"#1-什么是接口\" class=\"headerlink\" title=\"1. 什么是接口\"></a>1. 什么是接口</h3><p>   接口的用途是用来定义现实世界不同类型事物的共同行为特征。<br>    例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">飞行特征（包括起飞，飞行、着陆等行为）是鸟和飞机所共有的。</span><br><span class=\"line\">\t鸟和飞机可定义为具体类</span><br><span class=\"line\">\t它们的共同行为特征可被定义在接口中</span><br><span class=\"line\">\t接口中所有方法均为抽象方法</span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">\tpublic interface Flyer &#123;</span><br><span class=\"line\">\t\t  public void takeoff();</span><br><span class=\"line\">\t\t  ……</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-接口的组成\"><a href=\"#2-接口的组成\" class=\"headerlink\" title=\"2. 接口的组成\"></a>2. 接口的组成</h3><p>接口可以包含以下成员：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①属性</span><br><span class=\"line\">\t接口中的所有属性均被视静态常量。</span><br><span class=\"line\">\t例如，下面几种方式的声明是等效的：</span><br><span class=\"line\">int num = 10;</span><br><span class=\"line\">public int num = 10;</span><br><span class=\"line\">public static final int num = 10;</span><br><span class=\"line\">②抽象方法</span><br><span class=\"line\">接口中所有方法均为抽象方法。</span><br><span class=\"line\">例如，下面两种方式的声明是等效的：</span><br><span class=\"line\">public abstract void takeoff();</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Flyer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public abstract void takeoff();</span><br><span class=\"line\">    public void land();</span><br><span class=\"line\">public void fly();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-7-2-接口的使用\"><a href=\"#7-7-2-接口的使用\" class=\"headerlink\" title=\"7.7.2 接口的使用\"></a>7.7.2 接口的使用</h2><p>1、有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。<br>2、一个类可以实现多个接口，<br>3、接口不能被实例化  </p>\n<ul>\n<li>具体类（子类）可以实现接口（父类） ，并实现接口中的全部抽象方法</li>\n<li>class SubClass implements InterfaceA{ }</li>\n</ul>\n<p>4、具体类适用父接口的多态<br>5、接口也可以继承其它接口。<br>6、实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍为抽象类。<br>7、接口的主要用途就是被实现类实现。（面向接口编程）<br>8、一个类可以同时继承父类并实现接口</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530103212.png\" alt></p>\n<h2 id=\"7-7-3-接口的注意事项\"><a href=\"#7-7-3-接口的注意事项\" class=\"headerlink\" title=\"7.7.3 接口的注意事项\"></a>7.7.3 接口的注意事项</h2><ul>\n<li>如果实现接口的类中没有实现接口中的全部方法，必须将此类定义为抽象类 </li>\n<li>接口也可以继承另一个接口，使用extends关键字。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface MyInterface&#123;</span><br><span class=\"line\">\t\t\tString s=“MyInterface”;</span><br><span class=\"line\">\t\t\tpublic void absM1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tinterface SubInterface extends MyInterface&#123;</span><br><span class=\"line\">\t\t\tpublic void absM2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic class SubAdapter implements SubInterface&#123;</span><br><span class=\"line\">\t\t\tpublic void absM1()&#123;System.out.println(“absM1”);&#125;</span><br><span class=\"line\">\t\t\tpublic void absM2()&#123;System.out.println(“absM2”);&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类SubAdapter必须给出接口SubInterface以及父接口MyInterface中所有方法的实现。</p>\n<h2 id=\"7-7-4-接口小结\"><a href=\"#7-7-4-接口小结\" class=\"headerlink\" title=\"7.7.4 接口小结\"></a>7.7.4 接口小结</h2><p>接口的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①用interface来定义。</span><br><span class=\"line\">②接口中的所有成员变量都默认是由public static final修饰的。</span><br><span class=\"line\">③接口中的所有方法都默认是由public abstract修饰的。</span><br><span class=\"line\">④接口没有构造器。</span><br><span class=\"line\">⑤接口采用多继承机制。</span><br><span class=\"line\">⑥接口定义举例</span><br><span class=\"line\">    public interface Runner &#123;</span><br><span class=\"line\">\t\t\tint ID = 1;</span><br><span class=\"line\">\t\t\tvoid start();</span><br><span class=\"line\">\t\t\tpublic void run();</span><br><span class=\"line\">\t\t\tvoid stop();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-7-5-接口和抽象类的关系\"><a href=\"#7-7-5-接口和抽象类的关系\" class=\"headerlink\" title=\"7.7.5 接口和抽象类的关系\"></a>7.7.5 接口和抽象类的关系</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530103339.png\" alt></p>\n<h2 id=\"7-7-6-接口在java8中的变化\"><a href=\"#7-7-6-接口在java8中的变化\" class=\"headerlink\" title=\"7.7.6 接口在java8中的变化\"></a>7.7.6 接口在java8中的变化</h2><p>Java 8中，你可以为接口添加默认方法和静态方法。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p>\n<ul>\n<li>默认方法：默认方法使用 default 关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。<br>比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</li>\n<li>静态方法：使用 static 关键字修饰。可以通过接口直接调用静态方法，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。你可以在标准库中找到像Collection/Collections或者Path/Paths这样成对的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface AA &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    double PI = 3.14;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic default void method() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;北京&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefault String method1() &#123;</span><br><span class=\"line\">\t\treturn &quot;上海&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(“hello lambda!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>①若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时<br>选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。  </p>\n<p>②接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530103531.png\" alt></p>\n<h1 id=\"7-8-内部类\"><a href=\"#7-8-内部类\" class=\"headerlink\" title=\"7.8 内部类\"></a>7.8 内部类</h1><h2 id=\"7-8-1-什么是内部类\"><a href=\"#7-8-1-什么是内部类\" class=\"headerlink\" title=\"7.8.1 什么是内部类\"></a>7.8.1 什么是内部类</h2><ol>\n<li>概念</li>\n</ol>\n<ul>\n<li>在Java中，允许一个类的定义位于另一个类的内部，前者称为内部类，后者称为外部类。</li>\n<li>Inner class一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。</li>\n<li>Inner class的名字不能与包含它的类名相同；</li>\n<li>Inner class可以使用外部类的私有数据，因为它是外部类的成员，同一个类的成员之间可相互访问。而外部类要访问内部类中的成员需要:内部类.成员或者内部类对象.成员。<br>分类：成员内部类（static成员内部类嵌套类和成员内部类）<pre><code>局部内部类（不谈修饰符）、匿名内部类\n</code></pre></li>\n</ul>\n<h2 id=\"7-8-2-成员内部类\"><a href=\"#7-8-2-成员内部类\" class=\"headerlink\" title=\"7.8.2 成员内部类\"></a>7.8.2 成员内部类</h2><h3 id=\"1-普通内部类\"><a href=\"#1-普通内部类\" class=\"headerlink\" title=\"1. 普通内部类\"></a>1. 普通内部类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate int s;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class B &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void mb() &#123;</span><br><span class=\"line\">\t\t\ts = 100; // 在普通内部类的方法中, 可以直接外部类的私有成员.</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;在内部类B中s=&quot; + s);</span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void ma() &#123;</span><br><span class=\"line\">\t\tB i = new B();</span><br><span class=\"line\">\t\ti.mb();</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tA o = new A();</span><br><span class=\"line\">\t\to.ma(); // 调用外部类的方法, 间接创建了内部类对象并调用了内部类对象的方法</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class A &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tprivate int s = 111;</span><br><span class=\"line\">        </span><br><span class=\"line\">\tpublic class B &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tprivate int s = 222;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpublic void mb(int s) &#123;</span><br><span class=\"line\">\t        System.out.println(s);        // 访问最近的形参值:333</span><br><span class=\"line\">\t        System.out.println(this.s);     // 访问本类当前对象的属性:222</span><br><span class=\"line\">\t        System.out.println(A.this.s);   // 访问外部类的当前对象的属性:111</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;    </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tA a = new A();</span><br><span class=\"line\">\t\tA.B b = a.new B(); // 在测试类中创建普通内部类的对象需要使用外部类对象</span><br><span class=\"line\">\t\tb.mb(333); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-嵌套类\"><a href=\"#2-嵌套类\" class=\"headerlink\" title=\"2. 嵌套类\"></a>2. 嵌套类</h3><p>被static修饰的成员内部类就称为嵌套类.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate int s;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static class B &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void mb() &#123;</span><br><span class=\"line\">\t\t\t//s = 100; // 在嵌套类的方法中, 不可以直接外部类的非静态成员.</span><br><span class=\"line\">\t\t\t//System.out.println(&quot;在内部类B中s=&quot; + s);</span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void ma() &#123;</span><br><span class=\"line\">\t\tB i = new B();</span><br><span class=\"line\">\t\ti.mb();</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tA.B b = new A.B(); // 创建嵌套类对象, 不需要外部类的对象</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-8-3-局部内部类\"><a href=\"#7-8-3-局部内部类\" class=\"headerlink\" title=\"7.8.3 局部内部类\"></a>7.8.3 局部内部类</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h3><p>在方法体中声明的内部类就是局部内部类, 局部内部类的范围和局部变量类似.</p>\n<h3 id=\"2-普通局部内部类\"><a href=\"#2-普通局部内部类\" class=\"headerlink\" title=\"2. 普通局部内部类\"></a>2. 普通局部内部类</h3><p>在方法中声明的内部类, 有类名, 使用和普通类类似.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;    </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tclass A &#123;</span><br><span class=\"line\">\t\t\tpublic void test();</span><br><span class=\"line\">\t\t&#125;; </span><br><span class=\"line\">\t\tA a = new A();</span><br><span class=\"line\">\t\ta.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-匿名内部类\"><a href=\"#3-匿名内部类\" class=\"headerlink\" title=\"3. 匿名内部类\"></a>3. 匿名内部类</h3><p>在方法中声明的内部类,   但是没有class关键字和具体类名, 称为匿名内部类, 因为没有类名, 所以必须在声明内部类的同时创建对象, 否则无法创建对象了.<br>所以匿名内部类的语法是 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类 引用 = new 父类(实参列表) &#123;类体&#125;;</span><br></pre></td></tr></table></figure>\n<p>匿名内部类最常用用法是new 后面的类名是已经存在的类, 或抽象类, 或接口. 如果是抽象类或接口, 则匿名内部类类体中必须实现全部的抽象方法, 由此可见, 匿名内部类只能作为new后面的类或抽象或接口的子类存在, 但是没有类名, 所以通常在声明的时候就创建对象.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface A &#123;</span><br><span class=\"line\">    public void a();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;    </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tnew A() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">\t\t\tpublic void a() &#123;</span><br><span class=\"line\">                System.out.println(“匿名内部类实现接口方法”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t\t&#125;.a(); // 打印输出内容…</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"6. JavaSE-面向对象基本特征","url":"http://yoursite.com/2016/10/15/6. JavaSE-面向对象基本特征/","content":"<h1 id=\"6-1-基本特征一-封装\"><a href=\"#6-1-基本特征一-封装\" class=\"headerlink\" title=\"6.1 基本特征一 封装\"></a>6.1 基本特征一 封装</h1><h2 id=\"6-1-1访问控制修饰符作用\"><a href=\"#6-1-1访问控制修饰符作用\" class=\"headerlink\" title=\"6.1.1访问控制修饰符作用\"></a>6.1.1访问控制修饰符作用</h2><p>访问控制修饰符的作用是控制类中的成员可以在哪些范围内被访问到</p>\n<h2 id=\"6-1-2访问控制修饰符\"><a href=\"#6-1-2访问控制修饰符\" class=\"headerlink\" title=\"6.1.2访问控制修饰符\"></a>6.1.2访问控制修饰符</h2><p>用的最多的有2个</p>\n<blockquote>\n<p>1    public 公共的意思, 访问范围最大, 可以任意范围内访问<br>2    private 私有的意思, 访问范围最小, 只能在本类中被访问</p>\n</blockquote>\n<h2 id=\"6-1-3-如何封装\"><a href=\"#6-1-3-如何封装\" class=\"headerlink\" title=\"6.1.3 如何封装\"></a>6.1.3 如何封装</h2><h3 id=\"6-1-3-1-成员\"><a href=\"#6-1-3-1-成员\" class=\"headerlink\" title=\"6.1.3.1 成员\"></a>6.1.3.1 成员</h3><p>类中的要素,<strong>属性, 方法, 构造器, 代码块, 成员内部类</strong>, 这些要素都隶属于类, 对于本类而言, 这些要素就是互为成员, 既然是互为成员, 那么它们之间的互相访问是没有任何障碍.</p>\n<h3 id=\"6-1-3-2-成员私有化\"><a href=\"#6-1-3-2-成员私有化\" class=\"headerlink\" title=\"6.1.3.2 成员私有化\"></a>6.1.3.2 成员私有化</h3><p>只需要把类中的成员使用private修饰就是私有化了, 而一旦成员被私有化, 这个成员也称为被封装了<br><strong>注意 : 代码块不能封装</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name; // 对象属性</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate String gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void eat(String something) &#123;</span><br><span class=\"line\">System.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-1-3-3-封装的问题\"><a href=\"#6-1-3-3-封装的问题\" class=\"headerlink\" title=\"6.1.3.3 封装的问题\"></a>6.1.3.3 封装的问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); </span><br><span class=\"line\">        // 下面的语句都不能执行了, 因为在测试类中,不能直接跨类访问别的类中的私有成员</span><br><span class=\"line\">        //t.name = “张三”;</span><br><span class=\"line\">        //t.age = 30;</span><br><span class=\"line\">        //t.gender = “男”;</span><br><span class=\"line\">        //System.out.println(t.name); </span><br><span class=\"line\">//System.out.println(t.age); </span><br><span class=\"line\">//System.out.println(t.age); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-get-set方法\"><a href=\"#1-get-set方法\" class=\"headerlink\" title=\"1  get/set方法\"></a>1  get/set方法</h4><blockquote>\n<p>   因为成员一旦私有化, 就不可以在其他类中直接访问了, 但是在其他类中仍然有访问的需求, 成员之间是可以互相访问的, 所以解决这个问题的方法就是在本类中添加一些公共方法, 通过方法间接访问类中的私有成员.</p>\n</blockquote>\n<p>public class Teacher {</p>\n<pre><code>private String name = &quot;某老师&quot;; // 实例变量, 私有化属性, 封装\nprivate int age = 30; // 当属性被私有化时, 只能在本类中使用\nprivate String gender = &quot;男&quot;;\n\n// 用于间接设置name属性, 所以方法必须公共的\npublic void setName(String n) {\n    name = n; \n}\n\n// 用于间接获取name属性, 所以方法必须公共的\npublic String getName() {\n    return name; \n}\n\npublic void setGender(String g) {\n    gender = g;\n}\n\npublic String getGender() {\n    return gender;\n}\n\npublic void setAge(int age) { \n    this.age = age;\n}\n\n// get方法有返回值, 没有参数\npublic int getAge() {\n    return age;\n}\n\n// 实例方法\npublic void lesson() {\n    System.out.println(name + &quot;老师在上课&quot;); // 成员可以互访\n}\n\npublic void eat(String something) {\n    System.out.println(&quot;老师在吃&quot; + something);\n}\n\n// 描述对象的详细信息, 把所有的属性值串接成一个字符串\npublic String say() {\n    String str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;\n    return str;\n}\n</code></pre><p>}</p>\n<h4 id=\"2-间接访问属性\"><a href=\"#2-间接访问属性\" class=\"headerlink\" title=\"2.间接访问属性\"></a>2.间接访问属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher();</span><br><span class=\"line\">\t\tt.setName(&quot;张老师&quot;);// 通过方法设置属性</span><br><span class=\"line\">\t\tt.setAge(30); </span><br><span class=\"line\">\t\tt.setGender(&quot;男&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(t.getName());</span><br><span class=\"line\">\t\tSystem.out.println(t.getAge());// 通过方法获取属性</span><br><span class=\"line\">\t\tSystem.out.println(t.getGender());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-为什么要封装\"><a href=\"#3-为什么要封装\" class=\"headerlink\" title=\"3. 为什么要封装\"></a>3. 为什么要封装</h4><p>如果不使用封装而直接访问对象的属性, 就可以给属性赋上一些不合理的数据值, 比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t.age = 50000; // 显然这个操作是应该失败的, 因为年龄不合理</span><br></pre></td></tr></table></figure>\n<p>但是如果通过方法来赋值, 就可以把这种错误拦截住<br>相同的道理, 如果要获取某个属性, 但是需要在内部再处理一下, 也可以通过方法来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 保护数据</span><br><span class=\"line\">\tpublic void setAge(int a) &#123; </span><br><span class=\"line\">\t\tif (a &gt; 120 || a &lt; 0) &#123; // 当参数中传入的数据不合理时, 方法直接返回, 不给对象的属性赋值</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-2-构造器\"><a href=\"#6-2-构造器\" class=\"headerlink\" title=\"6.2 构造器\"></a>6.2 构造器</h1><h2 id=\"6-2-1-什么是构造器\"><a href=\"#6-2-1-什么是构造器\" class=\"headerlink\" title=\"6.2.1 什么是构造器\"></a>6.2.1 什么是构造器</h2><h3 id=\"1-什么是初始化\"><a href=\"#1-什么是初始化\" class=\"headerlink\" title=\"1. 什么是初始化\"></a>1. 什么是初始化</h3><pre><code>对象在刚创建时进行的工作就称为初始化, 初始化的主要工作是针对对象的属性的.\n</code></pre><h3 id=\"2-构造器概念\"><a href=\"#2-构造器概念\" class=\"headerlink\" title=\"2.构造器概念\"></a>2.构造器概念</h3><p>   当对象创建时, 希望对象的属性值被正确赋值, 此时就需要用到了构造器, 构造器也称为构造方法, 本质上构造器就是一个方法, 是一个特殊的方法.</p>\n<h3 id=\"3-如何定义构造器\"><a href=\"#3-如何定义构造器\" class=\"headerlink\" title=\"3. 如何定义构造器\"></a>3. 如何定义构造器</h3><p>  构造器(构造方法)的定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 类名(参数类型1 形参1, 参数类型2 形参2….) &#123;</span><br><span class=\"line\">代码块;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tname = &quot;张三&quot;;</span><br><span class=\"line\">\t\tage = 35;</span><br><span class=\"line\">\t\tgender = &quot;男&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 : 类中如果没有提供任何的构造器, 编译器也会自动添加一个缺省的构造器<br>缺省的构造器就是 修饰符和类一致, 无参, 并且方法体中没有代码.</p>\n<h2 id=\"6-2-2-构造器的特点\"><a href=\"#6-2-2-构造器的特点\" class=\"headerlink\" title=\"6.2.2 构造器的特点\"></a>6.2.2 构造器的特点</h2><ul>\n<li>特点1：<br>构造器没有返回值, 也不可以声明void</li>\n<li>特点2：构造器名称必须和类名一致</li>\n<li>特点3：构造器不可以被final, static, abstract等修饰</li>\n<li>特点4：<br>构造器不像普通方法可以随意调用, 只能在创建对象时调用一次<h2 id=\"6-2-3-构造器调用\"><a href=\"#6-2-3-构造器调用\" class=\"headerlink\" title=\"6.2.3 构造器调用\"></a>6.2.3 构造器调用</h2><h3 id=\"1-如何调用构造器\"><a href=\"#1-如何调用构造器\" class=\"headerlink\" title=\"1.如何调用构造器\"></a>1.如何调用构造器</h3>使用new关键字在创建对象时就会自动调用了构造器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher(); // 调用无参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t.say()); // 输出”姓名:张三,年龄:35,性别:男”</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2-4-构造器重载\"><a href=\"#6-2-4-构造器重载\" class=\"headerlink\" title=\"6.2.4 构造器重载\"></a>6.2.4 构造器重载</h2><h3 id=\"1-什么是构造器重载\"><a href=\"#1-什么是构造器重载\" class=\"headerlink\" title=\"1.什么是构造器重载\"></a>1.什么是构造器重载</h3><p>当一个类中有多个构造器, 并且参数不同就形成构造器重载<br>构造器重载的目的是可以使用多种方式创建不同的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tname = &quot;佟刚&quot;;</span><br><span class=\"line\">\t\tage = 35;</span><br><span class=\"line\">\t\tgender = &quot;女&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 有参构造器</span><br><span class=\"line\">\tpublic Teacher(String n, int a) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = &quot;女&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 有参构造器</span><br><span class=\"line\">\tpublic Teacher(String n, int a, String g) &#123; </span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t1 = new Teacher(); // 调用无参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t1.say());</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t2 = new Teacher(“李四”, 40); // 调用有参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t2.say());</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t3 = new Teacher(“王五”, 50, “男”); // 调用有参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t3.say());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-this-调用\"><a href=\"#2-this-调用\" class=\"headerlink\" title=\"2. this()调用\"></a>2. this()调用</h3><p>  在无参构造器中, 给对象的3个属性分别完成赋值, 而这个操作可以通过调用另外一个构造器来完成,调用的语法this(实参列表);<br>  注意 : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this(…) 调用必须放在构造器的第一行!</span><br><span class=\"line\">\tthis(…) 调用时,必须保证有一个构造器是没有this(…)的, 否则会形成构造器递归调用.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\t// 注释不算行</span><br><span class=\"line\">\t\tthis(&quot;张三&quot;, 35, &quot;男&quot;); // 通过调用第3个构造器完成属性赋值</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 有参构造器</span><br><span class=\"line\">\tpublic Teacher(String n, int a) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = &quot;女&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher(String n, int a, String g) &#123; </span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-3-this关键字和对象关系\"><a href=\"#6-3-this关键字和对象关系\" class=\"headerlink\" title=\"6.3 this关键字和对象关系\"></a>6.3 this关键字和对象关系</h1><h2 id=\"6-3-1-this关键字含义\"><a href=\"#6-3-1-this关键字含义\" class=\"headerlink\" title=\"6.3.1 this关键字含义\"></a>6.3.1 this关键字含义</h2><h3 id=\"1-this代表什么\"><a href=\"#1-this代表什么\" class=\"headerlink\" title=\"1. this代表什么\"></a>1. this代表什么</h3><pre><code>this代表对象, 代表的是当前对象, this里保存的是对象的地址.\n</code></pre><p>谁是当前对象? 比如方法调用<br><code>t1.say()</code>在这个方法执行时<br>执行以下代码 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这段代码可以写成</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果是一样的, 当前对象是哪个对象呢? 就是调用这个方法的对象, <code>t1.say()</code>中的t1就是当前对象,显然这个当前对象在变化, 因为<code>t2.say()</code>调用时,this就是指的是t2了.</p>\n<h3 id=\"2-为什么使用this\"><a href=\"#2-为什么使用this\" class=\"headerlink\" title=\"2.为什么使用this\"></a>2.为什么使用this</h3><p>this强调了使用当前对象, 有的时候属性如果和方法中的局部变量重名时, 为了区别必须使用this,在构造器重载时, 调用别的构造器也需要使用this. 两者的语法不一样.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tthis(&quot;佟刚&quot;, 35, &quot;女&quot;); // 调用其他构造器 </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender) &#123; </span><br><span class=\"line\">\t\tthis.name = name; // this表示对象, 右侧的name是形参, 是局部变量</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn this.name; // 加上this也可以, 但是没有必须, 它暗含了this</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用this的优点\"><a href=\"#3-使用this的优点\" class=\"headerlink\" title=\"3.使用this的优点\"></a>3.使用this的优点</h3><blockquote>\n<ol>\n<li>使用this可以提高代码的可读性, 强调要使用的是当前对象.</li>\n<li>在方法中, 如果局部变量和属性重名, 必须使用this, 用以区分属性和局部变量, 并且这样局部变量的含义也更清晰.</li>\n<li>this(…)调用可以简化构造器调用, 并有利于维护. 如果有修改的需要, 只要修改被调用的构造器就可以了.</li>\n</ol>\n</blockquote>\n<h2 id=\"6-3-2-对象的传递\"><a href=\"#6-3-2-对象的传递\" class=\"headerlink\" title=\"6.3.2 对象的传递\"></a>6.3.2 对象的传递</h2><h3 id=\"1-为什么要传递对象\"><a href=\"#1-为什么要传递对象\" class=\"headerlink\" title=\"1. 为什么要传递对象\"></a>1. 为什么要传递对象</h3><p>在有些方法中, 功能的完成除了需要一些基本数据外, 还需要复杂类型, 比如在Teacher类中方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    // 老师上课的代码, 老师上课时, 需要一台电脑, 这时就可以通过参数传递一个电脑对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void lesson(Computer computer) &#123;</span><br><span class=\"line\">// 老师上课的代码, 老师上课时, 需要一台电脑, 这时就可以通过参数传递一个电脑对象</span><br><span class=\"line\">// 这样在老师上课的代码中, 就可以直接使用传入的Computer对象.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.对象如何传递<br>在方法调用时, 由调用者传实参时,负责把对象传给方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Computer &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate double cpu;</span><br><span class=\"line\">\tprivate int memory;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer(double cpu, int memory) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setCpu(double cpu) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic double getCpu() &#123;</span><br><span class=\"line\">\t\treturn cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setMemory(int memory) &#123;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getMemory() &#123;</span><br><span class=\"line\">\t\treturn memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;CPU:&quot; + cpu + &quot;GHz, 内存:&quot; + memory + &quot;G&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tthis(&quot;佟刚&quot;, 35, &quot;女&quot;);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender) &#123; </span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void lesson(Computer com) &#123; // 这个方法应该需要一台电脑才能上课</span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + com.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;);</span><br><span class=\"line\">\t\tComputer com = new Computer(3.5, 4); // 要传递的对象先创建好</span><br><span class=\"line\">\t\tt.lesson(com); // 通过实参传递对象</span><br><span class=\"line\">        // 以上代码打印输出为”[李四] 老师使用电脑[CPU:3.5GHz,内存:4G]在上课&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-传递的是什么\"><a href=\"#3-传递的是什么\" class=\"headerlink\" title=\"3.传递的是什么\"></a>3.传递的是什么</h3><blockquote>\n<p>在方法调用中的实参com是在main方法中声明的引用变量, 但是这个引用指向了在main中创建的新的Computer对象, 所以在lesson方法执行时, 接收到的是对象的引用, 通过引用使用了对象.</p>\n</blockquote>\n<h3 id=\"4-对象传递的优点\"><a href=\"#4-对象传递的优点\" class=\"headerlink\" title=\"4.对象传递的优点\"></a>4.对象传递的优点</h3><p>即使对象很大, 属性很多, 在对象传递时, 并不是把对象本身复制了一份, 而是只把对象的引用传递了, 优点就是速度快.</p>\n<h3 id=\"5-对象传递的危险性\"><a href=\"#5-对象传递的危险性\" class=\"headerlink\" title=\"5.对象传递的危险性\"></a>5.对象传递的危险性</h3><p>危险性就在于因为传递了对象的引用, 这样通过引用一方面可以读取对象的属性或调用对象的方法, 同时如果通过引用直接修改对象的属性, 也会导致对象属性的变化, 所以当把对象传递给方法时, 如果在方法内部有对于对象的修改操作, 对于调用者来说, 这个修改也是同步的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">public void lesson(Computer com) &#123; // 这个方法应该需要一台电脑才能上课</span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + com.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">        com.setMemory(8);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher();</span><br><span class=\"line\">\t\tComputer com = new Computer(3.5, 4); // 要传递的对象先创建好</span><br><span class=\"line\">\t\tt.lesson(com); // 通过实参传递对象</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(com.getMemory()); // 输出的不是原来的4而是在方法中被修改后的8</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-3-3-对象关联\"><a href=\"#6-3-3-对象关联\" class=\"headerlink\" title=\"6.3.3 对象关联\"></a>6.3.3 对象关联</h2><h3 id=\"1-什么是对象关联\"><a href=\"#1-什么是对象关联\" class=\"headerlink\" title=\"1. 什么是对象关联\"></a>1. 什么是对象关联</h3><p>   对象关联就是一个对象关联了另外一个对象, 前者拥有了后者, 是一种包含关系.</p>\n<h3 id=\"2-为什么要关联对象\"><a href=\"#2-为什么要关联对象\" class=\"headerlink\" title=\"2. 为什么要关联对象\"></a>2. 为什么要关联对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void lesson(Computer com) &#123; // 这个方法应该需要一台电脑才能上课</span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + com.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法中老师对象要想上课, 需要通过参数传入一个对象. 方法结束后, 这个对象对于老师对象来说就会消失, 显然老师对象最好是应该完全拥有一个电脑对象, 这样再执行上课方法时,就不需要再传入对象, 而是使用自己拥有的对象, 甚至还可以再添加一些别的方法使用此对象.</p>\n<h3 id=\"3-如何关联对象\"><a href=\"#3-如何关联对象\" class=\"headerlink\" title=\"3. 如何关联对象\"></a>3. 如何关联对象</h3><p>  在当前类中把要关联的对象作为属性即可.<br>  也可以在构造器中添加参数为关联的对象赋值, 也可以添加对应的get/set方法,用以处理这个关联的对象</p>\n<p>先写被关联的类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Computer &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate double cpu;</span><br><span class=\"line\">\tprivate int memory;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer(double cpu, int memory) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setCpu(double cpu) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic double getCpu() &#123;</span><br><span class=\"line\">\t\treturn cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setMemory(int memory) &#123;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getMemory() &#123;</span><br><span class=\"line\">\t\treturn memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;CPU:&quot; + cpu + &quot;GHz, 内存:&quot; + memory + &quot;G&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Teacher类中关联Computer类的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">    // 对象关联, 把被关联的对象声明成属性</span><br><span class=\"line\">    private Computer computer;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 可以通过构造器完成对关联对象的初始化</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender, Computer computer) &#123; </span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">        this.computer = computer;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 同时应该再提供相应的get/set方法</span><br><span class=\"line\">public void setComputer(Computer computer) &#123;</span><br><span class=\"line\">    this.computer = computer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Computer getComputer() &#123;</span><br><span class=\"line\">    return computer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 在上课方法中, 不必再在每次调用时传参了.</span><br><span class=\"line\">\tpublic void lesson() &#123; </span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + computer.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">Computer com = new Computer(3.5, 4); // 要关联的对象先创建好</span><br><span class=\"line\">\t\tTeacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;, com); // 通过构造器完成对象关联</span><br><span class=\"line\">\t\tt.lesson(); // 通过实参传递对象</span><br><span class=\"line\">        // 以上代码打印输出为”[李四] 老师使用电脑[CPU:3.5GHz,内存:4G]在上课&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-对象关联的作用\"><a href=\"#4-对象关联的作用\" class=\"headerlink\" title=\"4. 对象关联的作用\"></a>4. 对象关联的作用</h3><p>   对象关联的作用非常广泛, 当一个类完成某种功能时, 有的时候如果有现成的其他对象可以直接使用, 并且在本类中要多次多方法中使用同一个功能时, 对象关联更显得必要. 这样使得对象之间的关系更加紧密.</p>\n<h2 id=\"6-3-4-javabean\"><a href=\"#6-3-4-javabean\" class=\"headerlink\" title=\"6.3.4 javabean\"></a>6.3.4 javabean</h2><ul>\n<li>JavaBean是一种Java语言写成的可重用组件。</li>\n<li>所谓javaBean，是指符合如下标准的Java类：</li>\n</ul>\n<blockquote>\n<ul>\n<li>类是公共的</li>\n<li>有一个无参的公共的构造器</li>\n<li>有属性，且有对应的get、set方法</li>\n<li>用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestJavaBean&#123;</span><br><span class=\"line\">\tprivate String name;  //属性一般定义为private</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tpublic  TestJavaBean()&#123;&#125;</span><br><span class=\"line\">\tpublic int getAge()&#123;</span><br><span class=\"line\">\t     return age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setAge(int age)&#123;</span><br><span class=\"line\">\t     this.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName()&#123;</span><br><span class=\"line\">\t    return name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name)&#123;</span><br><span class=\"line\">\t    this.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-4-包\"><a href=\"#6-4-包\" class=\"headerlink\" title=\"6.4 包\"></a>6.4 包</h1><h2 id=\"6-4-1-package语句\"><a href=\"#6-4-1-package语句\" class=\"headerlink\" title=\"6.4.1 package语句\"></a>6.4.1 package语句</h2><h3 id=\"1-为什么要使用包\"><a href=\"#1-为什么要使用包\" class=\"headerlink\" title=\"1  为什么要使用包\"></a>1  为什么要使用包</h3><ul>\n<li>当程序中涉及的类越来越多时, 类的功能含义以及如果有同名类该如何处理的问题就出现了. </li>\n<li>我们希望把功能类似的一组类放在一起, 有利于管理和维护, 在java中使用了”包”的概念来分类管理</li>\n<li>包和目录非常接近, 但是虽然文件系统中是以目录的形式出现的, 但是在程序中包不是目录,目录也不是包.</li>\n</ul>\n<p>###2  如何使用包<br>   在程序的第一行添加语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package 包名.子包名.子子包名……;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>包目录深度没有限制, 但也不宜太深</li>\n<li><p>package的作用就是让编译器编译代码时, 把生成的class文件放置到指定的包目录中, 并在类中记录包信息.</p>\n</li>\n<li><p>包名及子包结构通常符合下列规范,由四个部分组成：</p>\n</li>\n<li>机构类型名称.机构名称.项目名称.模块名称</li>\n</ul>\n<h3 id=\"3-使用包带来的问题\"><a href=\"#3-使用包带来的问题\" class=\"headerlink\" title=\"3  使用包带来的问题\"></a>3  使用包带来的问题</h3><p>一旦源文件中使用了package语句, 那么这个源文件中的所有类都会被放置到指定的包中,<br>带来2个问题</p>\n<blockquote>\n<p>1)    包中的所有的类如果被别的包中的类访问时, 不能再使用简单类名(simple name), 必须使用全限定名称(qualified name), 全限定类名 就是所有的包名.类名.<br>2)    如果类是主类, 那么在执行主类时, 必须使用全限定类名.<br>3)    编译源文件时必须加上选项-d 生成的包目录及其中的类文件的目标目录, 通过这个目录是当前目录, 在eclipse中这个目录是bin</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.javase.javabean; </span><br><span class=\"line\"></span><br><span class=\"line\">public class Teacher &#123; // Teacher类在其他包的类中使用时,必须使用全限定名称</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 可以通过构造器完成对关联对象的初始化</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender) &#123; </span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.javase.test;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//Teacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;); // 编译时这行语句就会报错!!!</span><br><span class=\"line\">        com.atguigu.javase.javabean.Teacher t = new com.atguigu.javase.javabean.Teacher(“李四”,25,”女”);</span><br><span class=\"line\">        System.out.println(t.say());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并且在命令行中执行此主类时必须使用全限定类名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java com.javase.test.TeacherTest</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-4-2-import语句\"><a href=\"#6-4-2-import语句\" class=\"headerlink\" title=\"6.4.2 import语句\"></a>6.4.2 import语句</h2><h3 id=\"1-import作用是什么\"><a href=\"#1-import作用是什么\" class=\"headerlink\" title=\"1. import作用是什么\"></a>1. import作用是什么</h3><blockquote>\n<p>跨包使用类时, 必须使用全限定类名, 所以当一个类中使用别的包的类太多时, 或者一个类的包名特别冗长时, 使用全限定名称代价就会非常高, 即使是一个类已经使用过了全限定, 下次再使用时,仍然还得使用全限定类名. 为了解决这个问题, 使用import导入语句, 把本类中要使用的其他包中的类导入进来, 这样, 在本类中再使用别的包的类就不必再使用全限定类名了, 可以直接使用简单类名, 这样就可以简化开发.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.javase.test;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.javase.javabean.Teacher;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;); // 虽然Teacher类不在本包, 因为已经导入可以使用</span><br><span class=\"line\">        System.out.println(t.say());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-import注意事项\"><a href=\"#2-import注意事项\" class=\"headerlink\" title=\"2. import注意事项\"></a>2. import注意事项</h3><blockquote>\n<p>①    import 也可以一次性导入某个包的所有类, 使用.*通配符即可<br>②    import导入时,必须要保证要导入的类确实存在</p>\n</blockquote>\n<h1 id=\"6-5-eclipse的使用\"><a href=\"#6-5-eclipse的使用\" class=\"headerlink\" title=\"6.5 eclipse的使用\"></a>6.5 eclipse的使用</h1><h2 id=\"6-5-1-安装\"><a href=\"#6-5-1-安装\" class=\"headerlink\" title=\"6.5.1 安装\"></a>6.5.1 安装</h2><h3 id=\"1-版本选择\"><a href=\"#1-版本选择\" class=\"headerlink\" title=\"1  版本选择\"></a>1  版本选择</h3><p>  在命令行执行语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –version</span><br></pre></td></tr></table></figure>\n<p>   最后一行如果显示以下内容, 表明JDK版本是64位的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>  最后一行如果显示以下内容,表明JDK版本是32位的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) Client VM (build 24.80-b11, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>  Eclipse的位数必须和JDK位数一致, 否则无法运行.</p>\n<h3 id=\"2-工作空间\"><a href=\"#2-工作空间\" class=\"headerlink\" title=\"2  工作空间\"></a>2  工作空间</h3><p>  在硬盘上创建一个目录, 记下它的位置, 作用就是eclipse使用这个目录保存一些常用的设置和项目配置信   息, 称之为工作空间.</p>\n<h2 id=\"6-5-2-运行\"><a href=\"#6-5-2-运行\" class=\"headerlink\" title=\"6.5.2 运行\"></a>6.5.2 运行</h2><h3 id=\"1-启动eclipse\"><a href=\"#1-启动eclipse\" class=\"headerlink\" title=\"1 启动eclipse\"></a>1 启动eclipse</h3><p>  解压好eclipse以后, 进入目录, 双击eclipse.exe运行</p>\n<h3 id=\"2-透视图和窗口布局\"><a href=\"#2-透视图和窗口布局\" class=\"headerlink\" title=\"2 透视图和窗口布局\"></a>2 透视图和窗口布局</h3><p><img src=\"https://i.loli.net/2019/05/29/5cee0fffb507366942.jpg\" alt></p>\n<h3 id=\"3-一些常用设置\"><a href=\"#3-一些常用设置\" class=\"headerlink\" title=\"3. 一些常用设置\"></a>3. 一些常用设置</h3><p>1） 设置字体</p>\n<p> <img src=\"https://i.loli.net/2019/05/29/5cee0fffd085f68947.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee1007096ab39316.jpg\" alt></p>\n<p>2）设置快捷操作</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100733a5d78165.jpg\" alt></p>\n<h2 id=\"6-5-3-使用常用功能\"><a href=\"#6-5-3-使用常用功能\" class=\"headerlink\" title=\"6.5.3 使用常用功能\"></a>6.5.3 使用常用功能</h2><ol>\n<li>创建项目</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100730e5654509.jpg\" alt></p>\n<ol start=\"2\">\n<li>创建包</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0ffff1bdc69394.jpg\" alt></p>\n<ol start=\"3\">\n<li>创建类</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100736b6425011.jpg\" alt></p>\n<ol start=\"4\">\n<li>编辑代码<br>自动生成构造器</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10000077c17027.jpg\" alt></p>\n<p>\f自动生成get/set方法</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100729b1214440.jpg\" alt></p>\n<p>\f添加say()方法</p>\n<p>创建测试类并运行结果</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffe555236372.jpg\" alt></p>\n<p>\f</p>\n<ol start=\"5\">\n<li>一些常用快捷键</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + 1 快速修正错误</span><br><span class=\"line\">Ctrl + d 快速删除当前行</span><br><span class=\"line\">Ctrl + Alt + 下方向 快速在下方复制当前行</span><br><span class=\"line\">Alt + / 自动完成提醒功能</span><br><span class=\"line\">Ctrl + shift + f 格式化代码</span><br><span class=\"line\">Ctrl + shift + o 整理导入</span><br><span class=\"line\">按住ctrl移动鼠标, 可以查看指定位置的元素的声明.</span><br><span class=\"line\"></span><br><span class=\"line\">Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了) </span><br><span class=\"line\">Alt+↑ 当前行和上面一行交互位置(同上) </span><br><span class=\"line\">Alt+← 前一个编辑的页面 </span><br><span class=\"line\">Alt+→ 下一个编辑的页面(当然是针对上面那条来说了) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性 </span><br><span class=\"line\"></span><br><span class=\"line\">Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后) </span><br><span class=\"line\">Shift+Ctrl+Enter 在当前行插入空行(原理同上条) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Q 定位到最后编辑的地方 </span><br><span class=\"line\">Ctrl+L 定位在某行 (对于程序超过100的人就有福音了) </span><br><span class=\"line\">Ctrl+M 最大化当前的Edit或View (再按则反之) </span><br><span class=\"line\">Ctrl+/ 注释当前行,再按则取消注释 </span><br><span class=\"line\">Ctrl+O 快速显示 OutLine </span><br><span class=\"line\">Ctrl+T 快速显示当前类的继承结构 </span><br><span class=\"line\">Ctrl+W 关闭当前Editer </span><br><span class=\"line\">Ctrl+K 参照选中的Word快速定位到下一个 </span><br><span class=\"line\">Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+/(小键盘) 折叠当前类中的所有代码 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+×(小键盘) 展开当前类中的所有代码 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+F4 关闭所有打开的Editer </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+X 把当前选中的文本全部变为小写 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+Y 把当前选中的文本全部变为小写 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+F 格式化当前代码 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+P 定位到对于的匹配符(譬如&#123;&#125;) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之) </span><br><span class=\"line\"></span><br><span class=\"line\">下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+I 合并变量(可能这样说有点不妥Inline) </span><br><span class=\"line\">Alt+Shift+V 移动函数和变量(不怎么常用) </span><br><span class=\"line\">Alt+Shift+Z 重构的后悔药(Undo)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">序号           功能                                      快捷键</span><br><span class=\"line\">1       为用户提供内容的辅助                      〔Alt＋/〕</span><br><span class=\"line\">2       显示类中方法和属性的大纲，快速定位        〔Ctrl＋O〕</span><br><span class=\"line\">3       光标所在行或选定行快速添加注释或取消注释  〔Ctrl＋/〕</span><br><span class=\"line\">4       窗口的最大化和还原                        〔Ctrl＋M〕</span><br><span class=\"line\">5       快速修正                                  〔Ctrl＋1〕</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">6            快速向下和向上查找                        〔Ctrl＋K〕、〔Ctrl＋Shift＋K〕</span><br><span class=\"line\">7            查找构建路径中的可找到类                  〔Ctrl+Shift＋T〕</span><br><span class=\"line\">8            查找构建路径重点的所有文件                〔Ctrl＋Shift＋R〕</span><br><span class=\"line\">9            查找类、方法和属性的引用                  〔Ctrl＋Shift＋G〕</span><br><span class=\"line\">10          快速生成import                            〔Ctrl＋Shift＋O〕</span><br><span class=\"line\">11          格式化代码                                〔Ctrl＋Shift＋F〕</span><br><span class=\"line\">12        查找当前文件所在项目中的路径              〔Alt＋Shift＋W〕</span><br><span class=\"line\">13        定位到当前编辑器的某一行                  〔Ctrl＋L〕</span><br><span class=\"line\">14        后退历史记录和前进历史记录                〔Alt＋&lt;-〕、〔Alt＋-&gt;〕</span><br><span class=\"line\">15        快速定位光标位置的某个类、方法和属性        〔F3〕</span><br><span class=\"line\">16        显示类的继承关系                            〔F4〕</span><br></pre></td></tr></table></figure>\n<p>\f</p>\n<ol start=\"6\">\n<li>导入项目</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10070616510190.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100005fa972786.jpg\" alt></p>\n<h1 id=\"6-6-基本特征二-继承\"><a href=\"#6-6-基本特征二-继承\" class=\"headerlink\" title=\"6.6 基本特征二 继承\"></a>6.6 基本特征二 继承</h1><h2 id=\"6-6-1-继承\"><a href=\"#6-6-1-继承\" class=\"headerlink\" title=\"6.6.1 继承\"></a>6.6.1 继承</h2><h3 id=\"1-继承的概念\"><a href=\"#1-继承的概念\" class=\"headerlink\" title=\"1 继承的概念\"></a>1 继承的概念</h3><p>一个类从另外一个类继承所有成员, 包括属性和方法, 但是不包括构造器和语句块<br>从现有类创建子类, 现有类就称为<code>父类, 基类, 超类.</code></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffec1e076794.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">      public String name;</span><br><span class=\"line\">      public int age;</span><br><span class=\"line\">      public Date birthDate;</span><br><span class=\"line\">      public String getInfo()   </span><br><span class=\"line\">     &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffef15372674.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student &#123;</span><br><span class=\"line\">      public String name;</span><br><span class=\"line\">      public int age;</span><br><span class=\"line\">      public Date birthDate;</span><br><span class=\"line\">      public String school;</span><br><span class=\"line\">      public String getInfo()  </span><br><span class=\"line\">     &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10072df5363871.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10073975322106.jpg\" alt></p>\n<h3 id=\"2-为什么要继承\"><a href=\"#2-为什么要继承\" class=\"headerlink\" title=\"2 为什么要继承\"></a>2 为什么要继承</h3><ul>\n<li>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。</li>\n<li>此处的多个类称为子类，单独的这个类称为父类（基类或超类）。可以理解为:“子类 is a 父类”</li>\n</ul>\n<blockquote>\n<p>当一个类和另外一个类的属性和方法完全相同, 并且同时又比另一个类多一些特有的属性和方法时, 前者就可以作成后者的子类, 子类继承父类的所有成员, 这样, 在子类中就可以省略从父类继承的成员, 便于代码的复用, 以及更统一的类型管理.</p>\n</blockquote>\n<h3 id=\"3-继承语法\"><a href=\"#3-继承语法\" class=\"headerlink\" title=\"3 继承语法\"></a>3 继承语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 子类 extends 父类 &#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从语法意思来看, 子类是扩展自父类, 也可以理解为子类是在以父类为基础的前提下, 进一步扩展一些属性和方法, 所以子类大于父类, 或者也可以说, 子类包含父类.</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10000331989402.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">      public String name;</span><br><span class=\"line\">      public int age;</span><br><span class=\"line\">      public Date birthDate;</span><br><span class=\"line\">      public String getInfo() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Student extends Person&#123;</span><br><span class=\"line\">      public String school;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//Student类继承了父类Person的所有属性和方法，并增加了一个属性school。</span><br><span class=\"line\">//Person中的属性和方法,Student都可以使用。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffe959515357.jpg\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529125920.png\" alt></p>\n<h3 id=\"4-继承的特点\"><a href=\"#4-继承的特点\" class=\"headerlink\" title=\"4 继承的特点\"></a>4 继承的特点</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529125953.png\" alt></p>\n<p>①子类继承父类的所有成员(构造器除外), 就意味着父类的私有成员也会被子类继承, 但是因为私有成员只能被本类访问, 所以即使是在子类中也不能直接访问从父类继承的私有成员, 可以通过从父类继承的公共的get/set方法间接访问.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">      private String name;</span><br><span class=\"line\">      private int age;</span><br><span class=\"line\">      private Date birthDate;</span><br><span class=\"line\">      </span><br><span class=\"line\">      public void setName(String name) &#123;</span><br><span class=\"line\">          this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public String getInfo() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Student extends Person&#123;</span><br><span class=\"line\">      public String school;</span><br><span class=\"line\">      public void test() &#123;</span><br><span class=\"line\">          //name = “小明”; // 不可以, 因为是私有的</span><br><span class=\"line\">          setName(“小明”);// 可以, 通过公共方法间接访问</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>②单继承</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130433.png\" alt></p>\n<blockquote>\n<p>在继承关系中, 一个类Person可以被另外的类Soldier和Student和Officer继承, 然后Student又被Graduate类继承, 这是允许的, 在这样的体系中, Graduate类也称为Person类的子类, Person类也称为Graduate类的父类, 这样的继承我们称之为多层继承. 在这样的体系中, Student类称为Graduate类的直接父类, 显然地, Person类称为Graduate类的间接父类, 在java中, 多层继承是被允许的.<br>Java中不允许的多继承是指多重继承, 也就是说一个类不允许有多个直接父类, 间接父类并没有个数限制. 称之为单继承.</p>\n</blockquote>\n<h2 id=\"6-6-2方法覆盖-override\"><a href=\"#6-6-2方法覆盖-override\" class=\"headerlink\" title=\"6.6.2方法覆盖(override)\"></a>6.6.2方法覆盖(override)</h2><h3 id=\"1-什么是方法覆盖\"><a href=\"#1-什么是方法覆盖\" class=\"headerlink\" title=\"1. 什么是方法覆盖\"></a>1. 什么是方法覆盖</h3><p>定义：</p>\n<ul>\n<li>在子类中可以根据需要对从父类中继承来的方法进行改造，</li>\n<li><p>也称方法的重写、重置。在程序执行时，子类的方法将覆盖父类的方法。<br>要求：</p>\n</li>\n<li><p>覆盖方法必须和被重写方法具有相同的方法名称、参数列表和返回值类型。</p>\n</li>\n<li>覆盖方法不能使用比被重写方法更严格的访问权限。</li>\n<li>覆盖和被覆盖的方法必须同时为非static的。</li>\n<li>子类方法抛出的异常不能大于父类被重写方法的异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String name;</span><br><span class=\"line\">\tpublic int age;</span><br><span class=\"line\">\tpublic String getInfo() &#123;</span><br><span class=\"line\">\t\treturn &quot;Name: &quot;+ name + &quot;\\n&quot; +&quot;age: &quot;+ age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String school;</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getInfo() &#123;       //重写方法</span><br><span class=\"line\">\t\treturn  &quot;Name: &quot;+ name + &quot;\\nage: &quot;+ age + &quot;\\nschool: &quot;+ school;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tStudent s1=new Student();</span><br><span class=\"line\">\t\ts1.name=&quot;Bob&quot;;</span><br><span class=\"line\">\t\ts1.age=20;</span><br><span class=\"line\">\t\ts1.school=&quot;school2&quot;;</span><br><span class=\"line\">\t\tSystem.out.println(s1.getInfo());   //Name:Bob  age:20  school:school2 执行的是子类重写过的方法</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-为什么要方法覆盖\"><a href=\"#2-为什么要方法覆盖\" class=\"headerlink\" title=\"2.为什么要方法覆盖\"></a>2.为什么要方法覆盖</h3><blockquote>\n<p>有的时候子类继承的父类方法并不能满足子类的需要, 而方法名称又要保持一致, 此时用到方法覆盖.</p>\n</blockquote>\n<h3 id=\"3-方法覆盖的特殊性\"><a href=\"#3-方法覆盖的特殊性\" class=\"headerlink\" title=\"3. 方法覆盖的特殊性\"></a>3. 方法覆盖的特殊性</h3><blockquote>\n<p>子类一旦把父类的方法覆盖, 那么在测试类中再无法通过子类对象调用父类的被覆盖方法了, 因为子类已经把父类的方法重写了, 如果有调用父类方法的需求, 只能通过再创建一个父类对象来调用.</p>\n</blockquote>\n<h3 id=\"4-Override注解的使用\"><a href=\"#4-Override注解的使用\" class=\"headerlink\" title=\"4. @Override注解的使用\"></a>4. @Override注解的使用</h3><blockquote>\n<p>有的时候, 在子类中写重写方法时, 容易出现一些低级的拼写错误, 或其他错误, 导致方法不能正确覆盖时, 程序的运行就会出乎意外, 所以为了防止这种现象, 在子类的覆盖方法上添加修饰符@Override注解.</p>\n<ul>\n<li>注解 : 本质上一种类, 也是一种特殊的注释, 所以一般情况下,  程序不执行注解, 但是会被编译器, 运行时所识别和处理(通过反射的方式).注解也有很多.</li>\n<li>@Override注解的作用是告诉编译器, 在编译程序时, 必须先检查此方法是否满足方法覆盖的条件, 如果不满足, 则编译出错, 这样强制程序员通过排查, 提前检查方法覆盖的问题.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String school;</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    @Override // 加上注解, 也能提高代码可读性</span><br><span class=\"line\">\tpublic String getInfo() &#123;       //重写方法</span><br><span class=\"line\">\t\treturn  &quot;Name: &quot;+ name + &quot;\\nage: &quot;+ age + &quot;\\nschool: &quot;+ school;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-6-3-四种访问权限\"><a href=\"#6-6-3-四种访问权限\" class=\"headerlink\" title=\"6.6.3 四种访问权限\"></a>6.6.3 四种访问权限</h2><h3 id=\"1-为什么需要访问权限\"><a href=\"#1-为什么需要访问权限\" class=\"headerlink\" title=\"1  为什么需要访问权限\"></a>1  为什么需要访问权限</h3><p>有的时候, 类中的一些成员需要控制可以被哪些范围的其他类所访问, 就可以使用访问控制修饰符来控制.</p>\n<h3 id=\"2-访问权限\"><a href=\"#2-访问权限\" class=\"headerlink\" title=\"2  访问权限\"></a>2  访问权限</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130828.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130846.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130939.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Parent&#123;</span><br><span class=\"line\">        private int f1 = 1;</span><br><span class=\"line\">        int f2 = 2;</span><br><span class=\"line\">        protected  int f3 = 3;</span><br><span class=\"line\">        public  int f4 = 4;</span><br><span class=\"line\">        private  void  fm1() &#123;System.out.println(&quot;in fm1() f1=&quot; + f1);&#125;</span><br><span class=\"line\">        void fm2() &#123;System.out.println(&quot;in fm2() f2=&quot; + f2);&#125;</span><br><span class=\"line\">        protected  void  fm3() &#123;System.out.println(&quot;in fm3() f3=&quot; + f3);&#125;</span><br><span class=\"line\">        public void fm4() &#123;System.out.println(&quot;in fm4() f4=&quot; + f4);&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Child extends Parent&#123;               //设父类和子类在同一个包内</span><br><span class=\"line\">\tprivate int c1 = 21;</span><br><span class=\"line\">\tpublic  int c2 = 22;\t </span><br><span class=\"line\">\tprivate void cm1()&#123;System.out.println(&quot;in cm1() c1=&quot; + c1);&#125;</span><br><span class=\"line\">\tpublic  void cm2()&#123;System.out.println(&quot;in cm2() c2=&quot; + c2);&#125;</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tint i; </span><br><span class=\"line\">\t\tParent  p = new Parent();</span><br><span class=\"line\">\t\t// i = p1.f1; // 不可以访问其他类的私有成员</span><br><span class=\"line\">\t\ti = p.f2;//\ti = p.f3;\ti = p.f4;\tp.fm2();//\tp.fm3();\tp.fm4();\t\t</span><br><span class=\"line\">\t\tChild  c = new Child();</span><br><span class=\"line\">\t\ti = c.f2;\t        //\ti = c.f3;\t\ti = c.f4;\t\t</span><br><span class=\"line\">\t\ti = c.c1;\t        //\ti = c.c2;</span><br><span class=\"line\">\t\t//c.fm1(); // 不能访问</span><br><span class=\"line\">\t\tc.cm1();        // c.cm2(); c.fm2(); c.fm3(); c.fm4() 都能访问</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-访问权限的使用注意\"><a href=\"#3-访问权限的使用注意\" class=\"headerlink\" title=\"3. 访问权限的使用注意\"></a>3. 访问权限的使用注意</h3><p>protected是被保护的, 容易从字面意思理解成它的范围会比较小, 但是其实被protected修饰的成员的访问范围是仅次于public的, 所以要小心.</p>\n<h1 id=\"6-7-super关键字\"><a href=\"#6-7-super关键字\" class=\"headerlink\" title=\"6.7 super关键字\"></a>6.7 super关键字</h1><h2 id=\"6-7-1-super关键字含义\"><a href=\"#6-7-1-super关键字含义\" class=\"headerlink\" title=\"6.7.1 super关键字含义\"></a>6.7.1 super关键字含义</h2><h3 id=\"1-super关键字\"><a href=\"#1-super关键字\" class=\"headerlink\" title=\"1. super关键字\"></a>1. super关键字</h3><p>作用：</p>\n<ul>\n<li>在Java类中使用super来调用父类中的指定操作：</li>\n<li>super可用于访问父类中定义的属性</li>\n<li>super可用于调用父类中定义的成员方法</li>\n<li><p>super可用于在子类构造方法中调用父类的构造器<br>注意：</p>\n</li>\n<li><p>尤其当子父类出现同名成员时，可以用super进行区分</p>\n</li>\n<li>super的追溯不仅限于直接父类</li>\n<li>super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识</li>\n<li>super关键字表示在当前类中特别指定要使用父类的成员时使用super限定.</li>\n<li>这里的父类不仅包括直接父类, 也包括间接父类.</li>\n</ul>\n<h2 id=\"6-7-2-super使用场景\"><a href=\"#6-7-2-super使用场景\" class=\"headerlink\" title=\"6.7.2 super使用场景\"></a>6.7.2 super使用场景</h2><h3 id=\"1-方法中使用\"><a href=\"#1-方法中使用\" class=\"headerlink\" title=\"1. 方法中使用\"></a>1. 方法中使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected String name=&quot;张三&quot;;</span><br><span class=\"line\">protected int age;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getInfo() &#123;</span><br><span class=\"line\">         return “Name: ” + name + “\\nage: ” + age; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected String name = &quot;李四&quot;;</span><br><span class=\"line\">\tprivate String school = &quot;New Oriental&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getSchool()&#123; </span><br><span class=\"line\">return school; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">public String getInfo() &#123;</span><br><span class=\"line\">        return super.getInfo() +&quot;\\nschool: &quot; +school; </span><br><span class=\"line\">// 在方法中使用super可以调用父类中的被覆盖方法</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class TestStudent&#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)&#123;</span><br><span class=\"line\">\t\tStudent st = new Student();</span><br><span class=\"line\">\t\tSystem.out.println(st.getInfo());</span><br><span class=\"line\">\t&#125; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-构造器中使用\"><a href=\"#2-构造器中使用\" class=\"headerlink\" title=\"2. 构造器中使用\"></a>2. 构造器中使用</h3><p>①    子类中所有的构造器默认都会访问父类中空参数的构造器<br>②    当父类中没有空参数的构造器时，子类的构造器必须通过this(参数列表)或者super(参数列表)语句指定调用本类或者父类中相应的构造器，且必须放在构造器的第一行<br>③    如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate Date birthDate;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name, int age, Date d) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.birthDate = d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name, int age) &#123;</span><br><span class=\"line\">\t\tthis(name, age, null);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name, Date d) &#123;</span><br><span class=\"line\">\t\tthis(name, 30, d);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name) &#123;</span><br><span class=\"line\">\t\tthis(name, 30);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student extends Person &#123;</span><br><span class=\"line\">\tprivate String school;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Student(String name, int age, String s) &#123;</span><br><span class=\"line\">\t\tsuper(name, age); // 直接显式调用父类有参构造器</span><br><span class=\"line\">\t\tschool = s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Student(String name, String s) &#123;</span><br><span class=\"line\">\t\tsuper(name); // 直接显式调用父类有参构造器</span><br><span class=\"line\">\t\tschool = s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Student(String s) &#123; // 直接隐式调用父类无参构造器</span><br><span class=\"line\">\t\tschool = s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-7-3子类对象实例化过程\"><a href=\"#6-7-3子类对象实例化过程\" class=\"headerlink\" title=\"6.7.3子类对象实例化过程\"></a>6.7.3子类对象实例化过程</h2><ol>\n<li>执行顺序</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529131237.png\" alt></p>\n<h2 id=\"6-7-4-super和this的区别\"><a href=\"#6-7-4-super和this的区别\" class=\"headerlink\" title=\"6.7.4 super和this的区别\"></a>6.7.4 super和this的区别</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529141052.png\" alt></p>\n<h1 id=\"6-8-基本特征三-多态\"><a href=\"#6-8-基本特征三-多态\" class=\"headerlink\" title=\"6.8 基本特征三 多态\"></a>6.8 基本特征三 多态</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529141154.png\" alt></p>\n<h2 id=\"6-8-1-什么是多态\"><a href=\"#6-8-1-什么是多态\" class=\"headerlink\" title=\"6.8.1 什么是多态\"></a>6.8.1 什么是多态</h2><h3 id=\"1-本态\"><a href=\"#1-本态\" class=\"headerlink\" title=\"1. 本态\"></a>1. 本态</h3><p>一个对象的本类形态就是本态.</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2. 多态\"></a>2. 多态</h3><p>一个对象的多种父类形态就是多态</p>\n<h2 id=\"6-8-2多态的使用\"><a href=\"#6-8-2多态的使用\" class=\"headerlink\" title=\"6.8.2多态的使用\"></a>6.8.2多态的使用</h2><h3 id=\"1-多态引用\"><a href=\"#1-多态引用\" class=\"headerlink\" title=\"1. 多态引用\"></a>1. 多态引用</h3><p>  将子类对象赋值于父类类型的引用变量就是多态引用, 在这里对象其实还是子类对象, 只不过是被看作是一个父类类型的对象.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = new Student();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多态性，是面向对象中最重要的概念，在java中有两种体现：<ol>\n<li>方法的重载(overload)和重写(overwrite)。</li>\n<li>对象的多态性   ——可以直接应用在抽象类和接口上。</li>\n</ol>\n</li>\n<li><p>Java引用变量有两个类型：编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。</p>\n</li>\n<li><p>注意：若编译时类型和运行时类型不一致，就出现多态（Polymorphism）</p>\n</li>\n</ul>\n<h3 id=\"2-多态带来的问题\"><a href=\"#2-多态带来的问题\" class=\"headerlink\" title=\"2 多态带来的问题\"></a>2 多态带来的问题</h3><ul>\n<li>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student m = new Student();</span><br><span class=\"line\">m.school = “pku”; \t//合法,Student类有school成员变量</span><br><span class=\"line\">Person e = new Student(); </span><br><span class=\"line\">e.school = “pku”;\t//非法,Person类没有school成员变量</span><br></pre></td></tr></table></figure>\n<pre><code>属性是在编译时确定的，编译时e为Person类型，没有school成员变量，\n</code></pre><p>因而编译错误。</p>\n<h2 id=\"6-8-3虚拟方法调用-Virtual-Method-Invocation\"><a href=\"#6-8-3虚拟方法调用-Virtual-Method-Invocation\" class=\"headerlink\" title=\"6.8.3虚拟方法调用(Virtual Method Invocation)\"></a>6.8.3虚拟方法调用(Virtual Method Invocation)</h2><h3 id=\"1-什么是虚拟方法\"><a href=\"#1-什么是虚拟方法\" class=\"headerlink\" title=\"1. 什么是虚拟方法\"></a>1. 什么是虚拟方法</h3><p>  正常的方法调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \t\tPerson e = new Person();</span><br><span class=\"line\">\t\te.getInfo();</span><br><span class=\"line\">\t\tStudent e = new Student();</span><br><span class=\"line\"> \t\te.getInfo();</span><br><span class=\"line\">虚拟方法调用(多态情况下)：</span><br><span class=\"line\">\t\t\tPerson e = new Student();</span><br><span class=\"line\">  \t\te.getInfo();\t//调用Student类的getInfo()方法</span><br></pre></td></tr></table></figure>\n<p>  编译时类型和运行时类型：</p>\n<p>  编译时e为Person类型，而方法的调用是在运行时确定的，所以调用的是Student类的getInfo()方法。<br>  ——动态绑定</p>\n<h3 id=\"2-多态小结\"><a href=\"#2-多态小结\" class=\"headerlink\" title=\"2. 多态小结\"></a>2. 多态小结</h3><pre><code>前提：\n\n  需要存在继承或者实现关系\n要有覆盖操作\n\n  成员方法：\n\n编译时：要查看引用变量所属的类中是否有所调用的方法。\n(编译时检查父类类型)\n运行时：调用实际对象所属的类中的重写方法。\n\n(运行时执行子类类型)\n\n成员变量：\n\n不具备多态性，只看引用变量所属的类。\n</code></pre><h2 id=\"6-8-4多态的应用场景\"><a href=\"#6-8-4多态的应用场景\" class=\"headerlink\" title=\"6.8.4多态的应用场景\"></a>6.8.4多态的应用场景</h2><h3 id=\"1-多态数组\"><a href=\"#1-多态数组\" class=\"headerlink\" title=\"1. 多态数组\"></a>1. 多态数组</h3><p>   当创建多个不同的子类对象, 而又想统一处理这批对象时, 就可以使用多态数组.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person[] arr = &#123;new Student(), new Teacher()&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate String gender;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tpublic Person(String name, int age, String gender) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void sayHello() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;打个招呼&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Chinese extends Person &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String shuxiang;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Chinese(String name, int age, String gender, String shuxiang) &#123;</span><br><span class=\"line\">\t\tsuper(name, age, gender); </span><br><span class=\"line\">\t\tthis.shuxiang = shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setShuxiang(String shuxiang) &#123;</span><br><span class=\"line\">\t\tthis.shuxiang = shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getShuxiang() &#123;</span><br><span class=\"line\">\t\treturn shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void spring() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;过大年&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn super.say() + &quot;,属相:&quot; + shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void sayHello() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;吃了吗?&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class American extends Person &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate boolean hasGun;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic American() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic American(String name, int age, String gender, boolean hasGun) &#123;</span><br><span class=\"line\">\t\tsuper(name, age, gender);</span><br><span class=\"line\">\t\tthis.hasGun = hasGun;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setHasGun(boolean hasGun) &#123;</span><br><span class=\"line\">\t\tthis.hasGun = hasGun;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic boolean isHasGun() &#123;</span><br><span class=\"line\">\t\treturn hasGun;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void christmas() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Merry Christmas!!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void sayHello() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;How are you?&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tPerson[] ps = new Person[5]; // 多态数组, 可以保存任意类型的子类对象</span><br><span class=\"line\">\t\tps[0] = new Chinese(&quot;张三&quot;, 30, &quot;男&quot;, &quot;牛&quot;);</span><br><span class=\"line\">\t\tps[1] = new American(&quot;Jack&quot;, 25, &quot;male&quot;, true);</span><br><span class=\"line\">\t\tps[2] = new Person(&quot;某人&quot;, 15, &quot;未知&quot;);</span><br><span class=\"line\">\t\tps[3] = new American(&quot;Rose&quot;, 32, &quot;female&quot;, false);</span><br><span class=\"line\">\t\tps[4] = new Chinese(&quot;李四&quot;, 40, &quot;女&quot;, &quot;羊&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (Person p : ps) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(p.say());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;-------------------------&quot;);</span><br><span class=\"line\">        // 因为在同一个数组中, 并且所有对象都有age属性, 所以就可以对所有元素进行冒泡排序</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; ps.length - 1; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; ps.length - 1 - i; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (ps[j].getAge() &gt; ps[j + 1].getAge()) &#123;</span><br><span class=\"line\">\t\t\t\t\tPerson tmp = ps[j];</span><br><span class=\"line\">\t\t\t\t\tps[j] = ps[j + 1];</span><br><span class=\"line\">\t\t\t\t\tps[j + 1] = tmp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (Person p : ps) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(p.say());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-多态参数\"><a href=\"#2-多态参数\" class=\"headerlink\" title=\"2. 多态参数\"></a>2. 多态参数</h3><blockquote>\n<p>在设计方法时, 有的方法内部需要用到另外的类的对象, 但是在设计方法时, 又不需要关心究竟是哪个对象, 只关心这些实参对象都是某个类型的, 此时, 方法的参数的类型就可以写成父类类型的参数,这样的方法的参数就是多态参数.</p>\n</blockquote>\n<figure class=\"highlight plain\"><figcaption><span>p) &#123;</span><a href=\"//\">这个方法的参数p的具体类型未知</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    System.out.println(p.say());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">test(new Chinese()); // 在实际调用多态参数方法时, 可以传入任意本类或子类类型的对象</span><br><span class=\"line\">test(new American());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>x instanceof A：检验x是否为类A的对象，返回值为boolean型。</strong></p>\n<ul>\n<li>要求x所属的类与类A必须是子类和父类的关系，否则编译错误。</li>\n<li>如果x属于类A的子类B，x instanceof  A值也为true。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person extends Object &#123;…&#125;</span><br><span class=\"line\">public class Student extends Person &#123;…&#125;</span><br><span class=\"line\">public class Graduate extends Person &#123;…&#125;</span><br><span class=\"line\">-------------------------------------------------------------------</span><br><span class=\"line\">public void method1(Person e) &#123;</span><br><span class=\"line\">\tif (e instanceof Person) </span><br><span class=\"line\">\t\t// 处理Person类及其子类对象</span><br><span class=\"line\">\tif (e instanceof Student) </span><br><span class=\"line\">\t\t//处理Student类及其子类对象</span><br><span class=\"line\">\tif (e instanceof Graduate)</span><br><span class=\"line\">\t\t//处理Graduate类及其子类对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-对象类型转换-Casting\"><a href=\"#3-对象类型转换-Casting\" class=\"headerlink\" title=\"3 对象类型转换(Casting)\"></a>3 对象类型转换(Casting)</h3><ul>\n<li><p>基本数据类型的Casting：</p>\n<ul>\n<li>自动类型转换：小的数据类型可以自动转换成大的数据类型<br><code>如long g=20;   double d=12.0f</code></li>\n<li>强制类型转换：可以把大的数据类型强制转换(casting)成小的数据类型<pre><code>` 如 float f=(float)12.0;   int a=(int)1200L\n</code></pre></li>\n</ul>\n</li>\n<li><p>对Java对象的强制类型转换称为造型</p>\n</li>\n</ul>\n<ul>\n<li>从子类到父类的类型可以自动进行</li>\n<li>从父类到子类的类型转换必须通过造型(强制类型转换)实现</li>\n<li>无继承关系的引用类型间的转换是非法的</li>\n<li>在造型前可以使用instanceof操作符测试一个对象的类型</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530094040.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class PersonTest5 &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(Person p) &#123; // 多态参数, 提高了兼容性!!</span><br><span class=\"line\">\t\tp.sayHello(); //方法中父类中定义,所以直接调用,\t\t</span><br><span class=\"line\">\t\t//p.spring(); // 多态副作用, 子类特有成员不能访问</span><br><span class=\"line\">\t\t// 必须对对象的真实身份进行检测 </span><br><span class=\"line\">\t\tif (p instanceof Chinese) &#123; // 造型有风险, 使用须谨慎!!!</span><br><span class=\"line\">\t\t\tChinese ch = (Chinese)p; // 造型: 对象是什么类型还原成什么类型</span><br><span class=\"line\">\t\t\tch.spring(); // 子类特有的成员的访问,必须要经过造型.</span><br><span class=\"line\">\t\t&#125; else if (p instanceof American) &#123;</span><br><span class=\"line\">\t\t\t((American)p).christmas();</span><br><span class=\"line\">\t\t&#125; else if (p instanceof Person)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;普通人一枚&quot;);\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tPerson[] ps = new Person[5]; // 多态数组, 可以保存任意类型的子类对象</span><br><span class=\"line\">\t\tChinese c1 = new Chinese(&quot;张三&quot;, 30, &quot;男&quot;, &quot;牛&quot;);</span><br><span class=\"line\">\t\tAmerican a1  = new American(&quot;Jack&quot;, 25, &quot;male&quot;, true);</span><br><span class=\"line\">\t\tPerson p1 = new Person(&quot;某人&quot;, 15, &quot;未知&quot;);</span><br><span class=\"line\">\t\tAmerican a2 = new American(&quot;Rose&quot;, 32, &quot;female&quot;, false);</span><br><span class=\"line\">\t\tChinese c2 = new Chinese(&quot;李四&quot;, 40, &quot;女&quot;, &quot;羊&quot;);</span><br><span class=\"line\">\t\tps[0] = c1;</span><br><span class=\"line\">\t\tps[1] = a1;</span><br><span class=\"line\">\t\tps[2] = p1;</span><br><span class=\"line\">\t\tps[3] = a2;</span><br><span class=\"line\">\t\tps[4] = c2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;-------------------------&quot;);</span><br><span class=\"line\">\t\tfor (Person p : ps) &#123;</span><br><span class=\"line\">\t\t\ttest(p); // 不同的子类对象作为实参调用方法, 方法的执行也不一样.</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"5. JavaSE-面向对象基础","url":"http://yoursite.com/2016/09/06/5. JavaSE-面向对象基础/","content":"<h1 id=\"5-1-类与对象\"><a href=\"#5-1-类与对象\" class=\"headerlink\" title=\"5.1 类与对象\"></a>5.1 类与对象</h1><h2 id=\"5-1-1面向对象与面向过程\"><a href=\"#5-1-1面向对象与面向过程\" class=\"headerlink\" title=\"5.1.1面向对象与面向过程\"></a>5.1.1面向对象与面向过程</h2><p>1.学习面向对象内容的三条主线<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.\tjava类及类的成员</span><br><span class=\"line\">2.\t面向对象的三大特征</span><br><span class=\"line\">3.\t其它关键字</span><br></pre></td></tr></table></figure></p>\n<p>2.面向对象(OOP) 与面向过程(POP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象 OOP :</span><br><span class=\"line\">     Object Oriented Programming  </span><br><span class=\"line\">面向过程 POP ：</span><br><span class=\"line\">     Procedure Oriented Programming</span><br></pre></td></tr></table></figure></p>\n<p>二者都是一种思想，面向对象是相对于面向过程而言的。<br>面向过程，强调的是功能行为。<br>面向对象，将功能封装进对象，强调具备了功能的对象。</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35d928b945184.jpg\" alt></p>\n<p>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，<br>如<strong>抽象、分类、继承、聚合、多态</strong>等。</p>\n<h2 id=\"5-1-2类与类之间的关系\"><a href=\"#5-1-2类与类之间的关系\" class=\"headerlink\" title=\"5.1.2类与类之间的关系\"></a>5.1.2类与类之间的关系</h2><p>###1.关联关系</p>\n<p>学院包含教授和研究生, 体现类包含另外的一些类</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35d2d65890533.jpg\" alt></p>\n<h3 id=\"2-继承关系\"><a href=\"#2-继承关系\" class=\"headerlink\" title=\"2.继承关系\"></a>2.继承关系</h3><pre><code>游泳运动员是运动员的一种, \n排球运行员又是球类运动员的一种,\n体现的是类型的一脉相承\n</code></pre><p><img src=\"https://i.loli.net/2019/05/27/5cebb35d5795112211.jpg\" alt></p>\n<h3 id=\"3-聚合关系\"><a href=\"#3-聚合关系\" class=\"headerlink\" title=\"3.聚合关系\"></a>3.聚合关系</h3><p>球队中包含队长以及多个队员,体现的是包含</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35c3c02929986.jpg\" alt></p>\n<h2 id=\"5-1-3面向对象的三大特征\"><a href=\"#5-1-3面向对象的三大特征\" class=\"headerlink\" title=\"5.1.3面向对象的三大特征\"></a>5.1.3面向对象的三大特征</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">封装  (Encapsulation)</span><br><span class=\"line\">继承  (Inheritance)</span><br><span class=\"line\">多态  (Polymorphism)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-1-4面向对象的思想概述\"><a href=\"#5-1-4面向对象的思想概述\" class=\"headerlink\" title=\"5.1.4面向对象的思想概述\"></a>5.1.4面向对象的思想概述</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">① 程序员从执行者转化成了指挥者。</span><br><span class=\"line\">② 完成需求时：</span><br><span class=\"line\">    1.先去找具有所需功能的对象来用。</span><br><span class=\"line\">    2.如果该对象不存在，那么创建一个具有所需功能的对象。</span><br><span class=\"line\">    3.这样简化开发并提高复用。</span><br><span class=\"line\">③ 类(class)和对象(object)是面向对象的核心概念。</span><br><span class=\"line\">④ 类是对一类事物描述，是抽象的、概念上的定义</span><br><span class=\"line\">⑤ 对象是实际存在的该类事物的每个个体，因而也称实例(instance)。</span><br><span class=\"line\">⑥ “万事万物皆对象” – 在java中一切皆对象</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-2-类与对象\"><a href=\"#5-2-类与对象\" class=\"headerlink\" title=\"5.2 类与对象\"></a>5.2 类与对象</h1><h2 id=\"5-2-1-类的概念\"><a href=\"#5-2-1-类的概念\" class=\"headerlink\" title=\"5.2.1 类的概念\"></a>5.2.1 类的概念</h2><h3 id=\"1-java类及类的成员\"><a href=\"#1-java类及类的成员\" class=\"headerlink\" title=\"1. java类及类的成员\"></a>1. java类及类的成员</h3><ul>\n<li>现实世界万事万物是由分子、原子构成的。同理，Java代码世界是由诸多个不同功能的类构成的。</li>\n<li>现实世界中的分子、原子又是由什么构成的呢？原子核、电子！那么，Java中用类class来描述事物也是如此</li>\n<li>事物有大小,颜色,好坏,高低, 胖瘦,等等特征, 而这些特征又可以用数据描述,在程序中保存数据的就是变量</li>\n<li>事物也有行为动作, 比如吃, 跑, 跳, 移动等等, 而这些行为的描述又比变量稍复杂一点, 用方法来描述事物的行为. 所以类中最常见的两种成员就是:</li>\n</ul>\n<blockquote>\n<ul>\n<li>属 性：对应类中的成员变量(描述事物的特征)<br>行 为：对应类中的成员方法(描述事物的行为)</li>\n</ul>\n</blockquote>\n<h3 id=\"2-面向对象的思想概述\"><a href=\"#2-面向对象的思想概述\" class=\"headerlink\" title=\"2. 面向对象的思想概述\"></a>2. 面向对象的思想概述</h3><p><img src=\"https://i.loli.net/2019/05/27/5cebb35d4f37177423.jpg\" alt></p>\n<blockquote>\n<ul>\n<li>可以理解为：类 = 汽车设计图；对象 = 实实在在的汽车</li>\n<li>面向对象程序设计的重点是类的设计</li>\n<li>定义类其实是定义类中的成员(成员变量和成员方法)</li>\n</ul>\n</blockquote>\n<p>所以类就是对现实世界事物的抽象定义, 这个抽象定义就可以基本把某事物描述清楚. 要想描述清楚事物, 必须要知道事物有哪些特征(数据, 用变量保存), 有哪些行为(用方法描述), 当某事物的特征和行为都描述清楚后, 我们就认为对这个事物有一个大概的把握.</p>\n<h2 id=\"5-2-2-对象的概念\"><a href=\"#5-2-2-对象的概念\" class=\"headerlink\" title=\"5.2.2 对象的概念\"></a>5.2.2 对象的概念</h2><ul>\n<li>对象就是一个类的实实在在的实体, 也称为实例, 所以对象(object)也称为实例(instance), 实例就是对象, 对象就是实例.</li>\n</ul>\n<pre><code>比如 “学生” 可以是一个类, 因为它描述了学生这一群体事物, 而具体的”3年级的小明” 就是一个对象, 相同的 “4年级的小花” 也是一个学生对象. \n</code></pre><h2 id=\"5-2-3-类和对象的关系\"><a href=\"#5-2-3-类和对象的关系\" class=\"headerlink\" title=\"5.2.3 类和对象的关系\"></a>5.2.3 类和对象的关系</h2><blockquote>\n<p>   类是描述事物的, 一旦描述清楚, 就可以代表一类事物了, 但是类只是概念, 要想使用实体, 必须要有对象, 但是从时间的先后顺序来讲, 是先有类, 才有的对象, 因为类就像是一个模板, 而对象就像是用这个模板制造出来的产品, 如前面图示所描述的, 汽车设计图是一个模板, 一旦有了这个模板, 就可以使用设计图, 无限制地制造汽车了.<br>    在这个过程中, 类的设计是更重要的, 就像现实中也是汽车设计师的工资通常比实施工人要高.</p>\n</blockquote>\n<pre><code>![](https://i.loli.net/2019/05/27/5cebb35d6dbec82796.jpg)\n</code></pre><h2 id=\"5-2-4-类的语法格式\"><a href=\"#5-2-4-类的语法格式\" class=\"headerlink\" title=\"5.2.4 类的语法格式\"></a>5.2.4 类的语法格式</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603234818.png\" alt></p>\n<p>示例代码 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString name;\t\t\t// 在类中声明的变量 name, 此时就是属性, 也称为成员变量, 描述人有名字</span><br><span class=\"line\">\tint age ;\t            // 在类中声明的变量 age, 此时就是属性, 也称为成员变量, 描述人有年龄</span><br><span class=\"line\">\t</span><br><span class=\"line\">    public void play() &#123;    // 声明方法play(), 也称为成员方法, 表示人会玩</span><br><span class=\"line\">\t\tage = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-3-属性\"><a href=\"#5-3-属性\" class=\"headerlink\" title=\"5.3 属性\"></a>5.3 属性</h1><h2 id=\"5-3-1语法格式：\"><a href=\"#5-3-1语法格式：\" class=\"headerlink\" title=\"5.3.1语法格式：\"></a>5.3.1语法格式：</h2><p>修饰符  类型  属性名 = 初值 ; </p>\n<ul>\n<li>说明:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符private : 该属性只能由该类的方法访问。</span><br><span class=\"line\">\t        修饰符public : 该属性可以被该类以外的方法访问。    </span><br><span class=\"line\">            类型：任何基本类型，如int、boolean或任何引用类型。</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3-2举例：\"><a href=\"#5-3-2举例：\" class=\"headerlink\" title=\"5.3.2举例：\"></a>5.3.2举例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person&#123;</span><br><span class=\"line\">\tprivate int age;                  // 声明private变量 age</span><br><span class=\"line\">\tpublic String name = “Lila”;    // 声明public变量 name</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.属性的使用：<br>属性通常是要隶属于某个对象来使用的, 也就是说要想使用属性, 必须要先创建对象, 创建对象的语法很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 引用变量名 = new 类名();</span><br></pre></td></tr></table></figure>\n<p>对象创建好以后, 就可以通过引用变量名来使用对象了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用变量名.name = “Jack”;</span><br><span class=\"line\">System.out.println(引用变量名.name);</span><br></pre></td></tr></table></figure>\n<p>属性的使用和普通变量没有区别, 唯一的区别就在于属性是隶属于某个对象了.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString name; // 实例变量</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher();</span><br><span class=\"line\">\t\tt.name = &quot;李二狗&quot;; // 把”李二狗”值赋给t对象的属性name</span><br><span class=\"line\">\t\tSystem.out.println(t.name); // 打印t对象的name属性值, 输出就是”李二狗”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-4-方法\"><a href=\"#5-4-方法\" class=\"headerlink\" title=\"5.4 方法\"></a>5.4 方法</h1><h2 id=\"5-4-1-方法的概念\"><a href=\"#5-4-1-方法的概念\" class=\"headerlink\" title=\"5.4.1 方法的概念\"></a>5.4.1 方法的概念</h2><p>1  什么是方法</p>\n<ul>\n<li>方法是类或对象行为特征的抽象，也称为函数。 </li>\n<li>Java里的方法不能独立存在，所有的方法必须定义在类里。<br>方法也可以描述为是某个功能的执行体, 一个方法通常对应一个功能.</li>\n</ul>\n<p>2 为什么使用方法</p>\n<blockquote>\n<p>比如要想完成某种功能, 需要执行10行代码, 我们在程序中需要这个功能时,就把这10行代码写出来就可以了, 但是如果要多次使用这个功能, 虽然可以通过复制这10行代码的方式来完成功能, 但是效率低, 并且不利于维护. 所以我们通常把具有特定独立功能的一些代码封装到一个方法中, 这样, 只需要简单地调用这个方法就可以自动完成功能了.</p>\n</blockquote>\n<p>3  方法和属性的关系</p>\n<blockquote>\n<p>Java里的方法不能独立存在，所有的方法必须定义在类里, 而属性也是定义在类里的, 所以方法和属性都是隶属于类的, 方法和属性是平等的关系.</p>\n<ul>\n<li>属性用于描述事物的特征数据.</li>\n<li>方法用于描述事物的功能行为.</li>\n</ul>\n</blockquote>\n<h2 id=\"5-4-2-方法的声明与调用\"><a href=\"#5-4-2-方法的声明与调用\" class=\"headerlink\" title=\"5.4.2 方法的声明与调用\"></a>5.4.2 方法的声明与调用</h2><ol>\n<li>方法的声明语法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名（参数类型 形参1，参数类型 形参2，….）｛</span><br><span class=\"line\">  \t程序代码</span><br><span class=\"line\">  \treturn 返回值;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>其中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">形式参数：在方法被调用时用于接收外部传入的数据的变量。</span><br><span class=\"line\">参数类型：就是该形式参数的数据类型。</span><br><span class=\"line\">返回值：方法在执行完毕后返还给调用它的程序的数据。</span><br><span class=\"line\">返回值类型：方法要返回的结果的数据类型。</span><br><span class=\"line\">实际参数：调用方法时实际传给函数形式参数的数据。</span><br></pre></td></tr></table></figure></p>\n<p>注意 : </p>\n<blockquote>\n<ul>\n<li>一个类中可以有多个方法。</li>\n<li>方法中只能调用方法，不可以在方法内部定义方法。</li>\n<li>方法声明不是方法调用</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果某个方法只是单纯的执行一些代码, 并没有计算结果返回, 那么返回值类型就是void</li>\n<li>表示方法没有返回值, 此时方法中的return可以省略, 或者也可以仅使用return; 表示方法结束.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    System.out.println(“test()”);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2  方法的声明的构成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法声明的构成包括 方法签名 + 方法体</span><br></pre></td></tr></table></figure></p>\n<p>3  方法签名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法签名包括 返回值类型 方法名(形参类型1 形参1, 形参类型2 形参2…)</span><br><span class=\"line\">方法名作用是用于定位方法是哪一个, 因为在一个类中可以有多个方法.</span><br><span class=\"line\">参数列表表示方法在执行时需要的数据, 参数列表也可以为空, 表示方法执行时不需要数据.</span><br></pre></td></tr></table></figure></p>\n<p>如上例中的<code>int add(int a, int b)</code><br>4  方法体<br>方法体就是方法签名后面的{}以及其中的所有内容, 方法体才是方法在调用时实际执行的代码<br>那么方法签名的作用是什么呢? 签名是一个方法调用的参考, 方法在调用时应该严格按照方法签名来调用, 以防止出错.</p>\n<p>如上面例子中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5  方法的调用<br>方法可以任何可以有语句的位置调用, 比如另一个方法中, 或另一个类的某方法中<br>调用语法是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象引用.方法名(实参值1, 实参值2…);</span><br></pre></td></tr></table></figure></p>\n<p>对象引用是方法所在的类的对象, 实参值1, 2 是根据方法签名中要求的数据类型而实际传递给方法的值. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    System.out.println(“a + b”);</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    System.out.println(“test()”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">\t\tt.test(); // 当执行程序时, 打印输出”test()”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6 方法的返回值<br>有的方法会返回一个结果值, 如上面的方法int add(int a, int b)<br>如果直接调用这个方法, 而不接收其返回值, 这个方法会执行并返回结果, 但是在main方法中没有保存, 返回值结果被丢弃了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">\t\tt.add(100, 200); // 如果这样调用, 只会打印输出”a + b”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法的返回值就是方法调用本身, 如上例中方法调用整体t.add(100,200) 就可以看作是300这个值了, 当然, 前提是方法必须先都执行完才能返回300, 所以我们可以选择接收返回值.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">\t\tint n = t.add(100, 200); //这样调用, 会打印输出”a + b” 并把300保存在n中</span><br><span class=\"line\">        System.out.println(n); //输出300</span><br><span class=\"line\">        System.out.println(t.add(30, 50)); // 输出80</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-4-3-重载\"><a href=\"#5-4-3-重载\" class=\"headerlink\" title=\"5.4.3 重载\"></a>5.4.3 重载</h2><h3 id=\"1-重载的概念\"><a href=\"#1-重载的概念\" class=\"headerlink\" title=\"1  重载的概念\"></a>1  重载的概念</h3><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数不同即可。</p>\n<p>参数不同的含义是仅参数个数不同 或者 类型不同 或者 顺序不同.</p>\n<p>注意 :<br>    参数不同不包含参数名的不同.</p>\n<h3 id=\"2-如何重载\"><a href=\"#2-如何重载\" class=\"headerlink\" title=\"2  如何重载\"></a>2  如何重载</h3><p>在同一个类中写同名方法, 保证参数不同即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 这个方法就可以和下面2个方法形成重载</span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    System.out.println(“a + b”);</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public double add(int a, double b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public double add(double a, int b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    System.out.println(“test()”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-重载的方法的调用\"><a href=\"#3-重载的方法的调用\" class=\"headerlink\" title=\"3  重载的方法的调用\"></a>3  重载的方法的调用</h3><p>调用重载方法取决于实参列表, 和形参列表要匹配才可以, 或者也可以是被形参列表兼容.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">        System.out.println(t.add(30, 50)); // 调用 int add(int a, int b)</span><br><span class=\"line\">System.out.println(t.add(209, 0.502)); // 调用 double add(int a, double b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-重载的作用\"><a href=\"#4-重载的作用\" class=\"headerlink\" title=\"4  重载的作用\"></a>4  重载的作用</h3><p>在调用同名方法时, 只需要实参不同即可, 调用者调用这个方法就变得简单, 也不用再记忆多个不同的方法名. 前提是这些重载的方法有类似的功能.</p>\n<h3 id=\"5-重载的练习\"><a href=\"#5-重载的练习\" class=\"headerlink\" title=\"5  重载的练习\"></a>5  重载的练习</h3><p>1.判 断：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与void show(int a,char b,double c)&#123;&#125;构成重载的有：</span><br><span class=\"line\">a)\tvoid show(int x,char y,double z)&#123;&#125;   </span><br><span class=\"line\">b)\tint show(int a,double c,char b)&#123;&#125;   </span><br><span class=\"line\">c)  void show(int a,double c,char b)&#123;&#125;  </span><br><span class=\"line\">d)  boolean show(int c,char b)&#123;&#125;  </span><br><span class=\"line\">e)  void show(double c)&#123;&#125;  </span><br><span class=\"line\">f)  double show(int x,char y,double z)&#123;&#125;  </span><br><span class=\"line\">g)  void shows(double c)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-4-4-参数传递机制\"><a href=\"#5-4-4-参数传递机制\" class=\"headerlink\" title=\"5.4.4 参数传递机制\"></a>5.4.4 参数传递机制</h2><h3 id=\"1-为什么要传参\"><a href=\"#1-为什么要传参\" class=\"headerlink\" title=\"1  为什么要传参\"></a>1  为什么要传参</h3><p>有的方法在执行时, 需要用到一些值, 这些值在执行时必须要由调用者传递(告诉)给方法, 方法才可以正确执行</p>\n<h3 id=\"2-传参的本质是什么\"><a href=\"#2-传参的本质是什么\" class=\"headerlink\" title=\"2  传参的本质是什么\"></a>2  传参的本质是什么</h3><p>传参的本质是方法在调用时, 把实参的值赋值给形参(形参是局部变量), 也称为传值调用</p>\n<h3 id=\"3-方法调用的内存结构\"><a href=\"#3-方法调用的内存结构\" class=\"headerlink\" title=\"3  方法调用的内存结构\"></a>3  方法调用的内存结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">public void test2(int a) &#123;</span><br><span class=\"line\">    System.out.println(“test2 a:” + a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    System.out.println(“a + b”);</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">        int a = 10;</span><br><span class=\"line\">        int b = 20;</span><br><span class=\"line\">        int c = t.add(a, b); // 通过值传递把a的值赋值给方法中的形参a</span><br><span class=\"line\">System.out.println(c); // 方法调用返回值也是赋值给c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35dd6b9396075.jpg\" alt></p>\n<p>注意 : 方法返回值30保存在一个临时空间中, 方法调用结束后返回给调用者后就消失.</p>\n<h2 id=\"5-4-5-可变参数\"><a href=\"#5-4-5-可变参数\" class=\"headerlink\" title=\"5.4.5 可变参数\"></a>5.4.5 可变参数</h2><h3 id=\"1-什么是可变参数\"><a href=\"#1-什么是可变参数\" class=\"headerlink\" title=\"1  什么是可变参数\"></a>1  什么是可变参数</h3><blockquote>\n<p>当一个方法中的参数类型都相同, 但是个数不确定的情况下.</p>\n</blockquote>\n<h3 id=\"2-如何声明可变参数\"><a href=\"#2-如何声明可变参数\" class=\"headerlink\" title=\"2 如何声明可变参数\"></a>2 如何声明可变参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面采用数组形参来定义方法</span><br><span class=\"line\">public void test(int a ,String[] books);</span><br><span class=\"line\">//以可变个数形参来定义方法</span><br><span class=\"line\">public void test(int a ,String…books);</span><br></pre></td></tr></table></figure>\n<p>注意 : 以上两个方法不可以共存.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class VarArgs &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/*类中的方法的功能类似, 但是参数个数不确定</span><br><span class=\"line\">\tpublic int avg(int a, int b) &#123;</span><br><span class=\"line\">\t\treturn (a + b) / 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int avg(int a, int b, int c) &#123;</span><br><span class=\"line\">\t\treturn (a + b + c) / 3;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int avg(int a, int b, int c, int d) &#123;</span><br><span class=\"line\">\t\treturn (a + b + c + d) / 4;</span><br><span class=\"line\">\t&#125;*/</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 可变参数, 参数的个数可以是任意个, 只能放在参数列表的最后</span><br><span class=\"line\">\tpublic int avg(String a, int... values) &#123; // int...是数组, 同时又能兼容任意个数参数</span><br><span class=\"line\">\t\tint sum = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">\t\t\tsum += values[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn sum / values.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-可变参数的本质是什么\"><a href=\"#3-可变参数的本质是什么\" class=\"headerlink\" title=\"3 可变参数的本质是什么\"></a>3 可变参数的本质是什么</h3><blockquote>\n<p>可变参数的本质上是方法在调用时, 实际传递的是数组.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class VarArgsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String... args) &#123; </span><br><span class=\"line\">VarArg va = new VarArg();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(va.avg(2)); // 一个参数可以</span><br><span class=\"line\">\t\tSystem.out.println(va.avg()); // 不传参数也可以</span><br><span class=\"line\">System.out.println(va.avg(null)); // 传null也可以</span><br><span class=\"line\">\t\tSystem.out.println(va.avg(10, 20, 40, 50)); // 任意多个也可以</span><br><span class=\"line\">\t\tSystem.out.println(va.avg(10, 20, 40, 50,70, 80, 100, 5, 2, 3));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int[] arr = new int[]&#123;2, 3, 4, 5&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(va.avg(arr)); // 直接传数组也可以</span><br><span class=\"line\">\tSystem.out.println(va.avg(new int[]&#123;10, 20&#125;)); // 编译器会自动做这件事,也可以手工创建数组</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-5-对象的使用\"><a href=\"#5-5-对象的使用\" class=\"headerlink\" title=\"5.5 对象的使用\"></a>5.5 对象的使用</h1><h2 id=\"5-5-1-创建对象\"><a href=\"#5-5-1-创建对象\" class=\"headerlink\" title=\"5.5.1 创建对象\"></a>5.5.1 创建对象</h2><h3 id=\"1-关键字new\"><a href=\"#1-关键字new\" class=\"headerlink\" title=\"1 关键字new\"></a>1 关键字new</h3><p>类一旦写好了, 就可以使用关键字new创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;\t</span><br><span class=\"line\">\tString name; // 对象属性</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void eat(String something) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t\treturn str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); // 对象创建</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-对象创建在哪里了\"><a href=\"#2-对象创建在哪里了\" class=\"headerlink\" title=\"2  对象创建在哪里了\"></a>2  对象创建在哪里了</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher t = new Teacher();</span><br></pre></td></tr></table></figure>\n<p>在这里t是什么呢? 是不是对象呢? 答案是否定的, t仅仅是一个引用变量, 什么是引用变量? 就是保存地址的一个特殊变量, 同时它也有类型, 表明它指向的对象的类型是Teacher类型的. 但是上面的对象的使用全是通过t来完成的, 原因就在于通过t可以定位对象的实体, 对象的实体是保存在堆内存中.</p>\n<h3 id=\"3-对象包含哪些内容\"><a href=\"#3-对象包含哪些内容\" class=\"headerlink\" title=\"3  对象包含哪些内容\"></a>3  对象包含哪些内容</h3><p>当一个对象被创建时, 这个对象就会包含类中所有的属性值, 如上面的例子, Teacher属性中有String name, 和 int age属性, 所以对象中包含了两个数据: 一个是name, 一个是age</p>\n<h2 id=\"5-5-2-使用对象\"><a href=\"#5-5-2-使用对象\" class=\"headerlink\" title=\"5.5.2 使用对象\"></a>5.5.2 使用对象</h2><h3 id=\"1-使用属性\"><a href=\"#1-使用属性\" class=\"headerlink\" title=\"1  使用属性\"></a>1  使用属性</h3><p>通过引用修改对象的属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString name; // 对象属性</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void eat(String something) &#123;</span><br><span class=\"line\">System.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); </span><br><span class=\"line\">        t.name = “张三”;</span><br><span class=\"line\">        t.age = 30;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”张三”</span><br><span class=\"line\">System.out.println(t.age); // 输出30</span><br><span class=\"line\"></span><br><span class=\"line\">t.name = “张四”;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”张四”</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-调用方法\"><a href=\"#2-调用方法\" class=\"headerlink\" title=\"2  调用方法\"></a>2  调用方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString name; // 对象属性</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void eat(String something) &#123;</span><br><span class=\"line\">System.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); </span><br><span class=\"line\">        t.name = “张三”;</span><br><span class=\"line\">        t.age = 30;</span><br><span class=\"line\">        t.gender = “男”;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”张三”</span><br><span class=\"line\">System.out.println(t.age); // 输出30</span><br><span class=\"line\"></span><br><span class=\"line\">t.name = “李三”;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”李三”</span><br><span class=\"line\"></span><br><span class=\"line\">        t.lesson(); // 输出 李三老师在上课 // 思考, 为什么不是输出张三老师在上课?</span><br><span class=\"line\">        t.eat(“鱼香肉丝”); // 输出 &quot;老师在吃鱼香肉丝&quot;</span><br><span class=\"line\">System.out.println(t.say()); // 输出 “姓名: 李三,年龄:30,性别:男”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-5-3-对象的独立性\"><a href=\"#5-5-3-对象的独立性\" class=\"headerlink\" title=\"5.5.3 对象的独立性\"></a>5.5.3 对象的独立性</h2><h3 id=\"1-同一个类创建多个对象\"><a href=\"#1-同一个类创建多个对象\" class=\"headerlink\" title=\"1  同一个类创建多个对象\"></a>1  同一个类创建多个对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t1 = new Teacher(); </span><br><span class=\"line\">        t1.name = “张三”;</span><br><span class=\"line\">        t1.age = 30;</span><br><span class=\"line\">        t1.gender = “男”;</span><br><span class=\"line\">        System.out.println(t1.name); // 输出”张三”</span><br><span class=\"line\">System.out.println(t1.age); // 输出30</span><br><span class=\"line\">System.out.println(t1.gender); // 输出”男”</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t2 = new Teacher(); </span><br><span class=\"line\">        t2.name = “李四”;</span><br><span class=\"line\">        t2.age = 40;</span><br><span class=\"line\">        t2.gender = “女”;</span><br><span class=\"line\">        System.out.println(t2.name); // 输出”李四”</span><br><span class=\"line\">System.out.println(t2.age); // 输出40</span><br><span class=\"line\">System.out.println(t2.gender); // 输出”女”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅可以创建两个对象, 可以创建任意多个对象, 前提是内存有空间.</p>\n<h3 id=\"2-对象之间的关系\"><a href=\"#2-对象之间的关系\" class=\"headerlink\" title=\"2  对象之间的关系\"></a>2  对象之间的关系</h3><ul>\n<li>对象之间是独立的, 如上例子中, t1是一个独立的对象, t2也是一个独立的对象, 两者互不干扰.</li>\n<li>但是两个对象都是Teacher类型的, 所以它们的共同点是隶属于同一个类, 拥有类似的属性</li>\n<li>同一个类的不同对象虽然是独立的, 但是它们所占用的内存空间大小是一样的.</li>\n</ul>\n<h3 id=\"3-对象交换\"><a href=\"#3-对象交换\" class=\"headerlink\" title=\"3 对象交换\"></a>3 对象交换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t1 = new Teacher(); </span><br><span class=\"line\">        t1.name = “张三”;</span><br><span class=\"line\">        t1.age = 30;</span><br><span class=\"line\">        System.out.println(t1.name); // 输出”张三”</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t2 = new Teacher(); </span><br><span class=\"line\">        t2.name = “李四”;</span><br><span class=\"line\">        t2.age = 40;</span><br><span class=\"line\">        System.out.println(t2.name); // 输出”李四”    </span><br><span class=\"line\">     // 对象的交换和普通变量的交换类似</span><br><span class=\"line\">     // 需要声明一个临时变量</span><br><span class=\"line\">        Teacher tmp = t1;</span><br><span class=\"line\">        t1 = t2;</span><br><span class=\"line\">        t2 = tmp;</span><br><span class=\"line\">      System.out.println(t1.name); // 输出”李四” 思考 如果输出t1的年龄,是多少?</span><br><span class=\"line\">System.out.println(t2.name); // 输出”张三”</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##5.5.4 匿名对象</p>\n<h3 id=\"1-什么是匿名对象\"><a href=\"#1-什么是匿名对象\" class=\"headerlink\" title=\"1  什么是匿名对象\"></a>1  什么是匿名对象</h3><p>在创建对象后并不把对象的地址保存在引用变量中, 而是直接使用创建好的对象的引用访问成员.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tnew Teacher().eat(“宫暴鸡丁”);  // 后面不能再使用这个对象了</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-匿名对象特点\"><a href=\"#2-匿名对象特点\" class=\"headerlink\" title=\"2  匿名对象特点\"></a>2  匿名对象特点</h3><p>因为对象没有使用引用变量保存, 所以对象访问完成后, 就无法再次访问了</p>\n<h3 id=\"3-匿名对象作用\"><a href=\"#3-匿名对象作用\" class=\"headerlink\" title=\"3  匿名对象作用\"></a>3  匿名对象作用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a)\t适用于对象的一次性使用场景中</span><br><span class=\"line\">b)\t适用于方法调用时传递对象</span><br><span class=\"line\">c)\t适用于对象的传递(对象作为参数传递)</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-6-Java内存管理\"><a href=\"#5-6-Java内存管理\" class=\"headerlink\" title=\"5.6 Java内存管理\"></a>5.6 Java内存管理</h1><h2 id=\"5-6-1-内存分类\"><a href=\"#5-6-1-内存分类\" class=\"headerlink\" title=\"5.6.1 内存分类\"></a>5.6.1 内存分类</h2><ol>\n<li>栈和堆</li>\n</ol>\n<ul>\n<li>Java中的内存管理分为两部分, 一部分是栈, 另外一部分是堆.</li>\n<li>栈(stack)是后进先出的内存结构, 主要作用是方法调用时使用, 在内存中占用的空间比较小</li>\n<li>堆(heap)是内存的绝大部分空间, 没有特定的结构, 堆内存的特点是大.</li>\n<li>堆内存分为两部分, 一部分是方法区, 另外一部分称为GC区</li>\n</ul>\n<h1 id=\"5-6-2-垃圾回收\"><a href=\"#5-6-2-垃圾回收\" class=\"headerlink\" title=\"5.6.2 垃圾回收\"></a>5.6.2 垃圾回收</h1><ul>\n<li>什么是垃圾<blockquote>\n<p>主要是指在堆内存中的GC区中, 由于对象不再使用后, 对象所占用的空间应该被释放, 这个空间就称为垃圾, 这个对象就称为垃圾对象</p>\n</blockquote>\n</li>\n<li>垃圾如何回收<blockquote>\n<p>垃圾的回收是由GC(垃圾回收器)在后台处理, 在程序中,当某个对象不再有引用指向时, 这个对象就变为垃圾对象, 对象占用的空间就会由GC标记为可用状态, 这样,再次创建新对象时, 就可以使用这个可用空间, 从而可以实现自动的内存清理.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"5-6-3-对象创建\"><a href=\"#5-6-3-对象创建\" class=\"headerlink\" title=\"5.6.3 对象创建\"></a>5.6.3 对象创建</h2><ul>\n<li>1对象创建在哪里<br>对象创建在GC区中</li>\n<li>2对象创建过程<br>1) 在方法区中加载类模板<br>2) 依据类模板中属性的定义, 在GC区中开辟空间<br>3) 把这个空间的地址返回给对象的创建者中的引用变量</li>\n<li>3对象销毁<br>当一个对象被认定是垃圾后, 由GC在后台负责销毁此对象, 并释放内存空间.</li>\n</ul>\n<h1 id=\"5-7-对象数组\"><a href=\"#5-7-对象数组\" class=\"headerlink\" title=\"5.7 对象数组\"></a>5.7 对象数组</h1><h2 id=\"5-7-1-对象数组的声明和创建\"><a href=\"#5-7-1-对象数组的声明和创建\" class=\"headerlink\" title=\"5.7.1 对象数组的声明和创建\"></a>5.7.1 对象数组的声明和创建</h2><h3 id=\"1-动态方式\"><a href=\"#1-动态方式\" class=\"headerlink\" title=\"1  动态方式\"></a>1  动态方式</h3><p>创建方式和基本数据类型的是类似的.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用类型名称[] 数组名 = new 引用类型名称[数组长度];</span><br></pre></td></tr></table></figure></p>\n<p>注意 : 此时创建出来的数组对象中的元素都为null</p>\n<p>对象数组也称为引用数组.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher[] arr = new Teacher [4]; // 共4个元素, 但是每个元素都是null</span><br><span class=\"line\">//arr[0].lesson(); 会出现空指针异常</span><br></pre></td></tr></table></figure>\n<p>###2  静态方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">① 引用类型名称[] 数组名 = new 引用类型名称[]&#123;引用1, 引用2, 引用3…&#125;;</span><br><span class=\"line\">注意 : 右面的[]内不允许出现数组的长度</span><br><span class=\"line\">Teacher t1 = new Teacher();</span><br><span class=\"line\">Teacher t2 = new Teacher();</span><br><span class=\"line\">Teacher t3 = new Teacher();</span><br><span class=\"line\">t1.name = “张一”;</span><br><span class=\"line\">t2.name = “张二”;</span><br><span class=\"line\">t3.name = “张三”;</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher [] arr = new Teacher [] &#123;t1, t2, t3&#125;;</span><br><span class=\"line\">arr[0].lesson(); // 不会出现问题</span><br><span class=\"line\">② 引用类型名称[] 数组名 = &#123;引用1, 引用2, 引用3…&#125;;</span><br><span class=\"line\">注意 : 此方式虽然简单, 但是它只能用于声明和创建必须在同一行语句中的情况.</span><br><span class=\"line\">Teacher t1 = new Teacher();</span><br><span class=\"line\">Teacher t2 = new Teacher();</span><br><span class=\"line\">Teacher t3 = new Teacher();</span><br><span class=\"line\">t1.name = “张一”;</span><br><span class=\"line\">t2.name = “张二”;</span><br><span class=\"line\">t3.name = “张三”;</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher [] arr = &#123;t1, t2, t3&#125;;</span><br><span class=\"line\">// arr = &#123;t2, t3&#125;; // 这样不可以</span><br><span class=\"line\">arr[0].lesson(); // 不会出现问题</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-7-2-对象数组的使用\"><a href=\"#5-7-2-对象数组的使用\" class=\"headerlink\" title=\"5.7.2 对象数组的使用\"></a>5.7.2 对象数组的使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher[] arr = new Teacher [3]; // 共3个元素, 但是每个元素都是null</span><br><span class=\"line\"></span><br><span class=\"line\">arr[0] = new Teacher();</span><br><span class=\"line\">arr[1] = new Teacher();</span><br><span class=\"line\">arr[2] = new Teacher();</span><br><span class=\"line\">arr[0].name = “张一”;</span><br><span class=\"line\">arr[1].name = “张二”;</span><br><span class=\"line\">arr[2].name = “张三”;</span><br><span class=\"line\"></span><br><span class=\"line\">for (Teacher t : arr) &#123;</span><br><span class=\"line\">    System.out.println(t.name); // 访问</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"4. JavaSE-数组","url":"http://yoursite.com/2016/08/25/4. JavaSE-数组/","content":"<h1 id=\"4-1-数组的特点和好处\"><a href=\"#4-1-数组的特点和好处\" class=\"headerlink\" title=\"4.1 数组的特点和好处\"></a>4.1 数组的特点和好处</h1><h2 id=\"4-1-1-数组的特点\"><a href=\"#4-1-1-数组的特点\" class=\"headerlink\" title=\"4.1.1 数组的特点\"></a>4.1.1 数组的特点</h2><p>1、数组存储的是相同类型的一组元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[] arr = &#123;1.6,2.3,1,2,&apos;a&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>2、数组的定义类型可以是任意类型，包含基本类型或引用类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] arr = &#123;&quot;john&quot;,&quot;lucy&quot;&#125;;</span><br><span class=\"line\">Person[] arr;</span><br><span class=\"line\">int[][] arr;</span><br><span class=\"line\">Person[][] arr;</span><br></pre></td></tr></table></figure></p>\n<p>3、数组属于引用类型，引用存储在栈中，值存储在堆中，又称为对象。</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5ceba4934773730896.jpg\" alt></p>\n<p>4、数组的成员如果不赋值，有默认值。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte/short/int/long——&gt;0</span><br><span class=\"line\">    float/double——&gt;0.0</span><br><span class=\"line\">    char——&gt;\\u0000</span><br><span class=\"line\">    boolean——&gt;false</span><br><span class=\"line\">    String——&gt;null</span><br></pre></td></tr></table></figure>\n<p>5、数组的四要素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型、标识符、元素、下标（0——数组名.length-1）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-1-2-数组的好处\"><a href=\"#4-1-2-数组的好处\" class=\"headerlink\" title=\"4.1.2 数组的好处\"></a>4.1.2 数组的好处</h2><p>说明：相当于用于保存一组元素的容器<br>好处：<br>1、提高代码的简洁性和扩展性，且同时开辟多个空间，提高了效率<br>2、分类存储，且空间是连续的，容易查找</p>\n<h1 id=\"4-2-数组的语法和使用步骤\"><a href=\"#4-2-数组的语法和使用步骤\" class=\"headerlink\" title=\"4.2 数组的语法和使用步骤\"></a>4.2 数组的语法和使用步骤</h1><h2 id=\"4-2-1-动态初始化\"><a href=\"#4-2-1-动态初始化\" class=\"headerlink\" title=\"4.2.1 动态初始化\"></a>4.2.1 动态初始化</h2><p>针对题型：声明时不确定值是什么<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">步骤1、声明</span><br><span class=\"line\">数据类型[] 数组名;或</span><br><span class=\"line\">数据类型 数组名[];</span><br><span class=\"line\"></span><br><span class=\"line\">步骤2、开辟空间</span><br><span class=\"line\">数组名 = new 数据类型[长度];//长度不能省略</span><br><span class=\"line\"></span><br><span class=\"line\">步骤3、赋值</span><br><span class=\"line\">方式一：一个个赋值</span><br><span class=\"line\">数组名[下标] = 值;</span><br><span class=\"line\">方式二：循环赋值</span><br><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">\t数组名[i] = 值;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">步骤4、使用</span><br><span class=\"line\">System.out.println(数组名[下标]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-2-静态初始化\"><a href=\"#4-2-2-静态初始化\" class=\"headerlink\" title=\"4.2.2 静态初始化\"></a>4.2.2 静态初始化</h2><p>针对题型：声明时就知道值是什么<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">步骤1、声明并初始化</span><br><span class=\"line\">数据类型 数组名[] = new 数据类型[]&#123;值，值，值&#125;;或</span><br><span class=\"line\">数据类型[] 数组名 = &#123;值，值，值&#125;;</span><br><span class=\"line\">步骤2、使用</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-3-使用注意事项\"><a href=\"#4-2-3-使用注意事项\" class=\"headerlink\" title=\"4.2.3 使用注意事项\"></a>4.2.3 使用注意事项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①数组的下标：0——arr.length-1,如果超出范围，</span><br><span class=\"line\">则报ArrayIndexOutOfBoundsException</span><br><span class=\"line\">②数组的成员如果不手动赋值，也有默认值</span><br><span class=\"line\">int——0</span><br><span class=\"line\">double——0.0</span><br><span class=\"line\">char——\\u0000</span><br><span class=\"line\">boolean——false</span><br><span class=\"line\">引用类型——null</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-3-数组的使用\"><a href=\"#4-3-数组的使用\" class=\"headerlink\" title=\"4.3 数组的使用\"></a>4.3 数组的使用</h1><h2 id=\"4-3-1-正序打印\"><a href=\"#4-3-1-正序打印\" class=\"headerlink\" title=\"4.3.1 正序打印\"></a>4.3.1 正序打印</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   System.out.println(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-2-逆序打印\"><a href=\"#4-3-2-逆序打印\" class=\"headerlink\" title=\"4.3.2 逆序打印\"></a>4.3.2 逆序打印</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=arr.length-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-3-求和、平均值\"><a href=\"#4-3-3-求和、平均值\" class=\"headerlink\" title=\"4.3.3 求和、平均值\"></a>4.3.3 求和、平均值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sum = 0;</span><br><span class=\"line\">for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">  sum+=arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum:和  aum/arr.length平均值</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-4-求最值\"><a href=\"#4-3-4-求最值\" class=\"headerlink\" title=\"4.3.4 求最值\"></a>4.3.4 求最值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max = arr[0];</span><br><span class=\"line\">int indexMax = 0;</span><br><span class=\"line\">int min = arr[0];</span><br><span class=\"line\">int indexMin = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=1;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   if(arr[i]&gt;max)&#123;</span><br><span class=\"line\">     max = arr[i];</span><br><span class=\"line\">     indexMax = i;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if(arr[i]&lt;min)&#123;</span><br><span class=\"line\">     min = arr[i];</span><br><span class=\"line\">     indexMin = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>max:最大值<br>min：最小值</p>\n<h2 id=\"4-3-5-查找\"><a href=\"#4-3-5-查找\" class=\"headerlink\" title=\"4.3.5 查找\"></a>4.3.5 查找</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int index=-1;</span><br><span class=\"line\">for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if(arr[i]==带查找的元素)&#123;</span><br><span class=\"line\">       index = i;</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(index==-1)&#123;//没找到&#125;else&#123;找到了&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-6-排序\"><a href=\"#4-3-6-排序\" class=\"headerlink\" title=\"4.3.6 排序\"></a>4.3.6 排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;arr.length-1;i++)&#123;</span><br><span class=\"line\">  for(int j=0;j&lt;arr.length-1-i;j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     if(arr[j]&gt;arr[j+1])&#123;</span><br><span class=\"line\">       int t = arr[j];</span><br><span class=\"line\">       arr[j] = arr[j+1];</span><br><span class=\"line\">       arr[j+1]=t;</span><br><span class=\"line\">  &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-7赋值\"><a href=\"#4-3-7赋值\" class=\"headerlink\" title=\"4.3.7赋值\"></a>4.3.7赋值</h2><p>特点：</p>\n<ul>\n<li>基本类型变量的赋值：赋的是值，其中一个更改不影响另外一个</li>\n<li>引用类型变量的赋值：赋的是地址，二者共同引用一个空间，其中一个更改影响另外一个</li>\n</ul>\n<blockquote>\n<p>如果希望赋的是值（内容），则可以采用循环赋值</p>\n<ul>\n<li>方式一：传统的使用 = 赋值<br><code>newArr = arr;</code></li>\n<li>方式二：循环赋值<br>`①创建新数组，长度=旧数组.length<br>int[] newArr = new int[arr.length];<br>②循环将旧数组的元素依次赋值给新数组的每个成员<br>for(int i=0;i&lt;newArr.length;i++){<br>  newArr[i] = arr[i];<br>}</li>\n</ul>\n</blockquote>\n<p> `</p>\n<h1 id=\"4-4二维数组\"><a href=\"#4-4二维数组\" class=\"headerlink\" title=\"4.4二维数组\"></a>4.4二维数组</h1><h2 id=\"4-4-1-特点\"><a href=\"#4-4-1-特点\" class=\"headerlink\" title=\"4.4.1 特点\"></a>4.4.1 特点</h2><ul>\n<li>二维数组本身属于也能用类型，保存的也是地址号</li>\n<li>二维数组相当于多个一维数组的组合，也就是二维数组中的每个元素又是一个一维数组</li>\n</ul>\n<h2 id=\"4-4-2-使用步骤\"><a href=\"#4-4-2-使用步骤\" class=\"headerlink\" title=\"4.4.2 使用步骤\"></a>4.4.2 使用步骤</h2><ul>\n<li>1、动态初始化</li>\n</ul>\n<p>步骤1 :声明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">格式1：数据类型[][] 数组名;</span><br><span class=\"line\">\t格式2：数据类型[] 数组名[];</span><br><span class=\"line\">格式3:数据类型 数组名[][];</span><br></pre></td></tr></table></figure></p>\n<p>步骤2:开辟空间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式1：固定列数</span><br><span class=\"line\">数组名 = new 数据类型[行数][列数];</span><br><span class=\"line\">//行数相当于二维数组的长度或一维数组的个数，列数相当于每个一维数组中的成员个数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">格式2：不固定列数</span><br><span class=\"line\">数组名 = new 数据类型[行数][];</span><br><span class=\"line\">前两步可以合二为一</span><br><span class=\"line\">语法示例：</span><br><span class=\"line\">int[][] arr = new int[5][];</span><br></pre></td></tr></table></figure></p>\n<p>步骤3:赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式1：固定列数</span><br><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     数组名[i][j] = 值;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">格式2：不固定列数</span><br><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   数组名[i]=new 数据类型[长度];//长度不能省略！</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     数组名[i][j] = 值;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>步骤4、使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     System.out.println(数组名[i][j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>2、静态初始化</li>\n</ul>\n<p>步骤1、声明并初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[][] 数组名 =&#123;&#123;值，值&#125;,&#123;值，值，值&#125;&#125;;或</span><br><span class=\"line\">数据类型[][] 数组名 =new 数据类型[][]&#123;&#123;值，值&#125;,&#123;值，值，值&#125;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>步骤2、使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     System.out.println(数组名[i][j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"1. JavaSE-语言概述","url":"http://yoursite.com/2016/08/12/1. JavaSE-语言概述/","content":"<h1 id=\"1-1-软件开发介绍\"><a href=\"#1-1-软件开发介绍\" class=\"headerlink\" title=\"1.1 软件开发介绍\"></a>1.1 软件开发介绍</h1><h2 id=\"软件开发\"><a href=\"#软件开发\" class=\"headerlink\" title=\"软件开发\"></a>软件开发</h2><p>软件，即一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分。  </p>\n<h2 id=\"人机交互方式\"><a href=\"#人机交互方式\" class=\"headerlink\" title=\"人机交互方式\"></a>人机交互方式</h2><p>图形化界面(Graphical User Interface GUI)这种方式简单直观，使用者易于接受，容易上手操作。<br>命令行方式(Command Line Interface CLI)：需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。<br>==Pascal之父Nicklaus Wirth： “Algorithms+Data Structures=Programs”==</p>\n<h2 id=\"常用的DOS命令\"><a href=\"#常用的DOS命令\" class=\"headerlink\" title=\"常用的DOS命令\"></a>常用的DOS命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir :    列出当前目录下的文件以及文件夹</span><br><span class=\"line\">md :   创建目录</span><br><span class=\"line\">rd :     删除目录</span><br><span class=\"line\">cd :    进入指定目录</span><br><span class=\"line\">cd.. :  退回到上一级目录</span><br><span class=\"line\">cd\\:    退回到根目录</span><br><span class=\"line\">del :    删除文件</span><br><span class=\"line\">exit :   退出 dos 命令行</span><br><span class=\"line\">补充：echo javase&gt;1.doc</span><br><span class=\"line\">常用快捷键</span><br><span class=\"line\">←   →：移动光标</span><br><span class=\"line\">↑   ↓：调阅历史操作命令</span><br><span class=\"line\">Delete和Backspace：删除字符</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-2-计算机编程语言介绍\"><a href=\"#1-2-计算机编程语言介绍\" class=\"headerlink\" title=\"1-2 计算机编程语言介绍\"></a>1-2 计算机编程语言介绍</h1><h2 id=\"什么是计算机语言\"><a href=\"#什么是计算机语言\" class=\"headerlink\" title=\"什么是计算机语言\"></a>什么是计算机语言</h2><ul>\n<li>语言：是人与人之间用于沟通的一种方式。例如：中国人与中国人用普通话沟通。而中国人要和英国人交流，就要学习英语。</li>\n<li><p>计算机语言：人与计算机交流的方式。<br>   如果人要与计算机交流，那么就要学习计算机语言。<br>   计算机语言有很多种。如：C ,C++ ,Java ,PHP ,  Kotlin，Python，Scala等。  </p>\n</li>\n<li><p>第一代语言<br>机器语言。指令以二进制代码形式存在。</p>\n</li>\n<li>第二代语言<br>汇编语言。使用助记符表示一条机器指令。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDJj1J.png\" alt=\"EDJj1J.png\"></p>\n<ul>\n<li>第三代语言：高级语言</li>\n</ul>\n<blockquote>\n<p>C、Pascal、Fortran面向过程的语言<br>C++面向过程/面向对象<br>Java跨平台的纯面向对象的语言<br>.NET跨语言的平台<br>Python、Scala…  </p>\n</blockquote>\n<h2 id=\"1-3-Java语言概述\"><a href=\"#1-3-Java语言概述\" class=\"headerlink\" title=\"1-3 Java语言概述\"></a>1-3 Java语言概述</h2><ul>\n<li>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言。</li>\n<li>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中。</li>\n<li>随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言<br>   <strong>后台开发：Java、PHP、Python、Go、Node.js</strong><h3 id=\"Java语言概述-Java简史\"><a href=\"#Java语言概述-Java简史\" class=\"headerlink\" title=\"Java语言概述:Java简史\"></a>Java语言概述:Java简史</h3><blockquote>\n<p>1991年 Green项目，开发语言最初命名为Oak (橡树)<br>1994年，开发组意识到Oak 非常适合于互联网<br>1996年，发布JDK 1.0，约8.3万个网页应用Java技术来制作<br>1997年，发布JDK 1.1，JavaOne会议召开，创当时全球同类会议规模之最<br>1998年，发布JDK 1.2，同年发布企业平台J2EE<br>1999年，Java分成J2SE、J2EE和J2ME，JSP/Servlet技术诞生<br>2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，更名为JDK 5.0<br>2005年，J2SE -&gt; JavaSE，J2EE -&gt; JavaEE，J2ME -&gt; JavaME<br>2009年，Oracle公司收购SUN，交易价格74亿美元<br>2011年，发布JDK 7.0<br>2014年，发布JDK 8.0，是继JDK 5.0以来变化最大的版本<br>2017年，发布JDK 9.0，最大限度实现模块化<br>2018年3月，发布JDK 10.0，版本号也称为18.3<br>2018年9月，发布JDK 11.0，版本号也称为18.9     </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Java技术体系平台\"><a href=\"#Java技术体系平台\" class=\"headerlink\" title=\"Java技术体系平台\"></a>Java技术体系平台</h3><p><img src=\"https://s2.ax1x.com/2019/05/06/EDYdEV.png\" alt=\"EDYdEV.png\"></p>\n<h1 id=\"1-3-Java在各领域的应用\"><a href=\"#1-3-Java在各领域的应用\" class=\"headerlink\" title=\"1-3 Java在各领域的应用\"></a>1-3 Java在各领域的应用</h1><p>从Java的应用领域来分，Java语言的应用方向主要表现在以下几个方面：</p>\n<ul>\n<li>企业级应用：主要指复杂的大企业的软件系统、各种类型的网站。Java的安全机制以及它的跨平台的优势，使它在分布式系统领域开发中有广泛应用。应用领域包括金融、电信、交通、电子商务等。</li>\n<li>Android平台应用：Android应用程序使用Java语言编写。Android开发水平的高低很大程度上取决于Java语言核心能力是否扎实。</li>\n<li>大数据平台开发：各类框架有Hadoop，spark，storm，flink等，就这类技术生态圈来讲，还有各种中间件如flume，kafka，sqoop等等 ，这些框架以及工具大多数是用Java编写而成，但提供诸如Java，scala，Python，R等各种语言API供编程。</li>\n<li>移动领域应用：主要表现在消费和嵌入式领域，是指在各种小型设备上的应用，包括手机、PDA、机顶盒、汽车通信设备等。<h3 id=\"Java语言的诞生\"><a href=\"#Java语言的诞生\" class=\"headerlink\" title=\"Java语言的诞生\"></a>Java语言的诞生</h3>java之父James Gosling团队在开发”Green”项目时，发现C缺少垃圾回收系统，还有可移植的安全性、分布程序设计和多线程功能。最后，他们想要一种易于移植到各种设备上的平台。<br><img src=\"https://s2.ax1x.com/2019/05/06/EDaaM4.png\" alt=\"EDaaM4.png\"><br>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。比如Java语言的变量声明，操作符形式，参数传递，流程控制等方面和C语言、C++语言完全相同。但同时，Java是一个纯粹的面向对象的程序设计语言，它继承了C++语言面向对象技术的核心。Java舍弃了C语言中容易引起错误的指针（以引用取代）、运算符重载（operator overloading）、多重继承（以接口取代）等特性，增加了垃圾回收器功能用于回收不再被引用的对象所占据的内存空间。<br>JDK1.5又引入了泛型编程（Generic Programming）、类型安全的枚举、不定长参数和自动装/拆箱<h2 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h2></li>\n<li>Java语言是易学的。Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用Java。</li>\n<li>Java语言是强制面向对象的。Java语言提供类、接口和继承等原语，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。</li>\n<li>Java语言是分布式的。Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</li>\n<li>Java语言是健壮的。Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。</li>\n<li>Java语言是安全的。Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。如：安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查。</li>\n<li>Java语言是体系结构中立的。Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。</li>\n<li>Java语言是解释型的。如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统的解释器中运行。</li>\n<li>Java是性能略高的。与那些解释型的高级脚本语言相比，Java的性能还是较优的。</li>\n<li>Java语言是原生支持多线程的。在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。<h1 id=\"1-4-Java程序运行机制及运行过程\"><a href=\"#1-4-Java程序运行机制及运行过程\" class=\"headerlink\" title=\"1-4 Java程序运行机制及运行过程\"></a>1-4 Java程序运行机制及运行过程</h1><h2 id=\"Java语言的特点\"><a href=\"#Java语言的特点\" class=\"headerlink\" title=\"Java语言的特点\"></a>Java语言的特点</h2></li>\n<li>特点一：面向对象<br>两个基本概念：类、对象<br>三大特性：封装、继承、多态  </li>\n<li>特点二：健壮性<br>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</li>\n<li>特点三：跨平台性<br>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”<br>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java Virtual Machine) 即可。由JVM来负责Java程序在该系统中的运行。</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/EDaHW8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDaHW8.md.png\" alt=\"EDaHW8.md.png\"></a></p>\n<h2 id=\"Java两种核心机制\"><a href=\"#Java两种核心机制\" class=\"headerlink\" title=\"Java两种核心机制\"></a>Java两种核心机制</h2><ul>\n<li>Java虚拟机  (Java Virtal Machine)<br>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。<br>对于不同的平台，有不同的虚拟机。<br>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行<br>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”  </li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDaves.png\" alt=\"EDaves.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdpF0.png\" alt=\"EDdpF0.png\"></p>\n<ul>\n<li>垃圾收集机制  (Garbage Collection)<br>不再使用的内存空间应回收—— 垃圾回收。</li>\n</ul>\n<blockquote>\n<ul>\n<li>在C/C++等语言中，由程序员负责回收无用内存。</li>\n<li>Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。<br>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</li>\n</ul>\n</blockquote>\n<p><strong>Java程序还会出现内存泄漏和内存溢出问题吗？</strong>==Yes!==</p>\n<h1 id=\"1-5-Java语言的环境搭建\"><a href=\"#1-5-Java语言的环境搭建\" class=\"headerlink\" title=\"1-5 Java语言的环境搭建\"></a>1-5 Java语言的环境搭建</h1><h2 id=\"明确什么是JDK-JRE\"><a href=\"#明确什么是JDK-JRE\" class=\"headerlink\" title=\"明确什么是JDK, JRE\"></a>明确什么是JDK, JRE</h2><p><img src=\"https://s2.ax1x.com/2019/05/06/EDdVm9.png\" alt=\"EDdVm9.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdnFx.png\" alt=\"EDdnFx.png\"></p>\n<p>==简单而言，使用JDK的开发工具完成的java程序，交给JRE去运行。==</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDd16e.png\" alt=\"EDd16e.png\"></p>\n<ul>\n<li>JDK = JRE + 开发工具集（例如Javac编译工具等）</li>\n<li>JRE = JVM + Java SE标准类库<h2 id=\"下载-JDK\"><a href=\"#下载-JDK\" class=\"headerlink\" title=\"下载 JDK\"></a>下载 JDK</h2>官方网址：</li>\n<li><a href=\"http://www.oracle.com\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com</a></li>\n<li><a href=\"http://java.sun.com\" target=\"_blank\" rel=\"noopener\">http://java.sun.com</a></li>\n</ul>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><ul>\n<li>傻瓜式安装，下一步即可。</li>\n<li>建议：安装路径不要有中文或者空格等特殊符号。</li>\n<li>如果操作系统是64位的，软件尽量选择支持64位的（除非软件本身不区分）。</li>\n<li>当提示安装 JRE 时，正常在JDK安装时已经装过了，但是为了后续使用Eclipse等开发工具不报错，建议也根据提示安装JRE。</li>\n<li>安装 JDK</li>\n</ul>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>在dos命令行中敲入javac，出现错误提示：</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdaff.png\" alt=\"EDdaff.png\"></p>\n<p>错误原因：当前执行的程序在当前目录下如果不存在，windows系统会在系统中已有的一个名为path的环境变量指定的目录中查找。如果仍未找到，会出现以上的错误提示。所以进入到  jdk安装路径\\bin目录下，执行javac，会看到javac参数提示信息。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdqtx.png\" alt=\"EDdqtx.png\"></p>\n<h2 id=\"配置环境变量-path\"><a href=\"#配置环境变量-path\" class=\"headerlink\" title=\"配置环境变量 path\"></a>配置环境变量 path</h2><ul>\n<li>path：windows系统执行命令时要搜寻的路径。<br>每次执行 java 的工具都要进入到bin目录下，是非常麻烦的。可不可以在任何目录下都可以执行java的工具呢？<br>根据windows系统在查找可执行程序的原理，可以将java工具所在路径定义到 path 环境变量中，让系统帮我们去找运行执行的程序。<br><strong>配置方法</strong>：</li>\n<li>我的电脑–属性–高级系统设置–环境变量</li>\n<li>编辑 path 环境变量，在变量值开始处加上java工具所在目录，后面用 “ ; ”和其他值分隔开即可。</li>\n<li>打开DOS命令行，任意目录下敲入javac。如果出现javac 的参数信息，配置成功。</li>\n</ul>\n<p>注：  具体操作流程，参看JDK8下载_安装_配置(点击跳转)</p>\n<p><a href=\"https://imgchr.com/i/EDwOVs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDwOVs.md.png\" alt=\"EDwOVs.md.png\"></a></p>\n<p>验证是否成功：javac   java</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0S2T.png\" alt=\"ED0S2T.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0CMF.png\" alt=\"ED0CMF.png\"></p>\n<p>#1-6 开发体验— HelloWorld</p>\n<ul>\n<li>步骤：<br>1.将 Java 代码编写到扩展名为 .java 的文件中。<br>2.通过 javac 命令对该 java 文件进行编译。<br>通过 java 命令对生成的 class 文件进行运行  </li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0Dds.png\" alt=\"ED0Dds.png\"></p>\n<ul>\n<li>步骤一：编写<br>选择最简单的编辑器：记事本。<br>敲入代码    class Test{  }<br>将文件保存成Test.java，这个文件是存放java代码的文件，称为源文件。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED06J0.png\" alt=\"ED06J0.png\"></p>\n<h3 id=\"第一个Java程序\"><a href=\"#第一个Java程序\" class=\"headerlink\" title=\"第一个Java程序\"></a>第一个Java程序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">             System.out.println(“Hello World!”);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤二：编译\"><a href=\"#步骤二：编译\" class=\"headerlink\" title=\"步骤二：编译\"></a>步骤二：编译</h3><p><img src=\"https://s2.ax1x.com/2019/05/06/ED0fL4.png\" alt=\"ED0fL4.png\"></p>\n<ul>\n<li>有了java源文件，通过编译器将其编译成JVM可以识别的字节码文件。</li>\n<li>在该源文件目录下，通过javac编译工具对Test.java文件进行编译。</li>\n<li>如果程序没有错误，没有任何提示，但在当前目录下会出现一个Test.class文件，该文件称为字节码文件，也是可以执行的java的程序。<h3 id=\"步骤三：运行\"><a href=\"#步骤三：运行\" class=\"headerlink\" title=\"步骤三：运行\"></a>步骤三：运行</h3></li>\n<li>有了可执行的java程序(Test.class字节码文件)</li>\n<li>通过运行工具java.exe对字节码文件进行执行。</li>\n<li>出现提示：缺少一个名称为main的方法。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0LQO.png\" alt=\"ED0LQO.png\"></p>\n<ul>\n<li>因为一个程序的执行需要一个起始点或者入口，所以在Test类中的加入public static void main(String[] args){  }</li>\n<li>对修改后的Test.java源文件需要重新编译，生成新的class文件后，再进行执行。</li>\n<li>发现没有编译失败，但也没有任何效果，因为并没有告诉JVM要帮我们做什么事情，也就是没有可以具体执行的语句。</li>\n<li>想要和JVM来个互动，只要在main方法中加入一句System.out.println(“Hello World”);因为程序进行改动，所以再重新编译，运行即可。<h1 id=\"1-7-常见问题及解决方法\"><a href=\"#1-7-常见问题及解决方法\" class=\"headerlink\" title=\"1-7 常见问题及解决方法\"></a>1-7 常见问题及解决方法</h1></li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBuYq.png\" alt=\"EDBuYq.png\"></p>\n<p>Ø源文件名不存在或者写错<br>Ø当前路径错误<br>Ø后缀名隐藏问题</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBJ0J.png\" alt=\"EDBJ0J.png\"></p>\n<p>Ø类文件名写错，尤其文件名与类名不一致时，要小心<br>Ø类文件不在当前路径下，或者不在classpath指定路径下</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBgAA.png\" alt=\"EDBgAA.png\"></p>\n<p>Ø声明为public的类应与文件名一致，否知编译失败</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBh1f.png\" alt=\"EDBh1f.png\"></p>\n<p>Ø编译失败，注意错误出现的行数，再到源代码中指定位置改错</p>\n<h2 id=\"小总结：\"><a href=\"#小总结：\" class=\"headerlink\" title=\"小总结：\"></a>小总结：</h2><p>学习编程最容易犯的错是语法错误。Java要求你必须按照语法规则编写代码。如果你的程序违反了语法规则，例如：忘记了分号、大括号、引号，或者拼错了单词，java编译器都会报语法错误。尝试着去看懂编译器会报告的错误信息。</p>\n<h1 id=\"1-8-注释-Comment\"><a href=\"#1-8-注释-Comment\" class=\"headerlink\" title=\"1-8 注释(Comment)\"></a>1-8 注释(Comment)</h1><p>用于注解说明解释程序的文字就是注释。<br>Java中的注释类型：</p>\n<ul>\n<li>单行注释    格式： //注释文字</li>\n<li>多行注释    格式：   /<em>  注释文字 </em>/</li>\n<li><p>文档注释 (java特有)</p>\n</li>\n<li><p>对于单行和多行注释，被注释的文字，不会被JVM（java虚拟机）解释执行。</p>\n</li>\n<li>多行注释里面不允许有多行注释嵌套。</li>\n<li>格式：/**  <pre><code>@author  指定java程序的作者  \n@version  指定源文件的版本                 \n       */\n</code></pre></li>\n</ul>\n<p>注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。<br>提高了代码的阅读性；调试程序的重要方法。<br>注释是一个程序员必须要具有的良好编程习惯。<br>将自己的思想通过注释先整理出来，再用代码去体现</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDnDe.png\" alt=\"EDDnDe.png\"></p>\n<h2 id=\"小结第一个程序\"><a href=\"#小结第一个程序\" class=\"headerlink\" title=\"小结第一个程序\"></a>小结第一个程序</h2><ul>\n<li>Java源文件以“java”为扩展名。源文件的基本组成部分是类（class），如本例中的HelloWorld类。</li>\n<li>Java应用程序的执行入口是main()方法。它有固定的书写格式：<br> public static void main(String[] args)  {…}</li>\n<li>Java语言严格区分大小写。</li>\n<li>Java方法由一条条语句构成，每个语句以“;”结束。</li>\n<li>大括号都是成对出现的，缺一不可。</li>\n<li>一个源文件中最多只能有一个public类。其它类的个数不限，如果源文件包含一个public类，则文件名必须按该类名命名。<h1 id=\"1-9-Java-API文档\"><a href=\"#1-9-Java-API文档\" class=\"headerlink\" title=\"1-9 Java API文档\"></a>1-9 Java API文档</h1>API （Application Programming Interface,应用程序编程接口）是 Java 提供的基本编程接口。<br>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的API文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。<br>下载API：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>Additional Resources-Java SE 8 Documentation下载。  <h1 id=\"1-10-良好的编程风格\"><a href=\"#1-10-良好的编程风格\" class=\"headerlink\" title=\"1.10 良好的编程风格\"></a>1.10 良好的编程风格</h1><h2 id=\"正确的注释和注释风格\"><a href=\"#正确的注释和注释风格\" class=\"headerlink\" title=\"正确的注释和注释风格\"></a>正确的注释和注释风格</h2></li>\n<li>使用文档注释来注释整个类或整个方法。</li>\n<li>如果注释方法中的某一个步骤，使用单行或多行注释。<br>正确的缩进和空白</li>\n<li>使用一次tab操作，实现缩进</li>\n<li>运算符两边习惯性各加一个空格。比如：2 + 4 * 5。<br>块的风格</li>\n<li>Java API 源代码选择了行尾风格</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">行尾风格</span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(&quot;Block Style!&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">次行风格</span><br><span class=\"line\">public class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(&quot;Block Style!&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"选择合适的文本编辑器或-IDE-开发\"><a href=\"#选择合适的文本编辑器或-IDE-开发\" class=\"headerlink\" title=\"选择合适的文本编辑器或 IDE 开发\"></a>选择合适的文本编辑器或 IDE 开发</h1><h2 id=\"JBuilder\"><a href=\"#JBuilder\" class=\"headerlink\" title=\"JBuilder\"></a>JBuilder</h2><p>JBuilder是Borland公司开发的针对java的开发工具，使用JBuilder将可以快速，有效的开发各类java应用。 Jbuilder支持各种应用服务器。Jbuilder与Inprise Application Server紧密集成，同时支持WebLogic Server，支持EJB 1.1和EJB 2.0，可以快速开发J2EE的电子商务应用。支持远程调试和多线程调试，调试器支持各种JDK版本<br><a href=\"https://edn.embarcadero.com/cn/jbuilder\" target=\"_blank\" rel=\"noopener\">https://edn.embarcadero.com/cn/jbuilder</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDDCq.png\" alt=\"EDDDCq.png\"></p>\n<h2 id=\"NetBeans\"><a href=\"#NetBeans\" class=\"headerlink\" title=\"NetBeans\"></a>NetBeans</h2><p>NetBeans是一款用Java编写的开源IDE。既可用于Java开发，也支持其他语言，特别是PHP、C/C ++，和HTML5。NetBeans开发环境提供了丰富的产品文档和培训资源以及大量的第三方插件。<br><a href=\"https://netbeans.org/features/index.html\" target=\"_blank\" rel=\"noopener\">https://netbeans.org/features/index.html</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDqqe.png\" alt=\"EDDqqe.png\"></p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p>Eclipse应该是大多数Java程序员使用的第一个IDE。众所周知的、最流行、也最受欢迎的Java开发工具。优点很多：免费、更新快、代码智能化、ANT构建等，拥有众多插件，完全免费、有中文版、上手比较快。缺点也非常明显，安装插件麻烦、插件对版本要求比较严格。</p>\n<p><a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"noopener\">https://eclipse.org/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDxPI.png\" alt=\"EDDxPI.png\"></p>\n<h2 id=\"MyEclipse\"><a href=\"#MyEclipse\" class=\"headerlink\" title=\"MyEclipse\"></a>MyEclipse</h2><p>MyEclipse也是一款功能强大的J2EE集成开发环境，由Genuitec公司发布，提供免费版和收费版。但免费版，只能满足基本开发需求<br><a href=\"https://www.myeclipsecn.com/\" target=\"_blank\" rel=\"noopener\">https://www.myeclipsecn.com/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDrPsS.png\" alt=\"EDrPsS.png\"></p>\n<p>ØIntelliJ IDEA<br>IntelliJ IDEA被认为是目前Java开发效率最快的IDE工具。是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格。它整合了开发过程中实用的众多功能，智能提示错误，强大的调试工具，Ant，JavaEE支持，CVS整合，最大程度的加快开发的速度。简单而又功能强大。与其他的一些繁冗而复杂的IDE工具有鲜明的对比。<br><a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/idea/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDrAaj.png\" alt=\"EDrAaj.png\"></p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"1. JavaSE-语言概述","url":"http://yoursite.com/2016/08/12/3. JavaSE-流程控制结构/","content":"<h1 id=\"3-1顺序结构\"><a href=\"#3-1顺序结构\" class=\"headerlink\" title=\"3.1顺序结构\"></a>3.1顺序结构</h1><p>说明：程序从上往下执行<br>Java中定义成员变量时采用合法的前向引用。如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">        int num1 = 12;</span><br><span class=\"line\">        int num2 = num1 + 2; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>错误形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">       int num2 = num1 + 2； </span><br><span class=\"line\">       int num1 = 12; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-2分支结构\"><a href=\"#3-2分支结构\" class=\"headerlink\" title=\"3.2分支结构\"></a>3.2分支结构</h1><h2 id=\"3-2-1-if结构\"><a href=\"#3-2-1-if结构\" class=\"headerlink\" title=\"3.2.1  if结构\"></a>3.2.1  if结构</h2><p>1、单分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件表达式)&#123; </span><br><span class=\"line\">\t执行代码块；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结构图：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603234239.png\" alt></p>\n<p>2、双分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件表达式)&#123;</span><br><span class=\"line\">\t执行代码块1; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">\t执行代码块2; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结构图：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603234539.png\" alt></p>\n<p>3、多重分支<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(条件表达式1)&#123; </span><br><span class=\"line\">\t执行代码块1; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if (条件表达式2)&#123; </span><br><span class=\"line\">\t执行代码块2; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       ……</span><br><span class=\"line\">       else&#123;</span><br><span class=\"line\">\t执行代码块n; </span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>结构图：</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5ceb7e25ee3eb98283.jpg\" alt=\"结构图\"></p>\n<h2 id=\"3-2-2-switch结构\"><a href=\"#3-2-2-switch结构\" class=\"headerlink\" title=\"3.2.2  switch结构\"></a>3.2.2  switch结构</h2><p>1、语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(表达式)&#123;</span><br><span class=\"line\">case 常量1:</span><br><span class=\"line\">\t语句1;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\">case 常量2:</span><br><span class=\"line\">\t语句2;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\">… …</span><br><span class=\"line\">case 常量N:</span><br><span class=\"line\">\t语句N;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\">default:</span><br><span class=\"line\">\t语句;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、规则</p>\n<blockquote>\n<p>①变量的类型 只能是int、byte、short、char、String（jdk1.7）、枚举（jdk1.5）<br>②case后的常量值不能重复<br>③case后不可以是变量<br>④break可以省略，但可能影响效果<br>⑤default可以省略，位置也可以提前，但可能影响效果</p>\n</blockquote>\n<p>3、执行顺序</p>\n<blockquote>\n<p>先得出switch括号中变量的值，然后依次判断各个case，如果有匹配的，则执行对应的代码块，直到遇见break为止；如果都不匹配，则执行default中的代码块n，直到遇见break为止</p>\n</blockquote>\n<h1 id=\"3-3-循环结构\"><a href=\"#3-3-循环结构\" class=\"headerlink\" title=\"3.3 循环结构\"></a>3.3 循环结构</h1><h2 id=\"3-3-1-说明\"><a href=\"#3-3-1-说明\" class=\"headerlink\" title=\"3.3.1  说明\"></a>3.3.1  说明</h2><p><strong>在满足某个特定条件的基础上，反复执行某段代码的结构</strong></p>\n<h2 id=\"3-3-2-四要素\"><a href=\"#3-3-2-四要素\" class=\"headerlink\" title=\"3.3.2 四要素\"></a>3.3.2 四要素</h2><pre><code>1、循环变量初始化\n2、循环条件\n3、循环操作\n4、循环变量更新\n</code></pre><h2 id=\"3-3-3-好处\"><a href=\"#3-3-3-好处\" class=\"headerlink\" title=\"3.3.3 好处\"></a>3.3.3 好处</h2><pre><code>1、提高代码的简洁性\n2、提高代码的维护性和扩展性\n</code></pre><h2 id=\"3-3-4-分类\"><a href=\"#3-3-4-分类\" class=\"headerlink\" title=\"3.3.4 分类\"></a>3.3.4 分类</h2><pre><code>while\ndo while\nfor\njdk5.0之后，多了增强for循环（foreach）\n</code></pre><h2 id=\"3-3-5-落地步骤\"><a href=\"#3-3-5-落地步骤\" class=\"headerlink\" title=\"3.3.5 落地步骤\"></a>3.3.5 落地步骤</h2><ul>\n<li>题型一：知道次数</li>\n</ul>\n<p>优先考虑用for<br>1、先搭框架<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=1;i&lt;=次数;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、分析循环操作<br>3、检测循环是否具备四要素</p>\n<ul>\n<li>题型二：不知道次数</li>\n</ul>\n<p>1、先搭框架<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while()&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、分析循环操作和循环条件<br>3、检测循环是否具备四要素</p>\n<h2 id=\"3-3-6三种循环结构的详细介绍\"><a href=\"#3-3-6三种循环结构的详细介绍\" class=\"headerlink\" title=\"3.3.6三种循环结构的详细介绍\"></a>3.3.6三种循环结构的详细介绍</h2><p>1、while<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环变量初始化 ①</span><br><span class=\"line\"></span><br><span class=\"line\">while(循环条件)&#123; ②</span><br><span class=\"line\"></span><br><span class=\"line\">\t循环操作 ③</span><br><span class=\"line\">\t循环变量更新 ④</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行顺序：①②③④②③④….直到②不成立为止</p>\n<p>2、do while</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环变量初始化 ①</span><br><span class=\"line\">do&#123;</span><br><span class=\"line\">\t循环操作 ③</span><br><span class=\"line\">\t循环变量更新 ④</span><br><span class=\"line\">&#125;while(循环条件); ②</span><br></pre></td></tr></table></figure>\n<p>执行顺序：①③④②③④②③④…直到②不成立为止</p>\n<p>3、for<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t①          ②\t\t④</span><br><span class=\"line\">for(循环变量初始化;循环条件;循环变量更新)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t循环操作③</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行顺序：①②③④②③④….直到②不成立为止</p>\n<h2 id=\"3-3-7-三种循环结构大pk\"><a href=\"#3-3-7-三种循环结构大pk\" class=\"headerlink\" title=\"3.3.7 三种循环结构大pk\"></a>3.3.7 三种循环结构大pk</h2><ul>\n<li><p>相同点：<br>  1、都能解决任何类型的循环题目<br>  2、都具备循环四要素</p>\n</li>\n<li><p>不同点：</p>\n<p>  1、语法不同<br>  2、执行顺序不同    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while和for 先判断后执行</span><br><span class=\"line\">do while   先执行后判断</span><br></pre></td></tr></table></figure>\n<p>  3、执行效果不同<br>  如果第一次条件成立，<code>while、do while、for</code> 执行效果相同<br>  如果第一次条件不成立，<code>while、for</code> 执行0次；<code>do while</code>执行至少一次！<br>  4、执行效率不同<br>  <code>do while</code> 效率最高<br>  5、应用场景不同<br>  知道次数，优先考虑用for<br>  不知道次数，</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先判断：while</span><br><span class=\"line\">先执行：do while</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-8-嵌套循环\"><a href=\"#3-3-8-嵌套循环\" class=\"headerlink\" title=\"3.3.8 嵌套循环\"></a>3.3.8 嵌套循环</h2><p>说明：一个循环结构中又嵌套了另一个完整的循环结构<br>注意：如外层循环，执行m次；内层循环，执行n次。 内层循环的循环体最终执行 m*n次<br>经典案例：九九乘法表</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5ceb7e260b1a827777.jpg\" alt></p>\n<h1 id=\"3-4-跳转结构\"><a href=\"#3-4-跳转结构\" class=\"headerlink\" title=\"3.4 跳转结构\"></a>3.4 跳转结构</h1><h2 id=\"3-4-1-break\"><a href=\"#3-4-1-break\" class=\"headerlink\" title=\"3.4.1 break\"></a>3.4.1 break</h2><p>说明：一般用在switch或循环中，跳出所在的switch或循环结构。<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(循环条件)&#123;</span><br><span class=\"line\">   if(条件)&#123;</span><br><span class=\"line\">     break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>特点：<br><strong>只能跳出所在的switch或一层循环，如果想跳出外层循环，需要添加label标签使用。</strong></p>\n<h2 id=\"3-4-2-continue\"><a href=\"#3-4-2-continue\" class=\"headerlink\" title=\"3.4.2 continue\"></a>3.4.2 continue</h2><p>说明：只能用于循环中，结束本次循环，继续下一次循环<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(循环条件)&#123;</span><br><span class=\"line\">\tif(条件)&#123;</span><br><span class=\"line\">\t\tcontinue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>特点：<br><strong>continue如果不搭配标签，默认起作用的就是所在的一层循环。如果搭配标签，则可以跳出标签指定的循环</strong></p>\n<h2 id=\"3-4-1-return\"><a href=\"#3-4-1-return\" class=\"headerlink\" title=\"3.4.1 return\"></a>3.4.1 return</h2><p>说明：跳出所在的方法</p>\n","categories":["JavaSE基础笔记"],"tags":["Java SE"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]