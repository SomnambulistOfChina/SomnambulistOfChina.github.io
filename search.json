[{"title":"做一个不轻易垮塌的成年人","url":"http://yoursite.com/2019/06/09/鸡汤-做一个不轻易垮塌的成年人/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609003633.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;前段时间我特别忙，除了要完成超额的工作，还惦记着每天要读的书、要写的文章、要学的编程技术 算法。</p>\n<p>&emsp;&emsp;有一天，我在公司加班，中途接到家人打来的电话。刚开始我还有说有笑，拿着手机视频“炫耀”我奋战的代码，可是快要挂电话时，家人说了句“工作再忙，也要注意身体”，让我瞬间泪崩。我并不是一个敏感脆弱的人，但不知道为什么心里就是突然感到很苦涩。</p>\n<p>&emsp;&emsp;想起电影演员成龙一次接受采访的经历。主持人问他：“拍电影累不累呀？”谁知道，就是这么简单的几个字，居然让一向以硬汉示人的成龙在节目中哭了整整15分钟。</p>\n<p>&emsp;&emsp;大概，每个人都有过短暂的崩溃时刻吧。许多时候，你已经硬撑了很久，但就是某一个不经意的瞬间触及到了你的痛点，然后情绪就会瞬间失控。</p>\n<blockquote>\n<ul>\n<li>其实，偶尔的发泄很有必要。毕竟弦绷得太紧，也需要适当地放松。但更重要的是，我们要迅速从糟糕的情绪中跳脱出来，才能以更加饱满的状态继续轻装前行。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;有个朋友在与我喝酒时候曾讲起这样一件事。</p>\n<p>&emsp;&emsp;3年前，是他人生中最灰暗的一段时光。那时，他辞掉了稳定的工作，正处于零基础创业的艰难期。每天为了开发产品、招揽客户，忙得焦头烂额。可就在这时，他的妻子跟他提出了离婚。</p>\n<p>&emsp;&emsp;虽然他试过挽留，但明显妻子铁了心要走，后来两人还是办了离婚手续。</p>\n<p>&emsp;&emsp;那时的他，面对着不见起色的事业、需要人照顾的年迈的父母，以及正在读幼儿园的儿子，可以说日子过得非常艰难。</p>\n<p>&emsp;&emsp;有一天晚上，他拖着疲惫的身躯回家，可儿子却突然哭着跟他说想妈妈。他一声不吭，出了门，蹲在无人的墙角，一个劲儿地抽闷烟。他说，那一刻，感觉自己的整个人生都失败透顶。可是隔了十来分钟，他像个没事人一般，又继续去做该做的事了。</p>\n<blockquote>\n<ul>\n<li>其实，成年人的生活中谁还没点烦心事呢。可无论遇到再难的境况，在短暂的发泄以后，我们依旧要学会释然、学会减压、学会自我调节。只要我们足够坚强，无论命运给予多大的暴击，也无法真正将我们撂倒。</li>\n</ul>\n</blockquote>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;朋友王姐前两年也遭遇了一次类似的变故。</p>\n<p>&emsp;&emsp;她的母亲确诊乳腺癌不久，父亲也查出了头部长有肿瘤，王姐几乎不敢相信。但那个时候，抱怨、发怒，哪怕是绝望都通通没用，她无法逃避，只能选择面对。</p>\n<p>&emsp;&emsp;为了给父母治病，那段时间她特别辛苦。因为丈夫在异地工作，家里的所有事情都要靠她一个人去做。白天上班，心无旁骛地处理事情，下了班就赶到医院，安慰和照顾父母。面对高额的治疗费、各种杂事的牵绊，以及父母情绪的不稳定，她也有无数次感到撑不下去。</p>\n<p>&emsp;&emsp;尤其是晚上睡在医院的陪护床上，她连哭都不敢出声。可第二天一大早，她还是打起精神，像一个战士般去应对生活给予的所有刁难。</p>\n<blockquote>\n<ul>\n<li>是啊，生活中难免会有坎坷不安，但我们终要学会长大，学会在风雨里竭尽全力，保护我们想要保护的人，撑起我们应该撑起的天。</li>\n</ul>\n</blockquote>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>&emsp;&emsp;作为成年人，我们必须扛得住事儿，经得起磨砺。</p>\n<p>&emsp;&emsp;记得曾看过这样一段话：“生活永远不可能像你想象的那么好，但也不会像你想象的那么糟。无论是好的还是糟的时候，都需要坚强！”</p>\n<p>&emsp;&emsp;当压力压得你喘不过气时，不妨试着先松口气；当痛苦让你快承受不起时，不妨选择暂时的逃离。当你感觉苦闷时，放声大哭也没什么不可以。</p>\n<blockquote>\n<ul>\n<li>只是请记得，不要在悲观的情绪里沉溺太久，也不要在崩溃的边缘停留太久。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>不管怎样，我仍旧希望，我们都能学会勇敢，学会坚强，学会做一个不轻易垮塌的成年人。</li>\n</ul>\n</blockquote>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"SpringBoot框架","url":"http://yoursite.com/2018/04/21/72. SpringBoot框架/","content":"<h1 id=\"第一章-Spring-Boot-介绍\"><a href=\"#第一章-Spring-Boot-介绍\" class=\"headerlink\" title=\"第一章 Spring Boot 介绍\"></a>第一章 Spring Boot 介绍</h1><h2 id=\"1-1-概述\"><a href=\"#1-1-概述\" class=\"headerlink\" title=\"1.1 概述\"></a>1.1 概述</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。习惯优于配置</p>\n<h2 id=\"1-2-为什么使用Spring-Boot\"><a href=\"#1-2-为什么使用Spring-Boot\" class=\"headerlink\" title=\"1.2 为什么使用Spring Boot\"></a>1.2 为什么使用Spring Boot</h2><p>J2EE笨重的开发、繁多的配置、低下的开发效率、复杂的部署流程、第三方技术集成难度大。</p>\n<h2 id=\"1-3-Spring-Boot是什么\"><a href=\"#1-3-Spring-Boot是什么\" class=\"headerlink\" title=\"1.3 Spring Boot是什么\"></a>1.3 Spring Boot是什么</h2><ul>\n<li>一站式整合所有应用框架的框架；并且完美整合Spring技术栈； <a href=\"https://spring.io/projects\" target=\"_blank\" rel=\"noopener\">https://spring.io/projects</a> </li>\n<li>Spring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用</li>\n</ul>\n<h2 id=\"1-4-Spring-boot-优点\"><a href=\"#1-4-Spring-boot-优点\" class=\"headerlink\" title=\"1.4 Spring boot 优点\"></a>1.4 Spring boot 优点</h2><ul>\n<li>快速创建独立运行的Spring项目以及与主流框架集成</li>\n<li>使用嵌入式的Servlet容器，应用无需打成WAR包</li>\n<li>starters自动依赖与版本控制</li>\n<li>大量的自动配置，简化开发，也可修改默认值</li>\n<li>无需配置XML，无代码生成，开箱即用</li>\n<li>准生产环境的运行时应用监控</li>\n<li>与云计算的天然集成</li>\n</ul>\n<h2 id=\"1-5-环境要求\"><a href=\"#1-5-环境要求\" class=\"headerlink\" title=\"1.5 环境要求\"></a>1.5 环境要求</h2><p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.7.RELEASE/reference/htmlsingle/#getting-started-system-requirements\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-boot/docs/2.0.7.RELEASE/reference/htmlsingle/#getting-started-system-requirements</a></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb3161f2922073.jpg\" alt></p>\n<h1 id=\"第二章-项目架构-单体应用\"><a href=\"#第二章-项目架构-单体应用\" class=\"headerlink\" title=\"第二章 项目架构-单体应用\"></a>第二章 项目架构-单体应用</h1><h2 id=\"2-1-单体应用\"><a href=\"#2-1-单体应用\" class=\"headerlink\" title=\"2.1 单体应用\"></a>2.1 单体应用</h2><p><img src=\"https://i.loli.net/2019/05/29/5ceddb3165e6764907.jpg\" alt></p>\n<h2 id=\"2-2-单体应用（monolith-application）\"><a href=\"#2-2-单体应用（monolith-application）\" class=\"headerlink\" title=\"2.2 单体应用（monolith application）\"></a>2.2 单体应用（monolith application）</h2><ul>\n<li>就是将应用程序的所有功能都打包成一个独立的单元，可以是 JAR、WAR、EAR 或其它归档格式。</li>\n<li>package -Dmaven.test.skip=true</li>\n</ul>\n<h2 id=\"2-3-单体应用有如下优点：\"><a href=\"#2-3-单体应用有如下优点：\" class=\"headerlink\" title=\"2.3 单体应用有如下优点：\"></a>2.3 单体应用有如下优点：</h2><ul>\n<li>为人所熟知：现有的大部分工具、应用服务器、框架和脚本都是这种应用程序；</li>\n<li>IDE友好：像 NetBeans、Eclipse、IntelliJ 这些开发环境都是针对开发、部署、调试这样的单个应用而设计的；</li>\n<li>便于共享：单个归档文件包含所有功能，便于在团队之间以及不同的部署阶段之间共享；</li>\n<li>易于测试：单体应用一旦部署，所有的服务或特性就都可以使用了，这简化了测试过程，因为没有额外的依赖，每项测试都可以在部署完成后立刻开始；</li>\n<li>容易部署：只需将单个归档文件复制到单个目录下。</li>\n</ul>\n<h2 id=\"2-4-单体应用的一些不足：\"><a href=\"#2-4-单体应用的一些不足：\" class=\"headerlink\" title=\"2.4 单体应用的一些不足：\"></a>2.4 单体应用的一些不足：</h2><ul>\n<li>不够灵活：对应用程序做任何细微的修改都需要将整个应用程序重新构建、重新部署。开发人员需要等到整个应用程序部署完成后才能看到变化。如果多个开发人员共同开发一个应用程序，那么还要等待其他开发人员完成了各自的开发。这降低了团队的灵活性和功能交付频率；</li>\n<li>妨碍持续交付：单体应用可能会比较大，构建和部署时间也相应地比较长，不利于频繁部署，阻碍持续交付。在移动应用开发中，这个问题会显得尤为严重；</li>\n<li>受技术栈限制：对于这类应用，技术是在开发之前经过慎重评估后选定的，每个团队成员都必须使用相同的开发语言、持久化存储及消息系统，而且要使用类似的工具，无法根据具体的场景做出其它选择；</li>\n<li>技术债务：“不坏不修（Not broken，don’t fix）”，这在软件开发中非常常见，单体应用尤其如此。系统设计或写好的代码难以修改，因为应用程序的其它部分可能会以意料之外的方式使用它。随着时间推移、人员更迭，这必然会增加应用程序的技术债务。 </li>\n</ul>\n<h1 id=\"第三章-项目架构-微服务\"><a href=\"#第三章-项目架构-微服务\" class=\"headerlink\" title=\"第三章 项目架构-微服务\"></a>第三章 项目架构-微服务</h1><h2 id=\"3-1-微服务\"><a href=\"#3-1-微服务\" class=\"headerlink\" title=\"3.1 微服务\"></a>3.1 微服务</h2><p><img src=\"https://i.loli.net/2019/05/29/5ceddb3197e5051871.jpg\" alt></p>\n<h2 id=\"3-2-微服务的样子\"><a href=\"#3-2-微服务的样子\" class=\"headerlink\" title=\"3.2 微服务的样子\"></a>3.2 微服务的样子</h2><p><a href=\"https://www.martinfowler.com/articles/microservices.html\" target=\"_blank\" rel=\"noopener\">https://www.martinfowler.com/articles/microservices.html</a> 微服务microservices</p>\n<p><a href=\"http://blog.cuicc.com/blog/2015/07/22/microservices/\" target=\"_blank\" rel=\"noopener\">http://blog.cuicc.com/blog/2015/07/22/microservices/</a></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb450c0b616343.jpg\" alt></p>\n<p>简而言之，微服务架构是一种将单应用程序作为一套小型服务开发的方法，每种应用程序都在其自己的进程中运行，并与轻量级机制（通常是HTTP资源的API）进行通信。这些服务是围绕业务功能构建的，可以通过全自动部署机制进行独立部署。这些服务的集中化管理已经是最少的，它们可以用不同的编程语言编写，并使用不同的数据存储技术。</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb3198aa299657.jpg\" alt></p>\n<h2 id=\"3-3-Spring官网\"><a href=\"#3-3-Spring官网\" class=\"headerlink\" title=\"3.3 Spring官网\"></a>3.3 Spring官网</h2><p><img src=\"https://i.loli.net/2019/05/29/5ceddb317edff89370.jpg\" alt></p>\n<h1 id=\"第四章-SpringBoot-HelloWorld初体验\"><a href=\"#第四章-SpringBoot-HelloWorld初体验\" class=\"headerlink\" title=\"第四章 SpringBoot-HelloWorld初体验\"></a>第四章 SpringBoot-HelloWorld初体验</h1><p>如何完成  页面发送/hello 请求，服务器响应 “OK” 字符串;  </p>\n<h2 id=\"4-1-创建maven工程\"><a href=\"#4-1-创建maven工程\" class=\"headerlink\" title=\"4.1 创建maven工程\"></a>4.1 创建maven工程</h2><h2 id=\"4-2-引入如下依赖\"><a href=\"#4-2-引入如下依赖\" class=\"headerlink\" title=\"4.2 引入如下依赖\"></a>4.2 引入如下依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Inherit defaults from Spring Boot --&gt;</span><br><span class=\"line\">  &lt;parent&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;</span><br><span class=\"line\">  &lt;/parent&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">  &lt;!-- Add typical dependencies for a web application --&gt;</span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-增加控制器\"><a href=\"#4-3-增加控制器\" class=\"headerlink\" title=\"4.3 增加控制器\"></a>4.3 增加控制器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class HelloController &#123;</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public String handle01()&#123;</span><br><span class=\"line\">return &quot;OK!+哈哈&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-编写主程序\"><a href=\"#4-4-编写主程序\" class=\"headerlink\" title=\"4.4 编写主程序\"></a>4.4 编写主程序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class MainApplication &#123;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">//Spring应用跑起来...</span><br><span class=\"line\">SpringApplication.run(MainApplication.class, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-5-运行访问\"><a href=\"#4-5-运行访问\" class=\"headerlink\" title=\"4.5 运行访问\"></a>4.5 运行访问</h2><p><a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></p>\n<h1 id=\"第五章-SpringBoot-原理-简化依赖和配置\"><a href=\"#第五章-SpringBoot-原理-简化依赖和配置\" class=\"headerlink\" title=\"第五章 SpringBoot-原理-简化依赖和配置\"></a>第五章 SpringBoot-原理-简化依赖和配置</h1><h2 id=\"5-1-依赖管理\"><a href=\"#5-1-依赖管理\" class=\"headerlink\" title=\"5.1 依赖管理\"></a>5.1 依赖管理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">&lt;groupId&gt;com.atguigu&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-boot-01&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 用来做依赖管理，几乎将我们用到的所有的依赖的版本都声明好了；版本仲裁中心 --&gt;</span><br><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;2.0.7.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">spring-boot-starter-xxx：springboot提供了大量的starter模块---场景启动器；</span><br><span class=\"line\">1）、我们现在开发web程序就引用web场景spring-boot-starter-web;主要含有springmvc,tomcat(内置服务器)</span><br><span class=\"line\">SpringBoot自定引入这个场景所需要的所有依赖；</span><br><span class=\"line\">2）、所有支持的场合都在这里</span><br><span class=\"line\"></span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 引入springboot插件；打包插件 --&gt;</span><br><span class=\"line\">    &lt;!-- &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt; </span><br><span class=\"line\">--&gt; </span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-核心jar包\"><a href=\"#5-2-核心jar包\" class=\"headerlink\" title=\"5.2 核心jar包\"></a>5.2 核心jar包</h2><p><img src=\"https://i.loli.net/2019/05/29/5ceddb314745042295.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb314772d34839.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb314793e10835.jpg\" alt></p>\n<p>一套框架<br>所有日志都通过 slf4j</p>\n<h2 id=\"5-3-源码\"><a href=\"#5-3-源码\" class=\"headerlink\" title=\"5.3 源码\"></a>5.3 源码</h2><p><img src=\"https://i.loli.net/2019/05/29/5ceddb4516e8c22386.jpg\" alt></p>\n<p>选择性导入  springboot中重要的底层方法</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb451d4af78248.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb45304a050111.jpg\" alt></p>\n<p>结论: 有119个配置类</p>\n<h1 id=\"第六章-SpringBoot-原理-简化部署\"><a href=\"#第六章-SpringBoot-原理-简化部署\" class=\"headerlink\" title=\"第六章 SpringBoot-原理-简化部署\"></a>第六章 SpringBoot-原理-简化部署</h1><h2 id=\"6-1-引入springboot插件\"><a href=\"#6-1-引入springboot插件\" class=\"headerlink\" title=\"6.1 引入springboot插件\"></a>6.1 引入springboot插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 引入springboot插件；打包插件 --&gt;</span><br><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2打包：package\"><a href=\"#6-2打包：package\" class=\"headerlink\" title=\"6.2打包：package\"></a>6.2打包：package</h2><p>mac 项目路径下运行    mvn install 打jar包<br>win下  mvn package</p>\n<h2 id=\"6-3-java-jar\"><a href=\"#6-3-java-jar\" class=\"headerlink\" title=\"6.3 java -jar\"></a>6.3 java -jar</h2><p>测试 运行:  java -jar jar 包名<br>然后 网站输入 <a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></p>\n<h2 id=\"6-4-修改端口号\"><a href=\"#6-4-修改端口号\" class=\"headerlink\" title=\"6.4 修改端口号\"></a>6.4 修改端口号</h2><h3 id=\"方式1-官方推荐\"><a href=\"#方式1-官方推荐\" class=\"headerlink\" title=\"方式1(官方推荐)\"></a>方式1(官方推荐)</h3><p>新建普通file文件  改名 位置和名字都是固定的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[application](/media/application.yml)</span><br></pre></td></tr></table></figure>\n<p>写(注意 冒号后面有空格)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">    port: 7000</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb44cb93b26516.jpg\" alt></p>\n<h3 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[application](/media/application.properties)</span><br></pre></td></tr></table></figure>\n<p>路径下 写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=8090</span><br></pre></td></tr></table></figure></p>\n<p>然后网站输入 <a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb44e58dc54610.jpg\" alt></p>\n<h1 id=\"第七章-快速创建SpringBoot应用\"><a href=\"#第七章-快速创建SpringBoot应用\" class=\"headerlink\" title=\"第七章 快速创建SpringBoot应用\"></a>第七章 快速创建SpringBoot应用</h1><h2 id=\"7-1-创建Spring-Starter-Project-必须联网创建\"><a href=\"#7-1-创建Spring-Starter-Project-必须联网创建\" class=\"headerlink\" title=\"7.1 创建Spring Starter Project; 必须联网创建\"></a>7.1 创建Spring Starter Project; 必须联网创建</h2><p><img src=\"https://i.loli.net/2019/05/29/5ceddb316d95584809.jpg\" alt></p>\n<h2 id=\"7-2-选择版本，引入需要的依赖\"><a href=\"#7-2-选择版本，引入需要的依赖\" class=\"headerlink\" title=\"7.2 选择版本，引入需要的依赖\"></a>7.2 选择版本，引入需要的依赖</h2><p><img src=\"https://i.loli.net/2019/05/29/5ceddb44c13d450575.jpg\" alt></p>\n<h2 id=\"7-3-项目结构\"><a href=\"#7-3-项目结构\" class=\"headerlink\" title=\"7.3 项目结构\"></a>7.3 项目结构</h2><ul>\n<li>自动生成主程序类，用于启动项目</li>\n<li>自动生成静态资源目录及属性配置文件</li>\n<li>自动生成测试类</li>\n<li>自动增加pom.xml相关依赖配置</li>\n</ul>\n<h2 id=\"7-4-增加控制器类\"><a href=\"#7-4-增加控制器类\" class=\"headerlink\" title=\"7.4 增加控制器类\"></a>7.4 增加控制器类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"> </span><br><span class=\"line\">//@ResponseBody</span><br><span class=\"line\">//@Controller</span><br><span class=\"line\"> </span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class HelloController &#123;        </span><br><span class=\"line\"> </span><br><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public String handle01()&#123;</span><br><span class=\"line\">return &quot;OK!+哈哈&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-5-运行测试\"><a href=\"#7-5-运行测试\" class=\"headerlink\" title=\"7.5 运行测试\"></a>7.5 运行测试</h2><ul>\n<li><a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></li>\n<li>在static文件下下存放java.jpg图片， <a href=\"http://localhost:8080/java.jpg\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/java.jpg</a></li>\n<li>在application.properties设置</li>\n<li>端口，server.port=8081， <a href=\"http://localhost:8081/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/hello</a></li>\n<li>上下文路径，server.servlet.context-path=/a ，<a href=\"http://localhost:8081/a/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/a/hello</a></li>\n<li>server.session.timeout=60</li>\n<li>server.tomcat.max-threads=800</li>\n<li>server.tomcat.uri-encoding=UTF-8</li>\n</ul>\n<h1 id=\"第八章-SpringBoot-yml配置文件\"><a href=\"#第八章-SpringBoot-yml配置文件\" class=\"headerlink\" title=\"第八章 SpringBoot-yml配置文件\"></a>第八章 SpringBoot-yml配置文件</h1><h2 id=\"8-1-配置文件\"><a href=\"#8-1-配置文件\" class=\"headerlink\" title=\"8.1 配置文件\"></a>8.1 配置文件</h2><ul>\n<li>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</li>\n<li>application.properties</li>\n<li>application.yml<ul>\n<li>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给自动配置好；</li>\n<li>YAML（YAML Ain’t Markup Language）</li>\n<li>YAML A Markup Language：是一个标记语言</li>\n<li>YAML isn’t Markup Language：不是一个标记语言；</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>标记语言：<ul>\n<li>以前的配置文件；大多都使用的是 xxxx.xml文件；</li>\n<li>YAML：以数据为中心，比json、xml等更适合做配置文件；</li>\n<li>YAML：配置例子</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">port: 8081</span><br></pre></td></tr></table></figure>\n<ul>\n<li>XML：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;server&gt;</span><br><span class=\"line\">&lt;port&gt;8081&lt;/port&gt;</span><br><span class=\"line\">&lt;/server&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-YAML语法\"><a href=\"#8-2-YAML语法\" class=\"headerlink\" title=\"8.2 YAML语法\"></a>8.2 YAML语法</h2><h3 id=\"8-2-1-YAML基本语法\"><a href=\"#8-2-1-YAML基本语法\" class=\"headerlink\" title=\"8.2.1 YAML基本语法\"></a>8.2.1 YAML基本语法</h3><ul>\n<li>使用缩进表示层级关系</li>\n<li>缩进时不允许使用Tab键，只允许使用空格。</li>\n<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可<br>大小写敏感</li>\n</ul>\n<h3 id=\"8-2-2-YAML-支持的三种数据结构\"><a href=\"#8-2-2-YAML-支持的三种数据结构\" class=\"headerlink\" title=\"8.2.2 YAML 支持的三种数据结构\"></a>8.2.2 YAML 支持的三种数据结构</h3><ul>\n<li>对象：键值对的集合</li>\n<li>数组：一组按次序排列的值</li>\n<li>字面量：单个的、不可再分的值<h2 id=\"8-3-值的写法\"><a href=\"#8-3-值的写法\" class=\"headerlink\" title=\"8.3 值的写法\"></a>8.3 值的写法</h2><h3 id=\"8-3-1-字面量：普通的值（数字，字符串，布尔）\"><a href=\"#8-3-1-字面量：普通的值（数字，字符串，布尔）\" class=\"headerlink\" title=\"8.3.1 字面量：普通的值（数字，字符串，布尔）\"></a>8.3.1 字面量：普通的值（数字，字符串，布尔）</h3></li>\n<li>k: v：字面直接来写；</li>\n<li>字符串默认不用加上单引号或者双引号；</li>\n<li>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</li>\n<li>name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi</li>\n<li>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</li>\n<li>name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</li>\n</ul>\n<h3 id=\"8-3-2-对象、Map（属性和值）（键值对）：\"><a href=\"#8-3-2-对象、Map（属性和值）（键值对）：\" class=\"headerlink\" title=\"8.3.2 对象、Map（属性和值）（键值对）：\"></a>8.3.2 对象、Map（属性和值）（键值对）：</h3><ul>\n<li>k: v：在下一行来写对象的属性和值的关系；注意缩进</li>\n<li>对象还是k: v的方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">friends:</span><br><span class=\"line\">lastName: zhangsan</span><br><span class=\"line\">age: 20</span><br></pre></td></tr></table></figure>\n<ul>\n<li>另一种书写方式-行内写法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">friends: &#123;lastName: zhangsan,age: 18&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-3-3-数组（List、Set）\"><a href=\"#8-3-3-数组（List、Set）\" class=\"headerlink\" title=\"8.3.3 数组（List、Set）\"></a>8.3.3 数组（List、Set）</h2><p>用- 值表示数组中的一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pets:</span><br><span class=\"line\">‐ cat</span><br><span class=\"line\">‐ dog</span><br><span class=\"line\">‐ pig</span><br></pre></td></tr></table></figure>\n<p>行内写法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pets: [cat,dog,pig]</span><br></pre></td></tr></table></figure>\n<h1 id=\"第九章-SpringBoot-自动配置原理\"><a href=\"#第九章-SpringBoot-自动配置原理\" class=\"headerlink\" title=\"第九章 SpringBoot-自动配置原理\"></a>第九章 SpringBoot-自动配置原理</h1><p>9.1 自动配置原理</p>\n<ul>\n<li><p>SpringBoot所有的东西都自动配置好了；<br>1）、<code>spring-boot-autoconfigure-2.0.7.RELEASE.jar</code>（自动配置包）<br>2）、好多的场景全部自动配置好</p>\n</li>\n<li><p>自动配置原理：<br>1）、主程序类标注了<code>@SpringBootApplication</code>注解相当于标注了<code>@EnableAutoConfiguration</code><br>2）、<code>@EnableAutoConfiguration</code> 开启SpringBoot的自动配置功能</p>\n</li>\n<li><p>就会自动的将所有的自动配置类导进来<br>如：<code>HttpEncodingAutoConfiguration</code>（http编码的自动配置）<br>1）、<code>@ConditionalOnXX</code>根据当前系统环境判断我这个类的所有配置是否需要生效<br>2）、会发现这些配置类中使用@Bean给容器中放了好多组件，这些组件就生效；<br>3）、这些组件会从一个类中（配置文件属性值的封装类）获取到它应该使用的值是什么。比如<code>HttpEncodingProperties</code>获取charset<br>4）、这写配置文件值的封装类都是和配置文件一一绑定<br><code>@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)\nHttpEncodingProperties</code></p>\n</li>\n<li>使用心得：<br>1）、SpringBoot帮我们配好了所有的场景<br>2）、SpringBoot中会有很多的 <code>xxxxAutoConfigurarion</code>（帮我们给容器中自动配好组件）<br>3）、<code>xxxxAutoConfigurarion</code>给容器中配组件的时候，组件默认的属性一般都是从 xxxProperties中获取这些属性的值<br>4）、<code>xxxProperties</code> 是和配置文件绑定的（属性一一对应）<br>5）、我们改掉这些默认配置即可；<br>6）、如果默认的组件我们不用；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">@ConditionalOnMissingBean：容器中没这个组件</span><br><span class=\"line\">public InternalResourceViewResolver defaultViewResolver()</span><br><span class=\"line\">SpringBoot的一个最大策略：自定义组件用自己的，否则，使用默认的。</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-自定义配置类\"><a href=\"#9-2-自定义配置类\" class=\"headerlink\" title=\"9.2 自定义配置类\"></a>9.2 自定义配置类</h2><p>视图解析需要将thymeleaf模块引入项目中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class AppConfig &#123;</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public InternalResourceViewResolver internalResourceViewResolver()&#123;</span><br><span class=\"line\">InternalResourceViewResolver resolver = new InternalResourceViewResolver();</span><br><span class=\"line\">resolver.setPrefix(&quot;/templates/&quot;);</span><br><span class=\"line\">resolver.setSuffix(&quot;.html&quot;);</span><br><span class=\"line\">return resolver;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十章-SpringBoot-整合mybatis-配置版\"><a href=\"#第十章-SpringBoot-整合mybatis-配置版\" class=\"headerlink\" title=\"第十章 SpringBoot-整合mybatis-配置版\"></a>第十章 SpringBoot-整合mybatis-配置版</h1><p><img src=\"https://i.loli.net/2019/05/29/5ceddb319a55017017.jpg\" alt></p>\n<h2 id=\"10-1-创建Spring-Starter-Project\"><a href=\"#10-1-创建Spring-Starter-Project\" class=\"headerlink\" title=\"10.1 创建Spring Starter Project\"></a>10.1 创建Spring Starter Project</h2><p>增加<code>web,jdbc,mybatis,mysql</code>相关组件</p>\n<h2 id=\"10-2-增加application-yml\"><a href=\"#10-2-增加application-yml\" class=\"headerlink\" title=\"10.2 增加application.yml\"></a>10.2 增加application.yml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password: root</span><br><span class=\"line\">    url: jdbc:mysql://192.168.137.3:3306/atcrowdfunding?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">mybatis:</span><br><span class=\"line\">  config-location: classpath:mybatis/mybatis-config.xml</span><br><span class=\"line\">  mapper-locations: classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-3-增加实体类：TAdmin\"><a href=\"#10-3-增加实体类：TAdmin\" class=\"headerlink\" title=\"10.3 增加实体类：TAdmin\"></a>10.3 增加实体类：TAdmin</h2><h2 id=\"10-4-增加Mapper接口\"><a href=\"#10-4-增加Mapper接口\" class=\"headerlink\" title=\"10.4 增加Mapper接口\"></a>10.4 增加Mapper接口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface AdminMapper &#123;</span><br><span class=\"line\">public TAdmin getAdminById(Integer id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-5-增加映射配置文件\"><a href=\"#10-5-增加映射配置文件\" class=\"headerlink\" title=\"10.5 增加映射配置文件\"></a>10.5 增加映射配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;com.atguigu.mapper.AdminMapper&quot;&gt;</span><br><span class=\"line\">         &lt;select id=&quot;getAdminById&quot; resultType=&quot;com.atguigu.bean.TAdmin&quot;&gt;</span><br><span class=\"line\">                 SELECT * FROM `t_admin` WHERE id=#&#123;id&#125;</span><br><span class=\"line\">         &lt;/select&gt; </span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-6-增加控制器\"><a href=\"#10-6-增加控制器\" class=\"headerlink\" title=\"10.6 增加控制器\"></a>10.6 增加控制器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.controller;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.bean.TAdmin;</span><br><span class=\"line\">import com.mapper.AdminMapper;</span><br><span class=\"line\"> </span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class UserController &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">AdminMapper adminMapper;</span><br><span class=\"line\"> </span><br><span class=\"line\">@GetMapping(&quot;/getAdminById&quot;)</span><br><span class=\"line\">public TAdmin getAdminById (Integer id)&#123;</span><br><span class=\"line\">return adminMapper.getAdminById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-7-增加mybatis主配置文件\"><a href=\"#10-7-增加mybatis主配置文件\" class=\"headerlink\" title=\"10.7 增加mybatis主配置文件\"></a>10.7 增加mybatis主配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-8-增加mapper扫描\"><a href=\"#10-8-增加mapper扫描\" class=\"headerlink\" title=\"10.8 增加mapper扫描\"></a>10.8 增加mapper扫描</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 和Mybatis的整合</span><br><span class=\"line\"> * 1）、在配置文件中指明mybatis全局配置文件和Sql映射文件的位置</span><br><span class=\"line\"> * 2）、扫描mybatis的所有mapper接口</span><br><span class=\"line\"> */</span><br><span class=\"line\">@MapperScan(&quot;com.atguigu.mapper&quot;)</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class SpringBoot03Application &#123;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">SpringApplication.run(SpringBoot03Application.class, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十一章-SpringBoot-整合mybatis-注解版\"><a href=\"#第十一章-SpringBoot-整合mybatis-注解版\" class=\"headerlink\" title=\"第十一章 SpringBoot-整合mybatis-注解版\"></a>第十一章 SpringBoot-整合mybatis-注解版</h1><p>拷贝上一个项目进行实验<br>增加Mapper接口,在方法增加相应的注解即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Mapper //加不加都行</span><br><span class=\"line\">public interface AdminMapper &#123;</span><br><span class=\"line\">@Select(&quot;SELECT * FROM `t_admin` WHERE id=#&#123;id&#125;&quot;)</span><br><span class=\"line\">public TAdmin getAdminById(Integer id);</span><br><span class=\"line\"> </span><br><span class=\"line\">@Insert(&quot;INSERT INTO t_admin(loginacct,userpswd,username,email,createtime) &quot;</span><br><span class=\"line\">+ &quot;VALUES(#&#123;loginacct&#125;,#&#123;userpswd&#125;,#&#123;username&#125;,#&#123;email&#125;,#&#123;createtime&#125;)&quot;)</span><br><span class=\"line\">public void insertAdmin(TAdmin admin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十二章-SpringBoot-整合Druid数据源\"><a href=\"#第十二章-SpringBoot-整合Druid数据源\" class=\"headerlink\" title=\"第十二章 SpringBoot-整合Druid数据源\"></a>第十二章 SpringBoot-整合Druid数据源</h1><h2 id=\"12-1-使用方式一\"><a href=\"#12-1-使用方式一\" class=\"headerlink\" title=\"12.1 使用方式一\"></a>12.1 使用方式一</h2><h3 id=\"12-1-1-增依赖\"><a href=\"#12-1-1-增依赖\" class=\"headerlink\" title=\"12.1.1 增依赖\"></a>12.1.1 增依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.1.12&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-1-2-配置数据源\"><a href=\"#12-1-2-配置数据源\" class=\"headerlink\" title=\"12.1.2 配置数据源\"></a>12.1.2 配置数据源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password: root</span><br><span class=\"line\">    url: jdbc:mysql://192.168.137.3:3306/atcrowdfunding?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">    type: com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-1-3-测试\"><a href=\"#12-1-3-测试\" class=\"headerlink\" title=\"12.1.3 测试\"></a>12.1.3 测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(SpringRunner.class)</span><br><span class=\"line\">@SpringBootTest</span><br><span class=\"line\">public class SpringBoot03ApplicationTests &#123; </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">DataSource dataSource;</span><br><span class=\"line\"> </span><br><span class=\"line\">/*</span><br><span class=\"line\">   * HikariDataSource 默认数据源，性能很高</span><br><span class=\"line\">   * DruidDataSource 使用很高，很稳定</span><br><span class=\"line\">   */</span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void contextLoads() throws SQLException &#123;</span><br><span class=\"line\">System.out.println(dataSource.getClass());</span><br><span class=\"line\">Connection connection = dataSource.getConnection();</span><br><span class=\"line\">System.out.println(connection);</span><br><span class=\"line\">connection.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-2-使用方式二\"><a href=\"#12-2-使用方式二\" class=\"headerlink\" title=\"12.2 使用方式二\"></a>12.2 使用方式二</h2><h3 id=\"12-2-1创建数据源\"><a href=\"#12-2-1创建数据源\" class=\"headerlink\" title=\"12.2.1创建数据源\"></a>12.2.1创建数据源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class AppConfig &#123;</span><br><span class=\"line\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;) //将数据库连接信息直接封装到数据源对象中</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public DataSource dataSource() throws SQLException &#123;</span><br><span class=\"line\">DruidDataSource dataSource = new DruidDataSource();</span><br><span class=\"line\">dataSource.setFilters(&quot;stat&quot;);//配置监控统计拦截的filters</span><br><span class=\"line\">return dataSource;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-3-Druid监控使用情况\"><a href=\"#12-3-Druid监控使用情况\" class=\"headerlink\" title=\"12.3 Druid监控使用情况\"></a>12.3 Druid监控使用情况</h2><h3 id=\"12-3-1-增加配置\"><a href=\"#12-3-1-增加配置\" class=\"headerlink\" title=\"12.3.1 增加配置\"></a>12.3.1 增加配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//配置Druid的监控</span><br><span class=\"line\">//1、配置一个管理后台的Servlet</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public ServletRegistrationBean statViewServlet() &#123;</span><br><span class=\"line\">ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;);</span><br><span class=\"line\">Map&lt;String, String&gt; initParams = new HashMap&lt;&gt;();</span><br><span class=\"line\">initParams.put(&quot;loginUsername&quot;, &quot;admin&quot;);</span><br><span class=\"line\">initParams.put(&quot;loginPassword&quot;, &quot;123456&quot;);</span><br><span class=\"line\">initParams.put(&quot;allow&quot;, &quot;&quot;);// 默认就是允许所有访问</span><br><span class=\"line\">initParams.put(&quot;deny&quot;, &quot;192.168.15.21&quot;);//拒绝哪个ip访问</span><br><span class=\"line\">bean.setInitParameters(initParams);</span><br><span class=\"line\">return bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2、配置一个web监控的filter</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public FilterRegistrationBean webStatFilter() &#123;</span><br><span class=\"line\">FilterRegistrationBean bean = new FilterRegistrationBean();</span><br><span class=\"line\">bean.setFilter(new WebStatFilter());</span><br><span class=\"line\">Map&lt;String, String&gt; initParams = new HashMap&lt;&gt;();</span><br><span class=\"line\">initParams.put(&quot;exclusions&quot;, &quot;*.js,*.css,/druid/*&quot;);//排除过滤</span><br><span class=\"line\">bean.setInitParameters(initParams);</span><br><span class=\"line\">bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));</span><br><span class=\"line\">return bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-3-2-如果无法打印监控语句\"><a href=\"#12-3-2-如果无法打印监控语句\" class=\"headerlink\" title=\"12.3.2 如果无法打印监控语句\"></a>12.3.2 如果无法打印监控语句</h3><p>可以设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.setFilters(&quot;stat&quot;);</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.filters=stat</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十三章-SpringBoot-整合Web组件-注解版\"><a href=\"#第十三章-SpringBoot-整合Web组件-注解版\" class=\"headerlink\" title=\"第十三章 SpringBoot-整合Web组件-注解版\"></a>第十三章 SpringBoot-整合Web组件-注解版</h1><p>之前的Web开发基于Servlet 2.5规范（在web.xml中配置<code>Servlet,Filter,Listener</code>）。<br>现在基于Servlet 3.0规范(基于配置类的方式声明对象：<code>@WebServlet @WebFilter @WebListener)</code></p>\n<h2 id=\"13-1-监听器-WebListener\"><a href=\"#13-1-监听器-WebListener\" class=\"headerlink\" title=\"13.1 监听器@WebListener\"></a>13.1 监听器@WebListener</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.listener;</span><br><span class=\"line\"> </span><br><span class=\"line\">import javax.servlet.ServletContextEvent;</span><br><span class=\"line\">import javax.servlet.ServletContextListener;</span><br><span class=\"line\">import javax.servlet.annotation.WebListener;</span><br><span class=\"line\"> </span><br><span class=\"line\">@WebListener</span><br><span class=\"line\">public class HelloListener implements ServletContextListener &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void contextDestroyed(ServletContextEvent arg0) &#123;</span><br><span class=\"line\">System.out.println(&quot;应用销毁了....HelloListener&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void contextInitialized(ServletContextEvent arg0) &#123;</span><br><span class=\"line\">System.out.println(&quot;应用启动了....HelloListener&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-过滤器-WebFilter-urlPatterns-”-”\"><a href=\"#13-2-过滤器-WebFilter-urlPatterns-”-”\" class=\"headerlink\" title=\"13.2 过滤器@WebFilter(urlPatterns=”/*”)\"></a>13.2 过滤器@WebFilter(urlPatterns=”/*”)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.filter;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"> </span><br><span class=\"line\">import javax.servlet.Filter;</span><br><span class=\"line\">import javax.servlet.FilterChain;</span><br><span class=\"line\">import javax.servlet.FilterConfig;</span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.ServletResponse;</span><br><span class=\"line\">import javax.servlet.annotation.WebFilter;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">@WebFilter(urlPatterns=&quot;/*&quot;)</span><br><span class=\"line\">public class HelloFilter implements Filter &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void destroy() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)</span><br><span class=\"line\">throws IOException, ServletException &#123;</span><br><span class=\"line\">System.out.println(&quot;HelloFilter............放行之前&quot;);</span><br><span class=\"line\">arg2.doFilter(arg0, arg1);</span><br><span class=\"line\">System.out.println(&quot;HelloFilter............放行之后&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void init(FilterConfig arg0) throws ServletException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-3-Servlet-WebServlet-urlPatterns-”-my”\"><a href=\"#13-3-Servlet-WebServlet-urlPatterns-”-my”\" class=\"headerlink\" title=\"13.3 Servlet @WebServlet(urlPatterns=”/my”)\"></a>13.3 Servlet @WebServlet(urlPatterns=”/my”)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.servlet;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"> </span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.annotation.WebServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\">@WebServlet(urlPatterns=&quot;/my&quot;)</span><br><span class=\"line\">public class MyServlet extends HttpServlet &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">resp.getWriter().write(&quot;MyServlet do.......&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">13.4扫描组件@ServletComponentScan</span><br><span class=\"line\">@ServletComponentScan</span><br><span class=\"line\">@MapperScan(&quot;com.atguigu.mapper&quot;)</span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class SpringBoot03Application &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">SpringApplication.run(SpringBoot03Application.class, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十四章-SpringBoot-集成业务层事务\"><a href=\"#第十四章-SpringBoot-集成业务层事务\" class=\"headerlink\" title=\"第十四章 SpringBoot-集成业务层事务\"></a>第十四章 SpringBoot-集成业务层事务</h1><ul>\n<li>扫描Dao接口，需要在AtCrowdfundingApplication类中增加扫描注解@MapperScan(“com.atguigu.**.dao”)及事务管理@EnableTransactionManagement</li>\n<li><p>传统的SSM架构中采用的是声明式事务，需要在配置文件中增加AOP事务配置，Spring Boot框架中简化了这种配置，可以在Service接口中增加注解@Transactional<br>附录1 官网提供的SpringBoot相关模块</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb3199da768624.jpg\" alt></p>\n</li>\n</ul>\n<p> <img src=\"https://i.loli.net/2019/05/29/5ceddb44c7b5611722.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5ceddb44c429696556.jpg\" alt></p>\n","categories":["Java框架"],"tags":["使用过的开源框架"]},{"title":"Redis","url":"http://yoursite.com/2018/04/18/71. Redis/","content":"<h1 id=\"第1章-NoSQL-简介\"><a href=\"#第1章-NoSQL-简介\" class=\"headerlink\" title=\"第1章 NoSQL 简介\"></a>第1章 NoSQL 简介</h1><h2 id=\"1-1-技术的分类\"><a href=\"#1-1-技术的分类\" class=\"headerlink\" title=\"1.1 技术的分类\"></a>1.1 技术的分类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)解决功能性的问题</span><br><span class=\"line\">Java、Servlet、Jsp、Tomcat、RDBMS、JDBC、Linux、Svn 等</span><br><span class=\"line\">2)解决扩展性的问题</span><br><span class=\"line\">Spring、 SpringMVC、SpringBoot、Hibernate、MyBatis等</span><br><span class=\"line\">3)解决性能的问题</span><br><span class=\"line\">NoSQL、Java多线程、Nginx、MQ、ElasticSearch、Hadoop等</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-WEB1-0-及WEB2-0\"><a href=\"#1-2-WEB1-0-及WEB2-0\" class=\"headerlink\" title=\"1.2 WEB1.0 及WEB2.0\"></a>1.2 WEB1.0 及WEB2.0</h2><blockquote>\n<p>1)Web1.0的时代,数据访问量很有限，用一夫当关的高性能的单节点服务器可以解决大部分问题.</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/15/ETpYHx.png\" alt=\"ETpYHx.png\"></p>\n<blockquote>\n<p>2)Web2.0时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据，加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战.</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/15/ETpUUK.png\" alt=\"ETpUUK.png\"></p>\n<h2 id=\"1-3-解决服务器CPU内存压力\"><a href=\"#1-3-解决服务器CPU内存压力\" class=\"headerlink\" title=\"1.3 解决服务器CPU内存压力\"></a>1.3 解决服务器CPU内存压力</h2><p><img src=\"https://s2.ax1x.com/2019/05/15/ETpwCD.png\" alt=\"ETpwCD.png\"></p>\n<ul>\n<li>Session共享问题如何解决?<ul>\n<li>方案一、存在Cookie中 <ul>\n<li>此种方案需要将Session数据以Cookie的形式存在客户端,不安全，网络负担效率低</li>\n</ul>\n</li>\n<li>方案二、存在文件服务器或者是数据库里<ul>\n<li>此种方案会导致大量的IO操作，效率低.</li>\n</ul>\n</li>\n<li>方案三、Session复制<ul>\n<li>此种方案会导致每个服务器之间必须将Session广播到集群内的每个节点，Session数据会冗余，节点越多浪费越大,存在广播风暴问题.</li>\n</ul>\n</li>\n<li>方案四、存在Redis中<ul>\n<li>目前来看，此种方案是最好的。将Session数据存在内存中，每台服务器都从内存中读取数据,速度快，结构还相对简单.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-4-解决IO压力\"><a href=\"#1-4-解决IO压力\" class=\"headerlink\" title=\"1.4 解决IO压力\"></a>1.4 解决IO压力</h2><p><img src=\"https://s2.ax1x.com/2019/05/15/ETp08e.png\" alt=\"ETp08e.png\"></p>\n<blockquote>\n<p>将活跃的数据缓存到Redis中，客户端的请求先打到缓存中来获取对应的数据，如果能获取到，直接返回，不需要从MySQL中读取。如果缓存中没有，再从MySQL数据库中读取数据，将读取的数据返回并存一份到Redis中，方便下次读取.  </p>\n</blockquote>\n<blockquote>\n<p>扩展: 对于持久化的数据库来说，单个库单个表存在性能瓶颈，因此会通过水平切分、垂直切分、读取分离等技术提升性能，此种解决方案会破坏一定的业务逻辑，但是可以换取更高的性能. </p>\n<ul>\n<li>mysql 单表可以达到500万条 普通服务器</li>\n<li>NoSQL 小型机上理论可以达到1个亿</li>\n</ul>\n</blockquote>\n<h2 id=\"1-5-NoSQL数据库概述\"><a href=\"#1-5-NoSQL数据库概述\" class=\"headerlink\" title=\"1.5 NoSQL数据库概述\"></a>1.5 NoSQL数据库概述</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，</span><br><span class=\"line\">泛指非关系型的数据库。 NoSQL 不依赖业务逻辑方式存储，</span><br><span class=\"line\">而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</span><br><span class=\"line\">2)NoSQL的特点</span><br><span class=\"line\">不遵循SQL标准</span><br><span class=\"line\">不支持ACID 但有自己的事物</span><br><span class=\"line\">远超于SQL的性能。</span><br><span class=\"line\">3)NoSQL的适用场景</span><br><span class=\"line\">对数据高并发的读写</span><br><span class=\"line\">海量数据的读写</span><br><span class=\"line\">对数据高可扩展性的</span><br><span class=\"line\">4)NoSQL的不适用场景</span><br><span class=\"line\">需要事务支持</span><br><span class=\"line\">基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</span><br><span class=\"line\">5)建议: 用不着sql的和用了sql也不行的情况，请考虑用NoSql</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-6-常用的缓存数据库\"><a href=\"#1-6-常用的缓存数据库\" class=\"headerlink\" title=\"1.6 常用的缓存数据库\"></a>1.6 常用的缓存数据库</h2><p>1)Memcached   </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/15/ETpgVP.png\" alt=\"ETpgVP.png\"></p>\n<p>2)Redis  </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/15/ETpR58.png\" alt=\"ETpR58.png\"></p>\n<p>3) mongoDB </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/15/ETpfPS.png\" alt=\"ETpfPS.png\"></p>\n<p>4)列式数据库<br>先看行式数据库<br><img src=\"https://s2.ax1x.com/2019/05/15/ETph8g.png\" alt=\"ETph8g.png\"><br>思考: 如下两条SQL的快慢<br>      select * from users where id =3<br>      select avg(age) from users<br>再看列式数据库</p>\n<p>5)HBase</p>\n<p>6)Cassandra</p>\n<p>7)Neo4j</p>\n<p>1.7 数据库排名<br><a href=\"http://db-engines.com/en/ranking\" target=\"_blank\" rel=\"noopener\">http://db-engines.com/en/ranking</a></p>\n<p>第2章 Redis简介 及 安装<br>2.1 Redis是什么<br>Redis是一个开源的key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。<br>2.2 Redis的应用场景<br>1)配合关系型数据库做高速缓存<br>高频次，热门访问的数据，降低数据库IO<br>高频次，热门访问的数据，降低数据库IO<br>2)由于其拥有持久化能力，利用其多样的数据结构存储特定的数据<br>最新N个数据  通过List实现按自然事件排序的数据<br>排行榜，TopN  利用zset(有序集合)<br>时效性的数据，比如手机验证码 Expire过期<br>计数器，秒杀  原子性，自增方法INCR、DECR<br>去除大量数据中的重复数据 利用set集合<br>构建队列利用list集合<br>发布订阅消息系统  pub/sub模式<br>2.3 Redis官网<br>1)Redis官方网站  <a href=\"http://Redis.io\" target=\"_blank\" rel=\"noopener\">http://Redis.io</a><br>2)Redis中文官方网站  <a href=\"http://www.Redis.net.cn\" target=\"_blank\" rel=\"noopener\">http://www.Redis.net.cn</a><br>2.4 关于Redis版本<br>1)3.2.5 for Linux<br>2)不用考虑在Windows环境下对Redis的支持<br>Redis官方没有提供对Windows环境的支持，是微软的开源小组开发了对Redis对Windows的支持.<br>2.5 安装步骤<br>1)下载获得redis-3.2.5.tar.gz后将它放入我们的Linux目录/opt<br>2)解压命令:tar -zxvf redis-3.2.5.tar.gz<br>3)解压完成后进入目录:cd redis-3.2.5<br>4)在redis-3.2.5目录下执行make命令<br>运行Make命令时出现错误,提示 gcc：命令未找到 ,原因是因为当前Linux环境中并没有安装gcc 与 g++ 的环境<br>5)安装gcc与g++<br>能上网的情况:<br>yum install gcc<br>yum install gcc-c++<br>不能上网[建议]<br>网盘里找gcc与gcc-c++环境（Redis里epmgcc）放到opt里<br>进入到epmgcc里 根据依赖关系执行<br> rpm -Uvh *.rpm –nodeps –force</p>\n<p>运行 gcc -v 和g++ -v 出现下面图</p>\n<p>重新进入到Redis的目录中执行 make distclean后再执行make 命令.<br>6)执行完make后，可跳过Redis test步骤，直接执行 make install<br>2.6 查看默认安装目录 /usr/local/bin<br>1)Redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何(服务启动起来后执行)<br>2)Redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲<br>3)Redis-check-dump：修复有问题的dump.rdb文件<br>4)Redis-sentinel：Redis集群使用<br>5)redis-server：Redis服务器启动命令<br>6)redis-cli：客户端，操作入口</p>\n<p>2.7 Redis的启动<br>1)默认前台方式启动<br>直接执行redis-server 即可.启动后不能操作当前命令窗口<br>2)推荐后台方式启动<br>拷贝一份redis.conf配置文件到其他目录，例如根目录下的myredis目录  /myredis<br>修改redis.conf文件中的一项配置 daemonize 将no 改为yes，代表后台启动<br>执行配置文件进行启动 执行 redis-server /myredis/redis.conf<br>2.8客户端访问<br>1)使用redis-cli 命令访问启动好的Redis<br>如果有多个Redis同时启动，则需指定端口号访问  redis-cli -p 端口号<br>2)测试验证,通过 ping 命令 查看是否 返回 PONG<br>2.9 关闭Redis服务<br>1)单实例关闭<br>如果还未通过客户端访问，可直接 redis-cli shutdown<br>如果已经进入客户端,直接 shutdown即可.<br>2)多实例关闭<br>指定端口关闭 redis-cli -p 端口号 shutdown</p>\n<p>2.9Redis端口号的由来<br>1)端口号来自一位影星的名字 . Alessia Merz<br>2.10 Redis 默认16个库<br>1)Redis默认创建16个库,每个库对应一个下标,从0开始.<br>通过客户端连接后默认进入到0 号库，推荐只使用0号库.<br>2)使用命令 select 库的下标  来切换数据库，例如  select 8<br>2.11 Redis的单线程+多路IO复用技术<br>1)多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。<br>2)Memcached 是 多线程 + 锁.<br>Redis 是 单线程 + 多路IO复用.<br>第3章 Redis的五大数据类型<br>3.1 key<br>keys  *     查看当前库的所有键<br>exists <key>    判断某个键是否存在<br>type <key>    查看键的类型<br>del <key>    删除某个键<br>expire <key> <seconds>    为键值设置过期时间，单位秒<br>ttl <key>    查看还有多久过期,-1表示永不过期,-2表示已过期<br>dbsize    查看当前数据库中key的数量<br>flushdb    清空当前库<br>Flushall    通杀全部库</key></seconds></key></key></key></key></p>\n<p>3.2 String<br>1)String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value<br>2)String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。<br>3)String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M<br>4)常用操作</p>\n<p>get <key>    查询对应键值<br>set <key> <value>    添加键值对<br>append <key> <value>    将给定的<value>追加到原值的末尾<br>strlen <key>    获取值的长度<br>senx <key> <value>    只有在key 不存在时设置key的值<br>incr <key>    将key中存储的数字值增1<br>只能对数字值操作，如果为空，新增值为1<br>decr <key>    将key中存储的数字值减1<br>只能对数字之操作，如果为空,新增值为-1<br>incrby /decrby <key> 步长    将key中存储的数字值增减，自定义步长<br>mset <key1> <value1> <key2> <value2>    同时设置一个或多个key-value对<br>mget <key1> <key2>  <key3>    同时获取一个或多个value<br>msetnx <key1> <value1> <key2> <value2>    同时设置一个或多个key-value对，当且仅当所有给定的key都不存在<br>getrange <key> &lt;起始位置&gt; &lt;结束位置&gt;    获得值的范围,类似java中的substring<br>setrange <key> &lt;起始位置&gt; <value>    用<value>覆盖<key>所存储的字符串值，从&lt;起始位置&gt;开始<br>setex <key> &lt;过期时间&gt; <value>    设置键值的同时，设置过去时间，单位秒<br>getset <key> <value>    以新换旧,设置了新值的同时获取旧值</value></key></value></key></key></value></value></key></key></value2></key2></value1></key1></key3></key2></key1></value2></key2></value1></key1></key></key></key></value></key></key></value></value></key></value></key></key></p>\n<p>5)详说 incr key 操作的原子性<br>所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。<br>在单线程中， 能够在单条指令中完成的操作都可以认为是” 原子操作”，因为中断只能发生于指令之间。<br>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。<br>Redis单命令的原子性主要得益于Redis的单线程<br>思考: java中i++是否是原子操作?<br>3.3List<br>1)单键多值<br>2)Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。<br>3)它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差<br>4)  </p>\n<p>5)常用操作<br>lpush/rpush  <key>  <value1>  <value2>      从左边/右边插入一个或多个值。<br>lpop/rpop  <key>    从左边/右边吐出一个值。<br>值在键在，值光键亡。<br>rpoplpush  <key1>  <key2>      从<key1>列表右边吐出一个值，插到<key2>列表左边<br>lrange <key> <start> <stop>    按照索引下标获得元素(从左到右)<br>lindex <key> <index>    按照索引下标获得元素(从左到右)<br>llen <key>    获得列表长度<br>linsert <key>  before <value>  <newvalue>    在<value>的后面插入<newvalue> 插入值<br>lrem <key> <n>  <value>    从左边删除n个value(从左到右)<br>3.4 Set<br>1)Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的<br>2)Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表,所以添加，删除，查找的复杂度都是O(1)。<br>3)常用操作<br>sadd <key>  <value1>  <value2> ….    将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。<br>smembers <key>    取出该集合的所有值。<br>sismember <key>  <value>    判断集合<key>是否为含有该<value>值，有返回1，没有返回0<br>scard   <key>    返回该集合的元素个数。<br>srem <key> <value1> <value2> ….    删除集合中的某个元素。<br>spop <key>      随机从该集合中吐出一个值。<br>srandmember <key> <n>    随机从该集合中取出n个值。<br>不会从集合中删除<br>sinter <key1> <key2>      返回两个集合的交集元素。<br>sunion <key1> <key2>      返回两个集合的并集元素。<br>sdiff <key1> <key2>      返回两个集合的差集元素。<br>3.5 Hash<br>1)Redis  hash 是一个键值对集合<br>2)Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br>3)类似Java里面的Map&lt;String,Object&gt;<br>4)分析一个问题: 现有一个JavaBean对象，在Redis中如何存?</key2></key1></key2></key1></key2></key1></n></key></key></value2></value1></key></key></value></key></value></key></key></value2></value1></key></value></n></key></newvalue></value></newvalue></value></key></key></index></key></stop></start></key></key2></key1></key2></key1></key></value2></value1></key></p>\n<p>第一种方案:  用户ID为key ,VALUE为JavaBean序列化后的字符串</p>\n<p>缺点: 每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大<br>第二种方案: 用户ID+属性名作为key, 属性值作为Value.</p>\n<p>缺点: 用户ID数据冗余<br>第三种方案: 通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</p>\n<p>5)常用操作<br>hset <key>  <field>  <value>    给<key>集合中的  <field>键赋值<value><br>hget <key1>  <field>       从<key1>集合<field> 取出 value<br>hmset <key1>  <field1> <value1> <field2> <value2>…       批量设置hash的值<br>hexists key  <field>    查看哈希表 key 中，给定域 field 是否存在。<br>hkeys <key>       列出该hash集合的所有field<br>hvals <key>        列出该hash集合的所有value<br>hincrby <key> <field>  <increment>    为哈希表 key 中的域 field 的值加上增量 increment<br>hsetnx <key>  <field> <value>    将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</value></field></key></increment></field></key></key></key></field></value2></field2></value1></field1></key1></field></key1></field></key1></value></field></key></value></field></key></p>\n<p>3.6 zset (sorted set)<br>1)Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联了一个评分（score） ，这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。<br>2)因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。<br>3)常用操作<br>zadd  <key> <score1> <value1>  <score2> <value2>…    将一个或多个 member 元素及其 score 值加入到有序集 key 当中<br>zrange <key>  <start> <stop>  [WITHSCORES]       返回有序集 key 中，下标在<start> <stop>之间的元素<br>带WITHSCORES，可以让分数一起和值返回到结果集。<br>zrangebyscore key min max [withscores] [limit offset count]    返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。<br>zrevrangebyscore key max min [withscores] [limit offset count]    同上，改为从大到小排列。<br>zincrby <key> <increment> <value>    为元素的score加上增量<br>zrem  <key>  <value>      删除该集合下，指定值的元素<br>zcount <key>  <min>  <max>    统计该集合，分数区间内的元素个数<br>zrank <key>  <value>    返回该值在集合中的排名，从0开始。<br>4)思考: 如何利用zset实现一个文章访问量的排行榜?<br>第4章 Redis的相关配置<br>1)计量单位说明,大小写不敏感</value></key></max></min></key></value></key></value></increment></key></stop></start></stop></start></key></value2></score2></value1></score1></key></p>\n<p>2)include<br>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来<br>3)ip地址的绑定 bind<br>默认情况bind=127.0.0.1只能接受本机的访问请求<br>不写的情况下，无限制接受任何ip地址的访问<br>生产环境肯定要写你应用服务器的地址<br>如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的相应<br>4)tcp-backlog<br>可以理解是一个请求到达后至到接受进程处理前的队列.<br>backlog队列总和=未完成三次握手队列 +  已经完成三次握手队列<br>高并发环境tcp-backlog 设置值跟超时时限内的Redis吞吐量决定<br>5)timeout<br>一个空闲的客户端维持多少秒会关闭，0为永不关闭。<br>6)tcp keepalive<br>对访问客户端的一种心跳检测，每个n秒检测一次，官方推荐设置为60秒<br>7)daemonize<br>是否为后台进程<br>8)pidfile<br>存放pid文件的位置，每个实例会产生一个不同的pid文件<br>9)log level<br>四个级别根据使用阶段来选择，生产环境选择notice 或者warning<br>10)log level<br>日志文件名称<br>11)syslog<br>是否将Redis日志输送到linux系统日志服务中<br>12)syslog-ident<br>日志的标志<br>13)syslog-facility<br>输出日志的设备<br>14)database<br>设定库的数量 默认16<br>15)security<br>在命令行中设置密码</p>\n<p>16)maxclient<br>最大客户端连接数<br>17)maxmemory<br>设置Redis可以使用的内存量。一旦到达内存使用上限，Redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。如果Redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，<br>那么Redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。<br>18)Maxmemory-policy<br>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键<br>allkeys-lru：使用LRU算法移除key<br>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键<br>allkeys-random：移除随机的key<br>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key<br>noeviction：不进行移除。针对写操作，只是返回错误信息<br>19)Maxmemory-samples<br>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小。<br>一般设置3到7的数字，数值越小样本越不准确，但是性能消耗也越小。<br>第5章 Redis的Java客户端 Jedis<br>1)Jedis所需要的jar包 ,可通过Maven的依赖引入<br>Commons-pool-1.6.jar<br>Jedis-2.1.0.jar<br>2)使用Windows环境下Eclipse连接虚拟机中的Redis注意事项<br>禁用Linux的防火墙：Linux(CentOS7)里执行命令 ： systemctl stop firewalld.service<br>redis.conf中注释掉bind 127.0.0.1 ,然后 protect-mode no。<br>3)Jedis测试连通性<br>public class Demo01 {<br>  public static void main(String[] args) {<br>    //连接本地的 Redis 服务<br>    Jedis jedis = new Jedis(“127.0.0.1”,6379);<br>    //查看服务是否运行，打出pong表示OK<br>    System.out.println(“connection is OK=======&gt;:”+jedis.ping());<br>  }<br>}<br>4)完成一个手机验证码功能<br>要求:<br>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效<br>2、输入验证码，点击验证，返回成功或失败<br>3、每个手机号每天只能输入3次<br>第6章  Redis 事务<br>6.1 Redis中事务的定义<br>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断<br>Redis事务的主要作用就是串联多个命令防止别的命令插队<br>6.2 multi 、exec、discard<br>1)从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，至到输入Exec后，Redis会将之前的命令队列中的命令依次执行。<br>2)组队的过程中可以通过discard来放弃组队。  </p>\n<p>6.3 事务中的错误处理<br>1)组队中某个命令出现了报告错误，执行时整个的所有队列会都会被取消。</p>\n<p>2)如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p>\n<p>6.4 为什么要做成事务?<br>1)想想一个场景: 有很多人有你的账户，同时去参加双十一抢购</p>\n<p>2)通过事务解决问题</p>\n<p>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁</p>\n<p>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的。<br>6.5 Redis事务的使用<br>1)WATCH key[key….]<br>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>\n<p>2)unwatch<br>取消 WATCH 命令对所有 key 的监视。<br>如果在执行 WATCH 命令之后， EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。<br>3)三特性<br>单独的隔离操作<br>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>没有隔离级别的概念<br>队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题<br>不保证原子性<br>Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚<br>6.6 Redis事务 秒杀案例<br>1)解决计数器和人员记录的事务操作</p>\n<p>2)秒杀并发模拟  ab工具<br>CentOS6 默认安装 ,CentOS7需要手动安装<br>联网: yum install httpd-tools<br>无网络: 进入cd  /run/media/root/CentOS 7 x86_64/Packages<br>        顺序安装<br>             apr-1.4.8-3.el7.x86_64.rpm<br>              apr-util-1.5.2-6.el7.x86_64.rpm<br>              httpd-tools-2.4.6-67.el7.centos.x86_64.rpm<br>ab –n 请求数  -c 并发数  -p  指定请求数据文件<br>     -T  “application/x-www-form-urlencoded”   测试的请求<br>3)超卖问题</p>\n<p>4)请求超时问题<br>节省每次连接redis服务带来的消耗，把连接好的实例反复利用<br>连接池参数:<br>MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted。<br>maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；<br>MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException；<br>testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；<br>5)遗留问题<br>LUA脚本<br>Lua 是一个小巧的脚本语言，Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。<br>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂<br>LUA脚本在Redis中的优势<br>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。<br>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作<br>但是注意redis的lua脚本功能，只有在2.6以上的版本才可以使用。<br>利用lua脚本淘汰用户，解决超卖问题。</p>\n<p>第7章 Redis 持久化<br>Redis提供了2个不同形式的持久化方式 RDB 和 AOF</p>\n<p>7.2 RDB<br>1)在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。<br>2)备份是如何执行的<br>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。<br>3)关于fork</p>\n<p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“写时复制技术”，一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。<br>4)RDB保存的文件<br>在redis.conf中配置文件名称，默认为dump.rdb</p>\n<p>5)RDB文件的保存路径<br>默认为Redis启动时命令行所在的目录下,也可以修改</p>\n<p>6)RDB的保存策略</p>\n<p>7)手动保存快照<br>save: 只管保存，其它不管，全部阻塞<br>bgsave:按照保存策略自动保存<br>8)RDB的相关配置<br>stop-writes-on-bgsave-error yes<br>当Redis无法写入磁盘的话，直接关掉Redis的写操作<br>rdbcompression yes<br>进行rdb保存时，将文件压缩<br>rdbchecksum yes<br>在存储快照后，还可以让Redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能<br>9)RDB的备份 与恢复<br>备份:先通过config get dir  查询rdb文件的目录 , 将*.rdb的文件拷贝到别的地方<br>恢复: 关闭Redis，把备份的文件拷贝到工作目录下,启动redis,备份数据会直接加载。<br>10)RDB的优缺点<br>优点: 节省磁盘空间,恢复速度快.<br>缺点: 虽然Redis在fork时使用了写时拷贝技术,但是如果数据庞大时还是比较消耗性能。      在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就<br>      会丢失最后一次快照后的所有修改<br>7.2 AOF<br>1)以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。<br>2)AOF默认不开启，需要手动在配置文件中配置</p>\n<p>3)可以在redis.conf中配置文件名称，默认为 appendonly.aof</p>\n<p>AOF文件的保存路径，同RDB的路径一致<br>4)AOF和RDB同时开启，redis听谁的？<br>5)AOF文件故障备份<br>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载<br>6)AOF文件故障恢复<br>如遇到AOF文件损坏，可通过<br>redis-check-aof  –fix  appendonly.aof   进行恢复<br>7)AOF同步频率设置</p>\n<p>始终同步，每次Redis的写入都会立刻记入日志<br>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。<br>把不主动进行同步，把同步时机交给操作系统。<br>8)Rewrite<br>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof。<br>Redis如何实现重写<br>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。<br>何时重写<br>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。</p>\n<p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。<br>9)AOF的优缺点<br>优点:<br>备份机制更稳健，丢失数据概率更低。<br>可读的日志文本，通过操作AOF稳健，可以处理误操作。<br>缺点:<br>比起RDB占用更多的磁盘空间<br>恢复备份速度要慢<br>每次读写都同步的话，有一定的性能压力。<br>7.3 RDB和AOF 用哪个好<br>官方推荐两个都启用。<br>如果对数据不敏感，可以选单独用RDB<br>不建议单独用 AOF，因为可能会出现Bug。<br>如果只是做纯内存缓存，可以都不用<br>第8章 Redis主从复制<br>8.1 什么是主从复制<br>主从复制，就是主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。<br>8.2 主从复制的目的<br>1)读写分离，性能扩展<br>2)容灾快速恢复<br>3)  </p>\n<p>8.3 主从配置<br>1)原则: 配从不配主<br>2)步骤: 准备三个Redis实例，一主两从<br>     拷贝多个redis.conf文件include<br>     开启daemonize yes<br>     Pid文件名字pidfile<br>     指定端口port<br>     Log文件名字<br>     Dump.rdb名字dbfilename<br>     Appendonly 关掉或者换名字<br>3)info replication  打印主从复制的相关信息<br>4)slaveof  <ip>  <port>   成为某个实例的从服务器<br>8.4 一主二从模式演示</port></ip></p>\n<p>1)相关问题:<br>切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的123是否也可以复制<br>从机是否可以写？set可否？<br>主机shutdown后情况如何？从机是上位还是原地待命<br>主机又回来了后，主机新增记录，从机还能否顺利复制<br>其中一台从机down后情况如何？依照原有它能跟上大部队吗？<br>2)复制原理<br>每次从机联通后，都会给主机发送sync指令<br>主机立刻进行存盘操作，发送RDB文件，给从机<br>从机收到RDB文件后，进行全盘加载<br>之后每次主机的写操作，都会立刻发送给从机，从机执行相同的命令</p>\n<p>8.5 薪火相传模式演示<br>1)上一个slave可以是下一个slave的Master，slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险.<br>    中途变更转向:会清除之前的数据，重新建立拷贝最新的<br>    风险是一旦某个slave宕机，后面的slave都没法备份</p>\n<p>2)反客为主(小弟上位)<br>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。<br>用 slaveof  no one  将从机变为主机。</p>\n<p>3)哨兵模式 sentinel (推举大哥)<br>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库.</p>\n<p>配置哨兵<br>调整为一主二从模式<br>自定义的/myredis目录下新建sentinel.conf文件<br>在配置文件中填写内容<br>sentinel  monitor  mymaster  127.0.0.1  6379  1<br>        其中mymaster为监控对象起的服务器名称， 1 为 至少有多少个哨兵同意迁移的<br>        数量。<br>启动哨兵<br>执行redis-sentinel  /myredis/sentinel.conf<br>8.6 故障恢复</p>\n<p>第9章 Redis集群<br>9.1 问题<br>1)容量不够，redis如何进行扩容？<br>2)并发写操作， redis如何分摊？<br>9.1 什么是集群<br>1)Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。<br>2)Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求<br>9.2 集群方案<br>9.3 安装ruby环境<br>1)能上网:<br>执行yum install ruby<br>执行yum install rubygems<br>2)不能上网:<br> cd  /run/media/root/CentOS 7 x86_64/Packages  获取如下rpm包</p>\n<p>拷贝到/opt/rpmruby/目录下，并cd到此目录<br>执行：rpm -Uvh *.rpm –nodeps –force 按照依赖安装各个rpm包<br>按照依赖安装各个rpm包<br>执行在opt目录下执行  gem install –local redis-3.2.0.gem<br>9.4 准备6个Redis实例<br>1)准备6个实例  6379,6380,6381,6389,6390,6391<br>    拷贝多个redis.conf文件<br>    开启daemonize yes<br>    Pid文件名字<br>    指定端口<br>    Log文件名字<br>    Dump.rdb名字<br>    Appendonly 关掉或者换名字<br>2)再加入如下配置<br>cluster-enabled yes    打开集群模式<br>cluster-config-file  nodes-端口号.conf  设定节点配置文件名<br>cluster-node-timeout 15000   设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换<br>9.5 合体<br>1)将6个实例全部启动，nodes-端口号.conf文件都生成正常<br>2)合体<br>进入到 cd  /opt/redis-3.2.5/src<br>执行<br>./redis-trib.rb create –replicas 1<br>192.168.31.211:6379 192.168.31.211:6380  192.168.31.211:6381<br>192.168.31.211:6389 192.168.31.211:6390  192.168.31.211:6391<br>注意: IP地址修改为当前服务器的地址，端口号为每个Redis实例对应的端口号.<br>9.6 集群操作<br>1)以集群的方式进入客户端<br>redis-cli  -c  -p  端口号<br>2)通过cluster nodes 命令查看集群信息</p>\n<p>3)redis cluster 如何分配这六个节点<br>一个集群至少要有三个主节点。<br>选项 –replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。<br>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。<br>4)什么是slots<br>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。<br>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：<br>        节点 A 负责处理 0 号至 5500 号插槽。<br>        节点 B 负责处理 5501 号至 11000 号插槽。<br>        节点 C 负责处理 11001 号至 16383 号插槽<br>5)在集群中录入值<br>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口.<br>redis-cli客户端提供了 –c 参数实现自动重定向。<br>如 redis-cli  -c –p 6379 登入后，再录入、查询键值对可以自动重定向。<br>不在一个slot下的键值，是不能使用mget,mset等多键操作。<br>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去<br>6)查询集群中的值<br>CLUSTER KEYSLOT <key> 计算键 key 应该被放置在哪个槽上。<br>CLUSTER COUNTKEYSINSLOT <slot> 返回槽 slot 目前包含的键值对数量<br>CLUSTER GETKEYSINSLOT <slot> <count> 返回 count 个 slot 槽中的键<br>7)故障恢复<br>如果主节点下线？从节点能否自动升为主节点？<br>主节点恢复后，主从关系会如何？<br>如果所有某一段插槽的主从节点都当掉，redis服务是否还能继续?<br>redis.conf中的参数  cluster-require-full-coverage<br>9.7 集群的Jedis开发<br>public class JedisClusterTest {<br>  public static void main(String[] args) {</count></slot></slot></key></p>\n<pre><code>Set&lt;HostAndPort&gt; set =new HashSet&lt;HostAndPort&gt;();\nset.add(new HostAndPort(&quot;192.168.31.211&quot;,6379));\nJedisCluster jedisCluster=new JedisCluster(set);\njedisCluster.set(&quot;k1&quot;, &quot;v1&quot;);\nSystem.out.println(jedisCluster.get(&quot;k1&quot;));\n</code></pre><p>  }<br>}</p>\n<p>9.8 Redis集群的优缺点<br>优点<br>实现扩容<br>分摊压力<br>无中心配置相对简单<br>缺点<br>多键操作是不被支持的<br>多键的Redis事务是不被支持的。lua脚本不被支持。<br>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p>\n","categories":["Java框架"],"tags":["使用过的开源框架"]},{"title":"Maven","url":"http://yoursite.com/2018/04/13/70. Maven/","content":"<h1 id=\"第一章-Why\"><a href=\"#第一章-Why\" class=\"headerlink\" title=\"第一章 Why\"></a>第一章 Why</h1><blockquote>\n<p>Maven是干什么用的？<br>即使不使用Maven我们仍然可以进行B/S结构项目的开发。<br>从表述层、业务逻辑层到持久化层再到数据库都有成熟的解决方案。<br>但是通过企业开发中的实际需求来看，不使用Maven是不足的。   </p>\n</blockquote>\n<h2 id=\"1-1-添加第三方jar包\"><a href=\"#1-1-添加第三方jar包\" class=\"headerlink\" title=\"1.1 添加第三方jar包\"></a>1.1 添加第三方jar包</h2><ul>\n<li>在今天的JavaEE开发领域，有大量的第三方框架和工具可以供我们使用。要使用这些jar包最简单的方法就是复制粘贴到WEB-INF目录下的lib目录下。但是这会导致每次创建一个新的工程就需要将jar包重复复制到lib目录下，从而造成工作区中存在大量重复的文件。</li>\n<li>而使用Maven后每个jar包只在本地仓库中保存一份，需要jar包的工程只需要维护一个文本形式的jar包的引用</li>\n</ul>\n<blockquote>\n<p>我们称之为“坐标”。不仅极大的节约了存储空间，让项目更轻巧，更避免了重复文件太多而造成的混乱。</p>\n</blockquote>\n<h2 id=\"1-2-jar包之间的依赖关系\"><a href=\"#1-2-jar包之间的依赖关系\" class=\"headerlink\" title=\"1.2 jar包之间的依赖关系\"></a>1.2 jar包之间的依赖关系</h2><ul>\n<li>jar包往往不是孤立存在的，很多jar包都需要在其他jar包的支持下才能够正常工作，我们称之为jar包之间的依赖关系。最典型的例子是：commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar，如果没有IO包，FileUpload包就不能正常工作。</li>\n<li>那么问题来了，你知道你所使用的所有jar包的依赖关系吗？当你拿到一个新的从未使用过的jar包，你如何得知他需要哪些jar包的支持呢？如果不了解这个情况，导入的jar包不够，那么现有的程序将不能正常工作。再进一步，当你的项目中需要用到上百个jar包时，你还会人为的，手工的逐一确认它们依赖的其他jar包吗？这简直是不可想象的。</li>\n<li>而引入Maven后，Maven就可以替我们自动的将当前jar包所依赖的其他所有jar包全部导入进来，无需人工参与，节约了我们大量的时间和精力。用实际例子来说明就是：通过Maven导入commons-fileupload-1.3.jar后，commons-io-2.0.1.jar会被自动导入，程序员不必了解这个依赖关系。</li>\n<li><h2 id=\"1-3-处理jar包之间的冲突\"><a href=\"#1-3-处理jar包之间的冲突\" class=\"headerlink\" title=\"1.3 处理jar包之间的冲突\"></a>1.3 处理jar包之间的冲突</h2></li>\n<li>jar包不足项目无法正常工作，但其实有的时候jar包多了项目仍然无法正常工作，这就是jar包之间的冲突。<blockquote>\n<p>举个例子：我们现在有三个工程MakeFriend、HelloFriend、和Hello。<br>MakeFriend依赖HelloFriend，HelloFriend依赖Hello。<br>而Hello依赖log4j.1.2.17.jar，HelloFriend依赖log4j.1.2.14.jar。<br>如下图所示：</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOj6ER.png\" alt=\"EOj6ER.png\"></p>\n<blockquote>\n<p>那么MakeFriend工程的运行时环境中该导入log4j.1.2.14.jar呢还是log4j.1.2.17.jar呢?<br>这样的问题一个两个还可以手工解决，但如果系统中存在几十上百的jar包，他们之间的依赖关系会非常复杂，几乎不可能手工实现依赖关系的梳理。<br>使用Maven就可以自动的处理jar包之间的冲突问题。<br>因为Maven中内置了两条依赖原则：</p>\n<ul>\n<li>最短路径者优先和先声明者优先.  </li>\n</ul>\n</blockquote>\n<blockquote>\n<p>上述问题MakeFriend工程会自动使用log4j.1.2.14.jar。</p>\n</blockquote>\n<h2 id=\"1-4-获取第三方jar包\"><a href=\"#1-4-获取第三方jar包\" class=\"headerlink\" title=\"1.4 获取第三方jar包\"></a>1.4 获取第三方jar包</h2><blockquote>\n<ul>\n<li>JavaEE开发中需要使用到的jar包种类繁多，几乎每个jar包在其本身的官网上的获取方式都不尽相同。<br>为了查找一个jar包找遍互联网，身心俱疲，没有经历过的人或许体会不到这种折磨。<br>不仅如此，费劲心血找的jar包里有的时候并没有你需要的那个类，又或者又同名的类没有你要的方法——以不规范的方式获取的jar包也往往是不规范的。  </li>\n<li>使用Maven我们可以享受到一个完全统一规范的jar包管理体系。<br>你只需要在你的项目中以坐标的方式依赖一个jar包，Maven就会自动从中央仓库进行下载，并同时下载这个jar包所依赖的其他jar包。<br>规范、完整、准确！一次性解决所有问题！   </li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>Tips</strong>：统一的规范几乎可以说成是程序员的最高信仰。<br>        如果没有统一的规范，就意味着每个具体的技术都各自为政，需要以诸多不同的特殊的方式加入到项目中；<br>        好不容易加入进来还会和其他技术格格不入，最终受苦的是我们。<br>        而任何一个领域的统一规范都能够极大的降低程序员的工作难度，减少工作量。<br>        例如：USB接口可以外接各种设备，如果每个设备都有自己独特的接口，那么不仅制造商需要维护各个接口的设计方案，使用者也需要详细了解每个设备对应的接口，无疑是非常繁琐的。</p>\n</blockquote>\n<p>1.5 将项目拆分成多个工程模块<br>随着JavaEE项目的规模越来越庞大，开发团队的规模也与日俱增。一个项目上千人的团队持续开发很多年对于JavaEE项目来说再正常不过。那么我们想象一下：几百上千的人开发的项目是同一个Web工程。那么架构师、项目经理该如何划分项目的模块、如何分工呢？这么大的项目已经不可能通过package结构来划分模块，必须将项目拆分成多个工程协同开发。多个模块工程中有的是Java工程，有的是Web工程。<br>那么工程拆分后又如何进行互相调用和访问呢？这就需要用到Maven的依赖管理机制。大家请看我们的Survey调查项目拆分的情况：</p>\n<p>上层模块依赖下层，所以下层模块中定义的API都可以为上层所调用和访问。</p>\n<h2 id=\"1-6-实现项目的分布式部署\"><a href=\"#1-6-实现项目的分布式部署\" class=\"headerlink\" title=\"1.6 实现项目的分布式部署\"></a>1.6 实现项目的分布式部署</h2><p>在实际生产环境中，项目规模增加到一定程度后，可能每个模块都需要运行在独立的服务器上，我们称之为分布式部署，这里同样需要用到Maven。</p>\n<h1 id=\"第二章-What\"><a href=\"#第二章-What\" class=\"headerlink\" title=\"第二章 What\"></a>第二章 What</h1><p>如果上面的描述能够使你认识到使用Maven是多么的重要，我们下面就来介绍一下Maven是什么。</p>\n<h2 id=\"2-1-自动化构建工具\"><a href=\"#2-1-自动化构建工具\" class=\"headerlink\" title=\"2.1 自动化构建工具\"></a>2.1 自动化构建工具</h2><blockquote>\n<p>Maven这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]，不要读作“妈文”。<br>Maven是一款自动化构建工具，专注服务于Java平台的项目构建和依赖管理。在JavaEE开发的历史上构建工具的发展也经历了一系列的演化和变迁：<br>Make→Ant→Maven→Gradle→其他……</p>\n</blockquote>\n<h2 id=\"2-2-构建的概念\"><a href=\"#2-2-构建的概念\" class=\"headerlink\" title=\"2.2 构建的概念\"></a>2.2 构建的概念</h2><p>构建并不是创建，创建一个工程并不等于构建一个项目。<br>由浅入深的从以下三个层面来看：  </p>\n<blockquote>\n<ul>\n<li>①纯Java代码<br>大家都知道，我们Java是一门编译型语言.java扩展名的源文件需要编译成.class扩展名的字节码文件才能够执行。所以编写任何Java代码想要执行的话就必须经过编译得到对应的.class文件。</li>\n<li>②Web工程<br>当我们需要通过浏览器访问Java程序时就必须将包含Java程序的Web工程编译的结果“拿”到服务器上的指定目录下，并启动服务器才行。这个“拿”的过程我们叫部署。  </li>\n</ul>\n</blockquote>\n<blockquote>\n<p>我们可以将未编译的Web工程比喻为一只生的鸡，编译好的Web工程是一只煮熟的鸡，编译部署的过程就是将鸡炖熟。<br>Web工程和其编译结果的目录结构对比见下图：</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOj6ER.png\" alt=\"EOj6ER.png\"></p>\n<blockquote>\n<ul>\n<li>③实际项目<br>在实际项目中整合第三方框架，Web工程中除了Java程序和JSP页面、图片等静态资源之外，还包括第三方框架的jar包以及各种各样的配置文件。所有这些资源都必须按照正确的目录结构部署到服务器上，项目才可以运行。<br>所以综上所述：构建就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、JSP页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。  </li>\n</ul>\n</blockquote>\n<h2 id=\"2-3-构建环节\"><a href=\"#2-3-构建环节\" class=\"headerlink\" title=\"2.3 构建环节\"></a>2.3 构建环节</h2><p>①清理：删除以前的编译结果，为重新编译做好准备。<br>②编译：将Java源程序编译为字节码文件。<br>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>④报告：在每一次测试后以标准的格式记录和展示测试结果。<br>⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对应war包。<br>⑥安装：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。<br>⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。  </p>\n<h2 id=\"2-4-自动化构建\"><a href=\"#2-4-自动化构建\" class=\"headerlink\" title=\"2.4 自动化构建\"></a>2.4 自动化构建</h2><p>其实上述环节我们在Eclipse中都可以找到对应的操作，只是不太标准。那么既然IDE已经可以进行构建了我们为什么还要使用Maven这样的构建工具呢？我们来看一个小故事：  </p>\n<blockquote>\n<p>这是阳光明媚的一天。托马斯向往常一样早早的来到了公司，冲好一杯咖啡，进入了自己的邮箱——很不幸，QA小组发来了一封邮件，报告了他昨天提交的模块的测试结果——有BUG。“好吧，反正也不是第一次”，托马斯摇摇头，进入IDE，运行自己的程序，编译、打包、部署到服务器上，然后按照邮件中的操作路径进行测试。“嗯，没错，这个地方确实有问题”，托马斯说道。于是托马斯开始尝试修复这个BUG，当他差不多有眉目的时候已经到了午饭时间。<br>下午继续工作。BUG很快被修正了，接着托马斯对模块重新进行了编译、打包、部署，测试之后确认没有问题了，回复了QA小组的邮件。<br>一天就这样过去了，明媚的阳光化作了美丽的晚霞，托马斯却觉得生活并不像晚霞那样美好啊。  </p>\n</blockquote>\n<p>让我们来梳理一下托马斯这一天中的工作内容</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOxwm4.png\" alt=\"EOxwm4.png\"></p>\n<p>从中我们发现，托马斯的很大一部分时间花在了“编译、打包、部署、测试”这些程式化的工作上面，而真正需要由“人”的智慧实现的分析问题和编码却只占了很少一部分。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/18/EOxB79.png\" alt=\"EOxB79.png\"></p>\n<p>能否将这些程式化的工作交给机器自动完成呢？——当然可以！这就是自动化构建。</p>\n<p><a href=\"https://imgchr.com/i/EOxyfx\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/18/EOxyfx.md.png\" alt=\"EOxyfx.md.png\"></a></p>\n<p>那么Maven又是如何实现自动化构建的呢？简单的说来就是它可以自动的从构建过程的起点一直执行到终点：</p>\n<p><a href=\"https://imgchr.com/i/EOx26O\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/18/EOx26O.md.png\" alt=\"EOx26O.md.png\"></a></p>\n<h2 id=\"2-5-Maven核心概念（重点）\"><a href=\"#2-5-Maven核心概念（重点）\" class=\"headerlink\" title=\"2.5 Maven核心概念（重点）\"></a>2.5 Maven核心概念（重点）</h2><p>（学会9个重要概念就学会Maven）<br>Maven之所以能够实现自动化的构建，和它的设计是紧密相关的。我们对Maven的学习就围绕它的九个核心概念展开：<br>①POM<br>②约定的目录结构<br>③坐标<br>④依赖管理<br>⑤仓库管理<br>⑥生命周期<br>⑦插件和目标<br>⑧继承<br>⑨聚合  </p>\n<h2 id=\"第三章-How\"><a href=\"#第三章-How\" class=\"headerlink\" title=\"第三章 How\"></a>第三章 How</h2><p>在这一节中，我们来看看Maven核心程序的安装和本地仓库的必要设置。然后我们就可以编写第一个Maven程序了。  </p>\n<blockquote>\n<p>①检查JAVA_HOME环境变量。<br>Maven是使用Java开发的，所以必须知道当前系统环境中JDK的安装目录。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\System32&gt;echo %JAVA_HOME%</span><br><span class=\"line\">C:\\Java\\jdk1.8.0_45</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>②解压Maven的核心程序。<br>将apache-maven-3.5.0-bin.zip解压到一个非中文无空格的目录下。例如：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\Server\\apache-maven-3.5.0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>③配置环境变量。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M2_HOME</span><br><span class=\"line\">D:\\Server\\ apache-maven-3.5.0</span><br><span class=\"line\">path</span><br><span class=\"line\">%M2_HOME%\\bin或D:\\Server\\ apache-maven-3.5.0\\bin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>④查看Maven版本信息验证安装是否正确</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EXfPY9.png\" alt=\"EXfPY9.png\"></p>\n<blockquote>\n<p>⑤配置本地仓库  </p>\n<ul>\n<li>[1]Maven默认的本地仓库：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~\\.m2\\repository目录。</span><br><span class=\"line\">Tips：~表示当前用户的家目录。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>[2]Maven的核心程序并不包含具体功能，仅负责宏观调度。具体功能由插件来完成。Maven核心程序会到本地仓库中查找插件。如果本地仓库中没有就会从远程中央仓库下载。此时如果不能上网则无法执行Maven的具体功能。为了解决这个问题，我们可以将Maven的本地仓库指向一个在联网情况下下载好的目录。</li>\n<li>[3]Maven的核心配置文件位置：<br>解压目录</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\D:\\Server\\ apache-maven-3.5.0\\conf\\settings.xml</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>[4]设置方式</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;localRepository&gt;以及准备好的仓库位置&lt;/localRepository&gt;</span><br><span class=\"line\">&lt;localRepository&gt;D:/RepMaven&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第四章-第一个Maven程序-练习常用命令\"><a href=\"#第四章-第一个Maven程序-练习常用命令\" class=\"headerlink\" title=\"第四章 第一个Maven程序(练习常用命令)\"></a>第四章 第一个Maven程序(练习常用命令)</h1><p>●第一步：创建约定的目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello</span><br><span class=\"line\">\t src</span><br><span class=\"line\">\t ——main</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t ——test</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t pom.xml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main目录用于存放主程序。  </span><br><span class=\"line\">test目录用于存放测试程序。  </span><br><span class=\"line\">java目录用于存放源代码文件。    </span><br><span class=\"line\">resources目录用于存放配置文件和资源文件。</span><br></pre></td></tr></table></figure>\n<p>●第二步：创建Maven的核心配置文件pom.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;name&gt;Hello&lt;/name&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<p>●第三步：编写主代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在src/main/java/com/atguigu/maven目录下新建文件Hello.java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;</span><br><span class=\"line\">public class Hello &#123;</span><br><span class=\"line\">\tpublic String sayHello(String name)&#123;</span><br><span class=\"line\">\t\treturn &quot;Hello &quot;+name+&quot;!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>●第四步：编写测试代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在/src/test/java/com/atguigu/maven目录下新建测试文件HelloTest.java</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;\t</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import static junit.framework.Assert.*;</span><br><span class=\"line\">public class HelloTest &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testHello()&#123;</span><br><span class=\"line\">\t\tHello hello = new Hello();</span><br><span class=\"line\">\t\tString results = hello.sayHello(&quot;litingwei&quot;);</span><br><span class=\"line\">\t\tassertEquals(&quot;Hello litingwei!&quot;,results);\t //断言</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>●第五步：运行几个基本的Maven命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①打开cmd命令行，进入Hello项目根目录(pom.xml文件所在目录)</span><br><span class=\"line\">    执行mvn compile命令，查看根目录变化</span><br><span class=\"line\">④cmd 中继续录入mvn clean命令，然后再次查看根目录变化</span><br><span class=\"line\">⑤cmd 中录入 mvn clean compile命令, 查看根目录变化</span><br><span class=\"line\">⑥cmd 中录入 mvn test-compile命令,查看target目录变化</span><br><span class=\"line\">⑦cmd 中录入 mvn clean test命令，查看target目录变化</span><br><span class=\"line\">⑧cmd 中录入mvn clean package命令,查看target目录变化</span><br><span class=\"line\">⑨cmd中录入mvn source:jar命令，查看target目录变化</span><br></pre></td></tr></table></figure>\n<p>注意：运行Maven命令时一定要进入pom.xml文件所在的目录！</p>\n<h1 id=\"第五章-POM\"><a href=\"#第五章-POM\" class=\"headerlink\" title=\"第五章 POM\"></a>第五章 POM</h1><blockquote>\n<p>Project Object Model：项目对象模型。将Java工程的相关信息封装为对象作为便于操作和管理的模型。<br>Maven工程的核心配置。可以说学习Maven就是学习pom.xml文件中的配置。</p>\n</blockquote>\n<h1 id=\"第六章-约定的目录结构\"><a href=\"#第六章-约定的目录结构\" class=\"headerlink\" title=\"第六章 约定的目录结构\"></a>第六章 约定的目录结构</h1><p>现在JavaEE开发领域普遍认同一个观点：<br><code>约定&gt;配置&gt;编码</code>。<br>意思就是能用配置解决的问题就不编码，能基于约定的就不进行配置。<br>而Maven正是因为指定了特定文件保存的目录才能够对我们的Java工程进行自动化构建。<br>目录结构含义参见前面的描述。</p>\n<h1 id=\"第七章-坐标\"><a href=\"#第七章-坐标\" class=\"headerlink\" title=\"第七章 坐标\"></a>第七章 坐标</h1><h2 id=\"7-1-几何中的坐标\"><a href=\"#7-1-几何中的坐标\" class=\"headerlink\" title=\"7.1 几何中的坐标\"></a>7.1 几何中的坐标</h2><blockquote>\n<ul>\n<li>[1]在一个平面中使用x、y两个向量可以唯一的确定平面中的一个点。</li>\n<li>[2]在空间中使用x、y、z三个向量可以唯一的确定空间中的一个点。</li>\n</ul>\n</blockquote>\n<h2 id=\"7-2-Maven的坐标\"><a href=\"#7-2-Maven的坐标\" class=\"headerlink\" title=\"7.2 Maven的坐标\"></a>7.2 Maven的坐标</h2><p>使用如下三个向量在Maven的仓库中唯一的确定一个Maven工程。</p>\n<blockquote>\n<ul>\n<li>[1]groupId：公司或组织的域名倒序+当前项目名称</li>\n<li>[2]artifactId：当前项目的模块名称</li>\n<li>[3]version：当前模块的版本</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-3-如何通过坐标到仓库中查找jar包\"><a href=\"#7-3-如何通过坐标到仓库中查找jar包\" class=\"headerlink\" title=\"7.3 如何通过坐标到仓库中查找jar包\"></a>7.3 如何通过坐标到仓库中查找jar包</h2><p>[1]将gav三个向量连起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.maven+Hello+0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure>\n<p>[2]以连起来的字符串作为目录结构到仓库中查找</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com/maven/Hello/0.0.1-SNAPSHOT/Hello-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n<p>※注意：我们自己的Maven工程必须执行安装操作才会进入仓库。安装的命令是：<code>mvn install</code></p>\n<h1 id=\"第八章-第二个Maven工程-练习依赖引用\"><a href=\"#第八章-第二个Maven工程-练习依赖引用\" class=\"headerlink\" title=\"第八章 第二个Maven工程(练习依赖引用)\"></a>第八章 第二个Maven工程(练习依赖引用)</h1><h2 id=\"8-1-目录结构\"><a href=\"#8-1-目录结构\" class=\"headerlink\" title=\"8.1 目录结构\"></a>8.1 目录结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloFriend</span><br><span class=\"line\">\t src</span><br><span class=\"line\">\t ——main</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t ——test</span><br><span class=\"line\">\t ————java</span><br><span class=\"line\">\t ————resources</span><br><span class=\"line\">\t pom.xml</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-POM文件\"><a href=\"#8-2-POM文件\" class=\"headerlink\" title=\"8.2 POM文件\"></a>8.2 POM文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t  &lt;name&gt;HelloFriend&lt;/name&gt;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t\t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t\t\t\t&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">\t\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-3-主程序\"><a href=\"#8-3-主程序\" class=\"headerlink\" title=\"8.3 主程序\"></a>8.3 主程序</h2><p>在src/main/java/com/atguigu/maven目录下新建文件HelloFriend.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;\t</span><br><span class=\"line\">\timport com.atguigu.maven.Hello;</span><br><span class=\"line\">\tpublic class HelloFriend &#123;</span><br><span class=\"line\">\t\tpublic String sayHelloToFriend(String name)&#123;</span><br><span class=\"line\">\t\t\tHello hello = new Hello();</span><br><span class=\"line\">\t\t\tString str = hello.sayHello(name)+&quot; I am &quot;+this.getMyName();</span><br><span class=\"line\">\t\t\tSystem.out.println(str);</span><br><span class=\"line\">\t\t\treturn str;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpublic String getMyName()&#123;</span><br><span class=\"line\">\t\t\treturn &quot;John&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-4-测试程序\"><a href=\"#8-4-测试程序\" class=\"headerlink\" title=\"8.4 测试程序\"></a>8.4 测试程序</h2><p>在/src/test/java/com/atguigu/maven目录下新建测试文件HelloFriendTest.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;\t</span><br><span class=\"line\">import static junit.framework.Assert.assertEquals;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import com.atguigu.maven.Hello;</span><br><span class=\"line\">\t</span><br><span class=\"line\">public class HelloFriendTest &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testHelloFriend()&#123;</span><br><span class=\"line\">\t\tHelloFriend helloFriend = new HelloFriend();</span><br><span class=\"line\">\t\tString results = helloFriend.sayHelloToFriend(&quot;litingwei&quot;);</span><br><span class=\"line\">\t\tassertEquals(&quot;Hello litingwei! I am John&quot;,results);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-5-关键：对Hello的依赖\"><a href=\"#8-5-关键：对Hello的依赖\" class=\"headerlink\" title=\"8.5 关键：对Hello的依赖\"></a>8.5 关键：对Hello的依赖</h2><blockquote>\n<ul>\n<li>这里Hello就是我们的第一个Maven工程，现在HelloFriend对它有依赖。那么这个依赖能否成功呢？更进一步的问题是：HelloFriend工程会到哪里去找Hello呢？  </li>\n<li>答案是：本地仓库。任何一个Maven工程会根据坐标到本地仓库中去查找它所依赖的jar包。如果能够找到则可以正常工作，否则就不行。</li>\n</ul>\n</blockquote>\n<h1 id=\"第九章-依赖管理\"><a href=\"#第九章-依赖管理\" class=\"headerlink\" title=\"第九章 依赖管理\"></a>第九章 依赖管理</h1><h2 id=\"9-1-基本概念\"><a href=\"#9-1-基本概念\" class=\"headerlink\" title=\"9.1 基本概念\"></a>9.1 基本概念</h2><p>当A jar包需要用到B jar包中的类时，我们就说A对B有依赖。<br>例如：<code>commons-fileupload-1.3.jar依赖于commons-io-2.0.1.jar</code>。<br>通过第二个Maven工程我们已经看到，当前工程会到本地仓库中根据坐标查找它所依赖的jar包。<br>配置的基本形式是使用dependency标签指定目标jar包的坐标。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;!—坐标 --&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.10&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 依赖的范围 --&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-直接依赖和间接依赖\"><a href=\"#9-2-直接依赖和间接依赖\" class=\"headerlink\" title=\"9.2 直接依赖和间接依赖\"></a>9.2 直接依赖和间接依赖</h2><p>如果A依赖B，B依赖C，那么A→B和B→C都是直接依赖，而A→C是间接依赖。</p>\n<h2 id=\"9-3-依赖的范围\"><a href=\"#9-3-依赖的范围\" class=\"headerlink\" title=\"9.3 依赖的范围\"></a>9.3 依赖的范围</h2><p>当一个Maven工程添加了对某个jar包的依赖后，这个被依赖的jar包可以对应下面几个可选的范围：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①compile  </span><br><span class=\"line\">[1]main目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时要放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：对Hello的依赖。主程序、测试程序和服务器运行时都需要用到。</span><br><span class=\"line\">②test</span><br><span class=\"line\">[1]main目录下的Java代码不能访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：对junit的依赖。仅仅是测试程序部分需要。</span><br><span class=\"line\">③provided</span><br><span class=\"line\">[1]main目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时不会放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：servlet-api在服务器上运行时，Servlet容器会提供相关API，所以部署的时候不需要。</span><br><span class=\"line\">④runtime[了解]</span><br><span class=\"line\">[1]main目录下的Java代码不能访问这个范围的依赖</span><br><span class=\"line\">[2]test目录下的Java代码可以访问这个范围的依赖</span><br><span class=\"line\">[3]部署到Tomcat服务器上运行时会放在WEB-INF的lib目录下</span><br><span class=\"line\">例如：JDBC驱动。只有在测试运行和在服务器运行的时候才决定使用什么样的数据库连接。</span><br><span class=\"line\">⑤其他：import、system等。</span><br></pre></td></tr></table></figure>\n<p>各个依赖范围的作用可以概括为下图：</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EXh34J.png\" alt=\"EXh34J.png\"></p>\n<h2 id=\"9-4-依赖的传递性\"><a href=\"#9-4-依赖的传递性\" class=\"headerlink\" title=\"9.4 依赖的传递性\"></a>9.4 依赖的传递性</h2><p>当存在间接依赖的情况时，主工程对间接依赖的jar可以访问吗？<br>这要看间接依赖的jar包引入时的依赖范围——只有依赖范围为compile时可以访问。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maven工程\t依赖范围\t对A的可见性</span><br><span class=\"line\">A\tB\tC\tcompile \t√</span><br><span class=\"line\">\t\tD\ttest    \t×</span><br><span class=\"line\">\t\tE\tprovided\t×</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-5-依赖的原则：解决jar包冲突\"><a href=\"#9-5-依赖的原则：解决jar包冲突\" class=\"headerlink\" title=\"9.5 依赖的原则：解决jar包冲突\"></a>9.5 依赖的原则：解决jar包冲突</h2><p>①路径最短者优先</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjupHs.png\" alt=\"EjupHs.png\"></p>\n<p>②路径相同时先声明者优先</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/Ejui40.png\" alt=\"Ejui40.png\"></p>\n<p>这里“声明”的先后顺序指的是dependency标签配置的先后顺序。</p>\n<h2 id=\"9-6-依赖的排除\"><a href=\"#9-6-依赖的排除\" class=\"headerlink\" title=\"9.6 依赖的排除\"></a>9.6 依赖的排除</h2><p>有的时候为了确保程序正确可以将有可能重复的间接依赖排除。请看如下的例子：<br>●假设当前工程为survey_public，直接依赖survey_environment。<br>●survey_environment依赖commons-logging的1.1.1对于survey_public来说是间接依赖。<br>●当前工程survey_public直接依赖commons-logging的1.1.2<br>●加入exclusions配置后可以在依赖survey_environment的时候排除版本为1.1.1的commons-logging的间接依赖  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;Survey160225_4_Environment&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;!-- 依赖排除 --&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;commons-logging&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-7-统一管理目标jar包的版本\"><a href=\"#9-7-统一管理目标jar包的版本\" class=\"headerlink\" title=\"9.7 统一管理目标jar包的版本\"></a>9.7 统一管理目标jar包的版本</h2><p>以对Spring的jar包依赖为例：Spring的每一个版本中都包含spring-core、spring-context等jar包。我们应该导入版本一致的Spring jar包，而不是使用4.0.0的spring-core的同时使用4.1.1的spring-context。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;4.0.0.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>问题是如果我们想要将这些jar包的版本统一升级为4.1.1，是不是要手动一个个修改呢？显然，我们有统一配置的方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">\t&lt;spring.version&gt;4.1.1.RELEASE&lt;/spring.version&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br><span class=\"line\">……</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>这样一来，进行版本调整的时候只改一改地方就行了。</p>\n<h1 id=\"第十章-仓库\"><a href=\"#第十章-仓库\" class=\"headerlink\" title=\"第十章 仓库\"></a>第十章 仓库</h1><h2 id=\"10-1-分类\"><a href=\"#10-1-分类\" class=\"headerlink\" title=\"10.1 分类\"></a>10.1 分类</h2><p>[1]本地仓库：为当前本机电脑上的所有Maven工程服务。<br>[2]远程仓库  </p>\n<blockquote>\n<p>(1)私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务。  </p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/Ejuf5q.png\" alt=\"Ejuf5q.png\"></p>\n<blockquote>\n<p>(2)中央仓库：架设在Internet上，为全世界所有Maven工程服务。<br>(3)中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。  </p>\n</blockquote>\n<h2 id=\"10-2-仓库中的文件\"><a href=\"#10-2-仓库中的文件\" class=\"headerlink\" title=\"10.2 仓库中的文件\"></a>10.2 仓库中的文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]Maven的插件</span><br><span class=\"line\">[2]我们自己开发的项目的模块</span><br><span class=\"line\">[3]第三方框架或工具的jar包</span><br></pre></td></tr></table></figure>\n<p>※不管是什么样的jar包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。</p>\n<h1 id=\"第十一章-生命周期\"><a href=\"#第十一章-生命周期\" class=\"headerlink\" title=\"第十一章 生命周期\"></a>第十一章 生命周期</h1><h2 id=\"11-1-什么是Maven的生命周期\"><a href=\"#11-1-什么是Maven的生命周期\" class=\"headerlink\" title=\"11.1 什么是Maven的生命周期\"></a>11.1 什么是Maven的生命周期</h2><p>●Maven生命周期定义了各个构建环节的执行顺序，有了这个清单，Maven就可以自动化的执行构建命令了。<br>●Maven有三套相互独立的生命周期，分别是： </p>\n<blockquote>\n<p>①Clean Lifecycle在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle构建的核心部分，编译，测试，打包，安装，部署等等。<br>③Site Lifecycle生成项目报告，站点，发布站点。</p>\n</blockquote>\n<blockquote>\n<p>再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。  </p>\n</blockquote>\n<blockquote>\n<p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean，这个clean是Clean生命周期的一个阶段。有Clean生命周期，也有clean阶段。</p>\n</blockquote>\n<h2 id=\"11-2-clean生命周期\"><a href=\"#11-2-clean生命周期\" class=\"headerlink\" title=\"11.2 clean生命周期\"></a>11.2 clean生命周期</h2><p>Clean生命周期一共包含了三个阶段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①pre-clean 执行一些需要在clean之前完成的工作 </span><br><span class=\"line\">②clean 移除所有上一次构建生成的文件 </span><br><span class=\"line\">③post-clean 执行一些需要在clean之后立刻完成的工作</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-3-Site生命周期\"><a href=\"#11-3-Site生命周期\" class=\"headerlink\" title=\"11.3 Site生命周期\"></a>11.3 Site生命周期</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①pre-site 执行一些需要在生成站点文档之前完成的工作</span><br><span class=\"line\">②site 生成项目的站点文档</span><br><span class=\"line\">③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</span><br><span class=\"line\">④site-deploy 将生成的站点文档部署到特定的服务器上</span><br></pre></td></tr></table></figure>\n<p>这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</p>\n<h2 id=\"11-4-Default生命周期\"><a href=\"#11-4-Default生命周期\" class=\"headerlink\" title=\"11.4 Default生命周期\"></a>11.4 Default生命周期</h2><p>Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validate</span><br><span class=\"line\">generate-sources</span><br><span class=\"line\">process-sources</span><br><span class=\"line\">generate-resources</span><br><span class=\"line\">process-resources 复制并处理资源文件，至目标目录，准备打包。</span><br><span class=\"line\">compile 编译项目的源代码。</span><br><span class=\"line\">process-classes</span><br><span class=\"line\">generate-test-sources</span><br><span class=\"line\">process-test-sources</span><br><span class=\"line\">generate-test-resources</span><br><span class=\"line\">process-test-resources 复制并处理资源文件，至目标测试目录。</span><br><span class=\"line\">test-compile 编译测试源代码。</span><br><span class=\"line\">process-test-classes</span><br><span class=\"line\">test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</span><br><span class=\"line\">prepare-package</span><br><span class=\"line\">package 接受编译好的代码，打包成可发布的格式，如JAR。</span><br><span class=\"line\">pre-integration-test</span><br><span class=\"line\">integration-test</span><br><span class=\"line\">post-integration-test</span><br><span class=\"line\">verify</span><br><span class=\"line\">install将包安装至本地仓库，以让其它项目依赖。</span><br><span class=\"line\">deploy将最终的包复制到远程的仓库，</span><br><span class=\"line\">    以让其它开发人员与项目共享或部署到服务器上运行。</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-5-生命周期与自动化构建\"><a href=\"#11-5-生命周期与自动化构建\" class=\"headerlink\" title=\"11.5 生命周期与自动化构建\"></a>11.5 生命周期与自动化构建</h2><p><strong>运行任何一个阶段的时候，它前面的所有阶段都会被运行</strong>，<br>例如我们运行mvn install 的时候，代码会被编译，测试，打包。这就是Maven为什么能够自动执行构建过程的各个环节的原因。<br>此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。</p>\n<h1 id=\"第十二章-插件和目标\"><a href=\"#第十二章-插件和目标\" class=\"headerlink\" title=\"第十二章 插件和目标\"></a>第十二章 插件和目标</h1><p>●Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。<br>●每个插件都能实现多个功能，每个功能就是一个插件目标。<br>●Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>例如：compile就是插件maven-compiler-plugin的一个功能；<br>pre-clean是插件maven-clean-plugin的一个目标。</p>\n<h1 id=\"第十三章-STS整合Maven\"><a href=\"#第十三章-STS整合Maven\" class=\"headerlink\" title=\"第十三章 STS整合Maven\"></a>第十三章 STS整合Maven</h1><h2 id=\"13-1-Maven插件安装\"><a href=\"#13-1-Maven插件安装\" class=\"headerlink\" title=\"13.1 Maven插件安装\"></a>13.1 Maven插件安装</h2><p>STS内置Maven插件，可以使用默认插件。但是我们推荐配置自己的Maven插件，这样可以控制Maven版本以及仓库位置。</p>\n<h2 id=\"13-2-Maven插件的设置\"><a href=\"#13-2-Maven插件的设置\" class=\"headerlink\" title=\"13.2 Maven插件的设置\"></a>13.2 Maven插件的设置</h2><p>①指定Maven核心程序的位置<br>[1]操作路径：Window→Preferences→Maven→Installations<br>[2]图解</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjKgSK.png\" alt=\"EjKgSK.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjKWOe.png\" alt=\"EjKWOe.png\"></p>\n<p>第十四章 第三个Maven项目(Jar工程)<br>14.1 在Eclipse中创建Maven工程</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjKvwj.png\" alt=\"EjKvwj.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjMpYq.png\" alt=\"EjMpYq.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjMPpV.png\" alt=\"EjMPpV.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjMnt1.png\" alt=\"EjMnt1.png\"></p>\n<h2 id=\"14-2-第三个Maven工程\"><a href=\"#14-2-第三个Maven工程\" class=\"headerlink\" title=\"14.2 第三个Maven工程\"></a>14.2 第三个Maven工程</h2><p>①坐标</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupId：com.maven</span><br><span class=\"line\">ArtifactId：MakeFriends</span><br><span class=\"line\">Package：com.maven</span><br></pre></td></tr></table></figure>\n<p>②在src/main/java中新建类com.atguigu.maven.MakeFriends<br>在类中创建如下方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String makeFriends(String name)&#123;\t\t</span><br><span class=\"line\">HelloFriend friend = new HelloFriend();</span><br><span class=\"line\">friend.sayHelloToFriend(&quot;litingwei&quot;);</span><br><span class=\"line\">String str = &quot;Hey,&quot;+friend.getMyName()+&quot; make a friend please.&quot;;</span><br><span class=\"line\">System.out.println(str);</span><br><span class=\"line\">return str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>③在src/test/java中新建类com.maven.MakeFriendsTest</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.maven;</span><br><span class=\"line\">import static junit.framework.Assert.assertEquals;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">public class MakeFriendsTest &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testMakeFriends()&#123;\t\t</span><br><span class=\"line\">\t\tMakeFriends makeFriend = new MakeFriends();</span><br><span class=\"line\">\t\tString str = makeFriend.makeFriends(&quot;litingwei&quot;);</span><br><span class=\"line\">\t\tassertEquals(&quot;Hey,John make a friend please.&quot;,str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>④打开根目录pom.xml添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t    \t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t    \t&lt;artifactId&gt;HelloFriend&lt;/artifactId&gt;</span><br><span class=\"line\">\t    \t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t    \t&lt;type&gt;jar&lt;/type&gt;</span><br><span class=\"line\">\t    \t&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>⑤在Eclipse环境下执行Maven命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右击pom.xml选择run as 中的命令执行即可</span><br></pre></td></tr></table></figure>\n<p>⑥此时可以测试依赖原则，需要的依赖信息如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;1.2.14&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>第十五章 继承<br>15.1 为什么需要继承机制<br>由于非compile范围的依赖信息是不能在“依赖链”中传递的，所以有需要的工程只能单独配置。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello\t       \\  &lt;dependency&gt;</span><br><span class=\"line\">                \t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">                \t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                \t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">                \t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">                &lt;/dependency&gt;</span><br><span class=\"line\">HelloFriend\t    &lt;dependency&gt;</span><br><span class=\"line\">        \t        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">        \t        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                \t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">                \t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">              &lt;/dependency&gt;</span><br><span class=\"line\">MakeFriend\t    &lt;dependency&gt;</span><br><span class=\"line\">                \t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">                \t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">                \t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">                \t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">                &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>此时如果项目需要将各个模块的junit版本统一为4.9，那么到各个工程中手动修改无疑是非常不可取的。使用继承机制就可以将这样的依赖信息统一提取到父工程模块中进行统一管理。</p>\n<h2 id=\"15-2-创建父工程\"><a href=\"#15-2-创建父工程\" class=\"headerlink\" title=\"15.2 创建父工程\"></a>15.2 创建父工程</h2><p>创建父工程和创建一般的Java工程操作一致，唯一需要注意的是：打包方式处要设置为pom。</p>\n<h2 id=\"15-3-在子工程中引用父工程\"><a href=\"#15-3-在子工程中引用父工程\" class=\"headerlink\" title=\"15.3 在子工程中引用父工程\"></a>15.3 在子工程中引用父工程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">\t&lt;!-- 父工程坐标 --&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;...&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;...&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;...&lt;/version&gt;</span><br><span class=\"line\">\t&lt;relativePath&gt;从当前目录到父项目的pom.xml文件的相对路径&lt;/relativePath&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.maven&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;Parent&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 指定从当前子工程的pom.xml文件出发，查找父工程的pom.xml的路径 --&gt;</span><br><span class=\"line\">\t&lt;relativePath&gt;../Parent/pom.xml&lt;/relativePath&gt;</span><br><span class=\"line\">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>\n<p>此时如果子工程的groupId和version如果和父工程重复则可以删除。</p>\n<h2 id=\"15-4-在父工程中管理依赖\"><a href=\"#15-4-在父工程中管理依赖\" class=\"headerlink\" title=\"15.4 在父工程中管理依赖\"></a>15.4 在父工程中管理依赖</h2><p>将Parent项目中的dependencies标签，用dependencyManagement标签括起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencyManagement&gt;</span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.9&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>\n<p>在子项目中重新指定需要的依赖，删除范围和版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十六章-聚合\"><a href=\"#第十六章-聚合\" class=\"headerlink\" title=\"第十六章 聚合\"></a>第十六章 聚合</h1><h2 id=\"16-1-为什么要使用聚合\"><a href=\"#16-1-为什么要使用聚合\" class=\"headerlink\" title=\"16.1 为什么要使用聚合\"></a>16.1 为什么要使用聚合</h2><p>将多个工程拆分为模块后，需要手动逐个安装到仓库后依赖才能够生效。修改源码后也需要逐个手动进行clean操作。而使用了聚合之后就可以批量进行Maven工程的安装、清理工作。</p>\n<h2 id=\"16-1-如何配置聚合\"><a href=\"#16-1-如何配置聚合\" class=\"headerlink\" title=\"16.1 如何配置聚合\"></a>16.1 如何配置聚合</h2><p>在总的聚合工程中使用modules/module标签组合，指定模块工程的相对路径即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">\t&lt;module&gt;../Hello&lt;/module&gt;</span><br><span class=\"line\">\t&lt;module&gt;../HelloFriend&lt;/module&gt;</span><br><span class=\"line\">\t&lt;module&gt;../MakeFriends&lt;/module&gt;</span><br><span class=\"line\">&lt;/modules&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第十七章-第四个Maven工程-war工程\"><a href=\"#第十七章-第四个Maven工程-war工程\" class=\"headerlink\" title=\"第十七章 第四个Maven工程(war工程)\"></a>第十七章 第四个Maven工程(war工程)</h1><h2 id=\"17-1-创建步骤\"><a href=\"#17-1-创建步骤\" class=\"headerlink\" title=\"17.1 创建步骤\"></a>17.1 创建步骤</h2><p>①第一步：创建maven web工程<br>②第二步：修改web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><br><span class=\"line\">\tid=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n<p>③找不到HttpServlet错误<br>如果看到JSP报错：The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path可以加入如下依赖解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.5&lt;/version&gt;</span><br><span class=\"line\">\t&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>④第二步：依赖MakeFriends<br>⑤第三步：建立测试JSP  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">\tpageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;com.atguigu.maven.MakeFriends&quot;%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    MakeFriends makeFriends=new MakeFriends();</span><br><span class=\"line\">    out.println(makeFriends.makeFriends(&quot;wanglipeng&quot;));</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n<p>⑥EL表达式没有提示问题<br>${pageContext}这个EL表达式中通过pageContext对象访问reuqest属性时本身是应该有提示的，但如果没有的话加入下面依赖即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;2.1.3-b06&lt;/version&gt;</span><br><span class=\"line\">     &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"17-2-Web工程自动部署\"><a href=\"#17-2-Web工程自动部署\" class=\"headerlink\" title=\"17.2 Web工程自动部署\"></a>17.2 Web工程自动部署</h2><p>除了在Eclipse中使用Run as→run on server的方式运行Web工程，还可以配置Web工程的自动部署。<br>①配置自动部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;finalName&gt;web&lt;/finalName&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">          &lt;plugin&gt;</span><br><span class=\"line\">              &lt;groupId&gt;org.codehaus.cargo&lt;/groupId&gt;</span><br><span class=\"line\">              &lt;artifactId&gt;cargo-maven2-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">  \t\t\t  &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">  \t\t\t  &lt;configuration&gt;</span><br><span class=\"line\">  \t\t\t      &lt;container&gt;</span><br><span class=\"line\">  \t\t\t          &lt;containerId&gt;tomcat6x&lt;/containerId&gt;</span><br><span class=\"line\">  \t\t\t          &lt;home&gt;D:\\DevInstall\\apache-tomcat-6.0.39&lt;/home&gt;</span><br><span class=\"line\">  \t\t\t      &lt;/container&gt;</span><br><span class=\"line\">  \t\t\t      &lt;configuration&gt;</span><br><span class=\"line\">  \t\t\t          &lt;type&gt;existing&lt;/type&gt;</span><br><span class=\"line\">  \t\t\t          &lt;home&gt;D:\\DevInstall\\apache-tomcat-6.0.39&lt;/home&gt;</span><br><span class=\"line\">  \t\t\t          &lt;!-- 如果Tomcat端口为默认值8080则不必设置该属性 --&gt;</span><br><span class=\"line\">  \t\t\t          &lt;properties&gt;</span><br><span class=\"line\">  \t\t\t                &lt;cargo.servlet.port&gt;8989&lt;/cargo.servlet.port&gt;</span><br><span class=\"line\">  \t\t\t          &lt;/properties&gt;</span><br><span class=\"line\">  \t\t\t      &lt;/configuration&gt;</span><br><span class=\"line\">  \t\t\t  &lt;/configuration&gt;</span><br><span class=\"line\">  \t\t\t  &lt;executions&gt;  </span><br><span class=\"line\">                  &lt;execution&gt;  </span><br><span class=\"line\">                      &lt;id&gt;cargo-run&lt;/id&gt;  </span><br><span class=\"line\">                      &lt;phase&gt;install&lt;/phase&gt;  </span><br><span class=\"line\">                      &lt;goals&gt;  </span><br><span class=\"line\">                          &lt;goal&gt;run&lt;/goal&gt;  </span><br><span class=\"line\">                      &lt;/goals&gt;  </span><br><span class=\"line\">                  &lt;/execution&gt;  </span><br><span class=\"line\">              &lt;/executions&gt;</span><br><span class=\"line\">          &lt;/plugin&gt;</span><br><span class=\"line\">      &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>②部署Web项目的命令：mvn deploy  </p>\n<h1 id=\"第十八章-创建MavenWeb工程的完美方式\"><a href=\"#第十八章-创建MavenWeb工程的完美方式\" class=\"headerlink\" title=\"第十八章 创建MavenWeb工程的完美方式\"></a>第十八章 创建MavenWeb工程的完美方式</h1><p>①创建简单的Maven工程，打包方式选war包</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQnbQ.png\" alt=\"EjQnbQ.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQMUs.png\" alt=\"EjQMUs.png\"></p>\n<p>②调整JRE版本<br>③取消Dynamic Web Module的勾选  </p>\n<p><a href=\"https://imgchr.com/i/EjQGvT\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/19/EjQGvT.png\" alt=\"EjQGvT.png\"></a></p>\n<p>④重新勾选Dynamic Web Module</p>\n<p><a href=\"https://imgchr.com/i/EjQIRP\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/19/EjQIRP.md.png\" alt=\"EjQIRP.md.png\"></a></p>\n<p>⑤点超链接进行必须设置</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQw5R.png\" alt=\"EjQw5R.png\"></p>\n<p>⑥最终生成的工程的结构  </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/19/EjQWad.png\" alt=\"EjQWad.png\"></p>\n<h1 id=\"第十九章-Maven酷站\"><a href=\"#第十九章-Maven酷站\" class=\"headerlink\" title=\"第十九章 Maven酷站\"></a>第十九章 Maven酷站</h1><p>我们可以到<br><a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">http://mvnrepository.com/</a>  搜索需要的jar包的依赖信息。<br><a href=\"http://search.maven.org/\" target=\"_blank\" rel=\"noopener\">http://search.maven.org/</a><br><a href=\"http://repo.maven.apache.org/maven2\" target=\"_blank\" rel=\"noopener\">http://repo.maven.apache.org/maven2</a></p>\n","categories":["Java框架"],"tags":["使用过的开源框架"]},{"title":"日志框架概述","url":"http://yoursite.com/2018/04/11/69. 日志框架概述/","content":"<h1 id=\"1-日志框架介绍\"><a href=\"#1-日志框架介绍\" class=\"headerlink\" title=\"1 日志框架介绍\"></a>1 日志框架介绍</h1><h2 id=\"1-1-为什么有日志及框架？\"><a href=\"#1-1-为什么有日志及框架？\" class=\"headerlink\" title=\"1.1 为什么有日志及框架？\"></a>1.1 为什么有日志及框架？</h2><ul>\n<li>跟踪用户对系统访问；</li>\n<li>统计</li>\n<li>Debug</li>\n</ul>\n<h2 id=\"1-2-日志框架\"><a href=\"#1-2-日志框架\" class=\"headerlink\" title=\"1.2 日志框架\"></a>1.2 日志框架</h2><ul>\n<li>市场上存在非常多的日志框架。</li>\n<li>JUL（java.util.logging），JCL（Jakarta Commons Logging），Log4j，Log4j2，Logback、SLF4j、jboss-logging等。</li>\n<li>Spring 在框架内部使用JCL。 </li>\n<li>Log4j被apache收购，升级，改为log4j2，框架改动很大，只是借用之名。</li>\n<li>Log4j，Logback，SLF4j都是同一个作者。</li>\n</ul>\n<h2 id=\"1-3-优选slf4j-logback\"><a href=\"#1-3-优选slf4j-logback\" class=\"headerlink\" title=\"1.3 优选slf4j+logback\"></a>1.3 优选slf4j+logback</h2><h1 id=\"第二章-原理\"><a href=\"#第二章-原理\" class=\"headerlink\" title=\"第二章 原理\"></a>第二章 原理</h1><h2 id=\"2-1-如何在系统中使用slf4j-logback\"><a href=\"#2-1-如何在系统中使用slf4j-logback\" class=\"headerlink\" title=\"2.1 如何在系统中使用slf4j+logback\"></a>2.1 如何在系统中使用slf4j+logback</h2><p><a href=\"https://www.slf4j.org\" target=\"_blank\" rel=\"noopener\">https://www.slf4j.org</a> </p>\n<h2 id=\"2-2-使用slf4j-其他实现\"><a href=\"#2-2-使用slf4j-其他实现\" class=\"headerlink\" title=\"2.2 使用slf4j+其他实现\"></a>2.2 使用slf4j+其他实现</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190607204953.png\" alt></p>\n<h1 id=\"第三章-历史遗留问题\"><a href=\"#第三章-历史遗留问题\" class=\"headerlink\" title=\"第三章 历史遗留问题\"></a>第三章 历史遗留问题</h1><h2 id=\"3-1-遗留问题解决\"><a href=\"#3-1-遗留问题解决\" class=\"headerlink\" title=\"3.1 遗留问题解决\"></a>3.1 遗留问题解决</h2><ul>\n<li>如何将这些框架统一日志记录，统一使用slf4j进行输出？</li>\n<li>springboot（slf4j+logback）: Spring（commons-logging）(2003年出现)、Hibernate（jboss-logging）（2004年出现）、MyBatis、xxxx </li>\n<li><a href=\"https://www.slf4j.org/legacy.html\" target=\"_blank\" rel=\"noopener\">https://www.slf4j.org/legacy.html</a> </li>\n</ul>\n<h2 id=\"3-2-想将应用中所使用的日志框架common-logging排除掉\"><a href=\"#3-2-想将应用中所使用的日志框架common-logging排除掉\" class=\"headerlink\" title=\"3.2 想将应用中所使用的日志框架common-logging排除掉\"></a>3.2 想将应用中所使用的日志框架common-logging排除掉</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190607205228.png\" alt></p>\n<h2 id=\"3-3-引入jcl转换为slf4j依赖包-偷梁换柱\"><a href=\"#3-3-引入jcl转换为slf4j依赖包-偷梁换柱\" class=\"headerlink\" title=\"3.3 引入jcl转换为slf4j依赖包(偷梁换柱)\"></a>3.3 引入jcl转换为slf4j依赖包(偷梁换柱)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;&lt;!-- 替换commons-logging--&gt;</span><br><span class=\"line\">   &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第四章-优选slf4j-logback\"><a href=\"#第四章-优选slf4j-logback\" class=\"headerlink\" title=\"第四章 优选slf4j+logback\"></a>第四章 优选slf4j+logback</h1><p>因为Sping框架的内部底层的支持</p>\n<h2 id=\"4-1-将系统中其他日志框架先排除出去；-所有项目\"><a href=\"#4-1-将系统中其他日志框架先排除出去；-所有项目\" class=\"headerlink\" title=\"4.1 将系统中其他日志框架先排除出去；(所有项目)\"></a>4.1 将系统中其他日志框架先排除出去；(所有项目)</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190607205228.png\" alt></p>\n<h2 id=\"4-2-用中间包来替换原有的日志框架\"><a href=\"#4-2-用中间包来替换原有的日志框架\" class=\"headerlink\" title=\"4.2 用中间包来替换原有的日志框架\"></a>4.2 用中间包来替换原有的日志框架</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;&lt;!-- 替换commons-logging--&gt;</span><br><span class=\"line\">   &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt; </span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;jul-to-slf4j&lt;/artifactId&gt;&lt;!-- 替换java.util.logging--&gt;</span><br><span class=\"line\">   &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-我们slf4j及其他的实现\"><a href=\"#4-3-我们slf4j及其他的实现\" class=\"headerlink\" title=\"4.3 我们slf4j及其他的实现\"></a>4.3 我们slf4j及其他的实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&lt;!-- 间接依赖logback-core--&gt;&lt;!-- 优秀的日志实现--&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;     </span><br><span class=\"line\"> &lt;!-- slf4j（门面）: Simple Logging Facade for Java ：简单日志门面（接口）（类似JDBC）； </span><br><span class=\"line\">      log4j：日志实现（类似数据库驱动）； </span><br><span class=\"line\">      log4j2（实现）, logback（实现）, </span><br><span class=\"line\">      后来我们用slf4j+logback（最稳定的方案）; --&gt;</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&lt;!-- 抽象层，接口--&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-测试代码\"><a href=\"#4-4-测试代码\" class=\"headerlink\" title=\"4.4 测试代码\"></a>4.4 测试代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory; </span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">  public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLogger logger = LoggerFactory.getLogger(TestLog.class);</span><br><span class=\"line\">\t\tlogger.debug(&quot;debug...&quot;); //用于调试程序</span><br><span class=\"line\">\t\tlogger.info(&quot;info...&quot;);//用于请求处理提示消息</span><br><span class=\"line\">\t\tlogger.warn(&quot;warn...&quot;);//用于警告处理提示消息</span><br><span class=\"line\">\t\tlogger.error(&quot;error...&quot;);//用于异常处理提示消息</span><br><span class=\"line\">\t\tlogger.error(&quot;==&gt;&gt;&quot;+logger.getClass());</span><br><span class=\"line\">\t\t//class ch.qos.logback.classic.Logger</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-5-配置文件logback-xml\"><a href=\"#4-5-配置文件logback-xml\" class=\"headerlink\" title=\"4.5 配置文件logback.xml\"></a>4.5 配置文件logback.xml</h2><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration debug=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 指定日志输出的地方--&gt;</span><br><span class=\"line\">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class=\"line\">        &lt;encoder&gt;</span><br><span class=\"line\">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;360&#125; - %msg%n&lt;/pattern&gt;</span><br><span class=\"line\">        &lt;/encoder&gt;</span><br><span class=\"line\">    &lt;/appender&gt; </span><br><span class=\"line\">    &lt;!-- 日志：从低到高；只会打印指定级别以后的; additivity表示是否将日志信息反馈给root</span><br><span class=\"line\">打印日志是将大于等于该级别的日志输出到指定的目的地</span><br><span class=\"line\">     DEBUG==》INFO===》WARN===》ERROR</span><br><span class=\"line\">     &lt;logger name=&quot;com.atguigu.atcrowdfunding.mapper&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;  </span><br><span class=\"line\">         &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;  </span><br><span class=\"line\">     &lt;/logger&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      --&gt;</span><br><span class=\"line\">     &lt;root level=&quot;info&quot;&gt;</span><br><span class=\"line\">         &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class=\"line\">     &lt;/root&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["使用过的开源框架"]},{"title":"权限系统_认证授权SpringSecurity框架","url":"http://yoursite.com/2018/04/09/68. 权限系统_认证授权SpringSecurity框架/","content":"<h1 id=\"第一章-SpringSecurity-简介\"><a href=\"#第一章-SpringSecurity-简介\" class=\"headerlink\" title=\"第一章 SpringSecurity-简介\"></a>第一章 SpringSecurity-简介</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1    简介\"></a>1    简介</h2><ul>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/4.2.10.RELEASE/guides/html5/helloworld-xml.html\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-security/site/docs/4.2.10.RELEASE/guides/html5/helloworld-xml.html</a>  </li>\n<li>SpringSecurity融合Spring技术栈，提供JavaEE应    用的整体安全解决方案；</li>\n<li>Spring Security为基于Java EE的企业软件应用提供全面的安全服务。</li>\n<li>Spring Security只需要少量配置，就能构建一个强大的安全的应用系统。  </li>\n<li>目前市面上受欢迎的两个安全框架：Apache Shiro、SpringSecurity；</li>\n<li>SpringSecurity可以无缝整合Spring应用，具有强大的自动化web安全管控功能。而Shiro是一个轻量级强大的安全框架，可以脱离web应用来提供安全管控，但是对于web的一些定制安全需要手动编写；SpringBoot底层默认整合SpringSecurity作为安全框架，所以我们推荐web应用使用SpringSecurity来控制安全；<h2 id=\"2-概念\"><a href=\"#2-概念\" class=\"headerlink\" title=\"2    概念\"></a>2    概念</h2></li>\n<li>认证</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authentication：身份验证</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>“身份验证”是指建立主体（principal）的过程，主体就是他们声称是谁（“主体”通常指用户、设备或在应用程序中可以执行动作的其他系统）。也就是“证明你是谁”</p>\n<ul>\n<li>授权</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorization：授权</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>“授权”是指确定主体（principal）是否被允许执行系统中某个动作的过程。 也就是“你能做什么！”</p>\n<ul>\n<li>为了达到“授权”决策（安全框架决定你是否有权限做此事），“身份验证”（authentication）过程已经建立了主体的身份（Principal）</li>\n</ul>\n</blockquote>\n<h2 id=\"3-文档\"><a href=\"#3-文档\" class=\"headerlink\" title=\"3    文档\"></a>3    文档</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello Spring Security &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/helloworld &gt; 基于Java配置整合示例</span><br><span class=\"line\">Hello Spring Security Boot &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/boot/helloworld&gt; 与SpringBoot整合案例</span><br><span class=\"line\">Hello Spring Security XML &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/xml/helloworld&gt; 基于XML方式整合示例</span><br><span class=\"line\">Hello Spring MVC Security &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/hellomvc&gt; SpringMVC集成示例</span><br><span class=\"line\">Custom Login Form &lt;https://github.com/spring-projects/spring-security/tree/4.2.10.RELEASE/samples/javaconfig/form&gt; 自定义登录表单示例</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-支持的身份认证模式\"><a href=\"#4-支持的身份认证模式\" class=\"headerlink\" title=\"4    支持的身份认证模式\"></a>4    支持的身份认证模式</h2><blockquote>\n<p>在身份验证级别，Spring Security支持广泛的认证模型。这些认证模型中的大部分要么由第三方提供，要么由相关标准机构（如互联网工程任务组）开发。此外，Spring Security提供了自己的一套身份验证功能。具体而言，Spring Security当前支持与所有这些技术的身份验证集成；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP BASIC身份验证标头</span><br><span class=\"line\">HTTP BASIC authentication headers (an IETF RFC-based standard)</span><br><span class=\"line\">参考：https://blog.csdn.net/lvxinzhi/article/details/49000003</span><br><span class=\"line\"></span><br><span class=\"line\">HTTP Digest身份验证标头</span><br><span class=\"line\">HTTP Digest authentication headers (an IETF RFC-based standard)</span><br><span class=\"line\"></span><br><span class=\"line\">HTTP X.509客户端证书交换</span><br><span class=\"line\">HTTP X.509 client certificate exchange (an IETF RFC-based standard)</span><br><span class=\"line\"></span><br><span class=\"line\">LDAP（一种非常常见的跨平台身份验证方法，特别是在大型环境中）</span><br><span class=\"line\">LDAP (a very common approach to cross-platform authentication needs, especially in large environments)</span><br><span class=\"line\"></span><br><span class=\"line\">基于表单的身份验证（用于简单的用户界面需求）</span><br><span class=\"line\">Form-based authentication (for simple user interface needs)</span><br><span class=\"line\"></span><br><span class=\"line\">OpenID身份验证</span><br><span class=\"line\">OpenID authentication</span><br><span class=\"line\"></span><br><span class=\"line\">基于预先建立的请求标头的身份验证</span><br><span class=\"line\">Authentication based on pre-established request headers (such as Computer Associates Siteminder)</span><br><span class=\"line\"></span><br><span class=\"line\">Jasig中央认证服务（也称为CAS，是一种流行的开源单点登录系统）</span><br><span class=\"line\">Jasig Central Authentication Service (otherwise known as CAS, which is a popular open source single sign-on system)</span><br><span class=\"line\"></span><br><span class=\"line\">远程方法调用（RMI）和HttpInvoker（Spring远程协议）的透明身份验证上下文传播</span><br><span class=\"line\">Transparent authentication context propagation for Remote Method Invocation (RMI) and HttpInvoker (a Spring remoting protocol)</span><br><span class=\"line\"></span><br><span class=\"line\">自动“记住我”身份验证</span><br><span class=\"line\">Automatic &quot;remember-me&quot; authentication (so you can tick a box to avoid re-authentication for a predetermined period of time)</span><br><span class=\"line\"></span><br><span class=\"line\">匿名身份验证（允许每个未经身份验证自动承担特定的安全身份）</span><br><span class=\"line\">Anonymous authentication (allowing every unauthenticated call to automatically assume a particular security identity)</span><br><span class=\"line\"></span><br><span class=\"line\">Runas身份验证（如果一个调用应继续使用不同的安全标识，则非常有用）</span><br><span class=\"line\">Run-as authentication (which is useful if one call should proceed with a different security identity)</span><br><span class=\"line\"></span><br><span class=\"line\">Java身份验证和授权服务（JAAS）</span><br><span class=\"line\">Java Authentication and Authorization Service (JAAS)</span><br><span class=\"line\"></span><br><span class=\"line\">JavaEE容器身份验证（如果需要，您仍然可以使用容器管理身份验证）</span><br><span class=\"line\">Java EE container authentication (so you can still use Container Managed Authentication if desired)</span><br><span class=\"line\"></span><br><span class=\"line\">Java开源单点登录（JOSSO）</span><br><span class=\"line\">Java Open Source Single Sign-On (JOSSO) *</span><br><span class=\"line\"></span><br><span class=\"line\">OpenNMS网络管理平台*</span><br><span class=\"line\">OpenNMS Network Management Platform *</span><br><span class=\"line\"></span><br><span class=\"line\">您自己的身份验证系统</span><br><span class=\"line\">Your own authentication systems (see below)</span><br><span class=\"line\"></span><br><span class=\"line\">其他</span><br><span class=\"line\">Kerberos</span><br><span class=\"line\">AppFuse *</span><br><span class=\"line\">AndroMDA *</span><br><span class=\"line\">Mule ESB *</span><br><span class=\"line\">Direct Web Request (DWR) *</span><br><span class=\"line\">Grails *</span><br><span class=\"line\">Tapestry *</span><br><span class=\"line\">JTrac *</span><br><span class=\"line\">Jasypt *</span><br><span class=\"line\">Roller *</span><br><span class=\"line\">Elastic Path *</span><br><span class=\"line\">Atlassian Crowd *</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-模块划分\"><a href=\"#5-模块划分\" class=\"headerlink\" title=\"5    模块划分\"></a>5    模块划分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Core - spring-security-core.jar  核心模块</span><br><span class=\"line\">核心认证、授权功能、支持jdbc-user功能、支持独立的Spring应用</span><br><span class=\"line\"></span><br><span class=\"line\">Remoting - spring-security-remoting.jar  远程交互模块</span><br><span class=\"line\">一般不需要，可以使用Spring Remoting功能简化远程客户端交互</span><br><span class=\"line\"></span><br><span class=\"line\">Web - spring-security-web.jar  web安全模块</span><br><span class=\"line\">web项目使用，基于URL的访问控制（access-control）</span><br><span class=\"line\"></span><br><span class=\"line\">Config - spring-security-config.jar  java配置模块</span><br><span class=\"line\">必须依赖包，包含解析xml方式和java 注解方式来使用SpringSecurity功能</span><br><span class=\"line\"></span><br><span class=\"line\">LDAP - spring-security-ldap.jar  ldap（轻量目录访问协议）支持模块</span><br><span class=\"line\">可选依赖包，LDAP功能支持</span><br><span class=\"line\"></span><br><span class=\"line\">ACL - spring-security-acl.jar  ACL支持</span><br><span class=\"line\">ACL（Access-Control-List）访问控制列表</span><br><span class=\"line\">细粒度的资源访问控制(RBAC+ACL)</span><br><span class=\"line\"></span><br><span class=\"line\">CAS - spring-security-cas.jar  CAS整合支持</span><br><span class=\"line\">CAS（Central Authentication Service）中央认证服务。开源ApereoCAS整合</span><br><span class=\"line\"></span><br><span class=\"line\">OpenID - spring-security-openid.jar  OpenID认证方式支持</span><br><span class=\"line\">OpenID Web身份验证支持。 用于针对外部OpenID服务器对用户进行身份验证</span><br><span class=\"line\">（微信,qq，新浪微博等第三方登录</span><br><span class=\"line\">）</span><br><span class=\"line\">Test - spring-security-test.jar  测试模块</span><br><span class=\"line\">快速的测试SpringSecurity应用</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-4种使用方式\"><a href=\"#6-4种使用方式\" class=\"headerlink\" title=\"6    4种使用方式\"></a>6    4种使用方式</h2><ul>\n<li>一种是全部利用配置文件，将用户、权限、资源(url)硬编码在xml文件中</li>\n<li>二种是用户和权限用数据库存储，而资源(url)和权限的对应采用硬编码配置</li>\n<li>三种是细分角色和权限，并将用户、角色、权限和资源均采用数据库存储，并且自定义过滤器，代替原有的FilterSecurityInterceptor过滤器， 并分别实现AccessDecisionManager、InvocationSecurityMetadataSourceService和UserDetailsService，并在配置文件中进行相应配置。</li>\n<li>四是修改springsecurity的源代码，主要是修改InvocationSecurityMetadataSourceService和UserDetailsService两个类。<ul>\n<li>InvocationSecurityMetadataSourceService</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>将配置文件或数据库中存储的资源(url)提取出来加工成为url和权限列表的Map供Security使用<br>-<ul>\n<li>UserDetailsService</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>提取用户名和权限组成一个完整的(UserDetails)User对象，该对象可以提供用户的详细信息供AuthentationManager进行认证与授权使用</li>\n</ul>\n</blockquote>\n<h1 id=\"第二章-SpringSecurity-HelloWorld\"><a href=\"#第二章-SpringSecurity-HelloWorld\" class=\"headerlink\" title=\"第二章 SpringSecurity-HelloWorld\"></a>第二章 SpringSecurity-HelloWorld</h1><h2 id=\"2-1-测试环境搭建\"><a href=\"#2-1-测试环境搭建\" class=\"headerlink\" title=\"2.1 测试环境搭建\"></a>2.1 测试环境搭建</h2><h3 id=\"2-1-1-创建普通maven-war工程-spring-security-helloworld\"><a href=\"#2-1-1-创建普通maven-war工程-spring-security-helloworld\" class=\"headerlink\" title=\"2.1.1 创建普通maven-war工程:spring-security-helloworld\"></a>2.1.1 创建普通maven-war工程:spring-security-helloworld</h3><p>pom文件增加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.3.20.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.2&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.5&lt;/version&gt;</span><br><span class=\"line\">\t\t\t&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.2&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-2-web-xml配置\"><a href=\"#2-1-2-web-xml配置\" class=\"headerlink\" title=\"2.1.2 web.xml配置\"></a>2.1.2 web.xml配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;init-param&gt;</span><br><span class=\"line\">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">&lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/init-param&gt;</span><br><span class=\"line\">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-3-spring配置-spring-xml\"><a href=\"#2-1-3-spring配置-spring-xml\" class=\"headerlink\" title=\"2.1.3 spring配置:spring.xml\"></a>2.1.3 spring配置:spring.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;&gt;</span><br><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.security&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class=\"line\">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\">&lt;mvc:annotation-driven /&gt;</span><br><span class=\"line\">&lt;mvc:default-servlet-handler /&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-4-导入实验资源\"><a href=\"#2-1-4-导入实验资源\" class=\"headerlink\" title=\"2.1.4 导入实验资源\"></a>2.1.4 导入实验资源</h3><ul>\n<li>导入页面</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531181744.png\" alt></p>\n<ul>\n<li>导入controller</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531181821.png\" alt></p>\n<h3 id=\"2-1-5-运行测试\"><a href=\"#2-1-5-运行测试\" class=\"headerlink\" title=\"2.1.5 运行测试\"></a>2.1.5 运行测试</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531181905.png\" alt></p>\n<h2 id=\"2-2-引入SpringSecurity框架\"><a href=\"#2-2-引入SpringSecurity框架\" class=\"headerlink\" title=\"2.2 引入SpringSecurity框架\"></a>2.2 引入SpringSecurity框架</h2><h3 id=\"2-2-1-添加security-pom依赖\"><a href=\"#2-2-1-添加security-pom依赖\" class=\"headerlink\" title=\"2.2.1 添加security-pom依赖\"></a>2.2.1 添加security-pom依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;4.2.10.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;4.2.10.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- 标签库 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;4.2.10.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-2-web-xml中添加SpringSecurity的Filter进行安全控制\"><a href=\"#2-2-2-web-xml中添加SpringSecurity的Filter进行安全控制\" class=\"headerlink\" title=\"2.2.2 web.xml中添加SpringSecurity的Filter进行安全控制\"></a>2.2.2 web.xml中添加SpringSecurity的Filter进行安全控制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;&lt;!--名称固定,不能变--&gt;</span><br><span class=\"line\">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</span><br><span class=\"line\">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-3-加入SpringSecurity配置类\"><a href=\"#2-2-3-加入SpringSecurity配置类\" class=\"headerlink\" title=\"2.2.3 加入SpringSecurity配置类\"></a>2.2.3 加入SpringSecurity配置类</h3><p>@Configuration、@Bean 注解作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableWebSecurity</span><br><span class=\"line\">public class AppWebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.2.4 启动测试效果</p>\n<ul>\n<li>所有资源访问受限（包括静态资源）</li>\n<li>需要一个默认的登录页面（框架自带的）</li>\n<li>账号密码错误会有提示</li>\n<li>查看登录页面的源码，发现有个hidden-input；name=”_csrf” 这是SpringSecurity帮我们防止“跨站请求伪造”攻击；还可以防止表单重复提交。</li>\n<li>。。。</li>\n<li><a href=\"http://localhost:8080/spring-security-helloworld/login?error\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/spring-security-helloworld/login?error</a></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182124.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182151.png\" alt></p>\n<h1 id=\"第三章-SpringSecurity-实验\"><a href=\"#第三章-SpringSecurity-实验\" class=\"headerlink\" title=\"第三章 SpringSecurity-实验\"></a>第三章 SpringSecurity-实验</h1><h2 id=\"3-1-实验一：授权首页和静态资源\"><a href=\"#3-1-实验一：授权首页和静态资源\" class=\"headerlink\" title=\"3.1    实验一：授权首页和静态资源\"></a>3.1    实验一：授权首页和静态资源</h2><ul>\n<li>配置类（AppWebSecurityConfig extends WebSecurityConfigurerAdapter）</li>\n<li>重写configure(HttpSecurity http)方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableWebSecurity</span><br><span class=\"line\">public class AppWebSecurityConfig extends WebSecurityConfigurerAdapter &#123; </span><br><span class=\"line\">@Override</span><br><span class=\"line\">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class=\"line\">//super.configure(http); //取消默认配置 </span><br><span class=\"line\">http.authorizeRequests()</span><br><span class=\"line\">.antMatchers(&quot;/layui/**&quot;,&quot;/index.jsp&quot;).permitAll() //设置匹配的资源放行</span><br><span class=\"line\">.anyRequest().authenticated(); //剩余任何资源必须认证</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试结果<ul>\n<li>静态资源和index.jsp都可以访问</li>\n<li>不存在的资源</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182609.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531182637.png\" alt></p>\n<h2 id=\"3-2-实验二：默认及自定义登录页\"><a href=\"#3-2-实验二：默认及自定义登录页\" class=\"headerlink\" title=\"3.2    实验二：默认及自定义登录页\"></a>3.2    实验二：默认及自定义登录页</h2><ul>\n<li>开启formLogin()功能</li>\n<li>静态资源和index.jsp都可以访问</li>\n<li>不存在的资源<ul>\n<li><a href=\"http://localhost/spring-security-helloworld/xxx\" target=\"_blank\" rel=\"noopener\">http://localhost/spring-security-helloworld/xxx</a> 重定向到登录页</li>\n<li><a href=\"http://localhost/spring-security-helloworld/layui/xxx\" target=\"_blank\" rel=\"noopener\">http://localhost/spring-security-helloworld/layui/xxx</a>  404错误</li>\n</ul>\n</li>\n<li>总结：默认表单登录页面的规则<br>1）、自动生成一个登录页<br>2）、登录请求被提交到  /login    POST下<br>3）、生成隐藏域，可以防重复提交和跨站请求伪造；<br><code>&lt;input name=&quot;_csrf&quot; type=&quot;hidden&quot; value=&quot;755f0b3c-0965-430b-852e-dcf6c77e7edb&quot; /&gt;</code><br>为了测试方便，先禁用这个功能: <code>http.csrf().disable();</code><br>4）、默认提交的字段名为：<code>name=&#39;password&#39;  name=&#39;username&#39;</code></li>\n<li>指定登录页<ul>\n<li>http.formLogin().loginPage(“/index.jsp”); //去到指定的登录页</li>\n<li>静态资源和index.jsp都可以访问</li>\n<li>不存在的资源</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"http://localhost/spring-security-helloworld/xxx\" target=\"_blank\" rel=\"noopener\">http://localhost/spring-security-helloworld/xxx</a> 重定向到自定义登录页<br>υ    <a href=\"http://localhost/spring-security-helloworld/layui/xxx\" target=\"_blank\" rel=\"noopener\">http://localhost/spring-security-helloworld/layui/xxx</a> 404错误</p>\n<h2 id=\"3-3-实验三：自定义表单登录逻辑分析\"><a href=\"#3-3-实验三：自定义表单登录逻辑分析\" class=\"headerlink\" title=\"3.3 实验三：自定义表单登录逻辑分析\"></a>3.3 实验三：自定义表单登录逻辑分析</h2><ul>\n<li>表单提交地址：${PATH }/index.jsp</li>\n<li>表单提交请求方式：post</li>\n<li>表单提交请求失败，提取错误消息：<code>${SPRING_SECURITY_LAST_EXCEPTION.message}</code></li>\n<li>如何提交表单：<ul>\n<li>引入jquery:<code>&lt;script src=&quot;${PATH }/layui/jquery.min.js&quot;&gt;&lt;/script&gt;</code></li>\n<li><code>$(&quot;form&quot;).submit();</code></li>\n<li>表单提交参数名称： <code>username  password</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>提交请求被拒绝</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183350.png\" alt></p>\n<p>暂时禁用csrf：http.csrf().disable();</p>\n<ul>\n<li><p>登录逻辑分析<br>/</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**默认登录页面</span><br><span class=\"line\">   * /login GET - the login form </span><br><span class=\"line\">   * /login POST - process the credentials and if valid authenticate the user </span><br><span class=\"line\">   * /login?error GET - redirect here for failed authentication attempts </span><br><span class=\"line\">   * /login?logout GET - redirect here after successfully logging out </span><br><span class=\"line\"></span><br><span class=\"line\">   * 定制登录页面：loginPage(&quot;/index.jsp&quot;)：规定登录页的地址在哪里</span><br><span class=\"line\">   * /index.jsp GET - the login form </span><br><span class=\"line\">   * /index.jsp POST - process the credentials and if valid authenticate the user</span><br><span class=\"line\">   * /index.jsp?error  GET - redirect here for failed authentication attempts </span><br><span class=\"line\">   * /index.jsp?logout GET - redirect here after successfully logging out </span><br><span class=\"line\">* $&#123;SPRING_SECURITY_LAST_EXCEPTION.message&#125;可以取出错误消息</span><br><span class=\"line\">   */</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试结果</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183445.png\" alt></p>\n<h2 id=\"3-4实验四：自定义认证用户信息\"><a href=\"#3-4实验四：自定义认证用户信息\" class=\"headerlink\" title=\"3.4实验四：自定义认证用户信息\"></a>3.4实验四：自定义认证用户信息</h2><ul>\n<li>自定义认证用户信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth.inMemoryAuthentication()</span><br><span class=\"line\">.withUser(&quot;zhangsan&quot;).password(&quot;123456&quot;).roles(&quot;ADMIN&quot;)</span><br><span class=\"line\">.and()</span><br><span class=\"line\">.withUser(&quot;lisi&quot;).password(&quot;123123&quot;).authorities(&quot;USER&quot;,&quot;MANAGER&quot;);</span><br></pre></td></tr></table></figure>\n<pre><code>- CSRF跨站请求伪造\n- SpringSecurity添加了csrf功能【DefaultCsrfToken】，所有的表单提交为了防止跨站请求伪造，我们需要加上_csrf项; 或者，暂时禁用`http.csrf().disable();`\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;hidden&quot; name=&quot;$&#123;_csrf.parameterName&#125;&quot; value=&quot;$&#123;_csrf.token&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ul>\n<li><code>${_csrf}  ===&gt;&gt;&gt;  org.springframework.security.web.csrf.DefaultCsrfToken@19116cfd</code></li>\n<li><code>&lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; value=&quot;310988c2-3f9d-4651-9e19-6ef4b2c4aa3a&quot;/&gt;</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>如果不禁用csrf,默认是开启的状态；页面不设置csrf表单域，那么，提交登录请求会报错</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183736.png\" alt></p>\n<ul>\n<li>令牌值变化：<ul>\n<li>如果登录成功（用户名，密码正确），令牌会被删除，</li>\n<li>重新回到登录页或后退网页，令牌会重新生成；</li>\n<li>如果登录失败（用户名，密码错误），令牌不变。</li>\n<li>刷新登录页，令牌值也不变</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>作用：    <ul>\n<li>防止别的网站伪造数据，提交请求到我们的网站。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531183926.png\" alt>    </p>\n<ul>\n<li>扩展-了解XSS<blockquote>\n<ul>\n<li>XSS攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。 </li>\n<li>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</li>\n</ul>\n</blockquote>\n<h2 id=\"3-5实验五：用户注销完成\"><a href=\"#3-5实验五：用户注销完成\" class=\"headerlink\" title=\"3.5实验五：用户注销完成\"></a>3.5实验五：用户注销完成</h2></li>\n<li>添加注销功能（logout）http.logout()默认规则    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)\t/logout：退出系统</span><br><span class=\"line\">2)\t如果csrf开启，必须post方式的/logout请求，表单中需要增加csrf token</span><br><span class=\"line\">3)\tlogoutUrl()；退出系统需要发送的请求</span><br><span class=\"line\">4)\tlogoutSuccessUrl()；退出系统成功以后要跳转的页面地址</span><br><span class=\"line\">5)\taddLogoutHandler()：自定义注销处理器</span><br><span class=\"line\">6)\tdeleteCookies()：指定需要删除的cookie</span><br><span class=\"line\">7)\tinvalidateHttpSession()：session失效（DEBUG）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-6-实验六：基于角色的访问控制\"><a href=\"#3-6-实验六：基于角色的访问控制\" class=\"headerlink\" title=\"3.6 实验六：基于角色的访问控制\"></a>3.6 实验六：基于角色的访问控制</h2><ul>\n<li>设置资源可以访问的角色</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.authorizeRequests().antMatchers(&quot;/layui/**&quot;,&quot;/index.jsp&quot;).permitAll() //允许所有人都访问静态资源，无论登录（认证）与否</span><br><span class=\"line\">.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class=\"line\">.antMatchers(&quot;/level2/**&quot;).hasRole(&quot;大师&quot;)</span><br><span class=\"line\">.antMatchers(&quot;/level3/**&quot;).hasRole(&quot;宗师&quot;)</span><br><span class=\"line\">.anyRequest().authenticated(); //放置最后，以上没有规定的都需要权限认证。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：<ul>\n<li>将<code>.anyRequest().authenticated()</code>错误的设置在前面，后面的设置就不起作用了。</li>\n<li>设置所有,”/**”都可以访问，其他再进行的设置就不会起作用了</li>\n<li>设置匿名访问/level3/**  可以不用登录，匿名访问：<code>.anyRequest().anonymous();</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>拥有该角色的资源可以访问，否则不可以访问</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth.inMemoryAuthentication()</span><br><span class=\"line\">.withUser(&quot;zhangsan&quot;).password(&quot;123456&quot;).roles(&quot;ADMIN&quot;,&quot;学徒&quot;,&quot;宗师&quot;)</span><br><span class=\"line\">.and()</span><br><span class=\"line\">.withUser(&quot;自定义访问拒绝处理页面，lisi&quot;).password(&quot;111111&quot;).authorities(&quot;USER&quot;,&quot;MANGER&quot;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-7-实验七：自定义访问拒绝处理页面\"><a href=\"#3-7-实验七：自定义访问拒绝处理页面\" class=\"headerlink\" title=\"3.7 实验七：自定义访问拒绝处理页面\"></a>3.7 实验七：自定义访问拒绝处理页面</h2><ul>\n<li>直接增加处理映射界面</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.exceptionHandling().accessDeniedPage(&quot;/unauth.html&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在控制器类中增加映射处理</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;/unauth.html&quot;)</span><br><span class=\"line\">public String unauth()&#123;</span><br><span class=\"line\">return &quot;unauth&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">λ\t增加显示页面，将main.jsp复制,命名为unauth.jsp，增加一句提示信息</span><br><span class=\"line\">&lt;h1&gt;你无权访问该页面...&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试显示效果</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184346.png\" alt></p>\n<ul>\n<li>自定义异常处理器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.exceptionHandling().accessDeniedHandler(new AccessDeniedHandler() &#123;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void handle(HttpServletRequest request, HttpServletResponse response,</span><br><span class=\"line\">AccessDeniedException accessDeniedException) throws IOException, ServletException &#123;</span><br><span class=\"line\">request.setAttribute(&quot;message&quot;, accessDeniedException.getMessage());</span><br><span class=\"line\">request.getRequestDispatcher(&quot;/WEB-INF/views/unauth.jsp&quot;).forward(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-8-实验八：记住我功能\"><a href=\"#3-8-实验八：记住我功能\" class=\"headerlink\" title=\"3.8 实验八：记住我功能\"></a>3.8 实验八：记住我功能</h2><h3 id=\"3-8-1-记住我功能-免登录原理\"><a href=\"#3-8-1-记住我功能-免登录原理\" class=\"headerlink\" title=\"3.8.1 记住我功能-免登录原理\"></a>3.8.1 记住我功能-免登录原理</h3><ul>\n<li>http.rememberMe();</li>\n<li>默认规则<ul>\n<li>页面checkbox提交remember-me参数</li>\n<li>默认记住2周登录状态：AbstractRememberMeServices</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184449.png\" alt></p>\n<p>-</p>\n<pre><code>- 会在cookie中保存名为：remember-me的cookie\n</code></pre><ul>\n<li>记住了以前登录的状态，以后再访问就不用登录了</li>\n<li>登录后页面，关闭浏览器，直接访问：<br><a href=\"http://localhost/spring-security-helloworld/main.html\" target=\"_blank\" rel=\"noopener\">http://localhost/spring-security-helloworld/main.html</a> 可以成功访问，不必登录。</li>\n<li>这种方式，token值是放置在内存中的，服务器端重启tomcat,token会失效。需要将token记录在数据库持久化才不会失效。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184729.png\" alt></p>\n<h2 id=\"3-8-2-记住我-数据版\"><a href=\"#3-8-2-记住我-数据版\" class=\"headerlink\" title=\"3.8.2 记住我-数据版\"></a>3.8.2 记住我-数据版</h2><h3 id=\"引入pom-xml-包\"><a href=\"#引入pom-xml-包\" class=\"headerlink\" title=\"引入pom.xml 包\"></a>引入pom.xml 包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;4.3.20.RELEASE&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;version&gt;1.1.12&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- mysql驱动 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置数据源\"><a href=\"#配置数据源\" class=\"headerlink\" title=\"配置数据源\"></a>配置数据源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置数据源 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://192.168.137.3:3306/security?useSSL=false&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt; </span><br><span class=\"line\">&lt;!--  jdbcTemplate--&gt;</span><br><span class=\"line\">&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><p>create table persistent_logins (username varchar(64) not null, series varchar(64) primary key,token varchar(64) not null, last_used timestamp not null)</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184849.png\" alt></p>\n<h3 id=\"设置记住我\"><a href=\"#设置记住我\" class=\"headerlink\" title=\"设置记住我\"></a>设置记住我</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">DataSource dataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class=\"line\">//。。。</span><br><span class=\"line\">//记住我</span><br><span class=\"line\">JdbcTokenRepositoryImpl ptr = new JdbcTokenRepositoryImpl();</span><br><span class=\"line\">ptr.setDataSource(dataSource);</span><br><span class=\"line\">http.rememberMe().tokenRepository(ptr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531184930.png\" alt></p>\n<h1 id=\"第四章-认证\"><a href=\"#第四章-认证\" class=\"headerlink\" title=\"第四章 认证\"></a>第四章 认证</h1><p>使用数据库保存/查询用户数据，完成认证功能</p>\n<h2 id=\"4-1-方式一：重写jdbcAuthentication规则-不推荐\"><a href=\"#4-1-方式一：重写jdbcAuthentication规则-不推荐\" class=\"headerlink\" title=\"4.1 方式一：重写jdbcAuthentication规则(不推荐)\"></a>4.1 方式一：重写jdbcAuthentication规则(不推荐)</h2><ul>\n<li>基于数据库的RBAC查询出我们需要的用户以及这些用户的权限（权限标识、角色）</li>\n<li>创建和SpringSecurity要求一模一样的表，然后用默认jdbcAuthentication</li>\n<li>更新jdbcAuthentication里面所有我们需要实际运行的sql</li>\n<li>authoritiesByUsernameQuery：根据用户名查询他权限的sql</li>\n<li>usersByUsernameQuery：根据用户名查询用户的sql</li>\n<li>…….：更多的sql均可定义</li>\n</ul>\n<h3 id=\"4-1-1-使用默认的查询用户语句\"><a href=\"#4-1-1-使用默认的查询用户语句\" class=\"headerlink\" title=\"4.1.1 使用默认的查询用户语句\"></a>4.1.1 使用默认的查询用户语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth.jdbcAuthentication().usersByUsernameQuery(&quot;zhangsan&quot;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195137.png\" alt></p>\n<h3 id=\"4-1-2-使用默认的查询权限语句\"><a href=\"#4-1-2-使用默认的查询权限语句\" class=\"headerlink\" title=\"4.1.2 使用默认的查询权限语句\"></a>4.1.2 使用默认的查询权限语句</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth.jdbcAuthentication().authoritiesByUsernameQuery(&quot;zhangsan&quot;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195209.png\" alt></p>\n<h2 id=\"4-2-方式二：自定义UserDetailsService检索用户\"><a href=\"#4-2-方式二：自定义UserDetailsService检索用户\" class=\"headerlink\" title=\"4.2 方式二：自定义UserDetailsService检索用户\"></a>4.2 方式二：自定义UserDetailsService检索用户</h2><h3 id=\"4-2-1-实现UserDetailService接口loadUserByUsername-String-username-方法\"><a href=\"#4-2-1-实现UserDetailService接口loadUserByUsername-String-username-方法\" class=\"headerlink\" title=\"4.2.1 实现UserDetailService接口loadUserByUsername(String username)方法\"></a>4.2.1 实现UserDetailService接口loadUserByUsername(String username)方法</h3><h3 id=\"4-2-2-实验步骤\"><a href=\"#4-2-2-实验步骤\" class=\"headerlink\" title=\"4.2.2 实验步骤\"></a>4.2.2 实验步骤</h3><h4 id=\"1-创建表结构\"><a href=\"#1-创建表结构\" class=\"headerlink\" title=\"1 创建表结构\"></a>1 创建表结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">security实验\\security.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-配置-configure-AuthenticationManagerBuilder-auth\"><a href=\"#2-配置-configure-AuthenticationManagerBuilder-auth\" class=\"headerlink\" title=\"2 配置 configure(AuthenticationManagerBuilder auth)\"></a>2 配置 configure(AuthenticationManagerBuilder auth)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">UserDetailsService userDetailsService;//用户详情查询服务组件的接口</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;</span><br><span class=\"line\">//根据用户名查询出用户的详细信息</span><br><span class=\"line\">auth.userDetailsService(userDetailsService); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-编写UserDetailService实现\"><a href=\"#3-编写UserDetailService实现\" class=\"headerlink\" title=\"3 编写UserDetailService实现:\"></a>3 编写UserDetailService实现:</h4><p>1)    接口及已有实现类</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195412.png\" alt></p>\n<p>2)    实现UserDetailService接口，提供自定义实现类<br><code>org.springframework.security.core.userdetails.UserDetailsService</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.security.component;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class=\"line\">import org.springframework.security.core.authority.*;</span><br><span class=\"line\">import org.springframework.security.core.userdetails.User;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"> </span><br><span class=\"line\">//按照用户名查询用户详情的接口</span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class AppUserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class=\"line\">String queryUser = &quot;SELECT * FROM `t_admin` WHERE loginacct=?&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">//1、查询指定用户的信息</span><br><span class=\"line\">Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(queryUser, username);</span><br><span class=\"line\">    </span><br><span class=\"line\">//2、将查询到的用户封装到框架使用的UserDetails里面</span><br><span class=\"line\">return new User(map.get(&quot;loginacct&quot;).toString(), map.get(&quot;userpswd&quot;).toString(), </span><br><span class=\"line\">AuthorityUtils.createAuthorityList(&quot;ADMIN&quot;,&quot;USER&quot;));//暂时写死，过后数据库中查</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-运行测试结果，密码不一致，跳转到登录页，并提示错误消息\"><a href=\"#4-运行测试结果，密码不一致，跳转到登录页，并提示错误消息\" class=\"headerlink\" title=\"4 运行测试结果，密码不一致，跳转到登录页，并提示错误消息\"></a>4 运行测试结果，密码不一致，跳转到登录页，并提示错误消息</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195510.png\" alt></p>\n<h3 id=\"4-2-3-debug测试登录-断点调试\"><a href=\"#4-2-3-debug测试登录-断点调试\" class=\"headerlink\" title=\"4.2.3 debug测试登录-断点调试\"></a>4.2.3 debug测试登录-断点调试</h3><h4 id=\"1-断点-方法栈\"><a href=\"#1-断点-方法栈\" class=\"headerlink\" title=\"1 断点-方法栈\"></a>1 断点-方法栈</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195553.png\" alt></p>\n<h4 id=\"2-自定义UserDetailService实现类\"><a href=\"#2-自定义UserDetailService实现类\" class=\"headerlink\" title=\"2 自定义UserDetailService实现类\"></a>2 自定义UserDetailService实现类</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195851.png\" alt></p>\n<h4 id=\"3-Dao层认证提供者-DaoAuthenticationProvider\"><a href=\"#3-Dao层认证提供者-DaoAuthenticationProvider\" class=\"headerlink\" title=\"3 Dao层认证提供者: DaoAuthenticationProvider\"></a>3 Dao层认证提供者: DaoAuthenticationProvider</h4><p>Dao层认证提供者DaoAuthenticationProvider，用于调用自定义的UserDetailService实现类方法</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531195949.png\" alt></p>\n<h4 id=\"4-抽象层用户认证提供者-AbstractUserDetailsAuthenticationProvider\"><a href=\"#4-抽象层用户认证提供者-AbstractUserDetailsAuthenticationProvider\" class=\"headerlink\" title=\"4 抽象层用户认证提供者: AbstractUserDetailsAuthenticationProvider\"></a>4 抽象层用户认证提供者: AbstractUserDetailsAuthenticationProvider</h4><p>抽象层用户认证提供者，获取dao层查找的认证用户信息，被封装成UserDetails对象，User类是UserDetails接口实现类</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200141.png\" alt></p>\n<p>1)    org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks认证用户账号是否被锁定，是否启用，是否过期；用户表中可以增加这些字段。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200226.png\" alt></p>\n<p>2)    public interface Authentication extends Principal 封装表单提交的认证信息</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200248.png\" alt></p>\n<ul>\n<li>认证用户名和密码；盐值为null</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200419.png\" alt></p>\n<ul>\n<li>采用org.springframework.security.authentication.encoding.BasePasswordEncoder默认加密器对表单提交明文加密（其实并没有进行任何加密，明文无变化）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200446.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200512.png\" alt></p>\n<ul>\n<li>总结</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531200541.png\" alt></p>\n<h2 id=\"4-3-基于数据库-MD5密码-认证-debug\"><a href=\"#4-3-基于数据库-MD5密码-认证-debug\" class=\"headerlink\" title=\"4.3 基于数据库(MD5密码)认证 (debug)\"></a>4.3 基于数据库(MD5密码)认证 (debug)</h2><p>使用数据库保存/查询用户数据，完成认证功能</p>\n<h3 id=\"4-3-1-配置-configure-AuthenticationManagerBuilder-auth\"><a href=\"#4-3-1-配置-configure-AuthenticationManagerBuilder-auth\" class=\"headerlink\" title=\"4.3.1 配置 configure(AuthenticationManagerBuilder auth)\"></a>4.3.1 配置 configure(AuthenticationManagerBuilder auth)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.security.crypto.password.PasswordEncoder</span><br><span class=\"line\">//测试：分析源码（验证密码不一致）</span><br><span class=\"line\">auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-2-引入MD5加密工具类：MD5Util-java\"><a href=\"#4-3-2-引入MD5加密工具类：MD5Util-java\" class=\"headerlink\" title=\"4.3.2 引入MD5加密工具类：MD5Util.java\"></a>4.3.2 引入MD5加密工具类：MD5Util.java</h3><h3 id=\"4-3-3-PasswordEncoder接口实现类：AppPasswordEncoder\"><a href=\"#4-3-3-PasswordEncoder接口实现类：AppPasswordEncoder\" class=\"headerlink\" title=\"4.3.3 PasswordEncoder接口实现类：AppPasswordEncoder\"></a>4.3.3 PasswordEncoder接口实现类：AppPasswordEncoder</h3><p>@<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service</span><br><span class=\"line\">public class AppPasswordEncoder implements PasswordEncoder &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\">   * 密码加密的算法</span><br><span class=\"line\">   */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public String encode(CharSequence rawPassword) &#123;</span><br><span class=\"line\">String digestPwd = MD5Util.digestPwd(rawPassword.toString());</span><br><span class=\"line\">return digestPwd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\">   * 比较登录密码和数据库存储密码是否一致</span><br><span class=\"line\">   * rawPassword:页面的明文密码</span><br><span class=\"line\">   * encodedPassword：数据库的密文密码</span><br><span class=\"line\">   */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public boolean matches(CharSequence rawPassword, String encodedPassword) &#123;</span><br><span class=\"line\">//使用自己的工具类</span><br><span class=\"line\">String digestPwd = MD5Util.digestPwd(rawPassword.toString());</span><br><span class=\"line\">return digestPwd.equals(encodedPassword);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-4-Debug测试，主要测试matches方法的调用过程\"><a href=\"#4-3-4-Debug测试，主要测试matches方法的调用过程\" class=\"headerlink\" title=\"4.3.4 Debug测试，主要测试matches方法的调用过程\"></a>4.3.4 Debug测试，主要测试matches方法的调用过程</h3><h4 id=\"1-表单提交密码：rawPassword\"><a href=\"#1-表单提交密码：rawPassword\" class=\"headerlink\" title=\"1     表单提交密码：rawPassword\"></a>1     表单提交密码：rawPassword</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083038.png\" alt></p>\n<h4 id=\"2-数据库存储密码-：encodePassword\"><a href=\"#2-数据库存储密码-：encodePassword\" class=\"headerlink\" title=\"2     数据库存储密码 ：encodePassword\"></a>2     数据库存储密码 ：encodePassword</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083112.png\" alt></p>\n<h4 id=\"3-调用自定义密码验证器\"><a href=\"#3-调用自定义密码验证器\" class=\"headerlink\" title=\"3     调用自定义密码验证器\"></a>3     调用自定义密码验证器</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083241.png\" alt></p>\n<h4 id=\"4-密码不一致，抛异常：Bad-credentials-密码一致，通过认证\"><a href=\"#4-密码不一致，抛异常：Bad-credentials-密码一致，通过认证\" class=\"headerlink\" title=\"4     密码不一致，抛异常：Bad credentials ;密码一致，通过认证\"></a>4     密码不一致，抛异常：Bad credentials ;密码一致，通过认证</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083355.png\" alt></p>\n<h4 id=\"5-创建UsernamePasswordAuthenticationToken-对象，封装认证信息\"><a href=\"#5-创建UsernamePasswordAuthenticationToken-对象，封装认证信息\" class=\"headerlink\" title=\"5     创建UsernamePasswordAuthenticationToken 对象，封装认证信息\"></a>5     创建UsernamePasswordAuthenticationToken 对象，封装认证信息</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083432.png\" alt></p>\n<h3 id=\"4-3-5-源码参考\"><a href=\"#4-3-5-源码参考\" class=\"headerlink\" title=\"4.3.5 源码参考\"></a>4.3.5 源码参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected Authentication createSuccessAuthentication(Object principal,Authentication authentication, UserDetails user) &#123;</span><br><span class=\"line\">// Ensure we return the original credentials the user supplied,</span><br><span class=\"line\">// so subsequent attempts are successful even with encoded passwords.</span><br><span class=\"line\">// Also ensure we return the original getDetails(), so that future</span><br><span class=\"line\">// authentication events after cache expiry contain the details </span><br><span class=\"line\">UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(</span><br><span class=\"line\">principal, authentication.getCredentials(),</span><br><span class=\"line\">authoritiesMapper.mapAuthorities(user.getAuthorities())  );//封装用户权限信息 </span><br><span class=\"line\">result.setDetails(authentication.getDetails()); //封装用户信息</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-principal-认证主体-数据库中查询User数据\"><a href=\"#1-principal-认证主体-数据库中查询User数据\" class=\"headerlink\" title=\"1 principal 认证主体-数据库中查询User数据\"></a>1 principal 认证主体-数据库中查询User数据</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083624.png\" alt></p>\n<h4 id=\"2-authentication-getCredentials-认证密码-表单中密码\"><a href=\"#2-authentication-getCredentials-认证密码-表单中密码\" class=\"headerlink\" title=\"2 authentication.getCredentials() 认证密码(表单中密码)\"></a>2 authentication.getCredentials() 认证密码(表单中密码)</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083655.png\" alt></p>\n<h4 id=\"3-authoritiesMapper-mapAuthorities-user-getAuthorities-认证权限集合\"><a href=\"#3-authoritiesMapper-mapAuthorities-user-getAuthorities-认证权限集合\" class=\"headerlink\" title=\"3 authoritiesMapper.mapAuthorities(user.getAuthorities()) 认证权限集合\"></a>3 authoritiesMapper.mapAuthorities(user.getAuthorities()) 认证权限集合</h4><p>该用户拥有的权限，暂时写死在代码中的，后期要根据用户查询所拥有的权限</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083729.png\" alt></p>\n<h4 id=\"4-认证细节：包括客户端ip和sessionid\"><a href=\"#4-认证细节：包括客户端ip和sessionid\" class=\"headerlink\" title=\"4 认证细节：包括客户端ip和sessionid\"></a>4 认证细节：包括客户端ip和sessionid</h4><p>org.springframework.security.web.authentication.WebAuthenticationDetails</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083805.png\" alt></p>\n<h4 id=\"5-result对象（UsernamePasswordAuthenticationToken）详细描述\"><a href=\"#5-result对象（UsernamePasswordAuthenticationToken）详细描述\" class=\"headerlink\" title=\"5 result对象（UsernamePasswordAuthenticationToken）详细描述\"></a>5 result对象（UsernamePasswordAuthenticationToken）详细描述</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083855.png\" alt></p>\n<h2 id=\"4-4-基于数据库-BCryptPasswordEncoder-密码加密认证\"><a href=\"#4-4-基于数据库-BCryptPasswordEncoder-密码加密认证\" class=\"headerlink\" title=\"4.4 基于数据库(BCryptPasswordEncoder)密码加密认证\"></a>4.4 基于数据库(BCryptPasswordEncoder)密码加密认证</h2><h3 id=\"4-4-1-PasswordEncoder接口\"><a href=\"#4-4-1-PasswordEncoder接口\" class=\"headerlink\" title=\"4.4.1 PasswordEncoder接口\"></a>4.4.1 PasswordEncoder接口</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601083950.png\" alt></p>\n<h3 id=\"4-4-2-使用BCryptPasswordEncoder进行密码加密\"><a href=\"#4-4-2-使用BCryptPasswordEncoder进行密码加密\" class=\"headerlink\" title=\"4.4.2 使用BCryptPasswordEncoder进行密码加密\"></a>4.4.2 使用BCryptPasswordEncoder进行密码加密</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//推荐密码加密器用这个BCryptPasswordEncoder; 将一个字符串加密成一个永不重复的密文</span><br><span class=\"line\">//1、加盐+加随机数</span><br><span class=\"line\">auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-3-本地测试：main方法\"><a href=\"#4-4-3-本地测试：main方法\" class=\"headerlink\" title=\"4.4.3 本地测试：main方法\"></a>4.4.3 本地测试：main方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">BCryptPasswordEncoder pe = new BCryptPasswordEncoder();</span><br><span class=\"line\"> </span><br><span class=\"line\">//$2a$10$WzKk37ncOPynOSxyFGkxWu3ys7xaf7L/9uUhfVYVOCFTqeHkgJvOq</span><br><span class=\"line\">//$2a$10$VmWwIx/uxNQabCYl3I5mZ.U9sQvpiM/xAhX69Skg0EWyDm3twQfcO</span><br><span class=\"line\">//$2a$10$2Ig1mxqlb033XcU7aB0Ck.OZouRLsHUkJyIl9Mzi40FIY6grcEUr6</span><br><span class=\"line\">//大致的规律：$2a$10$+&quot;xxx&quot;+&quot;/&quot;+&quot;xxx&quot;</span><br><span class=\"line\">String encode = pe.encode(&quot;123456&quot;);</span><br><span class=\"line\">System.out.println(encode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-4-服务器运行测试\"><a href=\"#4-4-4-服务器运行测试\" class=\"headerlink\" title=\"4.4.4 服务器运行测试\"></a>4.4.4 服务器运行测试</h3><p>将main方法生成的密文存储到数据库中（注意：userpswd字段长度），重新启动服务器进行测试。</p>\n<h1 id=\"第五章-细粒度权限控制\"><a href=\"#第五章-细粒度权限控制\" class=\"headerlink\" title=\"第五章 细粒度权限控制\"></a>第五章 细粒度权限控制</h1><h2 id=\"5-1-前置细节【Role和Authority的区别】\"><a href=\"#5-1-前置细节【Role和Authority的区别】\" class=\"headerlink\" title=\"5.1 前置细节【Role和Authority的区别】\"></a>5.1 前置细节【Role和Authority的区别】</h2><h3 id=\"5-1-1-用户拥有的权限表示\"><a href=\"#5-1-1-用户拥有的权限表示\" class=\"headerlink\" title=\"5.1.1 用户拥有的权限表示\"></a>5.1.1 用户拥有的权限表示</h3><ul>\n<li>roles(“ADMIN”,”学徒”,”宗师”) </li>\n<li>authorities(“USER”,”MANAGER”);</li>\n</ul>\n<h3 id=\"5-1-2-给资源授予权限（角色或权限）\"><a href=\"#5-1-2-给资源授予权限（角色或权限）\" class=\"headerlink\" title=\"5.1.2 给资源授予权限（角色或权限）\"></a>5.1.2 给资源授予权限（角色或权限）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class=\"line\">//.antMatchers(&quot;/level1/**&quot;).hasAnyRole(&quot;学徒&quot;,&quot;ADMIN&quot;)//拥有任何一个角色都可以访问</span><br><span class=\"line\">.antMatchers(&quot;/level1/**&quot;).hasAnyAuthority(&quot;学徒&quot;,&quot;ADMIN&quot;) //拥有任何一个权限都可以访问</span><br><span class=\"line\">.antMatchers(&quot;/level2/**&quot;).hasRole(&quot;大师&quot;)</span><br><span class=\"line\">.antMatchers(&quot;/level3/**&quot;).hasRole(&quot;宗师&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-1-3-权限：【roles和authorities区别】\"><a href=\"#5-1-3-权限：【roles和authorities区别】\" class=\"headerlink\" title=\"5.1.3 权限：【roles和authorities区别】\"></a>5.1.3 权限：【roles和authorities区别】</h3><ul>\n<li>roles(“ADMIN”,”学徒”,”宗师”) <ul>\n<li>增加”ROLE_”前缀存放：【”ROLE_ADMIN”,”ROLE_学徒”,”ROLE_宗师”】</li>\n<li>表示拥有的权限。一个角色表示的是多个权限</li>\n<li>用户传入的角色不能以ROLE_开头，否则会报错。ROLE_是自动加上的</li>\n<li>如果我们保存的用户的角色：直接传入角色的名字，权限【new SimpleGrantedAuthority(“ROLE_” + role)】保存即可</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>authorities(“USER”,”MANAGER”);<ul>\n<li>原样存放：【”USER”,”MANAGER”】</li>\n<li>表示拥有的权限。</li>\n<li>如果我们保存的是真正的权限；直接传入权限名字，权限【new SimpleGrantedAuthority(role)】保存</li>\n<li>无论是Role还是Authority都保存在  List<grantedauthority>,每个用户都拥有自己的权限集合-&gt;List<grantedauthority></grantedauthority></grantedauthority></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-1-4-验证用户权限\"><a href=\"#5-1-4-验证用户权限\" class=\"headerlink\" title=\"5.1.4 验证用户权限\"></a>5.1.4 验证用户权限</h3><h4 id=\"1-通过角色（权限）验证：\"><a href=\"#1-通过角色（权限）验证：\" class=\"headerlink\" title=\"1)    通过角色（权限）验证：\"></a>1)    通过角色（权限）验证：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class=\"line\">.antMatchers(&quot;/level1/**&quot;).hasAnyRole(&quot;学徒&quot;,&quot;ADMIN&quot;)</span><br><span class=\"line\">拥有任何一个角色都可以访问</span><br><span class=\"line\">验证时会自动增加&quot;ROLE_&quot;进行查找验证：</span><br><span class=\"line\">    【&quot;ROLE_学徒&quot;,&quot;ROLE_ADMIN&quot;】</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601084432.png\" alt></p>\n<p>通过权限验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.antMatchers(&quot;/level1/**&quot;).hasAuthority(&quot;学徒&quot;)</span><br><span class=\"line\">.antMatchers(&quot;/level1/**&quot;).hasAnyAuthority(&quot;学徒&quot;,&quot;ADMIN&quot;) </span><br><span class=\"line\">拥有任何一个权限都可以访问</span><br><span class=\"line\">验证时原样查找进行验证：【&quot;学徒&quot;,&quot;ADMIN&quot;】</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2-细粒度的资源控制\"><a href=\"#5-2-细粒度的资源控制\" class=\"headerlink\" title=\"5.2 细粒度的资源控制\"></a>5.2 细粒度的资源控制</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authenticated()：通过认证的用户都可以访问</span><br><span class=\"line\">permitAll()：允许所有人访问，即使未登录</span><br><span class=\"line\">authorizeRequests()：更细粒度的控制</span><br><span class=\"line\">access(String)： //SpEL：Spring表达式</span><br><span class=\"line\">.access(&quot;hasRole(&apos;大师&apos;) AND hasAuthority(&apos;user:delete&apos;) OR hasIpAddress(&apos;192.168.50.15&apos;)&quot;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601084714.png\" alt></p>\n<h2 id=\"5-3-细粒度的资源控制相应注解\"><a href=\"#5-3-细粒度的资源控制相应注解\" class=\"headerlink\" title=\"5.3 细粒度的资源控制相应注解\"></a>5.3 细粒度的资源控制相应注解</h2><p>使用注解与SpEl进行细粒度权限控制</p>\n<h3 id=\"5-3-1-开启注解控制权限模式\"><a href=\"#5-3-1-开启注解控制权限模式\" class=\"headerlink\" title=\"5.3.1 开启注解控制权限模式\"></a>5.3.1 开启注解控制权限模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableWebSecurity：开启 Spring Security 注解</span><br><span class=\"line\">@EnableGlobalMethodSecurity(prePostEnabled=true)：开启全局的细粒度方法级别权限控制功能</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-2-几个权限检查注解\"><a href=\"#5-3-2-几个权限检查注解\" class=\"headerlink\" title=\"5.3.2 几个权限检查注解\"></a>5.3.2 几个权限检查注解</h3><h4 id=\"1-PreAuthorize：方法执行前检查\"><a href=\"#1-PreAuthorize：方法执行前检查\" class=\"headerlink\" title=\"1 @PreAuthorize：方法执行前检查\"></a>1 @PreAuthorize：方法执行前检查</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PreAuthorize(&quot;hasRole(&apos;ADMIN&apos;)&quot;)  </span><br><span class=\"line\">public void addUser(User user)&#123;  </span><br><span class=\"line\">    //如果具有ROLE_ADMIN 权限 则访问该方法  </span><br><span class=\"line\">    ....  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-PostAuthorize：方法执行后检查，失败抛异常\"><a href=\"#2-PostAuthorize：方法执行后检查，失败抛异常\" class=\"headerlink\" title=\"2 @PostAuthorize：方法执行后检查，失败抛异常\"></a>2 @PostAuthorize：方法执行后检查，失败抛异常</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PostAuthorize：允许方法调用，但是，如果表达式结果为false抛出异常  </span><br><span class=\"line\">//returnObject可以获取返回对象user，判断user属性username是否和访问该方法的用户对象的用户名一样。不一样则抛出异常。  </span><br><span class=\"line\">@PostAuthorize(&quot;returnObject.user.username==principal.username&quot;)  </span><br><span class=\"line\">public User getUser(int userId)&#123;  </span><br><span class=\"line\">   //允许进入</span><br><span class=\"line\">...  </span><br><span class=\"line\">    return user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-PostFilter：允许方法调用，但是按照表达式过滤方法结果\"><a href=\"#3-PostFilter：允许方法调用，但是按照表达式过滤方法结果\" class=\"headerlink\" title=\"3 @PostFilter：允许方法调用，但是按照表达式过滤方法结果\"></a>3 @PostFilter：允许方法调用，但是按照表达式过滤方法结果</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将结果过滤，即选出性别为男的用户  </span><br><span class=\"line\">@PostFilter(&quot;returnObject.user.sex==&apos;男&apos; &quot;)  </span><br><span class=\"line\">public List&lt;User&gt; getUserList()&#123;  </span><br><span class=\"line\">    //允许进入</span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    return user; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-PreFilter：允许方法调用，但必须在进入方法前过滤输入值\"><a href=\"#4-PreFilter：允许方法调用，但必须在进入方法前过滤输入值\" class=\"headerlink\" title=\"4 @PreFilter：允许方法调用，但必须在进入方法前过滤输入值\"></a>4 @PreFilter：允许方法调用，但必须在进入方法前过滤输入值</h4><h4 id=\"5-Secured：拥有指定角色才可以访问方法\"><a href=\"#5-Secured：拥有指定角色才可以访问方法\" class=\"headerlink\" title=\"5 @Secured：拥有指定角色才可以访问方法\"></a>5 @Secured：拥有指定角色才可以访问方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Secured(&apos;ADMIN&apos;)   等价于    @PreAuthorize(&quot;hasRole(&apos;ADMIN&apos;)&quot;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-4-细粒度的资源控制注解中可写的表达式\"><a href=\"#5-4-细粒度的资源控制注解中可写的表达式\" class=\"headerlink\" title=\"5.4 细粒度的资源控制注解中可写的表达式\"></a>5.4 细粒度的资源控制注解中可写的表达式</h2><p><a href=\"https://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#el-common-built-in\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#el-common-built-in</a><br>所有能使用的表达式见上面文档连接</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085028.png\" alt></p>\n<h2 id=\"5-5-细粒度权限控制实现步骤-★\"><a href=\"#5-5-细粒度权限控制实现步骤-★\" class=\"headerlink\" title=\"5.5 细粒度权限控制实现步骤 ★\"></a>5.5 细粒度权限控制实现步骤 ★</h2><h3 id=\"5-5-1-开启全局的细粒度方法级别权限控制功能\"><a href=\"#5-5-1-开启全局的细粒度方法级别权限控制功能\" class=\"headerlink\" title=\"5.5.1 开启全局的细粒度方法级别权限控制功能\"></a>5.5.1 开启全局的细粒度方法级别权限控制功能</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class=\"line\">@EnableWebSecurity</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class AppSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-2-将手动授权的方式注释掉\"><a href=\"#5-5-2-将手动授权的方式注释掉\" class=\"headerlink\" title=\"5.5.2 将手动授权的方式注释掉\"></a>5.5.2 将手动授权的方式注释掉</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.antMatchers(&quot;/level1/**&quot;).hasRole(&quot;学徒&quot;)</span><br><span class=\"line\">//.antMatchers(&quot;/level1/**&quot;).hasAnyRole(&quot;学徒&quot;,&quot;ADMIN&quot;)</span><br><span class=\"line\">//.antMatchers(&quot;/level1/**&quot;).hasAnyAuthority(&quot;学徒&quot;,&quot;ADMIN&quot;)</span><br><span class=\"line\">//.antMatchers(&quot;/level1/**&quot;).hasAuthority(&quot;学徒&quot;)</span><br><span class=\"line\">//.antMatchers(&quot;/level2/**&quot;).hasRole(&quot;大师&quot;)</span><br><span class=\"line\">//.antMatchers(&quot;/level3/**&quot;).hasRole(&quot;宗师&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-3-给访问资源的方法增加注解，进行访问授权\"><a href=\"#5-5-3-给访问资源的方法增加注解，进行访问授权\" class=\"headerlink\" title=\"5.5.3 给访问资源的方法增加注解，进行访问授权\"></a>5.5.3 给访问资源的方法增加注解，进行访问授权</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class GongfuController &#123; </span><br><span class=\"line\">/**</span><br><span class=\"line\">   * 授权（权限检查）使用AOP；MethodSecurityInterceptor</span><br><span class=\"line\">   *                 方法执行之前AccessDecisionManager利用投票机制决定这个方法是否可运行</span><br><span class=\"line\"> * </span><br><span class=\"line\">   */</span><br><span class=\"line\">@PreAuthorize(&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;luohan&apos;)&quot;)</span><br><span class=\"line\">@GetMapping(&quot;/level1/1&quot;)</span><br><span class=\"line\">public String leve1Page()&#123;</span><br><span class=\"line\">return &quot;/level1/1&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@PreAuthorize(&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;wudang&apos;)&quot;)</span><br><span class=\"line\">@GetMapping(&quot;/level1/2&quot;)</span><br><span class=\"line\">public String leve1Page2()&#123;</span><br><span class=\"line\">return &quot;/level1/2&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@PreAuthorize(&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;quanzhen&apos;)&quot;)</span><br><span class=\"line\">@GetMapping(&quot;/level1/3&quot;)</span><br><span class=\"line\">public String leve1Page3()&#123;</span><br><span class=\"line\">return &quot;/level1/3&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-4-通过数据库加载用户权限\"><a href=\"#5-5-4-通过数据库加载用户权限\" class=\"headerlink\" title=\"5.5.4 通过数据库加载用户权限\"></a>5.5.4 通过数据库加载用户权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class AppUserDetailsServiceImpl implements UserDetailsService &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">JdbcTemplate jdbcTemplate ;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;</span><br><span class=\"line\">String sql = &quot;select  * from t_admin where loginacct=?&quot;;</span><br><span class=\"line\">Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(sql, username);</span><br><span class=\"line\"> </span><br><span class=\"line\">//查询用户拥有的角色集合</span><br><span class=\"line\">String sql1=&quot;SELECT t_role.* FROM t_role LEFT JOIN t_admin_role ON t_admin_role.roleid=t_role.id WHERE t_admin_role.adminid=?&quot;;                </span><br><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; roleList = jdbcTemplate.query(sql1, new ColumnMapRowMapper(), map.get(&quot;id&quot;));</span><br><span class=\"line\"> </span><br><span class=\"line\">//查询用户拥有的权限集合</span><br><span class=\"line\">String sql2 = &quot;SELECT distinct t_permission.* FROM t_permission LEFT JOIN t_role_permission ON t_role_permission.permissionid = t_permission.id LEFT JOIN t_admin_role ON t_admin_role.roleid=t_role_permission.roleid WHERE t_admin_role.adminid=?&quot;;</span><br><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; permissionList = jdbcTemplate.query(sql2, new ColumnMapRowMapper(), map.get(&quot;id&quot;));</span><br><span class=\"line\"> </span><br><span class=\"line\">//用户权限=【角色+权限】</span><br><span class=\"line\">Set&lt;GrantedAuthority&gt; authorities = new HashSet&lt;GrantedAuthority&gt;();</span><br><span class=\"line\">                </span><br><span class=\"line\">for (Map&lt;String, Object&gt; rolemap : roleList) &#123;</span><br><span class=\"line\">String rolename = rolemap.get(&quot;name&quot;).toString();</span><br><span class=\"line\">authorities.add(new SimpleGrantedAuthority(&quot;ROLE_&quot;+rolename));</span><br><span class=\"line\">&#125;                </span><br><span class=\"line\">for (Map&lt;String, Object&gt; permissionmap : permissionList) &#123;</span><br><span class=\"line\">String permissionName = permissionmap.get(&quot;name&quot;).toString();</span><br><span class=\"line\">if(!StringUtils.isEmpty(permissionName)) &#123;</span><br><span class=\"line\">authorities.add(new SimpleGrantedAuthority(permissionName));</span><br><span class=\"line\">&#125;                        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">//return new User(map.get(&quot;loginacct&quot;).toString(),map.get(&quot;userpswd&quot;).toString(),</span><br><span class=\"line\">//AuthorityUtils.createAuthorityList(&quot;ADMIN&quot;,&quot;USER&quot;));</span><br><span class=\"line\">return new User(map.get(&quot;loginacct&quot;).toString(),map.get(&quot;userpswd&quot;).toString(),authorities);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-5-5-准备数据\"><a href=\"#5-5-5-准备数据\" class=\"headerlink\" title=\"5.5.5 准备数据\"></a>5.5.5 准备数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查询用户拥有的角色集合</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">  t_role.* </span><br><span class=\"line\">FROM</span><br><span class=\"line\">  t_role </span><br><span class=\"line\">  LEFT JOIN t_admin_role </span><br><span class=\"line\">    ON t_admin_role.roleid = t_role.id </span><br><span class=\"line\">WHERE t_admin_role.userid = 1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085322.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查询用户拥有的权限集合</span><br><span class=\"line\">SELECT DISTINCT </span><br><span class=\"line\">  t_permission.* </span><br><span class=\"line\">FROM</span><br><span class=\"line\">  t_permission </span><br><span class=\"line\">  LEFT JOIN t_role_permission </span><br><span class=\"line\">    ON t_role_permission.permissionid = t_permission.id </span><br><span class=\"line\">  LEFT JOIN t_admin_role </span><br><span class=\"line\">    ON t_admin_role.roleid = t_role_permission.roleid </span><br><span class=\"line\">WHERE t_admin_role.userid = 1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085345.png\" alt></p>\n<h3 id=\"5-5-6-测试结果\"><a href=\"#5-5-6-测试结果\" class=\"headerlink\" title=\"5.5.6 测试结果\"></a>5.5.6 测试结果</h3><p>登录认证通过，可以登录到成功页面  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问【学徒】角色下的资源：</span><br><span class=\"line\">/level1/1 罗汉拳不可以访问</span><br><span class=\"line\">/level1/2 武当长拳可以访问</span><br><span class=\"line\">/level1/3 全真剑法不可以访问</span><br></pre></td></tr></table></figure>\n<h1 id=\"第六章-SpringSecurity-原理\"><a href=\"#第六章-SpringSecurity-原理\" class=\"headerlink\" title=\"第六章 SpringSecurity-原理\"></a>第六章 SpringSecurity-原理</h1><h2 id=\"6-1-认证原理-过滤器链的调用\"><a href=\"#6-1-认证原理-过滤器链的调用\" class=\"headerlink\" title=\"6.1 认证原理-过滤器链的调用\"></a>6.1 认证原理-过滤器链的调用</h2><h3 id=\"1-源码调试分析\"><a href=\"#1-源码调试分析\" class=\"headerlink\" title=\"1 源码调试分析\"></a>1 源码调试分析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">•\t程序入口</span><br><span class=\"line\">•\t打断点-第一批次</span><br><span class=\"line\">•\t运行调试</span><br><span class=\"line\">•\t打断点-关键点</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-过滤器\"><a href=\"#2-过滤器\" class=\"headerlink\" title=\"2 过滤器\"></a>2 过滤器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</span><br><span class=\"line\">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">&lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;</span><br><span class=\"line\">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-debug走起…\"><a href=\"#3-debug走起…\" class=\"headerlink\" title=\"3 debug走起…\"></a>3 debug走起…</h3><h4 id=\"3-1-初始化方法\"><a href=\"#3-1-初始化方法\" class=\"headerlink\" title=\"3.1 初始化方法\"></a>3.1 初始化方法</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085707.png\" alt></p>\n<h4 id=\"3-2-过滤器：功能扩展的多个过滤器-gt-责任链设计模式\"><a href=\"#3-2-过滤器：功能扩展的多个过滤器-gt-责任链设计模式\" class=\"headerlink\" title=\"3.2 过滤器：功能扩展的多个过滤器-&gt;责任链设计模式\"></a>3.2 过滤器：功能扩展的多个过滤器-&gt;责任链设计模式</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085759.png\" alt></p>\n<h4 id=\"3-3-获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤\"><a href=\"#3-3-获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤\" class=\"headerlink\" title=\"3.3 获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤\"></a>3.3 获取过滤器链中的过滤器，封装为虚拟的VirtualFilterChain对象，并开始执行过滤</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085831.png\" alt></p>\n<h4 id=\"3-4-开始一个一个的执行过滤器\"><a href=\"#3-4-开始一个一个的执行过滤器\" class=\"headerlink\" title=\"3.4 开始一个一个的执行过滤器\"></a>3.4 开始一个一个的执行过滤器</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601085910.png\" alt></p>\n<h4 id=\"3-5-自定义过滤器\"><a href=\"#3-5-自定义过滤器\" class=\"headerlink\" title=\"3.5 自定义过滤器\"></a>3.5 自定义过滤器</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090011.png\" alt></p>\n<h2 id=\"6-2-认证原理-相关过滤器解释\"><a href=\"#6-2-认证原理-相关过滤器解释\" class=\"headerlink\" title=\"6.2 认证原理-相关过滤器解释\"></a>6.2 认证原理-相关过滤器解释</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090038.png\" alt></p>\n<h3 id=\"1-SecurityContextPersistenceFilter\"><a href=\"#1-SecurityContextPersistenceFilter\" class=\"headerlink\" title=\"1    SecurityContextPersistenceFilter\"></a>1    SecurityContextPersistenceFilter</h3><ul>\n<li>过滤器链头，是从 SecurityContextRepository 中取出用户认证信息，默认实现为 HttpSessionSecurityContextRepository，它会从 Session 中取出已认证的用户信息，提高效率，避免每次请求都要查询用户认证信息</li>\n<li>取出之后会放入 SecurityContextHolder 中，以便其它 filter 使用，SecurityContextHolder 使用 ThreadLocal 存储用户认证信息，保证线程之间信息隔离，最后再 finally 中清除该信息</li>\n</ul>\n<h3 id=\"2-WebAsyncManagerIntegrationFilter\"><a href=\"#2-WebAsyncManagerIntegrationFilter\" class=\"headerlink\" title=\"2.    WebAsyncManagerIntegrationFilter\"></a>2.    WebAsyncManagerIntegrationFilter</h3><p>提供了对 SecurityContext 和 WebAsyncManager 的集成，会把 SecurityContext 设置到异步线程，使其也能获取到用户上下文认证信息</p>\n<h4 id=\"3-HeaderWriterFilter\"><a href=\"#3-HeaderWriterFilter\" class=\"headerlink\" title=\"3.    HeaderWriterFilter\"></a>3.    HeaderWriterFilter</h4><p>会往请求的 Header 中添加相应的信息<br>响应头：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090157.png\" alt></p>\n<p>请求头：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090221.png\" alt></p>\n<h4 id=\"4-CsrfFilter\"><a href=\"#4-CsrfFilter\" class=\"headerlink\" title=\"4.    CsrfFilter\"></a>4.    CsrfFilter</h4><p>跨域请求伪造过滤器，通过客户端穿来的 token 与服务端存储的 token 进行对比来判断请求</p>\n<h4 id=\"5-LogoutFilter\"><a href=\"#5-LogoutFilter\" class=\"headerlink\" title=\"5.    LogoutFilter\"></a>5.    LogoutFilter</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.security.web.authentication.logout.LogoutFilter</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090307.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190601090352.png\" alt></p>\n<p>匹配URL，默认为 /logout，匹配成功后则会用户退出，清除认证信息，若有自己的退出逻辑，该过滤器可以关闭</p>\n<h4 id=\"6-UsernamePasswordAuthenticationFilter\"><a href=\"#6-UsernamePasswordAuthenticationFilter\" class=\"headerlink\" title=\"6.    UsernamePasswordAuthenticationFilter\"></a>6.    UsernamePasswordAuthenticationFilter</h4><blockquote>\n<p>登录认证过滤器，默认是对 /login 的 POST 请求进行认证，首先该方法会调用 attemptAuthentication 尝试认证获取一个 Authentication 认证对象，<br>然后通过 sessionStrategy.onAuthentication 执行持久化，也就是保存认证信息，然后转向下一个 Filter，<br>最后调用 successfulAuthentication 执行认证后事件<br>attemptAuthentication 该方法是认证的主要方法，  </p>\n</blockquote>\n<p>认证基本流程为 UserDeatilService 根据用户名获取到用户信息，然后通过 UserDetailsChecker.<br>check 对用户状态进行校验，最后通过 additionalAuthenticationChecks 方法对用户密码进行校验完后认证后，返回一个认证对象</p>\n<h4 id=\"7-DefaultLoginPageGeneratingFilter\"><a href=\"#7-DefaultLoginPageGeneratingFilter\" class=\"headerlink\" title=\"7.    DefaultLoginPageGeneratingFilter\"></a>7.    DefaultLoginPageGeneratingFilter</h4><p>当请求为登录请求时，生成简单的登录页面，可以关闭</p>\n<h4 id=\"8-BasicAuthenticationFilter\"><a href=\"#8-BasicAuthenticationFilter\" class=\"headerlink\" title=\"8.    BasicAuthenticationFilter\"></a>8.    BasicAuthenticationFilter</h4><p>Http Basic 认证的支持，该认证会把用户名密码使用 base64 编码后放入 header 中传输，认证成功后会把用户信息放入 SecurityContextHolder 中</p>\n<h4 id=\"9-RequestCacheAwareFilter\"><a href=\"#9-RequestCacheAwareFilter\" class=\"headerlink\" title=\"9.    RequestCacheAwareFilter\"></a>9.    RequestCacheAwareFilter</h4><p>恢复被打断时的请求</p>\n<h4 id=\"10-SecurityContextHolderAwareRequestFilter\"><a href=\"#10-SecurityContextHolderAwareRequestFilter\" class=\"headerlink\" title=\"10.    SecurityContextHolderAwareRequestFilter\"></a>10.    SecurityContextHolderAwareRequestFilter</h4><p>针对 Servlet api 不同版本做一些包装</p>\n<h4 id=\"11-AnonymousAuthenticationFilter\"><a href=\"#11-AnonymousAuthenticationFilter\" class=\"headerlink\" title=\"11.    AnonymousAuthenticationFilter\"></a>11.    AnonymousAuthenticationFilter</h4><p>SecurityContextHolder 中认证信息为空，则会创建一个匿名用户到 SecurityContextHolder 中</p>\n<h4 id=\"12-SessionManagementFilter\"><a href=\"#12-SessionManagementFilter\" class=\"headerlink\" title=\"12.    SessionManagementFilter\"></a>12.    SessionManagementFilter</h4><p>与登录认证拦截时作用一样，持久化用户登录信息，可以保存到 Session 中，也可以保存到 cookie 或 redis 中</p>\n<h4 id=\"13-ExceptionTranslationFilter\"><a href=\"#13-ExceptionTranslationFilter\" class=\"headerlink\" title=\"13.    ExceptionTranslationFilter\"></a>13.    ExceptionTranslationFilter</h4><p>异常拦截，处于 Filter 链条后部，只能拦截其后面的节点并着重处理 AuthenticationException 与 AccessDeniedException 异常</p>\n<h2 id=\"6-3-认证原理-重点UsernamePasswordAuthenticationFilter\"><a href=\"#6-3-认证原理-重点UsernamePasswordAuthenticationFilter\" class=\"headerlink\" title=\"6.3 认证原理-重点UsernamePasswordAuthenticationFilter\"></a>6.3 认证原理-重点UsernamePasswordAuthenticationFilter</h2><h3 id=\"6-3-1-UsernamePasswordAuthencationFilter源码流程-不带图\"><a href=\"#6-3-1-UsernamePasswordAuthencationFilter源码流程-不带图\" class=\"headerlink\" title=\"6.3.1 UsernamePasswordAuthencationFilter源码流程-不带图\"></a>6.3.1 UsernamePasswordAuthencationFilter源码流程-不带图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、获取到页面的用户名和密码</span><br><span class=\"line\">2、将username和password包装成UsernamePasswordAuthenticationToken</span><br><span class=\"line\">3、获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证</span><br><span class=\"line\">3.1）AuthenticationManager获取ProviderManager来调用ProviderManager.authenticate()</span><br><span class=\"line\">3.2）ProviderManager获取到所有的AuthenticationProvider判断当前的提供者能否支持，如果支持provider.authenticate(authentication);</span><br><span class=\"line\">现在我们DaoAuthenticationProvider（ authentication ：页面封装用户名和密码的对象）</span><br><span class=\"line\">3.2.1）retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);</span><br><span class=\"line\">3.2.1.1）loadedUser = this.getUserDetailsService().loadUserByUsername(username);</span><br><span class=\"line\">（调用我们自己的UserDetailsService来去数据库查用户，按照用户名查出来的用户的详细信息）封装成UserDetails</span><br><span class=\"line\">3.2.2）preAuthenticationChecks.check(user);（预检查，账号是否被锁定等…）</span><br><span class=\"line\">3.2.3）additionalAuthenticationChecks（附加的认证检查）</span><br><span class=\"line\">3.2.3.1）使用passwordEncoder. matches检查页面的密码和数据库的密码是否一致</span><br><span class=\"line\">3.2.4）postAuthenticationChecks.check(user);（后置认证，检查密码是否过期）</span><br><span class=\"line\">3.2.5）createSuccessAuthentication：将认证成功信息重新封装成UsernamePasswordAuthenticationToken</span><br><span class=\"line\">3.3）3.2又返回了一个新的UsernamePasswordAuthenticationToken，然后擦掉密码</span><br><span class=\"line\">4、 eventPublisher.publishAuthenticationSuccess(result);告诉所有监听器认证成功了</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-2-UsernamePasswordAuthencationFilter源码流程-带图\"><a href=\"#6-3-2-UsernamePasswordAuthencationFilter源码流程-带图\" class=\"headerlink\" title=\"6.3.2 UsernamePasswordAuthencationFilter源码流程-带图\"></a>6.3.2 UsernamePasswordAuthencationFilter源码流程-带图</h3><h4 id=\"1-执行过滤器，获取到页面的用户名和密码\"><a href=\"#1-执行过滤器，获取到页面的用户名和密码\" class=\"headerlink\" title=\"1 执行过滤器，获取到页面的用户名和密码\"></a>1 执行过滤器，获取到页面的用户名和密码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class UsernamePasswordAuthenticationFilter extends  AbstractAuthenticationProcessingFilter</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602233802.png\" alt></p>\n<h4 id=\"2-将username和password包装成UsernamePasswordAuthenticationToken\"><a href=\"#2-将username和password包装成UsernamePasswordAuthenticationToken\" class=\"headerlink\" title=\"2 将username和password包装成UsernamePasswordAuthenticationToken\"></a>2 将username和password包装成UsernamePasswordAuthenticationToken</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602233852.png\" alt></p>\n<h4 id=\"3-获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this-getAuthenticationManager-authenticate-authRequest-）\"><a href=\"#3-获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this-getAuthenticationManager-authenticate-authRequest-）\" class=\"headerlink\" title=\"3 获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this.getAuthenticationManager().authenticate(authRequest)）\"></a>3 获取系统的认证管理器（AuthenticationManager）来调用authenticate方法完成认证（this.getAuthenticationManager().authenticate(authRequest)）</h4><p>3.1）、 AuthenticationManager获取ProviderManager来调用ProviderManager.authenticate() </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234003.png\" alt></p>\n<p>3.2）、 ProviderManager获取到所有的AuthenticationProvider判断当前的提供者能否支持，如果支持provider.authenticate(authentication);<br>DaoAuthenticationProvider（ authentication ：页面封装用户名和密码的对象）</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234056.png\" alt></p>\n<ul>\n<li>3.2.1）、retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);</li>\n<li>3.2.1.1）、 loadedUser = this.getUserDetailsService().loadUserByUsername(username);<br>（调用我们自己的UserDetailsService来去数据库查用户，按照用户名查出来的用户的详细信息）封装成UserDetail</li>\n<li>3.2.2）、 preAuthenticationChecks.check(user);（预检查，账号是否被锁定等…）</li>\n<li><p>3.2.3）、 additionalAuthenticationChecks（附加的认证检查）</p>\n<ul>\n<li>3.2.3.1）、使用passwordEncoder. matches检查页面的密码和数据库的密码是否一致</li>\n</ul>\n</li>\n<li><p>3.2.4）、 postAuthenticationChecks.check(user);（后置认证，检查密码是否过期）</p>\n</li>\n<li>3.2.5）、 createSuccessAuthentication：将认证成功的信息重新封装成UsernamePasswordAuthenticationToken</li>\n<li>3.3）、 3.2又返回了一个新的UsernamePasswordAuthenticationToken，然后擦掉密码</li>\n</ul>\n<h4 id=\"4-eventPublisher-publishAuthenticationSuccess-result-认证成功\"><a href=\"#4-eventPublisher-publishAuthenticationSuccess-result-认证成功\" class=\"headerlink\" title=\"4 eventPublisher.publishAuthenticationSuccess(result);认证成功\"></a>4 eventPublisher.publishAuthenticationSuccess(result);认证成功</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234232.png\" alt></p>\n<h4 id=\"5-successfulAuthentication-request-response-chain-authResult\"><a href=\"#5-successfulAuthentication-request-response-chain-authResult\" class=\"headerlink\" title=\"5 successfulAuthentication(request, response, chain, authResult);\"></a>5 successfulAuthentication(request, response, chain, authResult);</h4><ul>\n<li>通过调用 SecurityContextHolder.getContext().setAuthentication(…)  将 Authentication 对象赋给当前的 SecurityContext </li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234259.png\" alt></p>\n<ul>\n<li>org.springframework.security.core.context.SecurityContextHolderStrategy</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234355.png\" alt></p>\n<ul>\n<li>ThreadLocal线程数据绑定</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234517.png\" alt></p>\n<ul>\n<li>SecurityContextHolder.getContext()；就能获取到之前认证好的Authentication对象（UsernamePasswordAuthenticationToken）<h3 id=\"6-3-3-断点参考\"><a href=\"#6-3-3-断点参考\" class=\"headerlink\" title=\"6.3.3 断点参考\"></a>6.3.3 断点参考</h3></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602234721.png\" alt></p>\n<h2 id=\"6-4-认证原理-流程及相关类（API）\"><a href=\"#6-4-认证原理-流程及相关类（API）\" class=\"headerlink\" title=\"6.4 认证原理-流程及相关类（API）\"></a>6.4 认证原理-流程及相关类（API）</h2><p>认证&amp;授权</p>\n<h3 id=\"6-4-1-认证流程\"><a href=\"#6-4-1-认证流程\" class=\"headerlink\" title=\"6.4.1 认证流程\"></a>6.4.1 认证流程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.\t用户使用用户名和密码登录</span><br><span class=\"line\">2.\t用户名密码被过滤器（默认为 UsernamePasswordAuthenticationFilter）获取到，封装成 Authentication（UsernamePasswordAuthenticationToken）</span><br><span class=\"line\">3.\ttoken（Authentication实现类）传递给 AuthenticationManager 进行认证</span><br><span class=\"line\">4.\tAuthenticationManager 认证成功后返回一个封装了用户权限信息的 Authentication 对象</span><br><span class=\"line\">5.\t通过调用 SecurityContextHolder.getContext().setAuthentication(...)  将 Authentication 对象赋给当前的 SecurityContext </span><br><span class=\"line\">6.\t将用户的信息保存到当前线程上，共享起来</span><br><span class=\"line\">7.\tSecurityContextHolder.getContext()；就能获取到之前认证好的Authentication对象（UsernamePasswordAuthenticationToken）</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-2-默认执行顺序\"><a href=\"#6-4-2-默认执行顺序\" class=\"headerlink\" title=\"6.4.2 默认执行顺序\"></a>6.4.2 默认执行顺序</h3><h4 id=\"1-UsernamePasswordAuthenticationFilter\"><a href=\"#1-UsernamePasswordAuthenticationFilter\" class=\"headerlink\" title=\"1 UsernamePasswordAuthenticationFilter\"></a>1 UsernamePasswordAuthenticationFilter</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)\t用户通过url：/login 登录，该过滤器接收表单用户名密码</span><br><span class=\"line\">2)\t判断用户名密码是否为空</span><br><span class=\"line\">3)\t生成 UsernamePasswordAuthenticationToken</span><br><span class=\"line\">4)\t将 Authentiction 传给 AuthenticationManager接口的 authenticate 方法进行认证处理</span><br><span class=\"line\">5)\tAuthenticationManager 默认是实现类为 ProviderManager ，ProviderManager 委托给 AuthenticationProvider 进行处理</span><br><span class=\"line\">6)\tUsernamePasswordAuthenticationFilter 继承了 AbstractAuthenticationProcessingFilter 抽象类，AbstractAuthenticationProcessingFilter 在 successfulAuthentication 方法中对登录成功进行了处理，通过 SecurityContextHolder.getContext().setAuthentication() 方法将 Authentication 认证信息对象绑定到 SecurityContext</span><br><span class=\"line\">7)\t下次请求时，在过滤器链头的 SecurityContextPersistenceFilter 会从 Session 中取出用户信息并生成 Authentication（默认为 UsernamePasswordAuthenticationToken），并通过 SecurityContextHolder.getContext().setAuthentication() 方法将 Authentication 认证信息对象绑定到 SecurityContext</span><br><span class=\"line\">8)\t需要权限才能访问的请求会从 SecurityContext 中获取用户的权限进行验证</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-DaoAuthenticationProvider（实现了-AuthenticationProvider）\"><a href=\"#2-DaoAuthenticationProvider（实现了-AuthenticationProvider）\" class=\"headerlink\" title=\"2 DaoAuthenticationProvider（实现了 AuthenticationProvider）\"></a>2 DaoAuthenticationProvider（实现了 AuthenticationProvider）</h4><ul>\n<li>通过 UserDetailsService 获取 UserDetails</li>\n<li>将 UserDetails 和 UsernamePasswordAuthenticationToken 进行认证匹配用户名密码是否正确</li>\n<li>若正确则通过 UserDetails 中用户的权限、用户名等信息生成新的 Authentication 认证对象并返回</li>\n</ul>\n<h3 id=\"6-4-3-相关类\"><a href=\"#6-4-3-相关类\" class=\"headerlink\" title=\"6.4.3 相关类\"></a>6.4.3 相关类</h3><h4 id=\"1-WebSecurityConfigurerAdapter\"><a href=\"#1-WebSecurityConfigurerAdapter\" class=\"headerlink\" title=\"1.    WebSecurityConfigurerAdapter\"></a>1.    WebSecurityConfigurerAdapter</h4><ul>\n<li>为创建 WebSecurityConfigurer 实例提供方便的基类，重写它的 configure 方法来设置安全细节</li>\n<li>configure(HttpSecurity http)：重写该方法，通过 http 对象的 authorizeRequests()方法定义URL访问权限，默认会为 formLogin() 提供一个简单的测试HTML页面</li>\n<li>configure (AuthenticationManagerBuilder auth)：通过 auth 对象的方法添加身份验证<h4 id=\"2-SecurityContextHolder\"><a href=\"#2-SecurityContextHolder\" class=\"headerlink\" title=\"2.    SecurityContextHolder\"></a>2.    SecurityContextHolder</h4></li>\n<li>SecurityContextHolder 用于存储安全上下文信息（如操作用户是谁、用户是否被认证、用户权限有哪些），它用 ThreadLocal 来保存 SecurityContext，者意味着 Spring Security 在用户登录时自动绑定到当前现场，用户退出时，自动清除当前线程认证信息，SecurityContext 中含有正在访问系统用户的详细信息</li>\n</ul>\n<h3 id=\"3-AuthenticationManagerBuilder\"><a href=\"#3-AuthenticationManagerBuilder\" class=\"headerlink\" title=\"3.    AuthenticationManagerBuilder\"></a>3.    AuthenticationManagerBuilder</h3><ul>\n<li>用于构建认证 AuthenticationManager 认证，允许快速构建内存认证、LDAP身份认证、JDBC身份验证，添加 userDetailsService（获取认证信息数据） 和 AuthenticationProvider’s（定义认证方式）</li>\n</ul>\n<h4 id=\"4-UserDetailsService\"><a href=\"#4-UserDetailsService\" class=\"headerlink\" title=\"4.    UserDetailsService\"></a>4.    UserDetailsService</h4><p>该接口仅有一个方法 loadUserByUsername，Spring Security 通过该方法获取用户信息</p>\n<h4 id=\"5-UserDetails\"><a href=\"#5-UserDetails\" class=\"headerlink\" title=\"5.    UserDetails\"></a>5.    UserDetails</h4><ul>\n<li>代表了Spring Security的用户实体类，带有用户名、密码、权限特性等性质，可以自己实现该接口，供 Spring Security 安全认证使用，Spring Security 默认使用的是内置的 User 类</li>\n<li>将从数据库获取的 User 对象传入实现该接口的类，并获取 User 对象的值来让类实现该接口的方法</li>\n<li>通过 Authentication.getPrincipal() 的返回类型是 Object，但很多情况下其返回的其实是一个 UserDetails 的实例 </li>\n</ul>\n<h4 id=\"6-Authentication\"><a href=\"#6-Authentication\" class=\"headerlink\" title=\"6.    Authentication\"></a>6.    Authentication</h4><p>Authentication 是一个接口，用来表示用户认证信息，在用户登录认证之前相关信息（用户传过来的用户名密码）会封装为一个 Authentication 具体实现类对象，默认情况下为 UsernamePasswordAuthenticationToken，登录之后（通过AuthenticationManager认证）会生成一个更详细的、包含权限的对象，然后把它保存在权限线程本地的 SecurityContext 中，供后续权限鉴定用<br>Authentication.principal可以获取到已经认证的用户详细信息<br> UsernamePasswordAuthenticationToken （密码被擦除，authenticated=true）</p>\n<h4 id=\"7-GrantedAuthority\"><a href=\"#7-GrantedAuthority\" class=\"headerlink\" title=\"7.    GrantedAuthority\"></a>7.    GrantedAuthority</h4><p>GrantedAuthority 是一个接口，它定义了一个 getAuthorities() 方法返回当前 Authentication 对象的拥有权限字符串，用户有权限是一个 GrantedAuthority 数组，每一个 GrantedAuthority 对象代表一种用户权限</p>\n<h4 id=\"8-AuthenticationManager\"><a href=\"#8-AuthenticationManager\" class=\"headerlink\" title=\"8.    AuthenticationManager\"></a>8.    AuthenticationManager</h4><ul>\n<li>AuthenticationManager 是用来处理认证请求的接口，它只有一个方法 authenticate()，该方法接收一个 Authentication 作为对象，如果认证成功则返回一个封装了当前用户权限信息的 Authentication 对象进行返回</li>\n<li>它默认的实现是 ProviderManager，但它不处理认证请求，而是将委托给 AuthenticationProvider 列表，然后依次使用 AuthenticationProvider 进行认证，如果有一个 AuthenticationProvider 认证的结果不为null，则表示成功（否则失败，抛出 ProviderNotFoundException），之后不在进行其它 AuthenticationProvider 认证，并作为结果保存在 ProviderManager</li>\n<li>认证校验时最常用的方式就是通过用户名加载 UserDetails，然后比较 UserDetails 密码与请求认证是否一致，一致则通过，Security 内部的 DaoAuthenticationProvider 就是使用这种方式</li>\n<li>认证成功后加载 UserDetails 来封装要返回的 Authentication 对象，加载的 UserDetails 对象是包含用户权限等信息的。认证成功返回的 Authentication 对象将会保存在当前的 SecurityContext 中 </li>\n</ul>\n<h4 id=\"9-AuthenticationProvider\"><a href=\"#9-AuthenticationProvider\" class=\"headerlink\" title=\"9.    AuthenticationProvider\"></a>9.    AuthenticationProvider</h4><ul>\n<li>AuthenticationProvider 是一个身份认证接口，实现该接口来定制自己的认证方式，可通过 UserDetailsSevice 对获取数据库中的数据</li>\n<li>该接口中有两个需要实现的方法：</li>\n<li>Authentication authenticate(Authentication authentication)：认证处理，返回一个 Authentication 的实现类则代表成功，返回 null 则为认证失败</li>\n<li>supports(Class&lt;?&gt; aClass)：如果该 AuthenticationProvider 支持传入的 Authentication 认证对象，则返回 true ，如：return aClass.equals(UsernamePasswordAuthenticationToken.class); </li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190602235552.png\" alt></p>\n<h4 id=\"10-AuthorityUtils\"><a href=\"#10-AuthorityUtils\" class=\"headerlink\" title=\"10.    AuthorityUtils\"></a>10.    AuthorityUtils</h4><p>是一个工具包，用于操作 GrantedAuthority 集合的实用方法：<br>commaSeparatedStringToAuthorityList(String authorityString)：从逗号分隔符中创建 GrantedAuthority 对象数组，帮我们快速创建出权限的集合</p>\n<h4 id=\"11-AbstractAuthenticationProcessingFilter\"><a href=\"#11-AbstractAuthenticationProcessingFilter\" class=\"headerlink\" title=\"11.    AbstractAuthenticationProcessingFilter\"></a>11.    AbstractAuthenticationProcessingFilter</h4><ul>\n<li>该抽象类继承了 GenericFilterBean，是处理 form 登录的过滤器，与 form 登录相关的所有操作都在该抽象类的子类中进行（UsernamePasswordAuthenticationFilter 为其子类），比如获取表单中的用户名、密码，然后进行认证等操作</li>\n<li>该类在 doFilter 方法中通过 attemptAuthentication() 方法进行用户信息逻辑认证，认证成功会将用户信息设置到 Session 中</li>\n</ul>\n<h4 id=\"12-HttpSecurity\"><a href=\"#12-HttpSecurity\" class=\"headerlink\" title=\"12.    HttpSecurity\"></a>12.    HttpSecurity</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用于配置全局 Http 请求的权限控制规则，对哪些请求进行验证、不验证等</span><br><span class=\"line\">常用方法：</span><br><span class=\"line\">authorizeRequests()：返回一个配置对象用于配置请求的访问限制</span><br><span class=\"line\">formLogin()：返回表单配置对象，当什么都不指定时会提供一个默认的，如配置登录请求，还有登录成功页面</span><br><span class=\"line\">logout()：返回登出配置对象，可通过logoutUrl设置退出url</span><br><span class=\"line\">antMatchers：匹配请求路径或请求动作类型，如：.antMatchers(&quot;/admin/**&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">addFilterBefore: 在某过滤器之前添加 filter</span><br><span class=\"line\">addFilterAfter：在某过滤器之后添加 filter</span><br><span class=\"line\">addFilterAt：在某过滤器相同位置添加 filter，不会覆盖相同位置的 filter</span><br><span class=\"line\">hasRole：结合 antMatchers 一起使用，设置请求允许访问的角色权限或IP，如：</span><br><span class=\"line\">.antMatchers(&quot;/admin/**&quot;).hasAnyRole(&quot;ROLE_ADMIN&quot;,&quot;ROLE_USER&quot;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access(String)        </span><br><span class=\"line\"></span><br><span class=\"line\">SpringEL表达式结果为true时可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">anonymous()        </span><br><span class=\"line\"></span><br><span class=\"line\">匿名可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">denyAll()        </span><br><span class=\"line\"></span><br><span class=\"line\">用户不可以访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fullyAuthenticated()        </span><br><span class=\"line\"></span><br><span class=\"line\">用户完全认证访问（非remember me下自动登录）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hasAnyAuthority(String…)        </span><br><span class=\"line\"></span><br><span class=\"line\">参数中任意权限可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hasAnyRole(String…)        </span><br><span class=\"line\"></span><br><span class=\"line\">参数中任意角色可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hasAuthority(String)        </span><br><span class=\"line\"></span><br><span class=\"line\">某一权限的用户可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hasRole(String)        </span><br><span class=\"line\"></span><br><span class=\"line\">某一角色的用户可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">permitAll()        </span><br><span class=\"line\"></span><br><span class=\"line\">所有用户可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">rememberMe()        </span><br><span class=\"line\"></span><br><span class=\"line\">允许通过remember me登录的用户访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">authenticated()        </span><br><span class=\"line\"></span><br><span class=\"line\">用户登录后可访问</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hasIpAddress(String)        </span><br><span class=\"line\"></span><br><span class=\"line\">用户来自参数中的IP可访问</span><br></pre></td></tr></table></figure>\n<h4 id=\"13-PasswordEncoder\"><a href=\"#13-PasswordEncoder\" class=\"headerlink\" title=\"13.    PasswordEncoder\"></a>13.    PasswordEncoder</h4><p>Spring 提供的一个用于对密码加密的接口，首选实现类为 BCryptPasswordEncoder </p>\n<h4 id=\"14-BCryptPasswordEncoder\"><a href=\"#14-BCryptPasswordEncoder\" class=\"headerlink\" title=\"14.    BCryptPasswordEncoder\"></a>14.    BCryptPasswordEncoder</h4><p>spring security中的BCryptPasswordEncoder方法采用SHA-256 +随机盐+密钥  对密码进行加密。SHA系列是Hash算法，不是加密算法，使用加密算法意味着可以解密（这个与编码/解码一样），但是采用Hash处理，其过程是不可逆的。</p>\n<ul>\n<li>（1）加密(encode)：注册用户时，使用SHA-256+随机盐+密钥把用户输入的密码进行hash处理，得到密码的hash值，然后将其存入数据库中。</li>\n<li>（2）密码匹配(matches)：用户登录时，密码匹配阶段并没有进行密码解密（因为密码经过Hash处理，是不可逆的），而是使用相同的算法把用户输入的密码进行hash处理，得到密码的hash值，然后将其与从数据库中查询到的密码hash值进行比较。如果两者相同，说明用户输入的密码正确。<br>这正是为什么处理密码时要用hash算法，而不用加密算法。因为这样处理即使数据库泄漏，黑客也很难破解密码</li>\n</ul>\n<h2 id=\"6-5-授权原理-AOP-MethodSecurityInterceptor\"><a href=\"#6-5-授权原理-AOP-MethodSecurityInterceptor\" class=\"headerlink\" title=\"6.5 授权原理-AOP-MethodSecurityInterceptor\"></a>6.5 授权原理-AOP-MethodSecurityInterceptor</h2><p>MethodSecurityInterceptor（基于AOP模式进行权限检查）</p>\n<ul>\n<li>授权（权限检查机制）采用AOP机制：<br>org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor</li>\n<li>方法执行前org.springframework.security.access.AccessDecisionManager通过投票机制决定这个方法是否可以被执行</li>\n</ul>\n<h3 id=\"6-5-1-例如\"><a href=\"#6-5-1-例如\" class=\"headerlink\" title=\"6.5.1 例如\"></a>6.5.1 例如</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PreAuthorize(value=&quot;hasRole(&apos;学徒&apos;) AND hasAuthority(&apos;luohan&apos;)&quot;)</span><br><span class=\"line\">@GetMapping(&quot;/level1/1&quot;)</span><br><span class=\"line\">public String leve1Page1()&#123;</span><br><span class=\"line\">return &quot;/level1/1&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-5-2-拦截器invoke方法\"><a href=\"#6-5-2-拦截器invoke方法\" class=\"headerlink\" title=\"6.5.2 拦截器invoke方法\"></a>6.5.2 拦截器invoke方法</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000014.png\" alt></p>\n<h3 id=\"6-5-3-支持各种功能的投票器\"><a href=\"#6-5-3-支持各种功能的投票器\" class=\"headerlink\" title=\"6.5.3 支持各种功能的投票器\"></a>6.5.3 支持各种功能的投票器</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000037.png\" alt></p>\n<h3 id=\"6-5-4-投票器标识\"><a href=\"#6-5-4-投票器标识\" class=\"headerlink\" title=\"6.5.4 投票器标识\"></a>6.5.4 投票器标识</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000117.png\" alt></p>\n<h3 id=\"6-5-5-AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作：\"><a href=\"#6-5-5-AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作：\" class=\"headerlink\" title=\"6.5.5 AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作：\"></a>6.5.5 AccessDecisionManager利用系统中AccessDecisionVoter（投票器）进行授权操作：</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603000139.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）AffirmativeBased：有一个拒绝都不行</span><br><span class=\"line\">2）ConsensusBased：赞成票数大于拒绝即可</span><br><span class=\"line\">3）UnanimousBased：至少有一个赞成，不能全弃权和任何一个拒绝</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["使用过的开源框架"]},{"title":"前端_Bootstrap框架概述","url":"http://yoursite.com/2018/04/04/67. 前端_Bootstrap框架概述/","content":"<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><ul>\n<li>基本页面开发</li>\n<li>了解相关组件</li>\n<li>字体图标</li>\n<li>模态窗口</li>\n<li>表单</li>\n<li>…</li>\n</ul>\n<h1 id=\"第一章-介绍\"><a href=\"#第一章-介绍\" class=\"headerlink\" title=\"第一章 介绍\"></a>第一章 介绍</h1><h2 id=\"1-1-简介\"><a href=\"#1-1-简介\" class=\"headerlink\" title=\"1.1 简介\"></a>1.1 简介</h2><ul>\n<li>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。</li>\n<li>Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。 </li>\n<li>为什么使用 Bootstrap？<ul>\n<li>1、移动设备优先：自 Bootstrap 3 起，框架包含了贯穿于整个库的移动设备优先的样式。</li>\n<li>2、浏览器支持：所有的主流浏览器都支持 Bootstrap。</li>\n</ul>\n</li>\n<li>Internet Explorer、 Firefox 、Opera 、Google Chrome、 Safari <ul>\n<li>3、容易上手：只要您具备 HTML 和 CSS 的基础知识，您就可以开始学习 Bootstrap。</li>\n<li>4、响应式设计：Bootstrap 的响应式 CSS 能够自适应于台式机、平板电脑和手机。更多有关响应式设计的内容详见 Bootstrap 响应式设计。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-2-HelloWorld-响应式布局\"><a href=\"#1-2-HelloWorld-响应式布局\" class=\"headerlink\" title=\"1.2 HelloWorld(响应式布局)\"></a>1.2 HelloWorld(响应式布局)</h2><h3 id=\"1-2-1-下载和导入bootstrap框架\"><a href=\"#1-2-1-下载和导入bootstrap框架\" class=\"headerlink\" title=\"1.2.1 下载和导入bootstrap框架\"></a>1.2.1 下载和导入bootstrap框架</h3><h3 id=\"1-2-2-显示案例\"><a href=\"#1-2-2-显示案例\" class=\"headerlink\" title=\"1.2.2 显示案例\"></a>1.2.2 显示案例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;title&gt;Bootstrap 实例&lt;/title&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;  </span><br><span class=\"line\">  &lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt; </span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;jumbotron&quot;&gt;&lt;!--超大屏幕--&gt;</span><br><span class=\"line\">    &lt;h1&gt;我的第一个 Bootstrap 页面&lt;/h1&gt;</span><br><span class=\"line\">    &lt;p&gt;重置窗口大小，查看响应式效果！&lt;/p&gt; </span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class=\"line\">      &lt;h3&gt;第一列&lt;/h3&gt;</span><br><span class=\"line\">      &lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class=\"line\">      &lt;h3&gt;第二列&lt;/h3&gt;</span><br><span class=\"line\">      &lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;col-sm-4&quot;&gt;</span><br><span class=\"line\">      &lt;h3&gt;第三列&lt;/h3&gt;        </span><br><span class=\"line\">      &lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt; </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第二章-bootstrap基本使用\"><a href=\"#第二章-bootstrap基本使用\" class=\"headerlink\" title=\"第二章 bootstrap基本使用\"></a>第二章 bootstrap基本使用</h1><h2 id=\"2-1-表格\"><a href=\"#2-1-表格\" class=\"headerlink\" title=\"2.1 表格\"></a>2.1 表格</h2><p><a href=\"https://v3.bootcss.com/css/#tables\" target=\"_blank\" rel=\"noopener\">https://v3.bootcss.com/css/#tables</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205611.png\" alt></p>\n<h2 id=\"2-2-表单\"><a href=\"#2-2-表单\" class=\"headerlink\" title=\"2.2 表单\"></a>2.2 表单</h2><p><a href=\"https://v3.bootcss.com/css/?#forms\" target=\"_blank\" rel=\"noopener\">https://v3.bootcss.com/css/?#forms</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205744.png\" alt></p>\n<h2 id=\"2-3-按钮\"><a href=\"#2-3-按钮\" class=\"headerlink\" title=\"2.3 按钮\"></a>2.3 按钮</h2><p><a href=\"https://v3.bootcss.com/css/?#buttons\" target=\"_blank\" rel=\"noopener\">https://v3.bootcss.com/css/?#buttons</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205813.png\" alt></p>\n<h2 id=\"2-4-图标\"><a href=\"#2-4-图标\" class=\"headerlink\" title=\"2.4 图标\"></a>2.4 图标</h2><p><a href=\"https://v3.bootcss.com/components/#glyphicons-examples\" target=\"_blank\" rel=\"noopener\">https://v3.bootcss.com/components/#glyphicons-examples</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205836.png\" alt></p>\n<h2 id=\"2-5-栅-shan-格系统\"><a href=\"#2-5-栅-shan-格系统\" class=\"headerlink\" title=\"2.5 栅(shan)格系统\"></a>2.5 栅(shan)格系统</h2><ul>\n<li>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</li>\n<li>它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局。</li>\n</ul>\n<p><a href=\"https://v3.bootcss.com/css/\" target=\"_blank\" rel=\"noopener\">https://v3.bootcss.com/css/</a> </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205911.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608205949.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 原生页面写好，导入框架，只需要给相应的元素加上相应的class值就会有相应的效果 --&gt;</span><br><span class=\"line\">&lt;!-- 所有东西都放在这个容器中，容器就是大网格 --&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;jumbotron&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;我的第一个 Bootstrap 页面&lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;p&gt;重置窗口大小，查看响应式效果！&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;button id=&quot;btn01&quot; class=&quot;btn btn-primary&quot;&gt;哈哈&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t&lt;!-- 里面的东西放在一行 --&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;row&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;col-xs-12 col-sm-4 col-md-6&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;h3&gt;第一列&lt;/h3&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;col-xs-12 col-sm-4 col-md-6&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;h3&gt;第二列&lt;/h3&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;col-xs-12 col-sm-4 col-md-6&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;h3&gt;第三列&lt;/h3&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;学的不仅是技术，更是梦想！&lt;/p&gt;</span><br><span class=\"line\">\t\t\t&lt;p&gt;再牛逼的梦想,也抵不住你傻逼似的坚持！&lt;/p&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6-导航\"><a href=\"#2-6-导航\" class=\"headerlink\" title=\"2.6 导航\"></a>2.6 导航</h2><p><a href=\"https://v3.bootcss.com/components/#navbar-default\" target=\"_blank\" rel=\"noopener\">https://v3.bootcss.com/components/#navbar-default</a></p>\n<h2 id=\"2-7-分页\"><a href=\"#2-7-分页\" class=\"headerlink\" title=\"2.7 分页\"></a>2.7 分页</h2><p><a href=\"https://v3.bootcss.com/components/#pagination\" target=\"_blank\" rel=\"noopener\">https://v3.bootcss.com/components/#pagination</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210226.png\" alt></p>\n<h1 id=\"第三章-Layer弹层插件\"><a href=\"#第三章-Layer弹层插件\" class=\"headerlink\" title=\"第三章 Layer弹层插件\"></a>第三章 Layer弹层插件</h1><h2 id=\"3-1-介绍\"><a href=\"#3-1-介绍\" class=\"headerlink\" title=\"3.1 介绍\"></a>3.1 介绍</h2><blockquote>\n<p>layer是一款近年来备受青睐的web弹层组件，她具备全方位的解决方案，致力于服务各水平段的开发人员，您的页面会轻松地拥有丰富友好的操作体验。</p>\n</blockquote>\n<h2 id=\"3-2-下载\"><a href=\"#3-2-下载\" class=\"headerlink\" title=\"3.2 下载\"></a>3.2 下载</h2><p><a href=\"http://layer.layui.com/hello.html\" target=\"_blank\" rel=\"noopener\">http://layer.layui.com/hello.html</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;开始使用layer&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt; </span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script src=&quot;jQuery的路径&quot;&gt;&lt;/script&gt; &lt;!-- 你必须先引入jQuery1.8或以上版本 --&gt;</span><br><span class=\"line\">  &lt;script src=&quot;layer.js的路径&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  //弹出一个提示层</span><br><span class=\"line\">  $(&apos;#test1&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    layer.msg(&apos;hello&apos;);</span><br><span class=\"line\">  &#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">  //弹出一个页面层</span><br><span class=\"line\">  $(&apos;#test2&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    layer.open(&#123;</span><br><span class=\"line\">      type: 1,</span><br><span class=\"line\">      area: [&apos;600px&apos;, &apos;360px&apos;],</span><br><span class=\"line\">      shadeClose: true, //点击遮罩关闭</span><br><span class=\"line\">      content: &apos;\\&lt;\\div style=&quot;padding:20px;&quot;&gt;自定义内容\\&lt;\\/div&gt;&apos;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">  //弹出一个loading层</span><br><span class=\"line\">  $(&apos;#test4&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    var ii = layer.load();</span><br><span class=\"line\">    //此处用setTimeout演示ajax的回调</span><br><span class=\"line\">    setTimeout(function()&#123;</span><br><span class=\"line\">      layer.close(ii);</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">  &#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">  //弹出一个tips层</span><br><span class=\"line\">  $(&apos;#test5&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class=\"line\">    layer.tips(&apos;Hello tips!&apos;, &apos;#test5&apos;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-不同的浏览器显示的提示框样子不同-不统一\"><a href=\"#3-3-不同的浏览器显示的提示框样子不同-不统一\" class=\"headerlink\" title=\"3.3 不同的浏览器显示的提示框样子不同,不统一.\"></a>3.3 不同的浏览器显示的提示框样子不同,不统一.</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210420.png\" alt></p>\n<h2 id=\"3-4-常用的弹层：\"><a href=\"#3-4-常用的弹层：\" class=\"headerlink\" title=\"3.4 常用的弹层：\"></a>3.4 常用的弹层：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layer-v3.0.1.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-1-提示\"><a href=\"#3-4-1-提示\" class=\"headerlink\" title=\"3.4.1 提示\"></a>3.4.1 提示</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layer.msg(提示信息, &#123;time:1000, icon:5, shift:6&#125;, 回调方法); //弹出时间，图标，特效</span><br><span class=\"line\">layer.alert(提示信息, function(index)&#123;</span><br><span class=\"line\">// 回调方法</span><br><span class=\"line\">layer.close(index);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-2-询问\"><a href=\"#3-4-2-询问\" class=\"headerlink\" title=\"3.4.2 询问\"></a>3.4.2 询问</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layer.confirm(&quot;询问信息&quot;,  &#123;icon: 3, title:&apos;提示&apos;&#125;, function(cindex)&#123;</span><br><span class=\"line\">layer.close(cindex);</span><br><span class=\"line\">&#125;, function(cindex)&#123;</span><br><span class=\"line\">layer.close(cindex);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-3-加载\"><a href=\"#3-4-3-加载\" class=\"headerlink\" title=\"3.4.3 加载\"></a>3.4.3 加载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loadingIndex = layer.msg(&apos;处理中&apos;, &#123;icon: 16&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\">layer.close(loadingIndex); </span><br><span class=\"line\">var index = layer.load(2, &#123;time: 10*1000&#125;);</span><br><span class=\"line\">layer.close(index);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-小图标\"><a href=\"#3-5-小图标\" class=\"headerlink\" title=\"3.5 小图标\"></a>3.5 小图标</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time:1000 显示时间</span><br><span class=\"line\">icon:5 图标</span><br><span class=\"line\">shift:6  抖动效果</span><br><span class=\"line\">icon.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210719.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210811.png\" alt></p>\n<h2 id=\"3-6-使用layer弹层完成提示消息\"><a href=\"#3-6-使用layer弹层完成提示消息\" class=\"headerlink\" title=\"3.6 使用layer弹层完成提示消息\"></a>3.6 使用layer弹层完成提示消息</h2><h3 id=\"3-6-1-拷贝组件到项目中\"><a href=\"#3-6-1-拷贝组件到项目中\" class=\"headerlink\" title=\"3.6.1 拷贝组件到项目中\"></a>3.6.1 拷贝组件到项目中</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608210903.png\" alt></p>\n<h3 id=\"3-6-2-在页面中引用组件-WEB-INF-jsp-login-jsp\"><a href=\"#3-6-2-在页面中引用组件-WEB-INF-jsp-login-jsp\" class=\"headerlink\" title=\"3.6.2 在页面中引用组件/WEB-INF/jsp/login.jsp\"></a>3.6.2 在页面中引用组件/WEB-INF/jsp/login.jsp</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;$&#123;APP_PATH&#125;/jquery/layer/layer.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-6-3-代码参考\"><a href=\"#3-6-3-代码参考\" class=\"headerlink\" title=\"3.6.3 代码参考\"></a>3.6.3 代码参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(loginacct.val() == &quot;&quot;)&#123;</span><br><span class=\"line\">            //alert(&quot;登录账号不能为空,请重新输入!&quot;);//alert,confirm方法会暂停UI线程</span><br><span class=\"line\">            layer.msg(&quot;登录账号不能为空,请重新输入!&quot;, &#123;time:2000, icon:5, shift:6&#125;, function()&#123;</span><br><span class=\"line\">                    loginacct.focus();</span><br><span class=\"line\">                    //return ; 只是返回当前回调函数，单击事件函数并没有返回，代码继续往下执行</span><br><span class=\"line\">            &#125;); //弹出时间，图标，特效                    </span><br><span class=\"line\">            return ;//单击事件函数返回</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["使用过的开源框架"]},{"title":"分布式系统整体解决方案_Spring Cloud框架","url":"http://yoursite.com/2018/04/01/66. 分布式系统整体解决方案_Spring Cloud框架/","content":"<h1 id=\"第一章-SpringCloud介绍\"><a href=\"#第一章-SpringCloud介绍\" class=\"headerlink\" title=\"第一章 SpringCloud介绍\"></a>第一章 SpringCloud介绍</h1><h2 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h2><ul>\n<li>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</li>\n<li>“微服务架构”在这几年非常的火热，以至于关于微服务架构相关的开源产品被反复的提及（比如：netflix、dubbo），Spring Cloud也因Spring社区的强大知名度和影响力也被广大架构师与开发者备受关注。</li>\n<li>那么什么是“微服务架构”呢？简单的说，微服务架构就是将一个完整的应用从数据存储开始垂直拆分成多个不同的服务，每个服务都能独立部署、独立维护、独立扩展，服务与服务间通过诸如RESTful API的方式互相调用。</li>\n</ul>\n<h2 id=\"1-2-为什么使用Spring-Cloud？\"><a href=\"#1-2-为什么使用Spring-Cloud？\" class=\"headerlink\" title=\"1.2 为什么使用Spring Cloud？\"></a>1.2 为什么使用Spring Cloud？</h2><p>Spring Cloud对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用Spring Cloud一站式解决方案能在从容应对业务发展的同时大大减少开发成本。同时，随着近几年微服务架构和Docker容器概念的火爆，也会让Spring Cloud在未来越来越“云”化的软件开发风格中立有一席之地，尤其是在目前五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能会堪比当前Servlet规范的诞生，有效推进服务端软件系统技术水平的进步。</p>\n<h2 id=\"1-3-应用Spring-Cloud\"><a href=\"#1-3-应用Spring-Cloud\" class=\"headerlink\" title=\"1.3 应用Spring Cloud\"></a>1.3 应用Spring Cloud</h2><blockquote>\n<p>Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。 </p>\n</blockquote>\n<h2 id=\"1-4-Spring-Cloud是分布式系统的整体解决方案\"><a href=\"#1-4-Spring-Cloud是分布式系统的整体解决方案\" class=\"headerlink\" title=\"1.4 Spring Cloud是分布式系统的整体解决方案\"></a>1.4 Spring Cloud是分布式系统的整体解决方案</h2><ul>\n<li>SpringBoot&amp;Spring什么关系？<br>SpringBoot底层就是Spring，简化使用Spring的方式而已，多加了好多的自动配置； </li>\n<li>Spring Cloud&amp;SpringBoot什么关系？<br>Spring Cloud是分布式系统的整体解决方案，底层用的SpringBoot来构建项目，Cloud新增很多的分布式的starter，包括这些starter的自动配置；<h2 id=\"1-5-官方网站\"><a href=\"#1-5-官方网站\" class=\"headerlink\" title=\"1.5 官方网站\"></a>1.5 官方网站</h2><a href=\"http://spring.io/projects\" target=\"_blank\" rel=\"noopener\">http://spring.io/projects</a><br><a href=\"https://projects.spring.io/spring-cloud/#quick-start\" target=\"_blank\" rel=\"noopener\">https://projects.spring.io/spring-cloud/#quick-start</a><br><a href=\"https://springcloud.cc/\" target=\"_blank\" rel=\"noopener\">https://springcloud.cc/</a><h1 id=\"第二章-SpringCloud-HelloWorld架构图\"><a href=\"#第二章-SpringCloud-HelloWorld架构图\" class=\"headerlink\" title=\"第二章 SpringCloud-HelloWorld架构图\"></a>第二章 SpringCloud-HelloWorld架构图</h1><h2 id=\"2-1-案例图解\"><a href=\"#2-1-案例图解\" class=\"headerlink\" title=\"2.1 案例图解\"></a>2.1 案例图解</h2></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531105740.png\" alt></p>\n<p>默认使用轮询策略</p>\n<h2 id=\"2-2-注册中心\"><a href=\"#2-2-注册中心\" class=\"headerlink\" title=\"2.2 注册中心\"></a>2.2 注册中心</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531105823.png\" alt></p>\n<p>配置Region和Zone</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531105853.png\" alt></p>\n<blockquote>\n<p>Region和Zone就相当于大区和机房，一个Region（大区）可以有很多的Zone（机房）<br>。在Spring Cloud中，服务消费者会优先查找在同一个Zone的服务，之后在去查找其他的服务。<br>如果该项配置使用的好，那么项目请求的响应时间将大大缩短！</p>\n</blockquote>\n<h1 id=\"第三章-SpringCloud-HelloWorld案例开发-注册中心\"><a href=\"#第三章-SpringCloud-HelloWorld案例开发-注册中心\" class=\"headerlink\" title=\"第三章 SpringCloud-HelloWorld案例开发-注册中心\"></a>第三章 SpringCloud-HelloWorld案例开发-注册中心</h1><h2 id=\"3-1-注册中心\"><a href=\"#3-1-注册中心\" class=\"headerlink\" title=\"3.1 注册中心\"></a>3.1 注册中心</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（Eureka , jar工程）-cloud-eureka-registry-center</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-1-引入eureka-server\"><a href=\"#3-1-1-引入eureka-server\" class=\"headerlink\" title=\"3.1.1 引入eureka-server\"></a>3.1.1 引入eureka-server</h3><h3 id=\"3-1-2-编写application-yml\"><a href=\"#3-1-2-编写application-yml\" class=\"headerlink\" title=\"3.1.2 编写application.yml\"></a>3.1.2 编写application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: cloud-eureka-registry-center</span><br><span class=\"line\"> </span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8761</span><br><span class=\"line\"></span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    hostname: localhost</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    register-with-eureka: false #自己就是注册中心，不用注册自己</span><br><span class=\"line\">    fetch-registry: false #要不要去注册中心获取其他服务的地址</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">       defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure>\n<p>多服务的话需要 etch-registry: true    A获取B的服务列表</p>\n<h3 id=\"3-1-3-开启Eureka注册中心功能；-EnableEurekaServer-启用注册中心服务器\"><a href=\"#3-1-3-开启Eureka注册中心功能；-EnableEurekaServer-启用注册中心服务器\" class=\"headerlink\" title=\"3.1.3 开启Eureka注册中心功能；@EnableEurekaServer 启用注册中心服务器\"></a>3.1.3 开启Eureka注册中心功能；@EnableEurekaServer 启用注册中心服务器</h3><h2 id=\"3-1-4-测试\"><a href=\"#3-1-4-测试\" class=\"headerlink\" title=\"3.1.4 测试\"></a>3.1.4 测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boot Dashboard视图启动</span><br><span class=\"line\">访问http://localhost:8761</span><br></pre></td></tr></table></figure>\n<h1 id=\"第四章-SpringCloud-HelloWorld案例开发-电影服务\"><a href=\"#第四章-SpringCloud-HelloWorld案例开发-电影服务\" class=\"headerlink\" title=\"第四章 SpringCloud-HelloWorld案例开发-电影服务\"></a>第四章 SpringCloud-HelloWorld案例开发-电影服务</h1><h2 id=\"4-1-电影服务\"><a href=\"#4-1-电影服务\" class=\"headerlink\" title=\"4.1 电影服务\"></a>4.1 电影服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（jar工程，提供查询电影功能）cloud-provider-movie</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-1-引入eureka-Discovery、web模块\"><a href=\"#4-1-1-引入eureka-Discovery、web模块\" class=\"headerlink\" title=\"4.1.1 引入eureka-Discovery、web模块\"></a>4.1.1 引入eureka-Discovery、web模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-1-2-创建Movie实体类-增加id-movieName属性\"><a href=\"#4-1-2-创建Movie实体类-增加id-movieName属性\" class=\"headerlink\" title=\"4.1.2 创建Movie实体类,增加id,movieName属性\"></a>4.1.2 创建Movie实体类,增加id,movieName属性</h2><h2 id=\"4-1-3-创建MovieDao\"><a href=\"#4-1-3-创建MovieDao\" class=\"headerlink\" title=\"4.1.3 创建MovieDao\"></a>4.1.3 创建MovieDao</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public class MovieDao &#123;</span><br><span class=\"line\">public Movie getNewMovie()&#123;</span><br><span class=\"line\">Movie movie = new Movie();</span><br><span class=\"line\">movie.setId(1);</span><br><span class=\"line\">movie.setMovieName(&quot;战狼&quot;);</span><br><span class=\"line\">return movie; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">4.1.4 创建MovieService</span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class MovieService &#123; </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">MovieDao movieDao; </span><br><span class=\"line\">public Movie getNewMovie()&#123;</span><br><span class=\"line\">return movieDao.getNewMovie();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">4.1.5 创建MovieController</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class MovieController &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">MovieService movieService;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\">   * 获取最新电影</span><br><span class=\"line\">   */</span><br><span class=\"line\">@GetMapping(&quot;/movie&quot;)</span><br><span class=\"line\">public Movie getNewMovie()&#123;</span><br><span class=\"line\">return movieService.getNewMovie();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-6-启动测试\"><a href=\"#4-1-6-启动测试\" class=\"headerlink\" title=\"4.1.6 启动测试\"></a>4.1.6 启动测试</h3><p><a href=\"http://localhost:8080，与注册中心无关，注册中心无此服务\" target=\"_blank\" rel=\"noopener\">http://localhost:8080，与注册中心无关，注册中心无此服务</a></p>\n<h3 id=\"4-1-7-编写application-yml\"><a href=\"#4-1-7-编写application-yml\" class=\"headerlink\" title=\"4.1.7 编写application.yml\"></a>4.1.7 编写application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: cloud-provider-movie</span><br><span class=\"line\">    </span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 8000</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指定注册到哪个注册中心</span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http://localhost:8761/eureka/</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    prefer-ip-address: true #注册自己服务使用ip的方式</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-8-将自己自动注册到注册中心-EnableDiscoveryClient\"><a href=\"#4-1-8-将自己自动注册到注册中心-EnableDiscoveryClient\" class=\"headerlink\" title=\"4.1.8 将自己自动注册到注册中心@EnableDiscoveryClient\"></a>4.1.8 将自己自动注册到注册中心@EnableDiscoveryClient</h3><h3 id=\"4-1-9-启动注册中心和服务\"><a href=\"#4-1-9-启动注册中心和服务\" class=\"headerlink\" title=\"4.1.9 启动注册中心和服务\"></a>4.1.9 启动注册中心和服务</h3><p>查看注册中心，访问服务 <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"noopener\">http://localhost:8000</a></p>\n<h1 id=\"第五章-SpringCloud-HelloWorld案例开发-用户服务\"><a href=\"#第五章-SpringCloud-HelloWorld案例开发-用户服务\" class=\"headerlink\" title=\"第五章 SpringCloud-HelloWorld案例开发-用户服务\"></a>第五章 SpringCloud-HelloWorld案例开发-用户服务</h1><p>##5.1 用户服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（jar工程，提供查询用户，买电影票功能）cloud-consumer-user</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-1-1-引入eureka-Discovery、web模块\"><a href=\"#5-1-1-引入eureka-Discovery、web模块\" class=\"headerlink\" title=\"5.1.1 引入eureka-Discovery、web模块\"></a>5.1.1 引入eureka-Discovery、web模块</h3><h3 id=\"5-1-2-创建User实体类-增加id-userName属性\"><a href=\"#5-1-2-创建User实体类-增加id-userName属性\" class=\"headerlink\" title=\"5.1.2 创建User实体类,增加id,userName属性\"></a>5.1.2 创建User实体类,增加id,userName属性</h3><h3 id=\"5-1-3-创建UserDao\"><a href=\"#5-1-3-创建UserDao\" class=\"headerlink\" title=\"5.1.3 创建UserDao\"></a>5.1.3 创建UserDao</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public class UserDao &#123;</span><br><span class=\"line\">public User getUser(Integer id)&#123;</span><br><span class=\"line\">User user = new User();</span><br><span class=\"line\">user.setId(id);</span><br><span class=\"line\">user.setUserName(&quot;张三&quot;);</span><br><span class=\"line\">return user;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-1-4-创建UserService\"><a href=\"#5-1-4-创建UserService\" class=\"headerlink\" title=\"5.1.4 创建UserService\"></a>5.1.4 创建UserService</h3><p>拷贝Movie类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class UserService &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">UserDao userDao;</span><br><span class=\"line\"> </span><br><span class=\"line\">public User getUserById(Integer id)&#123;</span><br><span class=\"line\">User user = userDao.getUser(id);</span><br><span class=\"line\">return user;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\">   * 购买最新的电影票</span><br><span class=\"line\">   * 传入用户id</span><br><span class=\"line\">   */</span><br><span class=\"line\">@HystrixCommand(fallbackMethod=&quot;hystrix&quot;)</span><br><span class=\"line\">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class=\"line\">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class=\"line\">//1、查询用户信息</span><br><span class=\"line\">User user = getUserById(id);</span><br><span class=\"line\">//2、查到最新电影票  </span><br><span class=\"line\">result.put(&quot;user&quot;, user);</span><br><span class=\"line\">result.put(&quot;movie&quot;, null);//暂时为null</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">5.1.5 创建UserController</span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class UserController &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">UserService userService;</span><br><span class=\"line\"> </span><br><span class=\"line\">@GetMapping(&quot;/user&quot;)</span><br><span class=\"line\">public User getUser(@RequestParam(&quot;id&quot;)Integer id)&#123;</span><br><span class=\"line\">User user = userService.getUserById(id);</span><br><span class=\"line\">return user;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@GetMapping(&quot;/buyMovie&quot;)</span><br><span class=\"line\">public Map&lt;String, Object&gt; buyMovie(@RequestParam(&quot;id&quot;)Integer userid)&#123;</span><br><span class=\"line\">Map&lt;String, Object&gt; map = userService.buyMovie(id);</span><br><span class=\"line\">return map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-1-6-编写application-yml\"><a href=\"#5-1-6-编写application-yml\" class=\"headerlink\" title=\"5.1.6 编写application.yml\"></a>5.1.6 编写application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: cloud-consumer-user</span><br><span class=\"line\">    </span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 9000</span><br><span class=\"line\">  </span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http://localhost:8761/eureka/</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    prefer-ip-address: true #注册中心保存我的ip</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-1-7-将自己自动注册到注册中心\"><a href=\"#5-1-7-将自己自动注册到注册中心\" class=\"headerlink\" title=\"5.1.7 将自己自动注册到注册中心\"></a>5.1.7 将自己自动注册到注册中心</h3><p>@EnableDiscoveryClient</p>\n<h3 id=\"5-1-8-启动注册中心和服务，查看注册中心，访问服务\"><a href=\"#5-1-8-启动注册中心和服务，查看注册中心，访问服务\" class=\"headerlink\" title=\"5.1.8 启动注册中心和服务，查看注册中心，访问服务\"></a>5.1.8 启动注册中心和服务，查看注册中心，访问服务</h3><p><a href=\"http://localhost:9000/user?id=1\" target=\"_blank\" rel=\"noopener\">http://localhost:9000/user?id=1</a><br><a href=\"http://localhost:9000/buyMovie?id=1\" target=\"_blank\" rel=\"noopener\">http://localhost:9000/buyMovie?id=1</a></p>\n<h1 id=\"第六章-SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate\"><a href=\"#第六章-SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate\" class=\"headerlink\" title=\"第六章 SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate\"></a>第六章 SpringCloud-HelloWorld案例开发-Ribbon-RestTemplate</h1><h2 id=\"6-1-Ribbon负载均衡\"><a href=\"#6-1-Ribbon负载均衡\" class=\"headerlink\" title=\"6.1 Ribbon负载均衡\"></a>6.1 Ribbon负载均衡</h2><p>可以用于远程调用（用户服务 调用  电影服务 项目）  </p>\n<h3 id=\"如何使用Ribbon\"><a href=\"#如何使用Ribbon\" class=\"headerlink\" title=\"如何使用Ribbon\"></a>如何使用Ribbon</h3><p>1）、引入Ribbon的Starter<br>2）、配置使用Ribbon功能；底层使用 RestTemplate 的工具来给远程发送请求</p>\n<h3 id=\"6-1-1-用户服务项目中引入Ribbon\"><a href=\"#6-1-1-用户服务项目中引入Ribbon\" class=\"headerlink\" title=\"6.1.1 用户服务项目中引入Ribbon\"></a>6.1.1 用户服务项目中引入Ribbon</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 引入ribbon实现远程调用和负载均衡功能 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531135849.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531135918.png\" alt></p>\n<h3 id=\"6-1-2-RestTemplate\"><a href=\"#6-1-2-RestTemplate\" class=\"headerlink\" title=\"6.1.2 RestTemplate\"></a>6.1.2 RestTemplate</h3><p>给容器中注入一个RestTemplate并使用Ribbon进行负载均衡调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@LoadBalanced   //负载均衡</span><br><span class=\"line\">@Bean</span><br><span class=\"line\">public RestTemplate restTemplate()&#123;</span><br><span class=\"line\">return new RestTemplate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-1-3-使用RestTemplate远程调用（UserService中完善代码）\"><a href=\"#6-1-3-使用RestTemplate远程调用（UserService中完善代码）\" class=\"headerlink\" title=\"6.1.3 使用RestTemplate远程调用（UserService中完善代码）\"></a>6.1.3 使用RestTemplate远程调用（UserService中完善代码）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">RestTemplate restTemplate;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 购买最新的电影票</span><br><span class=\"line\"> * 传入用户id</span><br><span class=\"line\"> */</span><br><span class=\"line\">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class=\"line\">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class=\"line\">//1、查询用户信息</span><br><span class=\"line\">User user = getUserById(id);</span><br><span class=\"line\">//2、查到最新电影票  restTemplate使用java代码来模拟发请求</span><br><span class=\"line\">Movie movie = restTemplate.getForObject(&quot;http://CLOUD-PROVIDER-MOVIE/movie&quot;, Movie.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">result.put(&quot;user&quot;, user);</span><br><span class=\"line\">result.put(&quot;movie&quot;, movie);</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-1-4-启动注册中心和服务，访问服务\"><a href=\"#6-1-4-启动注册中心和服务，访问服务\" class=\"headerlink\" title=\"6.1.4 启动注册中心和服务，访问服务\"></a>6.1.4 启动注册中心和服务，访问服务</h3><p><a href=\"http://localhost:9000/buyMovie?id=1\" target=\"_blank\" rel=\"noopener\">http://localhost:9000/buyMovie?id=1</a><br>显示用户和电影信息</p>\n<h3 id=\"6-1-5-在电影服务（MovieService-类）中打印服务端口，方便监控服务执行情况。\"><a href=\"#6-1-5-在电影服务（MovieService-类）中打印服务端口，方便监控服务执行情况。\" class=\"headerlink\" title=\"6.1.5 在电影服务（MovieService 类）中打印服务端口，方便监控服务执行情况。\"></a>6.1.5 在电影服务（MovieService 类）中打印服务端口，方便监控服务执行情况。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class=\"line\">private String port;</span><br><span class=\"line\"> </span><br><span class=\"line\">public Movie getNewMovie()&#123;</span><br><span class=\"line\">System.out.println(&quot;当前电影服务的端口：&quot;+port);</span><br><span class=\"line\">return movieDao.getNewMovie();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-1-6-将电影服务项目启动多次，测试负载均衡\"><a href=\"#6-1-6-将电影服务项目启动多次，测试负载均衡\" class=\"headerlink\" title=\"6.1.6 将电影服务项目启动多次，测试负载均衡\"></a>6.1.6 将电影服务项目启动多次，测试负载均衡</h3><p> <a href=\"http://localhost:9000/buyMovie?id=1\" target=\"_blank\" rel=\"noopener\">http://localhost:9000/buyMovie?id=1</a> </p>\n<ul>\n<li>打jar包方式运行 </li>\n<li>java -jar xxx.jar –server.port=8000</li>\n<li>java -jar xxx.jar –server.port=8001</li>\n<li>java -jar xxx.jar –server.port=8002</li>\n<li>IDE工具中方式运行</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531140438.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531140459.png\" alt></p>\n<h1 id=\"第七章-SpringCloud-HelloWorld案例开发-Feign-声明式调用\"><a href=\"#第七章-SpringCloud-HelloWorld案例开发-Feign-声明式调用\" class=\"headerlink\" title=\"第七章 SpringCloud-HelloWorld案例开发-Feign-声明式调用\"></a>第七章 SpringCloud-HelloWorld案例开发-Feign-声明式调用</h1><h2 id=\"7-1-Feign声明式调用\"><a href=\"#7-1-Feign声明式调用\" class=\"headerlink\" title=\"7.1  Feign声明式调用\"></a>7.1  Feign声明式调用</h2><h2 id=\"7-2-创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块\"><a href=\"#7-2-创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块\" class=\"headerlink\" title=\"7.2  创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块\"></a>7.2  创建新User项目cloud-consumer-user-feign，引入eureka-Discovery、web、Feign模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-1开启-EnableDiscoveryClient服务发现\"><a href=\"#7-2-1开启-EnableDiscoveryClient服务发现\" class=\"headerlink\" title=\"7.2.1开启@EnableDiscoveryClient服务发现\"></a>7.2.1开启@EnableDiscoveryClient服务发现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 1、引入feign的starter</span><br><span class=\"line\"> * 2、写一个接口，和被调用的服务关联起来</span><br><span class=\"line\"> * 3、开启Feign功能;@EnableFeignClients</span><br><span class=\"line\"> */</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">@EnableDiscoveryClient </span><br><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">public class CloudConsumerUserFeignApplication &#123;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">SpringApplication.run(CloudConsumerUserFeignApplication.class, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-2-编写application-yml\"><a href=\"#7-2-2-编写application-yml\" class=\"headerlink\" title=\"7.2.2 编写application.yml\"></a>7.2.2 编写application.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: cloud-consumer-user-feign</span><br><span class=\"line\">    </span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 7000</span><br><span class=\"line\">  </span><br><span class=\"line\">eureka:</span><br><span class=\"line\">  client:</span><br><span class=\"line\">    service-url:</span><br><span class=\"line\">      defaultZone: http://localhost:8761/eureka/</span><br><span class=\"line\">  instance:</span><br><span class=\"line\">    prefer-ip-address: true #注册中心保存我的ip</span><br><span class=\"line\">    </span><br><span class=\"line\">feign:</span><br><span class=\"line\">  hystrix:</span><br><span class=\"line\">    enabled: true #开启feign整合hystrix进行服务熔断功能</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-3-复制用户服务项目的代码：实体类，Dao，Service，Controller\"><a href=\"#7-2-3-复制用户服务项目的代码：实体类，Dao，Service，Controller\" class=\"headerlink\" title=\"7.2.3 复制用户服务项目的代码：实体类，Dao，Service，Controller\"></a>7.2.3 复制用户服务项目的代码：实体类，Dao，Service，Controller</h3><h3 id=\"7-2-4-将RestTemplate方式改成Feign方式进行远程调用\"><a href=\"#7-2-4-将RestTemplate方式改成Feign方式进行远程调用\" class=\"headerlink\" title=\"7.2.4 将RestTemplate方式改成Feign方式进行远程调用\"></a>7.2.4 将RestTemplate方式改成Feign方式进行远程调用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.feign;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.atguigu.bean.Movie;</span><br><span class=\"line\">import com.atguigu.feign.exception.MovieFeignExceptionHandlerService;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 调用指定服务名称 “CLOUD-PROVIDER-MOVIE” 的 @GetMapping(&quot;/movie&quot;) 映射方法</span><br><span class=\"line\"> * 这个方法声明与电影服务端Controller映射的方法声明一致即可。</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FeignClient(value=&quot;CLOUD-PROVIDER-MOVIE&quot;) //与被调用端的服务名称一致</span><br><span class=\"line\">public interface MovieServiceFeign &#123; </span><br><span class=\"line\">@GetMapping(&quot;/movie&quot;)</span><br><span class=\"line\">public Movie getNewMovie(); //与被调用服务端的映射方法一致 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-5-修改UserService-代码\"><a href=\"#7-2-5-修改UserService-代码\" class=\"headerlink\" title=\"7.2.5 修改UserService 代码\"></a>7.2.5 修改UserService 代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class UserService &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">UserDao userDao;</span><br><span class=\"line\"> </span><br><span class=\"line\">//面向接口编程</span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">MovieServiceFeign movieServiceFeign; //调用Feign接口；其实就是调用远程服务</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 购买最新的电影票</span><br><span class=\"line\"> * 传入用户id</span><br><span class=\"line\">   */</span><br><span class=\"line\">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class=\"line\">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class=\"line\">//1、查询用户信息</span><br><span class=\"line\">User userById = getUserById(id);</span><br><span class=\"line\">//2、查到最新电影票  Feign方式发起远程调用</span><br><span class=\"line\">Movie movie = movieServiceFeign.getNewMovie();</span><br><span class=\"line\"> </span><br><span class=\"line\">result.put(&quot;user&quot;, userById);</span><br><span class=\"line\">result.put(&quot;movie&quot;, movie);</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-6-开启Feign功能-EnableFeignClients\"><a href=\"#7-2-6-开启Feign功能-EnableFeignClients\" class=\"headerlink\" title=\"7.2.6 开启Feign功能@EnableFeignClients\"></a>7.2.6 开启Feign功能@EnableFeignClients</h3><h3 id=\"7-2-7-测试调用与负载均衡效果\"><a href=\"#7-2-7-测试调用与负载均衡效果\" class=\"headerlink\" title=\"7.2.7 测试调用与负载均衡效果\"></a>7.2.7 测试调用与负载均衡效果</h3><p><a href=\"http://localhost:7000/buyMovie?id=1\" target=\"_blank\" rel=\"noopener\">http://localhost:7000/buyMovie?id=1</a> </p>\n<h1 id=\"第八章-SpringCloud-HelloWorld案例开发-Ribbon-Hystrix组合\"><a href=\"#第八章-SpringCloud-HelloWorld案例开发-Ribbon-Hystrix组合\" class=\"headerlink\" title=\"第八章 SpringCloud-HelloWorld案例开发-Ribbon+Hystrix组合\"></a>第八章 SpringCloud-HelloWorld案例开发-Ribbon+Hystrix组合</h1><h2 id=\"8-1-Hystrix服务熔断\"><a href=\"#8-1-Hystrix服务熔断\" class=\"headerlink\" title=\"8.1 Hystrix服务熔断\"></a>8.1 Hystrix服务熔断</h2><p>目前情况：如果集群的三个电影服务都挂了，会怎样？</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531170955.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决：</span><br><span class=\"line\">返回默认数据，会提示错误消息</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-使用Ribbon-Hystrix组合\"><a href=\"#8-2-使用Ribbon-Hystrix组合\" class=\"headerlink\" title=\"8.2 使用Ribbon+Hystrix组合\"></a>8.2 使用Ribbon+Hystrix组合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cloud-consumer-user</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-1-引入Hystrix\"><a href=\"#8-2-1-引入Hystrix\" class=\"headerlink\" title=\"8.2.1 引入Hystrix\"></a>8.2.1 引入Hystrix</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--  引入hystrix进行服务熔断 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-2-开启断路保护功能\"><a href=\"#8-2-2-开启断路保护功能\" class=\"headerlink\" title=\"8.2.2 开启断路保护功能\"></a>8.2.2 开启断路保护功能</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableCircuitBreaker</span><br></pre></td></tr></table></figure>\n<p>8.2.3 在方法上标注@HystrixCommand(fallbackMethod=”xxx”)来指定出错时调用xx方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 购买最新的电影票</span><br><span class=\"line\"> * 传入用户id</span><br><span class=\"line\"> */</span><br><span class=\"line\">@HystrixCommand(fallbackMethod=&quot;hystrix&quot;)</span><br><span class=\"line\">public Map&lt;String, Object&gt; buyMovie(Integer id)&#123;</span><br><span class=\"line\">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class=\"line\">//1、查询用户信息</span><br><span class=\"line\">User userById = getUserById(id);</span><br><span class=\"line\">//2、查到最新电影票  restTemplate使用java代码来模拟发请求</span><br><span class=\"line\">Movie movie = restTemplate.getForObject(&quot;http://CLOUD-PROVIDER-MOVIE/movie&quot;, Movie.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">result.put(&quot;user&quot;, userById);</span><br><span class=\"line\">result.put(&quot;movie&quot;, movie);</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-4-在本类编写xxx方法，方法的参数和原来一样即可\"><a href=\"#8-2-4-在本类编写xxx方法，方法的参数和原来一样即可\" class=\"headerlink\" title=\"8.2.4 在本类编写xxx方法，方法的参数和原来一样即可\"></a>8.2.4 在本类编写xxx方法，方法的参数和原来一样即可</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Map&lt;String, Object&gt; hystrix(Integer id)&#123;</span><br><span class=\"line\">User user = new User();</span><br><span class=\"line\">user.setId(-1);</span><br><span class=\"line\">user.setUserName(&quot;未知用户&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">Movie movie = new Movie();</span><br><span class=\"line\">movie.setId(-100);</span><br><span class=\"line\">movie.setMovieName(&quot;无此电影&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">Map&lt;String, Object&gt;  result = new HashMap&lt;&gt;();</span><br><span class=\"line\">result.put(&quot;user&quot;, user);</span><br><span class=\"line\">result.put(&quot;movie&quot;, movie);</span><br><span class=\"line\">return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-5-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常\"><a href=\"#8-2-5-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常\" class=\"headerlink\" title=\"8.2.5 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常\"></a>8.2.5 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常</h3><p> <a href=\"http://localhost:9000/buyMovie?id=1\" target=\"_blank\" rel=\"noopener\">http://localhost:9000/buyMovie?id=1</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171333.png\" alt></p>\n<h3 id=\"8-2-6-熔断器原理\"><a href=\"#8-2-6-熔断器原理\" class=\"headerlink\" title=\"8.2.6 熔断器原理\"></a>8.2.6 熔断器原理</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171411.png\" alt></p>\n<h3 id=\"8-2-7-我们悄悄的启动一个服务，刷刷浏览器会怎样\"><a href=\"#8-2-7-我们悄悄的启动一个服务，刷刷浏览器会怎样\" class=\"headerlink\" title=\"8.2.7 我们悄悄的启动一个服务，刷刷浏览器会怎样?\"></a>8.2.7 我们悄悄的启动一个服务，刷刷浏览器会怎样?</h3><p>让子弹飞一分钟再看结果</p>\n<h2 id=\"8-3-使用Feign-Hystrix组合\"><a href=\"#8-3-使用Feign-Hystrix组合\" class=\"headerlink\" title=\"8.3 使用Feign+Hystrix组合\"></a>8.3 使用Feign+Hystrix组合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cloud-consumer-user-feign</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-1-引入Hystrix\"><a href=\"#8-3-1-引入Hystrix\" class=\"headerlink\" title=\"8.3.1 引入Hystrix\"></a>8.3.1 引入Hystrix</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--  引入hystrix进行服务熔断 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-2-开启断路保护功能\"><a href=\"#8-3-2-开启断路保护功能\" class=\"headerlink\" title=\"8.3.2 开启断路保护功能\"></a>8.3.2 开启断路保护功能</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@EnableCircuitBreaker</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-3-开启Feign对Hystrix支持\"><a href=\"#8-3-3-开启Feign对Hystrix支持\" class=\"headerlink\" title=\"8.3.3 开启Feign对Hystrix支持\"></a>8.3.3 开启Feign对Hystrix支持</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feign:</span><br><span class=\"line\">  hystrix:</span><br><span class=\"line\">    enabled: true #默认false</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-4-Feign已经集成了Hystrix，使用起来非常简单-FeignClient-name-”provider-user”-fallback-”异常处理类”\"><a href=\"#8-3-4-Feign已经集成了Hystrix，使用起来非常简单-FeignClient-name-”provider-user”-fallback-”异常处理类”\" class=\"headerlink\" title=\"8.3.4 Feign已经集成了Hystrix，使用起来非常简单@FeignClient(name=”provider-user”,fallback=”异常处理类”)\"></a>8.3.4 Feign已经集成了Hystrix，使用起来非常简单@FeignClient(name=”provider-user”,fallback=”异常处理类”)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*使用Hystrix进行服务的熔断</span><br><span class=\"line\"> * 1）、引入Hystrix的starter</span><br><span class=\"line\"> * 2）、开启xxx功能 ：@EnableCircuitBreaker</span><br><span class=\"line\"> * 3）、@FeignClient(value=&quot;CLOUD-PROVIDER-MOVIE&quot;,fallback=指定这个接口的异常处理类（异常处理类必须实现这个接口）)</span><br><span class=\"line\"> */</span><br><span class=\"line\">@FeignClient(value=&quot;CLOUD-PROVIDER-MOVIE&quot;,fallback=MovieFeignExceptionHandlerService.class)</span><br><span class=\"line\">public interface MovieServiceFeign &#123;</span><br><span class=\"line\">//  未来这个接口就会调用很多方法，定制每一个方法远程出错如何返回兜底mock数据；</span><br><span class=\"line\">@GetMapping(&quot;/movie&quot;)</span><br><span class=\"line\">public Movie getNewMovie();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-5-fallback-”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中\"><a href=\"#8-3-5-fallback-”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中\" class=\"headerlink\" title=\"8.3.5 fallback=”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中\"></a>8.3.5 fallback=”异常处理类”指定的异常处理类实现这个类的接口即可，并且放在容器中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.feign.exception;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.stereotype.Component;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.bean.Movie;</span><br><span class=\"line\">import com.feign.MovieServiceFeign;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class MovieFeignExceptionHandlerService implements MovieServiceFeign&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 远程这个方法调用出问题就会调用此方法</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public Movie getNewMovie() &#123;</span><br><span class=\"line\">Movie movie = new Movie();</span><br><span class=\"line\">movie.setId(-100);</span><br><span class=\"line\">movie.setMovieName(&quot;无此电影呀...&quot;);</span><br><span class=\"line\">return movie;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-6-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常\"><a href=\"#8-3-6-测试正常调用-amp-停止user服务，测试异常调用-amp-启动user服务过一段时间测试是否正常\" class=\"headerlink\" title=\"8.3.6 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常\"></a>8.3.6 测试正常调用&amp;停止user服务，测试异常调用&amp;启动user服务过一段时间测试是否正常</h3><p> <a href=\"http://localhost:7000/buyMovie?id=1\" target=\"_blank\" rel=\"noopener\">http://localhost:7000/buyMovie?id=1</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171718.png\" alt></p>\n<h1 id=\"第九章-SpringCloud-HelloWorld案例开发-Hystrix-Dashboard\"><a href=\"#第九章-SpringCloud-HelloWorld案例开发-Hystrix-Dashboard\" class=\"headerlink\" title=\"第九章 SpringCloud-HelloWorld案例开发-Hystrix Dashboard\"></a>第九章 SpringCloud-HelloWorld案例开发-Hystrix Dashboard</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171810.png\" alt></p>\n<p>除了隔离依赖服务的调用以外，Hystrix还提供了近实时的监控，Hystrix会实时、累加地记录所有关于HystrixCommand的执行信息，包括每秒执行多少请求，多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控</p>\n<h2 id=\"9-1-引入actuator（cloud-consumer-user-feign）\"><a href=\"#9-1-引入actuator（cloud-consumer-user-feign）\" class=\"headerlink\" title=\"9.1 引入actuator（cloud-consumer-user-feign）\"></a>9.1 引入actuator（cloud-consumer-user-feign）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-1-1-actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志\"><a href=\"#9-1-1-actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志\" class=\"headerlink\" title=\"9.1.1 actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志\"></a>9.1.1 actuator是用来监控SpringBoot服务的，注意路径问题，具体的版本可能不一样，参考启动日志</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171849.png\" alt></p>\n<p>9.1.2 可提供的监控服务为</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531171917.png\" alt></p>\n<h2 id=\"9-2-修改配置文件，暴露数据监控流\"><a href=\"#9-2-修改配置文件，暴露数据监控流\" class=\"headerlink\" title=\"9.2 修改配置文件，暴露数据监控流\"></a>9.2 修改配置文件，暴露数据监控流</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">management:</span><br><span class=\"line\">  endpoints:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      exposure:</span><br><span class=\"line\">        include: hystrix.stream # 访问/actuator/hystrix.stream能看到不断更新的监控流</span><br></pre></td></tr></table></figure>\n<p>访问/actuator/hystrix.stream 可以看到打印</p>\n<h2 id=\"9-3-引入HystrixDashboard\"><a href=\"#9-3-引入HystrixDashboard\" class=\"headerlink\" title=\"9.3 引入HystrixDashboard\"></a>9.3 引入HystrixDashboard</h2><p><dependency><br>     <groupid>org.springframework.cloud</groupid><br>     <artifactid>spring-cloud-starter-netflix-hystrix-dashboard</artifactid><br></dependency></p>\n<h2 id=\"9-4-开启可视化监控功能\"><a href=\"#9-4-开启可视化监控功能\" class=\"headerlink\" title=\"9.4 开启可视化监控功能\"></a>9.4 开启可视化监控功能</h2><h3 id=\"9-4-1-EnableHystrixDashboard\"><a href=\"#9-4-1-EnableHystrixDashboard\" class=\"headerlink\" title=\"9.4.1 @EnableHystrixDashboard\"></a>9.4.1 @EnableHystrixDashboard</h3><h3 id=\"9-4-2-访问当前项目-hystrix，将Hystrix的stream地址输入-http-localhost-7000-actuator-hystrix-stream-，点击monitor按钮即可监控\"><a href=\"#9-4-2-访问当前项目-hystrix，将Hystrix的stream地址输入-http-localhost-7000-actuator-hystrix-stream-，点击monitor按钮即可监控\" class=\"headerlink\" title=\"9.4.2 访问当前项目/hystrix，将Hystrix的stream地址输入(http://localhost:7000/actuator/hystrix.stream )，点击monitor按钮即可监控\"></a>9.4.2 访问当前项目/hystrix，将Hystrix的stream地址输入(<a href=\"http://localhost:7000/actuator/hystrix.stream\" target=\"_blank\" rel=\"noopener\">http://localhost:7000/actuator/hystrix.stream</a> )，点击monitor按钮即可监控</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531172038.png\" alt></p>\n<h3 id=\"9-4-3-监控中，服务器正常\"><a href=\"#9-4-3-监控中，服务器正常\" class=\"headerlink\" title=\"9.4.3 监控中，服务器正常\"></a>9.4.3 监控中，服务器正常</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531172118.png\" alt></p>\n<h3 id=\"9-4-4-监控中，服务器重新启动，断路器打开\"><a href=\"#9-4-4-监控中，服务器重新启动，断路器打开\" class=\"headerlink\" title=\"9.4.4 监控中，服务器重新启动，断路器打开\"></a>9.4.4 监控中，服务器重新启动，断路器打开</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531172141.png\" alt></p>\n","categories":["Java框架"],"tags":["使用过的开源框架"]},{"title":"9. SSM框架整合","url":"http://yoursite.com/2018/03/27/65. SSM框架整合/","content":"<h1 id=\"9-1-整合注意事项\"><a href=\"#9-1-整合注意事项\" class=\"headerlink\" title=\"9.1 整合注意事项\"></a>9.1 整合注意事项</h1><p>1)查看不同MyBatis版本整合Spring时使用的适配包；<br><a href=\"https://imgchr.com/i/EsXmUe\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/07/EsXmUe.md.png\" alt=\"EsXmUe.md.png\"></a></p>\n<p>2)下载整合适配包<br><a href=\"https://github.com/mybatis/spring/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/spring/releases</a><br>3)官方整合示例，jpetstore<br><a href=\"https://github.com/mybatis/jpetstore-6\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/jpetstore-6</a></p>\n<h1 id=\"9-2整合思路、步骤\"><a href=\"#9-2整合思路、步骤\" class=\"headerlink\" title=\"9.2整合思路、步骤\"></a>9.2整合思路、步骤</h1><h2 id=\"1-搭建环境\"><a href=\"#1-搭建环境\" class=\"headerlink\" title=\"1)搭建环境\"></a>1)搭建环境</h2><blockquote>\n<ol>\n<li>创建一个动态的WEB工程</li>\n<li>导入SSM（Spring+SpringMvc+MyBatis）需要使用的jar包<br> 整合ssm需要的基础jar包名字（<a href=\"https://pan.baidu.com/s/1N9xmgsfVw7jGRIwIvbGPug/\" target=\"_blank\" rel=\"noopener\">点击下载</a>）<br> 整合ssm需要的基础jar包(<a href=\"https://pan.baidu.com/s/1IsQX5KPlnuZn6uHy0Pkn-A/\" target=\"_blank\" rel=\"noopener\">点击下载</a>)</li>\n<li>导入Spring与MyBatis整合适配包</li>\n<li>导入其他技术的一些支持包  连接池 数据库驱动  日志….  </li>\n</ol>\n</blockquote>\n<h2 id=\"2-搭建Spring-Springmvc的环境\"><a href=\"#2-搭建Spring-Springmvc的环境\" class=\"headerlink\" title=\"2)搭建Spring + Springmvc的环境\"></a>2)搭建Spring + Springmvc的环境</h2><pre><code>1. 在web.xml中配置:   Springmvc的前端控制器   实例化Spring容器的监听器 （contextLoaderListener）  字符编码过滤器  REST 过滤器\n2.创建Spring的配置文件(springMmvc.xml)-&gt; applicationContext.xml:组件扫描、 连接池、 事务.....\n</code></pre><ol start=\"3\">\n<li>创建Springmvc的配置文件: springmvc.xml : 组件扫描、 视图解析器 <a href=\"mvc:...\" target=\"_blank\" rel=\"noopener\">mvc:...</a><h2 id=\"3-MyBatis\"><a href=\"#3-MyBatis\" class=\"headerlink\" title=\"3)MyBatis\"></a>3)MyBatis</h2> 创建MyBatis的全局配置文件 mybatis-config,xml<br> 准备JavaBean 、测试表、 Mapper接口、 Mapper映射文件<h2 id=\"4-Spring-整合-MyBatis-：\"><a href=\"#4-Spring-整合-MyBatis-：\" class=\"headerlink\" title=\"4)Spring 整合 MyBatis ：\"></a>4)Spring 整合 MyBatis ：</h2> MyBatis的 SqlSession对象的创建 .<br> MyBatis的 Mapper接口的代理实现类得创建及管理<h2 id=\"5-测试-REST-CRUD\"><a href=\"#5-测试-REST-CRUD\" class=\"headerlink\" title=\"5)测试:  REST CRUD\"></a>5)测试:  REST CRUD</h2><ol>\n<li>查询所有的员工信息,列表显示</li>\n<li>添加新员工</li>\n<li>修改员工</li>\n<li>删除员工</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"9-3整合的配置\"><a href=\"#9-3整合的配置\" class=\"headerlink\" title=\"9.3整合的配置\"></a>9.3整合的配置</h1><p>创建web动态工程 2.5（基本操作22个包）<br>最基本得spring得jar包在——Mybatis里support</p>\n<h2 id=\"9-3-0-数据源文件db-properties\"><a href=\"#9-3-0-数据源文件db-properties\" class=\"headerlink\" title=\"9.3.0 数据源文件db.properties\"></a>9.3.0 数据源文件db.properties</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://localhost:3306/lidaxiongdesql</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-3-1-web-xml\"><a href=\"#9-3-1-web-xml\" class=\"headerlink\" title=\"9.3.1 web.xml\"></a>9.3.1 web.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;WebApp_ID&quot; version=&quot;2.5&quot;&gt;</span><br><span class=\"line\"> &lt;!-- 字符编码过滤器 --&gt;</span><br><span class=\"line\"> &lt;filter&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class=\"line\"> \t&lt;init-param&gt;</span><br><span class=\"line\"> \t\t&lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class=\"line\"> \t\t&lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class=\"line\"> \t&lt;/init-param&gt;</span><br><span class=\"line\"> &lt;/filter&gt;</span><br><span class=\"line\"> &lt;filter-mapping&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\"> &lt;/filter-mapping&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;!-- REST 过滤器 --&gt;</span><br><span class=\"line\"> &lt;filter&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;</span><br><span class=\"line\"> &lt;/filter&gt;</span><br><span class=\"line\"> &lt;filter-mapping&gt;</span><br><span class=\"line\"> \t&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\"> \t&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\"> &lt;/filter-mapping&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 实例化SpringIOC容器的监听器 --&gt;</span><br><span class=\"line\">\t&lt;context-param&gt;</span><br><span class=\"line\">\t\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">\t\t&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class=\"line\">\t&lt;/context-param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;listener&gt;</span><br><span class=\"line\">\t&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"line\">    &lt;/listener&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;!-- Springmvc的前端控制器 --&gt;</span><br><span class=\"line\">\t&lt;servlet&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">\t&lt;/servlet&gt;</span><br><span class=\"line\">\t&lt;servlet-mapping&gt;</span><br><span class=\"line\">\t\t&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t\t&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">\t&lt;/servlet-mapping&gt;</span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-3-2-Spring配置-spring-xml\"><a href=\"#9-3-2-Spring配置-spring-xml\" class=\"headerlink\" title=\"9.3.2 Spring配置 spring.xml\"></a>9.3.2 Spring配置 spring.xml</h2><p>(new一个Spring BeanConfiguration File 加组件context，事物的tx)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class=\"line\">\txmlns:mybatis-spring=&quot;http://mybatis.org/schema/mybatis-spring&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 组件扫描 expression排除掉不能运行的类如jpg，mp3等静态文件--&gt;</span><br><span class=\"line\">\t&lt;context:component-scan base-package=&quot;com.lbb.ssm&quot;&gt;</span><br><span class=\"line\">\t\t&lt;context:exclude-filter type=&quot;annotation&quot; </span><br><span class=\"line\">\t\texpression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class=\"line\">\t&lt;/context:component-scan&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 数据源 连接池 --&gt;</span><br><span class=\"line\">\t&lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;mydataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 事务 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;dataSourceTransactionManager&quot; </span><br><span class=\"line\">\t\tclass=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;tx:annotation-driven transaction-manager=&quot;dataSourceTransactionManager&quot;/&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<!--整合mybatis-->\n<!--AOP-->\n<h2 id=\"9-3-3-SpringMVC配置-SpringMVC-xml\"><a href=\"#9-3-3-SpringMVC配置-SpringMVC-xml\" class=\"headerlink\" title=\"9.3.3 SpringMVC配置 SpringMVC.xml\"></a>9.3.3 SpringMVC配置 SpringMVC.xml</h2><p>一个Spring BeanConfiguration File 加组件context和mvc)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">\txmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 组件扫描 expression排除掉不能运行的类如jpg，mp3等静态文件--&gt;</span><br><span class=\"line\">  &lt;context:component-scan base-package=&quot;com.lbb.ssm&quot; use-default-filters=&quot;false&quot;&gt;</span><br><span class=\"line\">\t  &lt;context:include-filter type=&quot;annotation&quot; </span><br><span class=\"line\">         expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class=\"line\">  &lt;/context:component-scan&gt;</span><br><span class=\"line\">   &lt;!--视图解析器 --&gt;</span><br><span class=\"line\">   &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">   &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;mvc:default-servlet-handler/&gt;</span><br><span class=\"line\">   &lt;mvc:annotation-driven/&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"9-3-4-MyBatis配置\"><a href=\"#9-3-4-MyBatis配置\" class=\"headerlink\" title=\"9.3.4 MyBatis配置\"></a>9.3.4 MyBatis配置</h2><h3 id=\"1-全局文件的配置\"><a href=\"#1-全局文件的配置\" class=\"headerlink\" title=\"1)全局文件的配置\"></a>1)全局文件的配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;!--  Spring 整合 MyBatis 后， MyBatis中配置数据源，事务等一些配置都可以</span><br><span class=\"line\">         迁移到Spring的整合配置中。MyBatis配置文件中只需要配置与MyBatis相关</span><br><span class=\"line\">         的即可。</span><br><span class=\"line\">\t --&gt;</span><br><span class=\"line\">\t &lt;!-- settings: 包含很多重要的设置项 \t--&gt;</span><br><span class=\"line\">\t   &lt;settings&gt;</span><br><span class=\"line\">\t \t&lt;!-- 映射下划线到驼峰命名 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;!-- 设置Mybatis对null值的默认处理 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;!-- 开启延迟加载 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;!-- 设置加载的数据是按需还是全部 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;\t</span><br><span class=\"line\">\t \t&lt;!-- 配置开启二级缓存 --&gt;</span><br><span class=\"line\">\t \t&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t &lt;/settings&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-SQL映射文件配置\"><a href=\"#2-SQL映射文件配置\" class=\"headerlink\" title=\"2)SQL映射文件配置\"></a>2)SQL映射文件配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;mapper namespace=&quot;com.atguigu.ssm.mapper.EmployeeMapper&quot;&gt;</span><br><span class=\"line\">\t&lt;!-- public List&lt;Employee&gt; getAllEmps(); --&gt;</span><br><span class=\"line\">\t&lt;select id=&quot;getAllEmps&quot; resultMap=&quot;myEmpsAndDept&quot; &gt;</span><br><span class=\"line\">\t\tselect e.id eid, e.last_name,e.email,e.gender, d.id did, d.dept_name</span><br><span class=\"line\">\t\tfrom tbl_employee e ,tbl_dept d </span><br><span class=\"line\">\t\twhere e.d_id = d.id </span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\">\t&lt;resultMap type=&quot;com.atguigu.ssm.beans.Employee&quot; id=&quot;myEmpsAndDept&quot;&gt;</span><br><span class=\"line\">\t\t&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&lt;association property=&quot;dept&quot; javaType=&quot;com.atguigu.ssm.beans.Department&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;id column=&quot;did&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/association&gt;</span><br><span class=\"line\">\t&lt;/resultMap&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-3-5-Spring-整合MyBatis-配置\"><a href=\"#9-3-5-Spring-整合MyBatis-配置\" class=\"headerlink\" title=\"9.3.5 Spring 整合MyBatis 配置\"></a>9.3.5 Spring 整合MyBatis 配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Spring 整合 Mybatis --&gt;</span><br><span class=\"line\">\t&lt;!--1. SqlSession  --&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 指定数据源 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;!-- MyBatis的配置文件 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;configLocation&quot; </span><br><span class=\"line\">                 value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;!-- MyBatis的SQL映射文件 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;mapperLocations&quot; </span><br><span class=\"line\">                 value=&quot;classpath:mybatis/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;typeAliasesPackage&quot; </span><br><span class=\"line\">                 value=&quot;com.atguigu.ssm.beans&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;!-- Mapper接口</span><br><span class=\"line\">\t\tMapperScannerConfigurer 为指定包下的Mapper接口批量生成代理实现类.bean的默认id是接口名首字母小写. </span><br><span class=\"line\">\t --&gt;</span><br><span class=\"line\">\t&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;basePackage&quot; value=&quot;com.atguigu.ssm.mapper&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;!-- &lt;mybatis-spring:scan base-package=&quot;com.atguigu.ssm.mapper&quot;/&gt; --&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-4-整合测试\"><a href=\"#9-4-整合测试\" class=\"headerlink\" title=\"9.4 整合测试\"></a>9.4 整合测试</h1><pre><code>1)编写页面，发送请求：\nhttp://localhost:8888/ssm/employees\n2)编写Handler,处理请求，完成响应\n3)在页面中获取数据，显示数据\n</code></pre>","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"8. 扩展-PageHelper分页插件","url":"http://yoursite.com/2018/03/22/64. 扩展-PageHelper分页插件/","content":"<h1 id=\"plugins-插件机制\"><a href=\"#plugins-插件机制\" class=\"headerlink\" title=\"plugins 插件机制\"></a>plugins 插件机制</h1><p>1)插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行<br>2)四大对象:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</span><br><span class=\"line\"></span><br><span class=\"line\">ParameterHandler (getParameterObject, setParameters) </span><br><span class=\"line\"></span><br><span class=\"line\">ResultSetHandler (handleResultSets, handleOutputParameters) </span><br><span class=\"line\"></span><br><span class=\"line\">StatementHandler (prepare, parameterize, batch, update, query)</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-1-PageHelper-分页插件简介\"><a href=\"#8-1-PageHelper-分页插件简介\" class=\"headerlink\" title=\"8.1 PageHelper 分页插件简介\"></a>8.1 PageHelper 分页插件简介</h1><p>1)PageHelper是MyBatis中非常方便的第三方分页插件<br>2)官方文档：<br><a href=\"https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/README_zh.md</a><br>3)我们可以对照官方文档的说明，快速的使用插件</p>\n<h1 id=\"8-2-PageHelper的使用步骤\"><a href=\"#8-2-PageHelper的使用步骤\" class=\"headerlink\" title=\"8.2 PageHelper的使用步骤\"></a>8.2 PageHelper的使用步骤</h1><h2 id=\"1-导入相关包\"><a href=\"#1-导入相关包\" class=\"headerlink\" title=\"1)导入相关包\"></a>1)导入相关包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pagehelper-x.x.x.jar </span><br><span class=\"line\">jsqlparser-0.9.5.jar</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在MyBatis全局配置文件中配置分页插件\"><a href=\"#2-在MyBatis全局配置文件中配置分页插件\" class=\"headerlink\" title=\"2)在MyBatis全局配置文件中配置分页插件\"></a>2)在MyBatis全局配置文件中配置分页插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\">\t&lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;&lt;/plugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用PageHelper提供的方法进行分页\"><a href=\"#3-使用PageHelper提供的方法进行分页\" class=\"headerlink\" title=\"3)使用PageHelper提供的方法进行分页\"></a>3)使用PageHelper提供的方法进行分页</h2><h2 id=\"4-可以使用更强大的PageInfo封装返回结果\"><a href=\"#4-可以使用更强大的PageInfo封装返回结果\" class=\"headerlink\" title=\"4)可以使用更强大的PageInfo封装返回结果\"></a>4)可以使用更强大的PageInfo封装返回结果</h2><h1 id=\"8-3-Page对象的使用\"><a href=\"#8-3-Page对象的使用\" class=\"headerlink\" title=\"8.3 Page对象的使用\"></a>8.3 Page对象的使用</h1><p>1)在查询之前通过PageHelper.startPage(页码，条数)设置分页信息，该方法返回Page对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void testPageHelper()  throws Exception&#123;</span><br><span class=\"line\">\t\tSqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class=\"line\">\t\tSqlSession session = ssf.openSession();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tEmployeeMapper mapper = </span><br><span class=\"line\">                      session.getMapper(EmployeeMapper.class);</span><br><span class=\"line\">\t\t\t//设置分页信息</span><br><span class=\"line\">\t\t\tPage&lt;Object&gt; page = PageHelper.startPage(9, 1);</span><br><span class=\"line\">\t\t\tList&lt;Employee&gt; emps = mapper.getAllEmps();</span><br><span class=\"line\">\t\t\tfor (Employee employee : emps) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(employee);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;=============获取分页相关的信息=================&quot;);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;当前页: &quot; + page.getPageNum());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;总页码: &quot; + page.getPages());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;总条数: &quot; + page.getTotal());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;每页显示的条数: &quot; + page.getPageSize());</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tsession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-4-PageInfo对象的使用\"><a href=\"#8-4-PageInfo对象的使用\" class=\"headerlink\" title=\"8.4 PageInfo对象的使用\"></a>8.4 PageInfo对象的使用</h1><p>1)在查询完数据后，使用PageInfo对象封装查询结果，可以获取更详细的分页信息以及<br>可以完成分页逻辑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void testPageHelper1()  throws Exception&#123;</span><br><span class=\"line\">\t\tSqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class=\"line\">\t\tSqlSession session = ssf.openSession();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tEmployeeMapper mapper = session.getMapper(EmployeeMapper.class);</span><br><span class=\"line\">\t\t\t//设置分页信息</span><br><span class=\"line\">\t\t\tPage&lt;Object&gt; page = PageHelper.startPage(9, 1);</span><br><span class=\"line\">\t\t\tList&lt;Employee&gt; emps = mapper.getAllEmps();</span><br><span class=\"line\">\t\t\t// </span><br><span class=\"line\">\t\t\tPageInfo&lt;Employee&gt; info  = new PageInfo&lt;&gt;(emps,5);</span><br><span class=\"line\">\t\t\tfor (Employee employee : emps) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(employee);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;=============获取详细分页相关的信息=================&quot;);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;当前页: &quot; + info.getPageNum());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;总页码: &quot; + info.getPages());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;总条数: &quot; + info.getTotal());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;每页显示的条数: &quot; + info.getPageSize());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;是否是第一页: &quot; + info.isIsFirstPage());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;是否是最后一页: &quot; + info.isIsLastPage());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;是否有上一页: &quot; + info.isHasPreviousPage());</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;是否有下一页: &quot; + info.isHasNextPage());</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;============分页逻辑===============&quot;);</span><br><span class=\"line\">\t\t\tint [] nums = info.getNavigatepageNums();</span><br><span class=\"line\">\t\t\tfor (int i : nums) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(i +&quot; &quot; );</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tsession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"7. MyBatis 逆向工程","url":"http://yoursite.com/2018/03/21/63. MyBatis 逆向工程/","content":"<h1 id=\"7-1-逆向工程简介\"><a href=\"#7-1-逆向工程简介\" class=\"headerlink\" title=\"7.1 逆向工程简介\"></a>7.1 逆向工程简介</h1><pre><code>MyBatis Generator:\n简称MBG，是一个专门为MyBatis框架使用者定制的代码生成器，可以快速的根据表生成对应的映射文件，接口，以及bean类。\n支持基本的增删改查，以及QBC风格的条件查询。但是表连接、存储过程等这些复杂sql的定义需要我们手工编写\n官方文档地址\nhttp://www.mybatis.org/generator/  （要先到jar包 官方文档没写）\n官方工程地址\nhttps://github.com/mybatis/generator/releases\n</code></pre><p>注意：逆向工程生成不了表链接要自己写，生成的bean没有tostring方法</p>\n<h1 id=\"7-2-逆向工程的配置\"><a href=\"#7-2-逆向工程的配置\" class=\"headerlink\" title=\"7.2 逆向工程的配置\"></a>7.2 逆向工程的配置</h1><h2 id=\"1-导入逆向工程的jar包\"><a href=\"#1-导入逆向工程的jar包\" class=\"headerlink\" title=\"1)导入逆向工程的jar包\"></a>1)导入逆向工程的jar包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis-generator-core-1.3.2.jar</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-编写MBG的配置文件（重要几处配置）-可参考官方手册\"><a href=\"#2-编写MBG的配置文件（重要几处配置）-可参考官方手册\" class=\"headerlink\" title=\"2)编写MBG的配置文件（重要几处配置）,可参考官方手册\"></a>2)编写MBG的配置文件（重要几处配置）,可参考官方手册</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE generatorConfiguration</span><br><span class=\"line\">  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class=\"line\">  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;generatorConfiguration&gt;</span><br><span class=\"line\">  &lt;!-- </span><br><span class=\"line\">\t  \ttargetRuntime: 执行生成的逆向工程的版本</span><br><span class=\"line\">\t  \t\t\tMyBatis3Simple: 生成基本的CRUD</span><br><span class=\"line\">\t  \t\t\tMyBatis3: 生成 QBC风格（带条件）的CRUD</span><br><span class=\"line\">   --&gt;</span><br><span class=\"line\">  &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class=\"line\">         &lt;!-- 实现中文注释，这里的type里写的是你的实现类的类全路径，实现类在下面 具体看拓展1--&gt;</span><br><span class=\"line\">        &lt;!-- &lt;commentGenerator type=&quot;com.lbb.mybatis.generator.MyCommentGenerator&quot;&gt;</span><br><span class=\"line\">        &lt;/commentGenerator&gt; --&gt;</span><br><span class=\"line\">    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">        connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis_1129&quot;</span><br><span class=\"line\">        userId=&quot;root&quot;</span><br><span class=\"line\">        password=&quot;1234&quot;&gt;</span><br><span class=\"line\">    &lt;/jdbcConnection&gt;</span><br><span class=\"line\">\t&lt;!-- javaBean的生成策略--&gt;</span><br><span class=\"line\">    &lt;javaModelGenerator targetPackage=&quot;com.atguigu.mybatis.beans&quot; targetProject=&quot;.\\src&quot;&gt;</span><br><span class=\"line\">      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">      &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">    &lt;/javaModelGenerator&gt;</span><br><span class=\"line\">\t&lt;!-- SQL映射文件的生成策略 --&gt;</span><br><span class=\"line\">    &lt;sqlMapGenerator targetPackage=&quot;com.atguigu.mybatis.dao&quot;  targetProject=&quot;.\\conf&quot;&gt;</span><br><span class=\"line\">      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">    &lt;/sqlMapGenerator&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- Mapper接口的生成策略 路径。／  点代表当前文件下的src 官方的路径有问题 按照这个配--&gt;</span><br><span class=\"line\">    &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.atguigu.mybatis.dao&quot;  targetProject=&quot;.\\src&quot;&gt;</span><br><span class=\"line\">      &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">    &lt;/javaClientGenerator&gt;</span><br><span class=\"line\">\t&lt;!-- 逆向分析的表 domainObjectName代表生成bean的名字--&gt;</span><br><span class=\"line\">    &lt;table tableName=&quot;tbl_dept&quot; domainObjectName=&quot;Department&quot;&gt;&lt;/table&gt;</span><br><span class=\"line\">    &lt;table tableName=&quot;tbl_employee&quot; domainObjectName=&quot;Employee&quot;&gt;&lt;/table&gt;</span><br><span class=\"line\">  &lt;/context&gt;</span><br><span class=\"line\">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>\n<p>一般开发用上面 下面的详细内容翻译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE generatorConfiguration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;generatorConfiguration&gt;</span><br><span class=\"line\">    &lt;!--导入属性配置--&gt;</span><br><span class=\"line\">    &lt;properties resource=&quot;datasource.properties&quot;&gt;&lt;/properties&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &lt;!-- 指定数据库驱动的jdbc驱动jar包的位置 --&gt;</span><br><span class=\"line\">    &lt;classPathEntry location=&quot;$&#123;db.driverLocation&#125;&quot; /&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &lt;!-- context 是逆向工程的主要配置信息 --&gt;</span><br><span class=\"line\">    &lt;!-- id：起个名字 --&gt;</span><br><span class=\"line\">    &lt;!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 --&gt;</span><br><span class=\"line\">    &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &lt;!--optional,旨在创建class时，对注释进行控制--&gt;</span><br><span class=\"line\">        &lt;commentGenerator&gt;</span><br><span class=\"line\">            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">        &lt;/commentGenerator&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &lt;!--jdbc的数据库连接--&gt;</span><br><span class=\"line\">        &lt;jdbcConnection driverClass=&quot;$&#123;db.driverClassName&#125;&quot;</span><br><span class=\"line\">                        connectionURL=&quot;$&#123;db.url&#125;&quot;</span><br><span class=\"line\">                        userId=&quot;$&#123;db.username&#125;&quot;</span><br><span class=\"line\">                        password=&quot;$&#123;db.password&#125;&quot;&gt;</span><br><span class=\"line\">        &lt;/jdbcConnection&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &lt;!--非必须，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span><br><span class=\"line\">        &lt;javaTypeResolver&gt;</span><br><span class=\"line\">            &lt;!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 --&gt;</span><br><span class=\"line\">            &lt;!-- 不是 double 和 long 类型 --&gt;</span><br><span class=\"line\">            &lt;!-- 使用常用的基本类型代替 sql 包下的引用类型 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">        &lt;/javaTypeResolver&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &lt;!-- targetPackage：生成的实体类所在的包 --&gt;</span><br><span class=\"line\">        &lt;!-- targetProject：生成的实体类所在的硬盘位置 --&gt;</span><br><span class=\"line\">        &lt;javaModelGenerator targetPackage=&quot;com.mall.pojo&quot;</span><br><span class=\"line\">                            targetProject=&quot;.\\src\\main\\java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 是否允许子包 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">            &lt;!-- 是否对modal添加构造函数 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">            &lt;!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">            &lt;!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;immutable&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">        &lt;/javaModelGenerator&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &lt;!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 --&gt;</span><br><span class=\"line\">        &lt;sqlMapGenerator targetPackage=&quot;mappers&quot;</span><br><span class=\"line\">                         targetProject=&quot;.\\src\\main\\resource&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 针对数据库的一个配置，是否把 schema 作为字包名 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">        &lt;/sqlMapGenerator&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &lt;!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 --&gt;</span><br><span class=\"line\">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class=\"line\">                             targetPackage=&quot;com.mall.dao&quot; targetProject=&quot;.\\src\\main\\java&quot;&gt;</span><br><span class=\"line\">            &lt;!-- 针对 oracle 数据库的一个配置，是否把 schema 作为字包名 --&gt;</span><br><span class=\"line\">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">        &lt;/javaClientGenerator&gt;</span><br><span class=\"line\">        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;</span><br><span class=\"line\">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class=\"line\">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class=\"line\">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/context&gt;</span><br><span class=\"line\">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-运行代码生成器生成代码\"><a href=\"#3-运行代码生成器生成代码\" class=\"headerlink\" title=\"3)运行代码生成器生成代码\"></a>3)运行代码生成器生成代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testMBG() throws Exception &#123;</span><br><span class=\"line\">\t\t   List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t   boolean overwrite = true;</span><br><span class=\"line\">\t\t   File configFile = new File(&quot;mbg.xml&quot;);</span><br><span class=\"line\">\t\t   ConfigurationParser cp = new ConfigurationParser(warnings);</span><br><span class=\"line\">\t\t   Configuration config = cp.parseConfiguration(configFile);</span><br><span class=\"line\">\t\t   DefaultShellCallback callback = new DefaultShellCallback(overwrite);</span><br><span class=\"line\">\t\t   MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, </span><br><span class=\"line\">           callback, warnings);</span><br><span class=\"line\">\t\t   myBatisGenerator.generate(null);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-3-逆向工程的使用\"><a href=\"#7-3-逆向工程的使用\" class=\"headerlink\" title=\"7.3 逆向工程的使用\"></a>7.3 逆向工程的使用</h1><h2 id=\"1-基本查询的测试\"><a href=\"#1-基本查询的测试\" class=\"headerlink\" title=\"1)基本查询的测试\"></a>1)基本查询的测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void testSelect() throws Exception &#123;</span><br><span class=\"line\">\t\tSqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class=\"line\">\t\tSqlSession session = ssf.openSession();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tEmployeeMapper mapper = session.getMapper(EmployeeMapper.class);</span><br><span class=\"line\">\t\t\tList&lt;Employee&gt; emps = mapper.selectAll();</span><br><span class=\"line\">\t\t\tfor (Employee employee : emps) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(employee);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tsession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-带条件查询的测试\"><a href=\"#2-带条件查询的测试\" class=\"headerlink\" title=\"2)带条件查询的测试\"></a>2)带条件查询的测试</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void testSelect() throws Exception &#123;</span><br><span class=\"line\">\t\tSqlSessionFactory ssf = getSqlSessionFactory();</span><br><span class=\"line\">\t\tSqlSession session = ssf.openSession();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tEmployeeMapper mapper = session.getMapper(EmployeeMapper.class);</span><br><span class=\"line\">\t\t\t//条件查询: 名字中带有&apos;张&apos; 并且 email中&apos;j&apos;  或者 did = 2 </span><br><span class=\"line\">\t\t\tEmployeeExample example =  new EmployeeExample();</span><br><span class=\"line\">\t\t\tCriteria criteria = example.createCriteria();//封装条件1</span><br><span class=\"line\">\t\t\tcriteria.andLastNameLike(&quot;%张%&quot;);//条件</span><br><span class=\"line\">\t\t\tcriteria.andEmailLike(&quot;%j%&quot;);//条件</span><br><span class=\"line\">\t\t\t//or 或者</span><br><span class=\"line\">\t\t\tCriteria criteriaOr = example.createCriteria();//封装条件2</span><br><span class=\"line\">\t\t\tcriteriaOr.andDIdEqualTo(2);//条件</span><br><span class=\"line\">\t\t\t//将封装条件1或者封装条件2设置到example中</span><br><span class=\"line\">\t\t\texample.or(criteriaOr);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tList&lt;Employee&gt; emps = mapper.selectByExample(example);</span><br><span class=\"line\">\t\t\tfor (Employee employee : emps) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(employee);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tsession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"拓展-1-生成中文注释\"><a href=\"#拓展-1-生成中文注释\" class=\"headerlink\" title=\"拓展 1 生成中文注释\"></a>拓展 1 生成中文注释</h1><p>1.编写MBG的配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- </span><br><span class=\"line\">  \t\t</span><br><span class=\"line\">  \t --&gt;</span><br><span class=\"line\">&lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 --&gt;</span><br><span class=\"line\">        &lt;property name=&quot;javaFileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class=\"line\">        &lt;!-- 实现中文注释，这里的type里写的是你的实现类的类全路径，实现类在下面--&gt;</span><br><span class=\"line\">        &lt;commentGenerator type=&quot;com.lbb.mybatis.generator.MyCommentGenerator&quot;&gt;</span><br><span class=\"line\">        &lt;/commentGenerator&gt;</span><br><span class=\"line\">  \t&lt;!-- </span><br><span class=\"line\">  \t\t数据库的连接环境</span><br><span class=\"line\">  \t --&gt;</span><br><span class=\"line\">    &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class=\"line\">        connectionURL=&quot;jdbc:mysql://localhost:3306/cosmetics_inventory_system&quot;</span><br><span class=\"line\">        userId=&quot;root&quot;</span><br><span class=\"line\">        password=&quot;root&quot;&gt;</span><br><span class=\"line\">    &lt;/jdbcConnection&gt;</span><br></pre></td></tr></table></figure>\n<p>2.建一个自定义的类 MyCommentGenerator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lbb.mybatis.generator;</span><br><span class=\"line\"></span><br><span class=\"line\">import static org.mybatis.generator.internal.util.StringUtility.isTrue;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.SimpleDateFormat;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.mybatis.generator.api.CommentGenerator;</span><br><span class=\"line\">import org.mybatis.generator.api.IntrospectedColumn;</span><br><span class=\"line\">import org.mybatis.generator.api.IntrospectedTable;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.java.CompilationUnit;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.java.Field;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.java.InnerClass;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.java.InnerEnum;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.java.JavaElement;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.java.Method;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.java.Parameter;</span><br><span class=\"line\">import org.mybatis.generator.api.dom.xml.XmlElement;</span><br><span class=\"line\">import org.mybatis.generator.config.MergeConstants;</span><br><span class=\"line\">import org.mybatis.generator.config.PropertyRegistry;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 描述：</span><br><span class=\"line\"> * @since 1.9.10</span><br><span class=\"line\"> * @version 1.9.10</span><br><span class=\"line\"> * @作者：lidaxiong</span><br><span class=\"line\"> * @创建时间：2019年1月22日</span><br><span class=\"line\"> * @修改记录：</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class MyCommentGenerator implements CommentGenerator&#123;</span><br><span class=\"line\">    private Properties properties;</span><br><span class=\"line\">    private Properties systemPro;</span><br><span class=\"line\">    private boolean suppressDate;</span><br><span class=\"line\">    private boolean suppressAllComments;</span><br><span class=\"line\">    private String currentDateStr;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyCommentGenerator() &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        properties = new Properties();</span><br><span class=\"line\">        systemPro = System.getProperties();</span><br><span class=\"line\">        suppressDate = false;</span><br><span class=\"line\">        suppressAllComments = false;</span><br><span class=\"line\">        currentDateStr = (new SimpleDateFormat(&quot;yyyy-MM-dd&quot;)).format(new Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addJavaFileComment(CompilationUnit compilationUnit) &#123;</span><br><span class=\"line\">        // add no file level comments by default</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Adds a suitable comment to warn users that the element was generated, and</span><br><span class=\"line\">     * when it was generated.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void addComment(XmlElement xmlElement) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addRootComment(XmlElement rootElement) &#123;</span><br><span class=\"line\">        // add no document level comments by default</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addConfigurationProperties(Properties properties) &#123;</span><br><span class=\"line\">        this.properties.putAll(properties);</span><br><span class=\"line\"></span><br><span class=\"line\">        suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));</span><br><span class=\"line\"></span><br><span class=\"line\">        suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * This method adds the custom javadoc tag for. You may do nothing if you do</span><br><span class=\"line\">     * not wish to include the Javadoc tag - however, if you do not include the</span><br><span class=\"line\">     * Javadoc tag then the Java merge capability of the eclipse plugin will</span><br><span class=\"line\">     * break.</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param javaElement</span><br><span class=\"line\">     *            the java element</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) &#123;</span><br><span class=\"line\">        javaElement.addJavaDocLine(&quot; *&quot;);</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(MergeConstants.NEW_ELEMENT_TAG);</span><br><span class=\"line\">        if (markAsDoNotDelete) &#123;</span><br><span class=\"line\">            sb.append(&quot; do_not_delete_during_merge&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String s = getDateString();</span><br><span class=\"line\">        if (s != null) &#123;</span><br><span class=\"line\">            sb.append(&apos; &apos;);</span><br><span class=\"line\">            sb.append(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        javaElement.addJavaDocLine(sb.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * This method returns a formated date string to include in the Javadoc tag</span><br><span class=\"line\">     * and XML comments. You may return null if you do not want the date in</span><br><span class=\"line\">     * these documentation elements.</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @return a string representing the current timestamp, or null</span><br><span class=\"line\">     */</span><br><span class=\"line\">    protected String getDateString() &#123;</span><br><span class=\"line\">        String result = null;</span><br><span class=\"line\">        if (!suppressDate) &#123;</span><br><span class=\"line\">            result = currentDateStr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        innerClass.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class=\"line\">        sb.append(&quot; &quot;);</span><br><span class=\"line\">        sb.append(getDateString());</span><br><span class=\"line\">        innerClass.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        innerClass.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        innerEnum.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class=\"line\">        innerEnum.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        innerEnum.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addFieldComment(Field field, IntrospectedTable introspectedTable,</span><br><span class=\"line\">            IntrospectedColumn introspectedColumn) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        field.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(introspectedColumn.getRemarks());</span><br><span class=\"line\">        field.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        field.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addFieldComment(Field field, IntrospectedTable introspectedTable) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        field.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class=\"line\">        field.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        field.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      method.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">      addJavadocTag(method, false);</span><br><span class=\"line\">      method.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addGetterComment(Method method, IntrospectedTable introspectedTable,</span><br><span class=\"line\">            IntrospectedColumn introspectedColumn) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        method.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(introspectedColumn.getRemarks());</span><br><span class=\"line\">        method.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        sb.setLength(0);</span><br><span class=\"line\">        sb.append(&quot; * @return &quot;);</span><br><span class=\"line\">        sb.append(introspectedColumn.getActualColumnName());</span><br><span class=\"line\">        sb.append(&quot; &quot;);</span><br><span class=\"line\">        sb.append(introspectedColumn.getRemarks());</span><br><span class=\"line\">        method.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        method.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addSetterComment(Method method, IntrospectedTable introspectedTable,</span><br><span class=\"line\">            IntrospectedColumn introspectedColumn) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        method.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(introspectedColumn.getRemarks());</span><br><span class=\"line\">        method.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        Parameter parm = method.getParameters().get(0);</span><br><span class=\"line\">        sb.setLength(0);</span><br><span class=\"line\">        sb.append(&quot; * @param &quot;);</span><br><span class=\"line\">        sb.append(parm.getName());</span><br><span class=\"line\">        sb.append(&quot; &quot;);</span><br><span class=\"line\">        sb.append(introspectedColumn.getRemarks());</span><br><span class=\"line\">        method.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        method.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) &#123;</span><br><span class=\"line\">        if (suppressAllComments) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">        innerClass.addJavaDocLine(&quot;/**&quot;);</span><br><span class=\"line\">        sb.append(&quot; * &quot;);</span><br><span class=\"line\">        sb.append(introspectedTable.getFullyQualifiedTable());</span><br><span class=\"line\">        innerClass.addJavaDocLine(sb.toString().replace(&quot;\\n&quot;, &quot; &quot;));</span><br><span class=\"line\">        sb.setLength(0);</span><br><span class=\"line\">        sb.append(&quot; * @author &quot;);</span><br><span class=\"line\">        sb.append(systemPro.getProperty(&quot;user.name&quot;));</span><br><span class=\"line\">        sb.append(&quot; &quot;);</span><br><span class=\"line\">        sb.append(currentDateStr);</span><br><span class=\"line\">        innerClass.addJavaDocLine(&quot; */&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"6. MyBatis 缓存机制","url":"http://yoursite.com/2018/03/19/62. MyBatis 缓存机制/","content":"<h1 id=\"6-1-缓存机制简介\"><a href=\"#6-1-缓存机制简介\" class=\"headerlink\" title=\"6.1 缓存机制简介\"></a>6.1 缓存机制简介</h1><blockquote>\n<p>1)MyBatis 包含一个非常强大的查询缓存特性,它可以非常方便地配置和定制。缓存可以极大的提升查询效率<br>2)MyBatis系统中默认定义了两级缓存<br>    一级缓存<br>    二级缓存<br>3)默认情况下，只有一级缓存（SqlSession级别的缓存，也称为本地缓存）开启。<br>4)二级缓存需要手动开启和配置，他是基于namespace级别的缓存。<br>5)为了提高扩展性。MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存  </p>\n</blockquote>\n<h1 id=\"6-2-一级缓存的使用\"><a href=\"#6-2-一级缓存的使用\" class=\"headerlink\" title=\"6.2 一级缓存的使用\"></a>6.2 一级缓存的使用</h1><p>1)一级缓存(local cache), 即本地缓存, 作用域默认为sqlSession。当  Session flush 或 close 后, 该 Session 中的所有 Cache 将被清空。<br>2)本地缓存不能被关闭, 但可以调用 clearCache() 来清空本地缓存, 或者改变缓存的作用域.<br>3)在mybatis3.1之后, 可以配置本地缓存的作用域. 在 mybatis.xml 中配置</p>\n<p><a href=\"https://imgchr.com/i/EsO17F\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/07/EsO17F.md.png\" alt=\"EsO17F.md.png\"></a></p>\n<p>4)一级缓存的工作机制<br>同一次会话期间只要查询过的数据都会保存在当前SqlSession的一个Map中<br>key: hashCode+查询的SqlId+编写的sql查询语句+参数</p>\n<h1 id=\"6-3-一级缓存失效的几种情况\"><a href=\"#6-3-一级缓存失效的几种情况\" class=\"headerlink\" title=\"6.3 一级缓存失效的几种情况\"></a>6.3 一级缓存失效的几种情况</h1><pre><code>1)不同的SqlSession对应不同的一级缓存\n2)同一个SqlSession但是查询条件不同\n3)同一个SqlSession两次查询期间执行了任何一次增删改操作\n4)同一个SqlSession两次查询期间手动清空了缓存\n</code></pre><h1 id=\"6-4-二级缓存的使用\"><a href=\"#6-4-二级缓存的使用\" class=\"headerlink\" title=\"6.4 二级缓存的使用\"></a>6.4 二级缓存的使用</h1><pre><code>1)二级缓存(second level cache)，全局作用域缓存 //全局缓存 \n2)二级缓存默认开启，但是需要手动配置 \n    最好配置上 防止升级出bug cacheEnabled=true\n3)MyBatis提供二级缓存的接口以及实现，缓存实现要求POJO实现Serializable接口\n4)二级缓存在 SqlSession 关闭或提交之后才会生效\n5)二级缓存使用的步骤:\n\n    ①全局配置文件中开启二级缓存&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;\n    ②需要使用二级缓存的映射文件处使用cache配置缓存&lt;cache /&gt;\n    ③注意：POJO需要实现Serializable接口\n        添加序列号标示号（表示类有没有升级过） default serial VersionUID =1L\n    ps 注意要提交 二级缓存才起作用 \n6) 二级缓存工作机制\n    基于同一个namespace的多个SqlSession对象\n6)二级缓存相关的属性\n    ①eviction=“FIFO”：缓存回收策略（通俗的讲就是移除）：\n    LRU – 最近最少使用的：移除最长时间不被使用的对象。\n    FIFO – 先进先出：按对象进入缓存的顺序来移除它们。\n    SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。\n    WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。\n    默认的是 LRU。\n    ②flushInterval：刷新间隔，单位毫秒\n    默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新\n    ③size：引用数目，正整数\n    代表缓存最多可以存储多少个对象，太大容易导致内存溢出\n    ④readOnly：只读设置简称-“只读”，true/false\n    true（不安全的，速度快）：只读缓存；MyBatis认为从缓存中获得的数据不会被修改，直接将缓存中的数据引用交给用户。。。\n         会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。\n    false（安全的，但是会有损耗，慢）：非只读，MyBatis认为从缓存中获取的数据会被修改，会使用序列化以及反序列化的技术克隆一份给用户。。。\n         读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。（一般使用false）\n\n    拓展：type：指定使用的缓存类，一般用在自定义缓存或者整合第三方缓存\n</code></pre><h1 id=\"6-5-缓存的相关属性设置\"><a href=\"#6-5-缓存的相关属性设置\" class=\"headerlink\" title=\"6.5 缓存的相关属性设置\"></a>6.5 缓存的相关属性设置</h1><h2 id=\"1-全局setting的cacheEnable-true：\"><a href=\"#1-全局setting的cacheEnable-true：\" class=\"headerlink\" title=\"1)全局setting的cacheEnable=true：\"></a>1)全局setting的cacheEnable=true：</h2><pre><code>配置二级缓存的开关，一级缓存一直是打开的。\n</code></pre><h2 id=\"2-select标签的useCache属性：\"><a href=\"#2-select标签的useCache属性：\" class=\"headerlink\" title=\"2)select标签的useCache属性：\"></a>2)select标签的useCache属性：</h2><pre><code>配置这个select是否使用二级缓存。一级缓存一直是使用的\n</code></pre><h2 id=\"3-sql标签的flushCache属性：\"><a href=\"#3-sql标签的flushCache属性：\" class=\"headerlink\" title=\"3)sql标签的flushCache属性：\"></a>3)sql标签的flushCache属性：</h2><pre><code>增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。\n查询默认 flushCache=false。\n</code></pre><h2 id=\"4-sqlSession-clearCache-：\"><a href=\"#4-sqlSession-clearCache-：\" class=\"headerlink\" title=\"4)sqlSession.clearCache()：\"></a>4)sqlSession.clearCache()：</h2><pre><code>只是用来清除一级缓存。\n</code></pre><h1 id=\"6-6-整合第三方缓存\"><a href=\"#6-6-整合第三方缓存\" class=\"headerlink\" title=\"6.6 整合第三方缓存\"></a>6.6 整合第三方缓存</h1><p>1)为了提高扩展性。MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p>\n<p>2)EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider</p>\n<p>3)整合EhCache缓存的步骤:<br>    ①导入ehcache包，以及整合包，日志包<br>    ehcache-core-2.6.8.jar、mybatis-ehcache-1.0.3.jar<br>    slf4j-api-1.6.1.jar、slf4j-log4j12-1.6.2.jar<br>    ②编写ehcache.xml配置文件<br>    ③配置使用ehcache.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\"> xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt;</span><br><span class=\"line\"> &lt;!-- 磁盘保存路径 --&gt;</span><br><span class=\"line\"> &lt;diskStore path=&quot;D:\\atguigu\\ehcache&quot; /&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;defaultCache </span><br><span class=\"line\">   maxElementsInMemory=&quot;1000&quot; </span><br><span class=\"line\">   maxElementsOnDisk=&quot;10000000&quot;</span><br><span class=\"line\">   eternal=&quot;false&quot; </span><br><span class=\"line\">   overflowToDisk=&quot;true&quot; </span><br><span class=\"line\">   timeToIdleSeconds=&quot;120&quot;</span><br><span class=\"line\">   timeToLiveSeconds=&quot;120&quot; </span><br><span class=\"line\">   diskExpiryThreadIntervalSeconds=&quot;120&quot;</span><br><span class=\"line\">   memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;</span><br><span class=\"line\"> &lt;/defaultCache&gt;</span><br><span class=\"line\">&lt;/ehcache&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">属性说明：</span><br><span class=\"line\">l diskStore：指定数据在磁盘中的存储位置。</span><br><span class=\"line\">l defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略</span><br><span class=\"line\"> </span><br><span class=\"line\">以下属性是必须的：</span><br><span class=\"line\">l maxElementsInMemory - 在内存中缓存的element的最大数目 </span><br><span class=\"line\">l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大</span><br><span class=\"line\">l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断</span><br><span class=\"line\">l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</span><br><span class=\"line\"> </span><br><span class=\"line\">以下属性是可选的：</span><br><span class=\"line\">l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大</span><br><span class=\"line\">l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</span><br><span class=\"line\"> diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.</span><br><span class=\"line\">l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</span><br><span class=\"line\">l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作</span><br><span class=\"line\">l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</span><br><span class=\"line\"> --&gt;</span><br></pre></td></tr></table></figure></p>\n<p>③配置cache标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;&lt;/cache&gt;</span><br></pre></td></tr></table></figure>\n<p>4）缓存的查找顺序：<br>二级缓存==&gt;一级换成 ==&gt;数据库 简称：二一库</p>\n","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"5. MyBatis 动态SQL","url":"http://yoursite.com/2018/03/17/61. MyBatis 动态SQL/","content":"<h1 id=\"5-1-MyBatis动态SQL简介\"><a href=\"#5-1-MyBatis动态SQL简介\" class=\"headerlink\" title=\"5.1 MyBatis动态SQL简介\"></a>5.1 MyBatis动态SQL简介</h1><p>1)动态 SQL是MyBatis强大特性之一。极大的简化程序员拼装SQL的操作<br>2)动态 SQL 元素和使用 JSTL 或其他类似基于 XML 的文本处理器相似<br>3)MyBatis 采用功能强大的基于 OGNL 的表达式来简化操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if</span><br><span class=\"line\">choose (when, otherwise)</span><br><span class=\"line\">trim (where, set)</span><br><span class=\"line\">foreach</span><br></pre></td></tr></table></figure></p>\n<p>4)OGNL（ Object Graph Navigation Language ）对象图导航语言，这是一种强大的<br>表达式语言，通过它可以非常方便的来操作对象属性。 类似于我们的EL，SpEL等</p>\n<pre><code>访问对象属性：        person.name\n调用方法：            person.getName()\n调用静态属性/方法：    @java.lang.Math@PI    \n                    @java.util.UUID@randomUUID()\n调用构造方法：        new com.atguigu.bean.Person(‘admin’).name\n运算符：             +,-*,/,%\n逻辑运算符：         in,not in,&gt;,&gt;=,&lt;,&lt;=,==,!=\n【注意】xml中特殊符号如”,&gt;,&lt;等这些都需要使用转义字符\n</code></pre><h1 id=\"5-2-if-where\"><a href=\"#5-2-if-where\" class=\"headerlink\" title=\"5.2 if  where\"></a>5.2 if  where</h1><p>1)If用于完成简单的判断.<br>2)Where用于解决SQL语句中where关键字以及条件中第一个and或者or的问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;select id=&quot;getEmpsByConditionIf&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class=\"line\">\t\tselect id , last_name ,email  , gender  </span><br><span class=\"line\">\t\tfrom tbl_employee </span><br><span class=\"line\">\t\t&lt;where&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand id = #&#123;id&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand last_name = #&#123;lastName&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;email!=null and email.trim()!=&apos;&apos;&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand email = #&#123;email&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;&amp;quot;m&amp;quot;.equals(gender) or &amp;quot;f&amp;quot;.equals(gender)&quot;&gt;</span><br><span class=\"line\">\t\t\t\tand gender = #&#123;gender&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/where&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-3-trim\"><a href=\"#5-3-trim\" class=\"headerlink\" title=\"5.3 trim\"></a>5.3 trim</h1><p>1)Trim 可以在条件判断完的SQL语句前后 添加或者去掉指定的字符</p>\n<pre><code>prefix: 添加前缀\nprefixOverrides: 去掉前缀\nsuffix: 添加后缀\nsuffixOverrides: 去掉后缀\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmpsByConditionTrim&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class=\"line\">\t\tselect id , last_name ,email  , gender  </span><br><span class=\"line\">\t\tfrom tbl_employee </span><br><span class=\"line\">\t\t&lt;trim prefix=&quot;where&quot;  suffixOverrides=&quot;and&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t id = #&#123;id&#125; and</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class=\"line\">\t\t\t\t last_name = #&#123;lastName&#125; and</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;email!=null and email.trim()!=&apos;&apos;&quot;&gt;</span><br><span class=\"line\">\t\t\t\t email = #&#123;email&#125; and</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;&amp;quot;m&amp;quot;.equals(gender) or &amp;quot;f&amp;quot;.equals(gender)&quot;&gt;</span><br><span class=\"line\">\t\t\t\tgender = #&#123;gender&#125;</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/trim&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-4-set\"><a href=\"#5-4-set\" class=\"headerlink\" title=\"5.4 set\"></a>5.4 set</h1><p>1)set 主要是用于解决修改操作中SQL语句中可能多出逗号的问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=&quot;updateEmpByConditionSet&quot;&gt;</span><br><span class=\"line\">\t\tupdate  tbl_employee  </span><br><span class=\"line\">\t\t&lt;set&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;&quot;&gt;</span><br><span class=\"line\">\t\t\t\t last_name = #&#123;lastName&#125;,</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;email!=null and email.trim()!=&apos;&apos;&quot;&gt;</span><br><span class=\"line\">\t\t\t\t email = #&#123;email&#125; ,</span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t\t&lt;if test=&quot;&amp;quot;m&amp;quot;.equals(gender) or &amp;quot;f&amp;quot;.equals(gender)&quot;&gt;</span><br><span class=\"line\">\t\t\t\tgender = #&#123;gender&#125; </span><br><span class=\"line\">\t\t\t&lt;/if&gt;</span><br><span class=\"line\">\t\t&lt;/set&gt;</span><br><span class=\"line\">\t\t where id =#&#123;id&#125;</span><br><span class=\"line\">\t&lt;/update&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-5-choose-when、otherwise\"><a href=\"#5-5-choose-when、otherwise\" class=\"headerlink\" title=\"5.5 choose(when、otherwise)\"></a>5.5 choose(when、otherwise)</h1><p>1)choose 主要是用于分支判断，类似于java中的switch case,只会满足所有分支中的一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmpsByConditionChoose&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class=\"line\">\t\tselect id ,last_name, email,gender from tbl_employee</span><br><span class=\"line\">\t\t&lt;where&gt;</span><br><span class=\"line\">\t\t\t&lt;choose&gt;</span><br><span class=\"line\">\t\t\t\t&lt;when test=&quot;id!=null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\tid = #&#123;id&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/when&gt;</span><br><span class=\"line\">\t\t\t\t&lt;when test=&quot;lastName!=null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\tlast_name = #&#123;lastName&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/when&gt;</span><br><span class=\"line\">\t\t\t\t&lt;when test=&quot;email!=null&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\temail = #&#123;email&#125;</span><br><span class=\"line\">\t\t\t\t&lt;/when&gt;</span><br><span class=\"line\">\t\t\t\t&lt;otherwise&gt;</span><br><span class=\"line\">\t\t\t\t\t gender = &apos;m&apos;</span><br><span class=\"line\">\t\t\t\t&lt;/otherwise&gt;</span><br><span class=\"line\">\t\t\t&lt;/choose&gt;</span><br><span class=\"line\">\t\t&lt;/where&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-6-foreach\"><a href=\"#5-6-foreach\" class=\"headerlink\" title=\"5.6 foreach\"></a>5.6 foreach</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foreach 主要用于循环迭代</span><br><span class=\"line\">collection: 要迭代的集合</span><br><span class=\"line\">item: 当前从集合中迭代出的元素</span><br><span class=\"line\">open: 开始字符</span><br><span class=\"line\">close:结束字符</span><br><span class=\"line\">separator: 元素与元素之间的分隔符</span><br><span class=\"line\">index:</span><br><span class=\"line\">\t迭代的是List集合: index表示的当前元素的下标</span><br><span class=\"line\">\t\t迭代的Map集合:  index表示的当前元素的key</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmpsByConditionForeach&quot; resultType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class=\"line\">\t\t select id , last_name, email ,gender from tbl_employee where  id in </span><br><span class=\"line\">\t\t &lt;foreach collection=&quot;ids&quot; item=&quot;curr_id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; &gt;</span><br><span class=\"line\">\t\t \t\t#&#123;curr_id&#125;</span><br><span class=\"line\">\t\t &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-7-sql\"><a href=\"#5-7-sql\" class=\"headerlink\" title=\"5.7 sql\"></a>5.7 sql</h1><p>1)sql 标签是用于抽取可重用的sql片段，将相同的，使用频繁的SQL片段抽取出来，单独定义，方便多次引用.<br>2)抽取SQL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;sql id=&quot;selectSQL&quot;&gt;</span><br><span class=\"line\">\t\tselect id , last_name, email ,gender from tbl_employee</span><br><span class=\"line\">&lt;/sql&gt;</span><br></pre></td></tr></table></figure></p>\n<p>3)引用SQL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;include refid=&quot;selectSQL&quot;&gt;&lt;/include&gt;</span><br></pre></td></tr></table></figure></p>\n","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"4. MyBatis 映射文件","url":"http://yoursite.com/2018/03/16/60. MyBatis 映射文件/","content":"<h1 id=\"4-1-Mybatis映射文件简介\"><a href=\"#4-1-Mybatis映射文件简介\" class=\"headerlink\" title=\"4.1 Mybatis映射文件简介\"></a>4.1 Mybatis映射文件简介</h1><p>1)MyBatis 的真正强大在于它的映射语句，也是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 就是针对 SQL 构建的，并且比普通的方法做的更好。<br>2)SQL 映射文件有很少的几个顶级元素（按照它们应该被定义的顺序）：</p>\n<pre><code>cache – 给定命名空间的缓存配置。\ncache-ref – 其他命名空间缓存配置的引用。\nresultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。\n【parameterMap – 已废弃！老式风格的参数映射。内联参数是首选,这个元素可能在将来被移除，这里不会记录。】\nsql – 可被其他语句引用的可重用语句块。\ninsert – 映射插入语句\nupdate – 映射更新语句\ndelete – 映射删除语句\nselect – 映射查询语\n</code></pre><h1 id=\"4-2-Mybatis使用insert-update-delete-select完成sql-CRUD\"><a href=\"#4-2-Mybatis使用insert-update-delete-select完成sql-CRUD\" class=\"headerlink\" title=\"4.2 Mybatis使用insert|update|delete|select完成sql CRUD\"></a>4.2 Mybatis使用insert|update|delete|select完成sql CRUD</h1><h2 id=\"4-2-1-select-查\"><a href=\"#4-2-1-select-查\" class=\"headerlink\" title=\"4.2.1 select 查\"></a>4.2.1 select 查</h2><h3 id=\"1-Mapper接口方法\"><a href=\"#1-Mapper接口方法\" class=\"headerlink\" title=\"1)Mapper接口方法\"></a>1)Mapper接口方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Employee getEmployeeById(Integer id );</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Mapper映射文件\"><a href=\"#2-Mapper映射文件\" class=\"headerlink\" title=\"2)Mapper映射文件\"></a>2)Mapper映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmployeeById&quot; </span><br><span class=\"line\">          resultType=&quot;com.atguigu.mybatis.beans.Employee&quot; </span><br><span class=\"line\">          databaseId=&quot;mysql&quot;&gt;</span><br><span class=\"line\">\t\t select * from tbl_employee where id = $&#123;_parameter&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-2-insert-增／加\"><a href=\"#4-2-2-insert-增／加\" class=\"headerlink\" title=\"4.2.2 insert 增／加\"></a>4.2.2 insert 增／加</h2><h3 id=\"1-Mapper接口方法-1\"><a href=\"#1-Mapper接口方法-1\" class=\"headerlink\" title=\"1)Mapper接口方法\"></a>1)Mapper接口方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Integer  insertEmployee(Employee employee);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Mapper映射文件-1\"><a href=\"#2-Mapper映射文件-1\" class=\"headerlink\" title=\"2)Mapper映射文件\"></a>2)Mapper映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;insertEmployee&quot; </span><br><span class=\"line\">\t\tparameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class=\"line\">\t\t\tdatabaseId=&quot;mysql&quot;&gt;</span><br><span class=\"line\">\t\tinsert into tbl_employee(last_name,email,gender) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-3-update-改\"><a href=\"#4-2-3-update-改\" class=\"headerlink\" title=\"4.2.3  update 改\"></a>4.2.3  update 改</h2><h3 id=\"1-Mapper接口方法-2\"><a href=\"#1-Mapper接口方法-2\" class=\"headerlink\" title=\"1)Mapper接口方法\"></a>1)Mapper接口方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Boolean  updateEmployee(Employee employee);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Mapper映射文件-2\"><a href=\"#2-Mapper映射文件-2\" class=\"headerlink\" title=\"2)Mapper映射文件\"></a>2)Mapper映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=&quot;updateEmployee&quot; &gt;</span><br><span class=\"line\">\t\tupdate tbl_employee set last_name = #&#123;lastName&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t\t    email = #&#123;email&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t\t    gender = #&#123;gender&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t    where id = #&#123;id&#125;</span><br><span class=\"line\">&lt;/update&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-4-delete-删\"><a href=\"#4-2-4-delete-删\" class=\"headerlink\" title=\"4.2.4  delete 删\"></a>4.2.4  delete 删</h2><h3 id=\"1-Mapper接口方法-3\"><a href=\"#1-Mapper接口方法-3\" class=\"headerlink\" title=\"1)Mapper接口方法\"></a>1)Mapper接口方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public void  deleteEmployeeById(Integer id );</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Mapper映射文件-3\"><a href=\"#2-Mapper映射文件-3\" class=\"headerlink\" title=\"2)Mapper映射文件\"></a>2)Mapper映射文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;delete id=&quot;deleteEmployeeById&quot; &gt;</span><br><span class=\"line\">\t\tdelete from tbl_employee where id = #&#123;id&#125;</span><br><span class=\"line\">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-3主键生成方式、获取主键值\"><a href=\"#4-3主键生成方式、获取主键值\" class=\"headerlink\" title=\"4.3主键生成方式、获取主键值\"></a>4.3主键生成方式、获取主键值</h1><h2 id=\"4-3-1-主键生成方式\"><a href=\"#4-3-1-主键生成方式\" class=\"headerlink\" title=\"4.3.1    主键生成方式\"></a>4.3.1    主键生成方式</h2><p>1)支持主键自增，例如MySQL数据库<br>2)不支持主键自增，例如Oracle数据库  </p>\n<p> 需求: 插入一条新数据，立马查询这条数据. </p>\n<h2 id=\"4-3-2-获取主键值\"><a href=\"#4-3-2-获取主键值\" class=\"headerlink\" title=\"4.3.2 获取主键值\"></a>4.3.2 获取主键值</h2><p>1)若数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），则可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置到目标属性上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;insertEmployee&quot; \tparameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class=\"line\">\t\t\tdatabaseId=&quot;mysql&quot;</span><br><span class=\"line\">\t\t\tuseGeneratedKeys=&quot;true&quot;</span><br><span class=\"line\">\t\t\tkeyProperty=&quot;id&quot;&gt;</span><br><span class=\"line\">\t\tinsert into tbl_employee(last_name,email,gender) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n<p>2)而对于不支持自增型主键的数据库（例如 Oracle），则可以使用 selectKey 子元素：selectKey  元素将会首先运行，id  会被设置，然后插入语句会被调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;insertEmployee&quot; </span><br><span class=\"line\">\t\tparameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class=\"line\">\t\t\tdatabaseId=&quot;oracle&quot;&gt;</span><br><span class=\"line\">\t\t&lt;selectKey order=&quot;BEFORE&quot; keyProperty=&quot;id&quot; </span><br><span class=\"line\">                                       resultType=&quot;integer&quot;&gt;</span><br><span class=\"line\">\t\t\tselect employee_seq.nextval from dual </span><br><span class=\"line\">\t\t&lt;/selectKey&gt;\t</span><br><span class=\"line\">\t\tinsert into orcl_employee(id,last_name,email,gender) values(#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n<p>或者是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;insertEmployee&quot; </span><br><span class=\"line\">\t\tparameterType=&quot;com.atguigu.mybatis.beans.Employee&quot;  </span><br><span class=\"line\">\t\t\tdatabaseId=&quot;oracle&quot;&gt;</span><br><span class=\"line\">\t\t&lt;selectKey order=&quot;AFTER&quot; keyProperty=&quot;id&quot; </span><br><span class=\"line\">                                         resultType=&quot;integer&quot;&gt;</span><br><span class=\"line\">\t\t\tselect employee_seq.currval from dual </span><br><span class=\"line\">\t\t&lt;/selectKey&gt;\t</span><br><span class=\"line\">\tinsert into orcl_employee(id,last_name,email,gender) values(employee_seq.nextval,#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-4-参数传递\"><a href=\"#4-4-参数传递\" class=\"headerlink\" title=\"4.4 参数传递\"></a>4.4 参数传递</h1><h2 id=\"4-4-1-参数传递的方式\"><a href=\"#4-4-1-参数传递的方式\" class=\"headerlink\" title=\"4.4.1 参数传递的方式\"></a>4.4.1 参数传递的方式</h2><h3 id=\"1-单个普通类型参数\"><a href=\"#1-单个普通类型参数\" class=\"headerlink\" title=\"1)单个普通类型参数\"></a>1)单个普通类型参数</h3><pre><code>可以接受基本类型，包装类型，字符串类型等。这种情况MyBatis可直接使用这个参数，不需要经过任何处理。\n</code></pre><h3 id=\"2-多个参数\"><a href=\"#2-多个参数\" class=\"headerlink\" title=\"2)多个参数\"></a>2)多个参数</h3><pre><code>任意多个参数，都会被MyBatis重新包装成一个Map传入。Map的key是param1，param2，或者0，1…，值就是参数的值\n</code></pre><h3 id=\"3-命名参数\"><a href=\"#3-命名参数\" class=\"headerlink\" title=\"3)命名参数\"></a>3)命名参数</h3><pre><code>为参数使用@Param起一个名字，MyBatis就会将这些参数封装进map中，key就是我们自己指定的名字\n</code></pre><h3 id=\"4-POJO\"><a href=\"#4-POJO\" class=\"headerlink\" title=\"4)POJO\"></a>4)POJO</h3><pre><code>当这些参数属于我们业务POJO时，我们直接传递POJO\n</code></pre><h3 id=\"5-Map\"><a href=\"#5-Map\" class=\"headerlink\" title=\"5)Map\"></a>5)Map</h3><pre><code>我们也可以封装多个参数为map，直接传递\n</code></pre><h3 id=\"6-Collection-Array\"><a href=\"#6-Collection-Array\" class=\"headerlink\" title=\"6)Collection/Array\"></a>6)Collection/Array</h3><pre><code>会被MyBatis封装成一个map传入, Collection对应的key是collection,Array对应的key是array. 如果确定是List集合，key还可以是list.\n</code></pre><h2 id=\"4-4-2-参数传递源码分析\"><a href=\"#4-4-2-参数传递源码分析\" class=\"headerlink\" title=\"4.4.2 参数传递源码分析\"></a>4.4.2 参数传递源码分析</h2><h3 id=\"1-以命名参数为例\"><a href=\"#1-以命名参数为例\" class=\"headerlink\" title=\"1)以命名参数为例:\"></a>1)以命名参数为例:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Employee getEmployeeByIdAndLastName</span><br><span class=\"line\">(@Param(&quot;id&quot;)Integer id, @Param(&quot;lastName&quot;)String lastName);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-源码\"><a href=\"#2-源码\" class=\"headerlink\" title=\"2)源码:\"></a>2)源码:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object getNamedParams(Object[] args) &#123;</span><br><span class=\"line\">    final int paramCount = names.size();</span><br><span class=\"line\">    if (args == null || paramCount == 0) &#123;</span><br><span class=\"line\">      return null;</span><br><span class=\"line\">    &#125; else if (!hasParamAnnotation &amp;&amp; paramCount == 1) &#123;</span><br><span class=\"line\">      return args[names.firstKey()];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      final Map&lt;String, Object&gt; param = new ParamMap&lt;Object&gt;();</span><br><span class=\"line\">      int i = 0;</span><br><span class=\"line\">      for (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;</span><br><span class=\"line\">        param.put(entry.getValue(), args[entry.getKey()]);</span><br><span class=\"line\">        // add generic param names (param1, param2, ...)</span><br><span class=\"line\">        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);</span><br><span class=\"line\">        // ensure not to overwrite parameter named with @Param</span><br><span class=\"line\">        if (!names.containsValue(genericParamName)) &#123;</span><br><span class=\"line\">          param.put(genericParamName, args[entry.getKey()]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-3-参数处理\"><a href=\"#4-4-3-参数处理\" class=\"headerlink\" title=\"4.4.3 参数处理\"></a>4.4.3 参数处理</h2><h3 id=\"1-参数位置支持的属性\"><a href=\"#1-参数位置支持的属性\" class=\"headerlink\" title=\"1)参数位置支持的属性:\"></a>1)参数位置支持的属性:</h3><p>javaType、jdbcType、mode、numericScale、resultMap、typeHandler、jdbcTypeName、expression  </p>\n<p>2)实际上通常被设置的是：可能为空的列名指定 jdbcType ,例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into orcl_employee(id,last_name,email,gender) values(employee_seq.nextval,#&#123;lastName,jdbcType=NULL &#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-4-参数的获取方式\"><a href=\"#4-4-4-参数的获取方式\" class=\"headerlink\" title=\"4.4.4 参数的获取方式\"></a>4.4.4 参数的获取方式</h2><blockquote>\n<p>1)#{key}：获取参数的值，预编译到SQL中。安全。<br>2)${key}：获取参数的值，拼接到SQL中。有SQL注入问题。</p>\n</blockquote>\n<h1 id=\"4-5-select查询的几种情况\"><a href=\"#4-5-select查询的几种情况\" class=\"headerlink\" title=\"4.5 select查询的几种情况\"></a>4.5 select查询的几种情况</h1><h2 id=\"1-查询单行数据返回单个对象\"><a href=\"#1-查询单行数据返回单个对象\" class=\"headerlink\" title=\"1)查询单行数据返回单个对象\"></a>1)查询单行数据返回单个对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Employee getEmployeeById(Integer id );</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-查询多行数据返回对象的集合\"><a href=\"#2-查询多行数据返回对象的集合\" class=\"headerlink\" title=\"2)查询多行数据返回对象的集合\"></a>2)查询多行数据返回对象的集合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;Employee&gt; getAllEmps();</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-查询单行数据返回Map集合\"><a href=\"#3-查询单行数据返回Map集合\" class=\"headerlink\" title=\"3)查询单行数据返回Map集合\"></a>3)查询单行数据返回Map集合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Map&lt;String,Object&gt; getEmployeeByIdReturnMap(Integer id );</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查询多行数据返回Map集合\"><a href=\"#4-查询多行数据返回Map集合\" class=\"headerlink\" title=\"4)查询多行数据返回Map集合\"></a>4)查询多行数据返回Map集合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@MapKey(&quot;id&quot;) // 指定使用对象的哪个属性来充当map的key</span><br><span class=\"line\">public Map&lt;Integer,Employee&gt;  getAllEmpsReturnMap();</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-6-resultType自动映射\"><a href=\"#4-6-resultType自动映射\" class=\"headerlink\" title=\"4.6 resultType自动映射\"></a>4.6 resultType自动映射</h1><blockquote>\n<p>1)autoMappingBehavior默认是PARTIAL，开启自动映射的功能。唯一的要求是结果集列名和javaBean属性名一致  </p>\n</blockquote>\n<blockquote>\n<p>2)如果autoMappingBehavior设置为null则会取消自动映射  </p>\n</blockquote>\n<blockquote>\n<p>3)数据库字段命名规范，POJO属性符合驼峰命名法，如A_COLUMNaColumn，我们可以开启自动驼峰命名规则映射功能，mapUnderscoreToCamelCase=true</p>\n</blockquote>\n<h1 id=\"4-7-resultMap自定义映射\"><a href=\"#4-7-resultMap自定义映射\" class=\"headerlink\" title=\"4.7 resultMap自定义映射\"></a>4.7 resultMap自定义映射</h1><pre><code>1)自定义resultMap，实现高级结果集映射\n2)id ：用于完成主键值的映射\n3)result ：用于完成普通列的映射\n4)association ：一个复杂的类型关联;许多结果将包成这种类型\n5)collection ： 复杂类型的集\n</code></pre><h2 id=\"4-7-1-id-amp-result\"><a href=\"#4-7-1-id-amp-result\" class=\"headerlink\" title=\"4.7.1  id&amp;result\"></a>4.7.1  id&amp;result</h2><p><a href=\"https://imgchr.com/i/EsoBJP\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/07/EsoBJP.md.png\" alt=\"EsoBJP.md.png\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmployeeById&quot; resultMap=&quot;myEmp&quot;&gt;</span><br><span class=\"line\">\tselect id, last_name,email, gender from tbl_employee where id =#&#123;id&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\">&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Employee&quot; id=&quot;myEmp&quot;&gt;</span><br><span class=\"line\">\t\t&lt;id column=&quot;id&quot;  property=&quot;id&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-7-2-association\"><a href=\"#4-7-2-association\" class=\"headerlink\" title=\"4.7.2  association\"></a>4.7.2  association</h2><p>1)POJO中的属性可能会是一个对象,我们可以使用联合查询，并以级联属性的方式封装对象.使用association标签定义对象的封装规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Department &#123;</span><br><span class=\"line\">\tprivate Integer id ; </span><br><span class=\"line\">\tprivate String departmentName ;</span><br><span class=\"line\">//  省略 get/set方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Employee &#123;</span><br><span class=\"line\">\tprivate Integer id ; </span><br><span class=\"line\">\tprivate String lastName; </span><br><span class=\"line\">\tprivate String email ;</span><br><span class=\"line\">\tprivate String gender ;</span><br><span class=\"line\">\tprivate Department dept ;</span><br><span class=\"line\">    // 省略 get/set方法</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-使用级联的方式\"><a href=\"#2-使用级联的方式\" class=\"headerlink\" title=\"2)使用级联的方式:\"></a>2)使用级联的方式:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmployeeAndDept&quot; resultMap=&quot;myEmpAndDept&quot; &gt;</span><br><span class=\"line\">\t\tSELECT e.id eid, e.last_name, e.email,e.gender ,d.id did, d.dept_name FROM tbl_employee e , tbl_dept d   WHERE e.d_id = d.id  AND e.id = #&#123;id&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Employee&quot; id=&quot;myEmpAndDept&quot;&gt;</span><br><span class=\"line\">\t\t&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class=\"line\">\t    &lt;!-- 级联的方式 --&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;did&quot; property=&quot;dept.id&quot;/&gt;</span><br><span class=\"line\">\t&lt;result column=&quot;dept_name&quot; property=&quot;dept.departmentName&quot;/&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Association‘\"><a href=\"#3-Association‘\" class=\"headerlink\" title=\"3)Association‘\"></a>3)Association‘</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Employee&quot; id=&quot;myEmpAndDept&quot;&gt;</span><br><span class=\"line\">\t\t&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;association property=&quot;dept&quot; javaType=&quot;com.atguigu.mybatis.beans.Department&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;id column=&quot;did&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/association&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-7-3-association-分步查询\"><a href=\"#4-7-3-association-分步查询\" class=\"headerlink\" title=\"4.7.3  association 分步查询\"></a>4.7.3  association 分步查询</h2><p>1)实际的开发中，对于每个实体类都应该有具体的增删改查方法，也就是DAO层， 因此<br>对于查询员工信息并且将对应的部门信息也查询出来的需求，就可以通过分步的方式<br>完成查询。  </p>\n<blockquote>\n<p>①先通过员工的id查询员工信息<br>②再通过查询出来的员工信息中的外键(部门id)查询对应的部门信息. </p>\n<blockquote>\n<p>cha xun查询查询之前先 建立两个文件<br>DepartmentMapper.java<br>DepartmentMapper.jps<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmployeeAndDeptStep&quot; resultMap=&quot;myEmpAndDeptStep&quot;&gt;</span><br><span class=\"line\">\t\t select id, last_name, email,gender,d_id  from tbl_employee where id =#&#123;id&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;resultMap type=&quot;com.mybatis.beans.Employee&quot; id=&quot;myEmpAndDeptStep&quot;&gt;</span><br><span class=\"line\">\t\t&lt;id column=&quot;id&quot;  property=&quot;id&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;association property=&quot;dept&quot; \t\t\tselect=&quot;com.mybatis.dao.DepartmentMapper.getDeptById&quot; </span><br><span class=\"line\">\t\t\t\tcolumn=&quot;d_id&quot; fetchType=&quot;eager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;/association&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n<h2 id=\"4-7-4-association-分步查询使用延迟加载\"><a href=\"#4-7-4-association-分步查询使用延迟加载\" class=\"headerlink\" title=\"4.7.4  association 分步查询使用延迟加载\"></a>4.7.4  association 分步查询使用延迟加载</h2><p>1)在分步查询的基础上，可以使用延迟加载来提升查询的效率，只需要在全局的<br>Settings中进行如下的配置:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 开启延迟加载 --&gt;</span><br><span class=\"line\">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 设置加载的数据是按需还是全部 --&gt;</span><br><span class=\"line\">&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-7-5-collection\"><a href=\"#4-7-5-collection\" class=\"headerlink\" title=\"4.7.5 collection\"></a>4.7.5 collection</h2><p>1)POJO中的属性可能会是一个集合对象,我们可以使用联合查询，并以级联属性的方式封装对象.使用collection标签定义对象的封装规则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Department &#123;</span><br><span class=\"line\">\tprivate Integer id ; </span><br><span class=\"line\">\tprivate String departmentName ;</span><br><span class=\"line\">\tprivate List&lt;Employee&gt; emps ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2)Collection<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getDeptAndEmpsById&quot; resultMap=&quot;myDeptAndEmps&quot;&gt;</span><br><span class=\"line\">\t\tSELECT d.id did, d.dept_name ,e.id eid ,e.last_name ,e.email,e.gender </span><br><span class=\"line\">\t\tFROM tbl_dept d  LEFT OUTER JOIN tbl_employee e ON  d.id = e.d_id </span><br><span class=\"line\">\t\tWHERE d.id = #&#123;id&#125;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\">\t&lt;resultMap type=&quot;com.atguigu.mybatis.beans.Department&quot; id=&quot;myDeptAndEmps&quot;&gt;</span><br><span class=\"line\">\t\t&lt;id column=&quot;did&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;!-- </span><br><span class=\"line\">\t\t\tproperty: 关联的属性名</span><br><span class=\"line\">\t\t\tofType: 集合中元素的类型</span><br><span class=\"line\">\t\t --&gt;</span><br><span class=\"line\">\t\t&lt;collection property=&quot;emps&quot;  ofType=&quot;com.atguigu.mybatis.beans.Employee&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;id column=&quot;eid&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;email&quot; property=&quot;email&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/collection&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-7-6-collection-分步查询\"><a href=\"#4-7-6-collection-分步查询\" class=\"headerlink\" title=\"4.7.6 collection 分步查询\"></a>4.7.6 collection 分步查询</h3><p>1)实际的开发中，对于每个实体类都应该有具体的增删改查方法，也就是DAO层， 因此<br>对于查询部门信息并且将对应的所有的员工信息也查询出来的需求，就可以通过分步的方式完成查询。  </p>\n<blockquote>\n<p>③先通过部门的id查询部门信息<br>④再通过部门id作为员工的外键查询对应的部门信息.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getDeptAndEmpsByIdStep&quot; resultMap=&quot;myDeptAndEmpsStep&quot;&gt;</span><br><span class=\"line\">\t \tselect id ,dept_name  from tbl_dept where id = #&#123;id&#125;</span><br><span class=\"line\">\t &lt;/select&gt;</span><br><span class=\"line\">\t &lt;resultMap type=&quot;com.atguigu.mybatis.beans.Department&quot; id=&quot;myDeptAndEmpsStep&quot;&gt;</span><br><span class=\"line\">\t \t&lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;result column=&quot;dept_name&quot; property=&quot;departmentName&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;collection property=&quot;emps&quot; </span><br><span class=\"line\">\t \t\t\tselect=&quot;com.atguigu.mybatis.dao.EmployeeMapper.getEmpsByDid&quot;</span><br><span class=\"line\">\t \t\t\tcolumn=&quot;id&quot;&gt;</span><br><span class=\"line\">\t \t&lt;/collection&gt;</span><br><span class=\"line\"> &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"4-7-7-collection-分步查询使用延迟加载\"><a href=\"#4-7-7-collection-分步查询使用延迟加载\" class=\"headerlink\" title=\"4.7.7 collection 分步查询使用延迟加载\"></a>4.7.7 collection 分步查询使用延迟加载</h2><pre><code>懒加载 延迟加载 按需求加载\n（可以提高查询效率）\n标签&lt;seeting&gt; 加两行代码 \n直接去api里拷贝\n（严格区分大小写）\n</code></pre><h2 id=\"4-7-8-扩展-分步查询多列值的传递\"><a href=\"#4-7-8-扩展-分步查询多列值的传递\" class=\"headerlink\" title=\"4.7.8 扩展: 分步查询多列值的传递\"></a>4.7.8 扩展: 分步查询多列值的传递</h2><pre><code>&gt;1)如果分步查询时，需要传递给调用的查询中多个参数，则需要将多个参数封装成\n   Map来进行传递，语法如下: {k1=v1, k2=v2....}  \n\n2)在所调用的查询方，取值时就要参考Map的取值方式，需要严格的按照封装map\n   时所用的key来取值. \n</code></pre><h2 id=\"4-7-9-扩展-association-或-collection的-fetchType属性\"><a href=\"#4-7-9-扩展-association-或-collection的-fetchType属性\" class=\"headerlink\" title=\"4.7.9 扩展: association 或 collection的 fetchType属性\"></a>4.7.9 扩展: association 或 collection的 fetchType属性</h2><pre><code>1)在&lt;association&gt;  和&lt;collection&gt;标签中都可以设置fetchType，\n  指定本次查询是否要使用延迟加载。默认为 fetchType=”lazy”,\n  如果本次的查询不想使用延迟加载，则可设置为fetchType=”eager”. \n\n2)fetchType可以灵活的设置查询是否需要使用延迟加载，而不需要因为某个查询不想使用延迟加载将全局的延迟加载设置关闭.\n</code></pre><h3 id=\"4-8-0-扩展：表链接\"><a href=\"#4-8-0-扩展：表链接\" class=\"headerlink\" title=\"4.8.0 扩展：表链接\"></a>4.8.0 扩展：表链接</h3><pre><code>内链接 inner join on 取交集\n外链接\n    左外链 A left outer join B on\n    右外链 B left outer join A o\n    主表：主表的数据读取\n    从表： 从表只取与主表匹配的数据\n</code></pre>","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"3. MyBatis全局配置文件","url":"http://yoursite.com/2018/03/14/59. MyBatis全局配置文件/","content":"<h1 id=\"3-1-MyBatis全局配置文件简介\"><a href=\"#3-1-MyBatis全局配置文件简介\" class=\"headerlink\" title=\"3.1 MyBatis全局配置文件简介\"></a>3.1 MyBatis全局配置文件简介</h1><p>1)The MyBatis configuration contains settings and properties that have a dramatic effect on how MyBatis behaves.<br>MyBatis 的配置文件包含了影响 MyBatis 行为甚深的设置（settings）和属性（properties）信息。<br>2)文件结构如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configuration 配置 </span><br><span class=\"line\">properties 属性</span><br><span class=\"line\">settings 设置</span><br><span class=\"line\">typeAliases 类型命名</span><br><span class=\"line\">typeHandlers 类型处理器</span><br><span class=\"line\">objectFactory 对象工厂</span><br><span class=\"line\">plugins 插件</span><br><span class=\"line\">environments 环境 </span><br><span class=\"line\">environment 环境变量 </span><br><span class=\"line\"> transactionManager 事务管理器</span><br><span class=\"line\">dataSource 数据源</span><br><span class=\"line\">databaseIdProvider 数据库厂商标识</span><br><span class=\"line\">mappers 映射器</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-2-properties属性\"><a href=\"#3-2-properties属性\" class=\"headerlink\" title=\"3.2 properties属性\"></a>3.2 properties属性</h1><p>1)可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">     &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class=\"line\">     &lt;property name=&quot;url&quot; </span><br><span class=\"line\">             value=&quot;jdbc:mysql://localhost:3306/test_mybatis&quot; /&gt;</span><br><span class=\"line\">     &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class=\"line\">     &lt;property name=&quot;password&quot; value=&quot;1234&quot; /&gt;</span><br><span class=\"line\"> &lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n<p>2)然而properties的作用并不单单是这样，你可以创建一个资源文件，名为jdbc.properties的文件,将四个连接字符串的数据在资源文件中通过键值 对(key=value)的方式放置，不要任何符号，一条占一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://localhost:3306/mybatis_1129</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=1234</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">\t\tproperties: 引入外部的属性文件</span><br><span class=\"line\">\t\t\tresource: 从类路径下引入属性文件 </span><br><span class=\"line\">\t\t\turl:  引入网络路径或者是磁盘路径下的属性文件</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;properties resource=&quot;db.properties&quot; &gt;&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n<p>3)在environment元素的dataSource元素中为其动态设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default=&quot;oracle&quot;&gt;</span><br><span class=\"line\">\t\t&lt;environment id=&quot;mysql&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;username&quot; </span><br><span class=\"line\">                         value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;password&quot; </span><br><span class=\"line\">                         value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;/dataSource&gt;</span><br><span class=\"line\">\t\t&lt;/environment&gt;</span><br><span class=\"line\">\t&lt;/environments&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-3-settings设置\"><a href=\"#3-3-settings设置\" class=\"headerlink\" title=\"3.3 settings设置\"></a>3.3 settings设置</h1><p>1)这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。<br>2)包含如下的setting设置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;</span><br><span class=\"line\">&lt;setting name=&quot;lazyLoadTriggerMethods&quot;</span><br><span class=\"line\">           value=&quot;equals,clone,hashCode,toString&quot;/&gt;</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-4-typeAliases-别名处理\"><a href=\"#3-4-typeAliases-别名处理\" class=\"headerlink\" title=\"3.4 typeAliases 别名处理\"></a>3.4 typeAliases 别名处理</h1><p>1)类型别名是为 Java 类型设置一个短的名字，可以方便我们引用某个类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;typeAliases&gt;</span><br><span class=\"line\">\t \t&lt;typeAlias type=&quot;com.atguigu.mybatis.beans.Employee&quot;</span><br><span class=\"line\">                   alias=&quot;emp&quot;/&gt;</span><br><span class=\"line\">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure>\n<p>2)类很多的情况下，可以批量设置别名这个包下的每一个类创建一个默认的别名，就是简单类名小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;typeAliases&gt;</span><br><span class=\"line\">\t \t&lt;package name=&quot;com.atguigu.mybatis.beans&quot;/&gt;</span><br><span class=\"line\">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure>\n<p>3)MyBatis已经取好的别名</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/07/Es547n.png\" alt=\"Es547n.png\"></p>\n<h2 id=\"3-5-typeHandlers-类型处理器\"><a href=\"#3-5-typeHandlers-类型处理器\" class=\"headerlink\" title=\"3.5 typeHandlers 类型处理器\"></a>3.5 typeHandlers 类型处理器</h2><p>1)无论是 MyBatis在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型  </p>\n<p>2)MyBatis中提供的类型处理器:  </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/07/Es5LX4.png\" alt=\"Es5LX4.png\"></p>\n<p>3)日期和时间的处理，JDK1.8以前一直是个头疼的问题。我们通常使用JSR310规范领导者Stephen Colebourne创建的Joda-Time来操作。1.8已经实现全部的JSR310规范了<br>4)日期时间处理上，我们可以使用MyBatis基于JSR310（Date and Time API）编写的各种日期时间类型处理器。<br>5)MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的,如需注册，需要下载mybatistypehandlers-jsr310,并通过如下方式注册</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/07/Es5v7R.png\" alt=\"Es5v7R.png\"></p>\n<h2 id=\"6-自定义类型转换器\"><a href=\"#6-自定义类型转换器\" class=\"headerlink\" title=\"6)自定义类型转换器\"></a>6)自定义类型转换器</h2><blockquote>\n<p>①我们可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型<br>②步骤  </p>\n<ul>\n<li>实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler</li>\n<li>指定其映射某个JDBC类型（可选操作）</li>\n<li>在mybatis全局配置文件中注册</li>\n</ul>\n</blockquote>\n<h1 id=\"3-6-plugins-插件机制\"><a href=\"#3-6-plugins-插件机制\" class=\"headerlink\" title=\"3.6 plugins 插件机制\"></a>3.6 plugins 插件机制</h1><p>1)插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。插件通过动态代理机制，可以介入四大对象的任何一个方法的执行  </p>\n<h2 id=\"2-四大对象\"><a href=\"#2-四大对象\" class=\"headerlink\" title=\"2)四大对象:\"></a>2)四大对象:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</span><br><span class=\"line\"></span><br><span class=\"line\">ParameterHandler (getParameterObject, setParameters) </span><br><span class=\"line\"></span><br><span class=\"line\">ResultSetHandler (handleResultSets, handleOutputParameters) </span><br><span class=\"line\"></span><br><span class=\"line\">StatementHandler (prepare, parameterize, batch, update, query)</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-7-environments-环境配置\"><a href=\"#3-7-environments-环境配置\" class=\"headerlink\" title=\"3.7 environments 环境配置\"></a>3.7 environments 环境配置</h1><p>1)MyBatis可以配置多种环境，比如开发、测试和生产环境需要有不同的配置<br>2)每种环境使用一个environment标签进行配置并指定唯一标识符<br>3)可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境<br>4)environment-指定具体环境  </p>\n<blockquote>\n<p>id：指定当前环境的唯一标识<br>transactionManager、和dataSource都必须有  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;environments default=&quot;oracle&quot;&gt;</span><br><span class=\"line\">\t\t&lt;environment id=&quot;mysql&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;/dataSource&gt;</span><br><span class=\"line\">\t\t&lt;/environment&gt;</span><br><span class=\"line\">\t\t &lt;environment id=&quot;oracle&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;transactionManager type=&quot;JDBC&quot;/&gt;\t</span><br><span class=\"line\">\t\t\t&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;driver&quot; value=&quot;$&#123;orcl.driver&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;url&quot; value=&quot;$&#123;orcl.url&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;username&quot; value=&quot;$&#123;orcl.username&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;password&quot; value=&quot;$&#123;orcl.password&#125;&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;/dataSource&gt;</span><br><span class=\"line\">\t\t&lt;/environment&gt; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&lt;/environments&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-transactionManager\"><a href=\"#5-transactionManager\" class=\"headerlink\" title=\"5)transactionManager\"></a>5)transactionManager</h2><p>type：  JDBC | MANAGED | 自定义  </p>\n<ul>\n<li>JDBC：使用了 JDBC   的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围。 JdbcTransactionFactory</li>\n<li>MANAGED：不提交或回滚一个连接、让容器来管理事务的整个生命周期（比如 JEE应用服务器的上下文）。  ManagedTransactionFactory</li>\n<li>自定义：实现TransactionFactory接口，type=全类名/别名</li>\n</ul>\n<h2 id=\"6-dataSource\"><a href=\"#6-dataSource\" class=\"headerlink\" title=\"6)dataSource\"></a>6)dataSource</h2><p>type：  UNPOOLED | POOLED | JNDI | 自定义</p>\n<ul>\n<li>UNPOOLED：不使用连接池， UnpooledDataSourceFactory</li>\n<li>POOLED：使用连接池， PooledDataSourceFactory</li>\n<li>JNDI： 在EJB 或应用服务器这类容器中查找指定的数据源</li>\n<li>自定义：实现DataSourceFactory接口，定义数据源的获取方式。</li>\n</ul>\n<p>7)实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</p>\n<h1 id=\"3-8-databaseIdProvider数据库厂商标识\"><a href=\"#3-8-databaseIdProvider数据库厂商标识\" class=\"headerlink\" title=\"3.8 databaseIdProvider数据库厂商标识\"></a>3.8 databaseIdProvider数据库厂商标识</h1><p>1)MyBatis 可以根据不同的数据库厂商执行不同的语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;</span><br><span class=\"line\">\t \t&lt;property name=&quot;MySQL&quot; value=&quot;mysql&quot;/&gt;</span><br><span class=\"line\">\t \t&lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot;/&gt;</span><br><span class=\"line\">&lt;/databaseIdProvider&gt;</span><br></pre></td></tr></table></figure>\n<p>2)Type： DB_VENDOR, 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义.<br>会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以最好通过设置属性别名来使其变短.  </p>\n<pre><code>    Property-name：数据库厂商标识\nProperty-value：为标识起一个别名，方便SQL语句使用databaseId属性引用\n</code></pre><p>3)配置了databaseIdProvider后，在SQL映射文件中的增删改查标签中使用databaseId<br>来指定数据库标识的别名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;getEmployeeById&quot;</span><br><span class=\"line\">         resultType=&quot;com.atguigu.mybatis.beans.Employee&quot; </span><br><span class=\"line\">         databaseId=&quot;mysql&quot;&gt;</span><br><span class=\"line\">\t\t select * from tbl_employee where id = #&#123;id&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-MyBatis匹配规则如下\"><a href=\"#4-MyBatis匹配规则如下\" class=\"headerlink\" title=\"4)MyBatis匹配规则如下:\"></a>4)MyBatis匹配规则如下:</h2><blockquote>\n<p>①如果没有配置databaseIdProvider标签，那么databaseId=null<br>②如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId=配置指定的值，否则依旧为null<br>③如果databaseId不为null，他只会找到配置databaseId的sql语句<br>④MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。</p>\n</blockquote>\n<h1 id=\"3-9-mappers-映射器\"><a href=\"#3-9-mappers-映射器\" class=\"headerlink\" title=\"3.9 mappers 映射器\"></a>3.9 mappers 映射器</h1><p>1)用来在mybatis初始化的时候，告诉mybatis需要引入哪些Mapper映射文件<br>2)mapper逐个注册SQL映射文件</p>\n<pre><code>resource : 引入类路径下的文件 \n      url:引入网络路径或者是磁盘路径下的文件\n    class :引入Mapper接口.\n        有SQL映射文件 , 要求Mapper接口与 SQL映射文件同名同位置. \n        没有SQL映射文件 , 使用注解在接口的方法上写SQL语句.\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mappers&gt;</span><br><span class=\"line\">\t\t&lt;mapper resource=&quot;EmployeeMapper.xml&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;mapper class=&quot;com.atguigu.mybatis.dao.EmployeeMapper&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;package name=&quot;com.atguigu.mybatis.dao&quot;/&gt;</span><br><span class=\"line\">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>\n<p>3)使用批量注册，这种方式要求SQL映射文件名必须和接口名相同并且在同一目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mappers&gt;</span><br><span class=\"line\">\t\t&lt;package name=&quot;com.atguigu.mybatis.dao&quot;/&gt;</span><br><span class=\"line\">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"2. MyBatis HelloWorld","url":"http://yoursite.com/2018/03/11/58. MyBatis HelloWorld/","content":"<h1 id=\"2-1-开发环境的准备\"><a href=\"#2-1-开发环境的准备\" class=\"headerlink\" title=\"2.1 开发环境的准备\"></a>2.1 开发环境的准备</h1><h2 id=\"1-导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包\"><a href=\"#1-导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包\" class=\"headerlink\" title=\"1)导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包\"></a>1)导入MyBatis框架的jar包、Mysql驱动包、log4j的jar包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myBatis-3.4.1.jar</span><br><span class=\"line\">mysql-connector-java-5.1.37-bin.jar</span><br><span class=\"line\">log4j.jar</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-导入log4j-的配置文件\"><a href=\"#2-导入log4j-的配置文件\" class=\"headerlink\" title=\"2)导入log4j 的配置文件\"></a>2)导入log4j 的配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;appender name=&quot;STDOUT&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;</span><br><span class=\"line\">   &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">   &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class=\"line\">    &lt;param name=&quot;ConversionPattern&quot; value=&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \\n&quot; /&gt;</span><br><span class=\"line\">   &lt;/layout&gt;</span><br><span class=\"line\"> &lt;/appender&gt;</span><br><span class=\"line\"> &lt;logger name=&quot;java.sql&quot;&gt;</span><br><span class=\"line\">   &lt;level value=&quot;debug&quot; /&gt;</span><br><span class=\"line\"> &lt;/logger&gt;</span><br><span class=\"line\"> &lt;logger name=&quot;org.apache.ibatis&quot;&gt;</span><br><span class=\"line\">   &lt;level value=&quot;info&quot; /&gt;</span><br><span class=\"line\"> &lt;/logger&gt;</span><br><span class=\"line\"> &lt;root&gt;</span><br><span class=\"line\">   &lt;level value=&quot;debug&quot; /&gt;</span><br><span class=\"line\">   &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class=\"line\"> &lt;/root&gt;</span><br><span class=\"line\">&lt;/log4j:configuration&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-创建测试表\"><a href=\"#2-2-创建测试表\" class=\"headerlink\" title=\"2.2 创建测试表\"></a>2.2 创建测试表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建库</span><br><span class=\"line\">CREATE DATABASE test_mybatis;</span><br><span class=\"line\">-- 使用库</span><br><span class=\"line\">USE test_mybatis;</span><br><span class=\"line\">-- 创建表</span><br><span class=\"line\">CREATE TABLE tbl_employee(</span><br><span class=\"line\">   id INT(11) PRIMARY KEY AUTO_INCREMENT,</span><br><span class=\"line\">   last_name VARCHAR(50),</span><br><span class=\"line\">   email VARCHAR(50),</span><br><span class=\"line\">   gender CHAR(1)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-创建javaBean\"><a href=\"#2-3-创建javaBean\" class=\"headerlink\" title=\"2.3 创建javaBean\"></a>2.3 创建javaBean</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Employee &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate Integer id ; </span><br><span class=\"line\">\tprivate String lastName; </span><br><span class=\"line\">\tprivate String email ;</span><br><span class=\"line\">\tprivate String gender ;</span><br><span class=\"line\">\tpublic Integer getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setId(Integer id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getLastName() &#123;</span><br><span class=\"line\">\t\treturn lastName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setLastName(String lastName) &#123;</span><br><span class=\"line\">\t\tthis.lastName = lastName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getEmail() &#123;</span><br><span class=\"line\">\t\treturn email;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setEmail(String email) &#123;</span><br><span class=\"line\">\t\tthis.email = email;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;Employee [id=&quot; + id + &quot;, lastName=&quot; + lastName + &quot;, email=&quot; + email + &quot;, gender=&quot; + gender + &quot;]&quot;;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-创建MyBatis的全局配置文件\"><a href=\"#2-3-创建MyBatis的全局配置文件\" class=\"headerlink\" title=\"2.3 创建MyBatis的全局配置文件\"></a>2.3 创建MyBatis的全局配置文件</h1><p>1)参考MyBatis的官网手册</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">\t&lt;!-- 数据库连接环境的配置 --&gt;</span><br><span class=\"line\">\t&lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">\t\t&lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis_1129&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class=\"line\">\t\t\t\t&lt;property name=&quot;password&quot; value=&quot;1234&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;/dataSource&gt;</span><br><span class=\"line\">\t\t&lt;/environment&gt;</span><br><span class=\"line\">\t&lt;/environments&gt;</span><br><span class=\"line\">\t&lt;!-- 引入SQL映射文件,Mapper映射文件 \t--&gt;</span><br><span class=\"line\">\t&lt;mappers&gt;</span><br><span class=\"line\">\t\t&lt;mapper resource=&quot;EmployeeMapper.xml&quot; /&gt;</span><br><span class=\"line\">\t&lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-创建Mybatis的sql映射文件\"><a href=\"#2-4-创建Mybatis的sql映射文件\" class=\"headerlink\" title=\"2.4 创建Mybatis的sql映射文件\"></a>2.4 创建Mybatis的sql映射文件</h1><h2 id=\"1-参考MyBatis的官方手册\"><a href=\"#1-参考MyBatis的官方手册\" class=\"headerlink\" title=\"1)参考MyBatis的官方手册\"></a>1)参考MyBatis的官方手册</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;mapper namespace=&quot;suibian&quot;&gt;</span><br><span class=\"line\">\t&lt;select id=&quot;selectEmployee&quot; resultType=&quot;com.atguigu.myabtis.helloWorld.Employee&quot;&gt;</span><br><span class=\"line\">\t\tselect id ,last_name lastName ,email ,gender from tbl_employee where id = #&#123;id&#125;</span><br><span class=\"line\">\t\t&lt;!-- select * from tbl_employee  where id = #&#123;id&#125; --&gt;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-5-测试\"><a href=\"#2-5-测试\" class=\"headerlink\" title=\"2.5 测试\"></a>2.5 测试</h1><h2 id=\"1-参考MyBatis的官方手册-1\"><a href=\"#1-参考MyBatis的官方手册-1\" class=\"headerlink\" title=\"1)参考MyBatis的官方手册\"></a>1)参考MyBatis的官方手册</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test() throws Exception &#123;</span><br><span class=\"line\">\t\tString resource = &quot;mybatis-config.xml&quot;;</span><br><span class=\"line\">\t\tInputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">\t\tSqlSessionFactory sqlSessionFactory = </span><br><span class=\"line\">\t\t\t\t\tnew SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">\t\tSystem.out.println(sqlSessionFactory);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSqlSession session  = sqlSessionFactory.openSession();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tEmployee employee = </span><br><span class=\"line\">\t\t\t\t\tsession.selectOne(&quot;suibian.selectEmployee&quot;, 1001);</span><br><span class=\"line\">\t\t\tSystem.out.println(employee);</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tsession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-6-Mapper接口开发MyBatis-HelloWorld\"><a href=\"#2-6-Mapper接口开发MyBatis-HelloWorld\" class=\"headerlink\" title=\"2.6 Mapper接口开发MyBatis HelloWorld\"></a>2.6 Mapper接口开发MyBatis HelloWorld</h1><h2 id=\"1-编写Mapper接口\"><a href=\"#1-编写Mapper接口\" class=\"headerlink\" title=\"1)编写Mapper接口\"></a>1)编写Mapper接口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface EmployeeMapper &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Employee getEmployeeById(Integer id );\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-完成两个绑定\"><a href=\"#2-完成两个绑定\" class=\"headerlink\" title=\"2)完成两个绑定\"></a>2)完成两个绑定</h2><blockquote>\n<p>①Mapper接口与Mapper映射文件的绑定<br>在Mppper映射文件中的<mapper>标签中的namespace中必须指定Mapper接口的全类名<br>②Mapper映射文件中的增删改查标签的id必须指定成Mapper接口中的方法名.  </mapper></p>\n</blockquote>\n<h2 id=\"3-获取Mapper接口的代理实现类对象\"><a href=\"#3-获取Mapper接口的代理实现类对象\" class=\"headerlink\" title=\"3)获取Mapper接口的代理实现类对象\"></a>3)获取Mapper接口的代理实现类对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test()  throws Exception&#123;</span><br><span class=\"line\">\t\tString resource = &quot;mybatis-config.xml&quot;;</span><br><span class=\"line\">\t\tInputStream inputStream =</span><br><span class=\"line\">                 Resources.getResourceAsStream(resource);</span><br><span class=\"line\">\t\tSqlSessionFactory sqlSessionFactory = </span><br><span class=\"line\">\t\t\t\tnew SqlSessionFactoryBuilder()</span><br><span class=\"line\">              .build(inputStream);\t\t</span><br><span class=\"line\">\t\tSqlSession session = </span><br><span class=\"line\">                         sqlSessionFactory.openSession();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t//Mapper接口:获取Mapper接口的 代理实现类对象</span><br><span class=\"line\">\t\t\tEmployeeMapper mapper =</span><br><span class=\"line\">                 session.getMapper(EmployeeMapper.class);\t\t</span><br><span class=\"line\">\t\t\tEmployee employee = </span><br><span class=\"line\">                  mapper.getEmployeeById(1006);</span><br><span class=\"line\">\t\t\tSystem.out.println(employee);</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tsession.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"1. MyBatis简介","url":"http://yoursite.com/2018/03/09/57. MyBatis简介/","content":"<h1 id=\"1-1-MyBatis历史\"><a href=\"#1-1-MyBatis历史\" class=\"headerlink\" title=\"1.1 MyBatis历史\"></a>1.1 MyBatis历史</h1><blockquote>\n<p>1）MyBatis是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software     Foundation 迁移到了Google Code，随着开发团队转投Google Code旗下， iBatis3.x    正式更名为MyBatis ，代码于2013年11月迁移到Github<br> 2）iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis    提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p>\n</blockquote>\n<h1 id=\"1-2-MyBatis简介\"><a href=\"#1-2-MyBatis简介\" class=\"headerlink\" title=\"1.2 MyBatis简介\"></a>1.2 MyBatis简介</h1><blockquote>\n<p>1）MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架<br>2）MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集<br>3）MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录<br>4）Mybatis 是一个 半自动的ORM（Object   Relation  Mapping）框架</p>\n</blockquote>\n<h1 id=\"1-3-如何下载MyBatis\"><a href=\"#1-3-如何下载MyBatis\" class=\"headerlink\" title=\"1.3 如何下载MyBatis\"></a>1.3 如何下载MyBatis</h1><p>1）下载网址<br>    <a href=\"https://github.com/mybatis/mybatis-3/\" target=\"_blank\" rel=\"noopener\">https://github.com/mybatis/mybatis-3/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/07/Es59yQ.png\" alt=\"Es59yQ.png\">          </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/07/Es5Fwn.png\" alt=\"Es5Fwn.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/07/Es5koq.png\" alt=\"Es5koq.png\"></p>\n<h1 id=\"1-4-为什么要使用MyBatis-–-现有持久化技术的对比\"><a href=\"#1-4-为什么要使用MyBatis-–-现有持久化技术的对比\" class=\"headerlink\" title=\"1.4 为什么要使用MyBatis – 现有持久化技术的对比\"></a>1.4 为什么要使用MyBatis – 现有持久化技术的对比</h1><p>1）JDBC</p>\n<blockquote>\n<p>①SQL夹在Java代码块里，耦合度高导致硬编码内伤<br>②维护不易且实际开发需求中sql有变化，频繁修改的情况多见</p>\n</blockquote>\n<p>2）Hibernate和JPA</p>\n<blockquote>\n<p>①长难复杂SQL，对于Hibernate而言处理也不容易<br>②内部自动生产的SQL，不容易做特殊优化<br>③基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难。导致数据库性能下降</p>\n</blockquote>\n<p>3）MyBatis</p>\n<blockquote>\n<p>①对开发人员而言，核心sql还是需要自己优化<br>②sql和java编码分开，功能边界清晰，一个专注业务、一个专注数据</p>\n</blockquote>\n","categories":["Java框架"],"tags":["SSM框架","MyBatis框架"]},{"title":"14. Spring整合SpringMVC","url":"http://yoursite.com/2018/03/05/56. Spring整合SpringMVC/","content":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><ol>\n<li>Spring 与 Springmvc 是否需要整合?  </li>\n</ol>\n<ul>\n<li>不需要 : 单独使用Springmvc,将之前Spring中的配置全部迁移到Springmvc中即可。[不建议]</li>\n<li>需要    ：Spring与Springmvc同时使用。 Springmvc只负责web相关的处理。 其他的都交给Spring处理。<pre><code>Spring ： 数据源、 AOP 、 声明式事务管理 .....\nSpringmvc: 与web相关的。 \n</code></pre></li>\n</ul>\n<ol start=\"2\">\n<li>Spring的容器对象如何创建 ?</li>\n</ol>\n<ul>\n<li>非WEB环境:  直接在main方法或者是junit测试方法中创建Spring容器对象. </li>\n<li>WEB环境  :  希望在服务器启动时，就将Spring的容器对象创建好。<br><strong>思路:</strong>   <blockquote>\n<ul>\n<li>通过监听器监听ServletContext对象的创建.</li>\n<li>因为ServletContext对象是在服务器启动时创建，并且只会被创建一次。 </li>\n<li>当监听到ServletContext对象被创建时，在对应的事件处理方法中，将Spring的容器对象创建出来.  </li>\n<li>然后再将Spring容器对象保存到ServletContext中， 共享给每个组件.  </li>\n<li><strong>Spring提供好的监听器(快捷键直接使用)</strong>: ==ContextLoaderListener==  </li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Bean对象被创建两次的问题<blockquote>\n<ul>\n<li>因为Spring与Springmvc都进行了组件扫描， 所以会将扫描到的组件管理到自己的容器中。 </li>\n<li>正常情况Springmvc只负责web相关的，也就是Handler， Spring要负责除了web之外的，也就是Service 、Dao.</li>\n<li>所以在组件扫描的配置中，需要使用<a href=\"context:include-filter\" target=\"_blank\" rel=\"noopener\">context:include-filter</a>和<a href=\"context:exclude-filter\" target=\"_blank\" rel=\"noopener\">context:exclude-filter</a>进行过滤.</li>\n</ul>\n</blockquote>\n</li>\n<li>Spring容器与 Springmvc容器的关系:父子关系<pre><code>**Spring是父容器，Springmvc是子容器. 子可以访问父，父不能访问子。**    \n</code></pre></li>\n<li>扩展</li>\n</ol>\n<ul>\n<li>Spring容器: </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Root WebApplicationContext: startup date [Thu Mar 07 11:36:05 CST 2019]; root of context hierarchy</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Springmvc容器: </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebApplicationContext for namespace &apos;springDispatcherServlet-servlet&apos;: startup date [Thu Mar 07 11:37:35 CST 2019]; parent: Root WebApplicationContext</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如何在Handler方法中获取到Spring的容器对象?<br>第一种</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(ApplicationContext)sc.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</span><br></pre></td></tr></table></figure>\n<p>第二种</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebApplicationContextUtils.getWebApplicationContext(sc);</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-Spring-与SpringMVC的整合问题：\"><a href=\"#1-Spring-与SpringMVC的整合问题：\" class=\"headerlink\" title=\"1 Spring 与SpringMVC的整合问题：\"></a>1 Spring 与SpringMVC的整合问题：</h1><p>1）需要进行 Spring 整合 SpringMVC 吗 ?<br>2）还是否需要再加入 Spring 的 IOC 容器 ?<br>3）是否需要在web.xml 文件中配置启动 Spring IOC 容器的 ContextLoaderListener ?  </p>\n<ul>\n<li>需要: 通常情况下, 类似于数据源, 事务, 整合其他框架都是放在 Spring 的配置文件          中(而不是放在 SpringMVC 的配置文件中).   <blockquote>\n<p>实际上放入 Spring 配置文件对应的 IOC 容器中的还有 Service 和 Dao. </p>\n</blockquote>\n</li>\n<li>不需要: 都放在 SpringMVC 的配置文件中. 也可以分多个 Spring 的配置文件, 然后使用 import 节点导入其他的配置文件 <h1 id=\"2-Spring整合SpringMVC-解决方案配置监听器\"><a href=\"#2-Spring整合SpringMVC-解决方案配置监听器\" class=\"headerlink\" title=\"2 Spring整合SpringMVC_解决方案配置监听器\"></a>2 Spring整合SpringMVC_解决方案配置监听器</h1><h2 id=\"1）监听器配置\"><a href=\"#1）监听器配置\" class=\"headerlink\" title=\"1）监听器配置\"></a>1）监听器配置</h2></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置启动 Spring IOC 容器的 Listener --&gt;</span><br><span class=\"line\">&lt;context-param&gt;</span><br><span class=\"line\">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">&lt;param-value&gt;classpath:beans.xml&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/context-param&gt;</span><br><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2）创建Spring的bean的配置文件：beans-xml\"><a href=\"#2）创建Spring的bean的配置文件：beans-xml\" class=\"headerlink\" title=\"2）创建Spring的bean的配置文件：beans.xml\"></a>2）创建Spring的bean的配置文件：beans.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class=\"line\">&lt;!-- 设置扫描组件的包 --&gt;</span><br><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 配置数据源, 整合其他框架, 事务等. --&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3）springmvc配置文件：springmvc-xml\"><a href=\"#3）springmvc配置文件：springmvc-xml\" class=\"headerlink\" title=\"3）springmvc配置文件：springmvc.xml\"></a>3）springmvc配置文件：springmvc.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 设置扫描组件的包 --&gt;</span><br><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt; </span><br><span class=\"line\">&lt;!-- 配置视图解析器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;internalResourceViewResolver&quot;</span><br><span class=\"line\">   class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span><br><span class=\"line\">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;mvc:default-servlet-handler/&gt; </span><br><span class=\"line\">&lt;mvc:annotation-driven/&gt; </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>在HelloWorldHandler、UserService类中增加构造方法，启动服务器，查看构造器执行情况。</p>\n<blockquote>\n<p>问题: 若 Spring 的 IOC 容器和 SpringMVC 的 IOC 容器扫描的包有重合的部分, 就会导致有的 bean 会被创建 2 次.  </p>\n</blockquote>\n<p>解决:  </p>\n<ul>\n<li>使 Spring 的 IOC 容器扫描的包和 SpringMVC 的 IOC 容器扫描的包没有重合的部分.   </li>\n<li>使用 exclude-filter 和 include-filter 子节点来规定只能扫描的注解<br>springmvc.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot; use-default-filters=&quot;false&quot;&gt;</span><br><span class=\"line\">&lt;context:include-filter type=&quot;annotation&quot;</span><br><span class=\"line\">           expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class=\"line\">&lt;context:include-filter type=&quot;annotation&quot;</span><br><span class=\"line\">           expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot;/&gt;</span><br><span class=\"line\">&lt;/context:component-scan&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">beans.xml</span><br><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;&gt;</span><br><span class=\"line\">&lt;context:exclude-filter type=&quot;annotation&quot;</span><br><span class=\"line\">        expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class=\"line\">&lt;context:exclude-filter type=&quot;annotation&quot;</span><br><span class=\"line\">        expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot;/&gt;</span><br><span class=\"line\">&lt;/context:component-scan&gt;</span><br><span class=\"line\">&lt;!-- 配置数据源, 整合其他框架, 事务等. --&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-SpringIOC-容器和-SpringMVC-IOC-容器的关系\"><a href=\"#3-SpringIOC-容器和-SpringMVC-IOC-容器的关系\" class=\"headerlink\" title=\"3 SpringIOC 容器和 SpringMVC IOC 容器的关系\"></a>3 SpringIOC 容器和 SpringMVC IOC 容器的关系</h1><p>SpringMVC 的 IOC 容器中的 bean 可以来引用 Spring IOC 容器中的 bean.<br>==反之则不行==. Spring IOC 容器中的 bean 却不能来引用 SpringMVC IOC 容器中的 bean<br>1）在 Spring MVC 配置文件中引用业务层的 Bean<br>2）多个 Spring IOC 容器之间可以设置为父子关系，以实现良好的解耦。<br>3）Spring MVC WEB 层容器可作为 “业务层” Spring 容器的子容器：<br>即 WEB 层容器可以引用业务层容器的 Bean，而业务层容器却访问不到 WEB 层容器的 Bean<br><a href=\"https://imgchr.com/i/EDAbxe\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDAbxe.png\" alt=\"EDAbxe.png\"></a></p>\n<h1 id=\"4-SpringMVC对比Struts2\"><a href=\"#4-SpringMVC对比Struts2\" class=\"headerlink\" title=\"4 SpringMVC对比Struts2\"></a>4 SpringMVC对比Struts2</h1><p>1） Spring MVC 的入口是 Servlet, 而 Struts2 是 FilterSpring MVC 会稍微比 Struts2 快些.<br>2） Spring MVC 是基于方法设计, 而 Sturts2 是基于类,<br>    每次发一次请求都会实例一个 Action.<br>4）Spring MVC 使用更加简洁, 开发效率Spring MVC确实比 struts2 高: 支持 JSR303, 处  理ajax 的请求更方便<br>5）Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些. </p>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"13. SpringMVC运行流程图解","url":"http://yoursite.com/2018/03/01/55. SpringMVC运行流程图解/","content":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p> HandlerExecutionChain  ：包含了请求处理器还有所有的拦截器对象。由HandlerMapping对象获取.<br>    HandlerMapping  : 定义了请求与处理器之间的映射.<br>   HandlerAdapter  : 请求处理器适配器对象，主要负责 分析@RequestMapping，方法的参数，方法的返回值，方法的调用，ModelAndView对象的封装等.</p>\n<h1 id=\"1-流程图\"><a href=\"#1-流程图\" class=\"headerlink\" title=\"1 流程图\"></a>1 流程图</h1><p><img src=\"https://s2.ax1x.com/2019/05/06/EBv7IH.png\" alt=\"EBv7IH.png\"></p>\n<h1 id=\"2-Spring工作流程描述\"><a href=\"#2-Spring工作流程描述\" class=\"headerlink\" title=\"2 Spring工作流程描述\"></a>2 Spring工作流程描述</h1><p>1）用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获；<br>2）DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）:<br>判断请求URI对应的映射 </p>\n<blockquote>\n<p>①不存在：<br>再判断是否配置了mvc:default-servlet-handler：<br>如果没配置，则控制台报映射查找不到，客户端展示404错误<br>如果有配置，则执行目标资源（一般为静态资源，如：JS,CSS,HTML）<br>②存在：<br>执行下面流程  </p>\n</blockquote>\n<p>3）根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；<br>4）DispatcherServlet根据获得的Handler，选择一个合适的HandlerAdapter。<br>5）如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法【正向】<br>6）提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：  </p>\n<blockquote>\n<p>①HttpMessageConveter：<br>将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>②数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>③数据根式化：对请求消息进行数据格式化。如将字符串转换成格式化数字或格式化日期等<br>④数据验证：验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中<br>7）Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；<br>8）此时将开始执行拦截器的postHandle(…)方法【逆向】<br>9）根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet，根据Model和View，来渲染视图<br>10）在返回给客户端时需要执行拦截器的AfterCompletion方法【逆向】<br>11）将渲染结果返回给客户端  </p>\n</blockquote>\n<h1 id=\"3-源码解析\"><a href=\"#3-源码解析\" class=\"headerlink\" title=\"3 源码解析\"></a>3 源码解析</h1><h2 id=\"3-1-搭建环境\"><a href=\"#3-1-搭建环境\" class=\"headerlink\" title=\"3.1 搭建环境\"></a>3.1 搭建环境</h2><p>1）拷贝jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring-aop-4.0.0.RELEASE.jar  </span><br><span class=\"line\">spring-beans-4.0.0.RELEASE.jar  </span><br><span class=\"line\">spring-context-4.0.0.RELEASE.jar  </span><br><span class=\"line\">spring-core-4.0.0.RELEASE.jar  </span><br><span class=\"line\">spring-expression-4.0.0.RELEASE.jar  </span><br><span class=\"line\">commons-logging-1.1.3.jar  </span><br><span class=\"line\">spring-web-4.0.0.RELEASE.jar  </span><br><span class=\"line\">spring-webmvc-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<p>2）配置文件web.xml  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;init-param&gt;</span><br><span class=\"line\">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/init-param&gt;</span><br><span class=\"line\">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>3）配置文件springmvc.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 设置扫描组件的包 --&gt;</span><br><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 配置视图解析器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;internalResourceViewResolver&quot;</span><br><span class=\"line\">    class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span><br><span class=\"line\">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-完成HelloWorld\"><a href=\"#3-2-完成HelloWorld\" class=\"headerlink\" title=\"3.2 完成HelloWorld\"></a>3.2 完成HelloWorld</h2><p>1）页面链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;helloworld&quot;&gt;Hello World&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>2）控制器方法(最开始的helloword)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.handler;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class HelloWorldHandler &#123; </span><br><span class=\"line\">@RequestMapping(&quot;/helloworld&quot;)</span><br><span class=\"line\">public String testHello()&#123; </span><br><span class=\"line\">System.out.println(&quot;Hello,SpringMVC...&quot;); </span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）成功页面：/views/success.jsp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3&gt;Success Page&lt;/h3&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-Debug实验\"><a href=\"#3-3-Debug实验\" class=\"headerlink\" title=\"3.3 Debug实验\"></a>3.3 Debug实验</h2><p>1）正常流程，运行出结果<br>2）没有配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>，测试，直接报404</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①http://localhost:8080/SpringMVC_09_WorkFlow/helloworld2</span><br><span class=\"line\">四月 20, 2016 11:53:19 上午 org.springframework.web.servlet.PageNotFound noHandlerFound</span><br><span class=\"line\">警告: No mapping found for HTTP request with URI [/SpringMVC_09_WorkFlow/helloworld2] in DispatcherServlet with name &apos;springDispatcherServlet&apos;</span><br><span class=\"line\">②http://localhost:8080/SpringMVC_09_WorkFlow/test.html</span><br><span class=\"line\">四月 20, 2016 11:54:16 上午 org.springframework.web.servlet.PageNotFound noHandlerFound</span><br><span class=\"line\">警告: No mapping found for HTTP request with URI [/SpringMVC_09_WorkFlow/test.html] in DispatcherServlet with name &apos;springDispatcherServlet&apos;</span><br></pre></td></tr></table></figure>\n<p>3）配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure>\n<p>测试，会去查找目标资源<br>4）测试，依然发生错误，这时，需要配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure>\n<p>否则，映射解析不好使。<br><img src=\"https://s2.ax1x.com/2019/05/06/EBRSVU.png\" alt=\"image\"></p>\n<h2 id=\"3-4-Debug流程分析\"><a href=\"#3-4-Debug流程分析\" class=\"headerlink\" title=\"3.4 Debug流程分析\"></a>3.4 Debug流程分析</h2><p>1）HandlerExecutionChain mappedHandler；包含了拦截器和处理器方法；  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DispatcherServlet L902 916</span><br><span class=\"line\">org.springframework.web.servlet.HandlerExecutionChain</span><br><span class=\"line\">Handler execution chain, consisting of handler object and any handler interceptors. Returned by</span><br><span class=\"line\"> HandlerMapping&apos;s HandlerMapping.getHandler method.</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EBR8Mt.png\" alt=\"image\"><br>2）HandlerMapping</p>\n<blockquote>\n<p>接口==org.springframework.web.servlet==.HandlerMapping<br><strong>Interface to be implemented by objects that define a mapping between requests and handler objects.</strong><br>This class can be implemented by application developers, although this is not necessary, as ==org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping== and ==org.springframework.web.servlet.handler.SimpleUrlHandlerMapping== are included in the framework. The former is the default if no HandlerMapping bean is registered in the application context.<br>HandlerMapping implementations can support mapped interceptors but do not have to. A handler will always be wrapped in a ==HandlerExecutionChain== instance, optionally accompanied by some ==HandlerInterceptor== instances. The DispatcherServlet will first call each HandlerInterceptor’s preHandle method in the given order, finally invoking the handler itself if all preHandle methods have returned true.<br>The ability to parameterize this mapping is a powerful and unusual capability of this MVC framework. For example, it is possible to write a custom mapping based on session state, cookie state or many other variables. No other MVC framework seems to be equally flexible.<br>Note: Implementations can implement the ==org.springframework.core.Ordered== interface to be able to specify a sorting order and thus a priority for getting applied by DispatcherServlet. Non-Ordered instances get treated as lowest priority.</p>\n</blockquote>\n<p>3）没有配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:default-servlet-handler/&gt;，&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure>\n<p>发送一个不存在资源的请求路径，mappedHandler为null</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/SpringMVC_09_WorkFlow/helloworld2</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EBhNdK.png\" alt=\"image\"> </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EBhBzd.png\" alt=\"image\"></p>\n<p>4）配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:default-servlet-handler/&gt;，&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure>\n<p>发送一个不存在资源的请求路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/SpringMVC_09_WorkFlow/helloworld2</span><br></pre></td></tr></table></figure>\n<p>mappedHandler不为null,原因是当循环simpleUrlHandlerMapping时，当做静态资源处理<br><img src=\"https://s2.ax1x.com/2019/05/06/EBhfJg.png\" alt=\"image\"></p>\n<h2 id=\"3-5-断点\"><a href=\"#3-5-断点\" class=\"headerlink\" title=\"3.5 断点\"></a>3.5 断点</h2><p><img src=\"https://s2.ax1x.com/2019/05/06/EBhbwV.png\" alt=\"image\"></p>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"12. SpringMVC异常处理","url":"http://yoursite.com/2018/02/26/54. SpringMVC异常处理/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p> HandlerExceptionResolver</p>\n<ol>\n<li>在Springmvc中，不管请求是正常执行，还是抛出异常，都需要得到一个ModelAndView对象. </li>\n<li>DefaultHandlerExceptionResolver  对一些特定的异常进行处理. </li>\n<li>SimpleMappingExceptionResolver   可以配置异常与视图的映射, 抛出什么异常去往什么视图，并报告异常. </li>\n</ol>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><p>java:   throws      throw        try ..catch..finally </p>\n<p>所有系统定义的编译和运行异常都可以由系统自动抛出，称为标准异常，但是一般情况下Java 强烈地要求应用程序进行完整的异常处理，给用户友好的提示，或者修正后使程序继续执行。<br>1.用户程序自定义的异常和应用程序特定的异常,必须借助于 throws 和 throw 语句来定义抛出异常。</p>\n<p>1.1   throw是语句抛出一个异常。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：throw (异常对象);  </span><br><span class=\"line\">         throw e;</span><br></pre></td></tr></table></figure>\n<p>1.2   throws是方法可能抛出异常的声明。(用在声明方法时，表示该方法可能要抛出异常)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：[(修饰符)](返回值类型)(方法名)([参数列表])[throws(异常类)]&#123;......&#125;</span><br><span class=\"line\">            public void doA(int a) throws Exception1,Exception3&#123;......&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"1异常处理概述\"><a href=\"#1异常处理概述\" class=\"headerlink\" title=\"1异常处理概述\"></a>1异常处理概述</h1><p>1）Spring MVC 通过 HandlerExceptionResolver  处理程序的异常，包括 Handler 映射、数据绑定以及目标方法执行时发生的异常。<br>2）SpringMVC 提供的 HandlerExceptionResolver 的实现类</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDVlff.png\" alt=\"EDVlff.png\"></p>\n<h1 id=\"2-HandlerExceptionResolver\"><a href=\"#2-HandlerExceptionResolver\" class=\"headerlink\" title=\"2 HandlerExceptionResolver\"></a>2 HandlerExceptionResolver</h1><p>1）DispatcherServlet  默认装配的 HandlerExceptionResolver ：<br>2）没有使用 <a href=\"mvc:annotation-driven/\" target=\"_blank\" rel=\"noopener\">mvc:annotation-driven/</a> 配置：<br><img src=\"https://s2.ax1x.com/2019/05/06/EDV59K.png\" alt=\"EDV59K.png\"><br><img src=\"https://s2.ax1x.com/2019/05/06/EDVx9f.png\" alt=\"EDVx9f.png\"></p>\n<p>3）使用了 <a href=\"mvc:annotation-driven/\" target=\"_blank\" rel=\"noopener\">mvc:annotation-driven/</a> 配置：<br><img src=\"https://s2.ax1x.com/2019/05/06/EDZPBj.png\" alt=\"EDZPBj.png\"><br><img src=\"https://s2.ax1x.com/2019/05/06/EDZZCV.png\" alt=\"EDZZCV.png\"></p>\n<h1 id=\"3-异常处理-DefaultHandlerExceptionResolver\"><a href=\"#3-异常处理-DefaultHandlerExceptionResolver\" class=\"headerlink\" title=\"3 异常处理_DefaultHandlerExceptionResolver\"></a>3 异常处理_DefaultHandlerExceptionResolver</h1><p>1）对一些特殊的异常进行处理，比如：</p>\n<ul>\n<li>NoSuchRequestHandlingMethodException、</li>\n<li>HttpRequestMethodNotSupportedException、</li>\n<li>HttpMediaTypeNotSupportedException、</li>\n<li>HttpMediaTypeNotAcceptableException等   </li>\n</ul>\n<p>2）javadoc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br><span class=\"line\">Default implementation of the HandlerExceptionResolver interface that resolves standard Spring exceptions and translates them to corresponding HTTP status codes. </span><br><span class=\"line\">This exception resolver is enabled by default in the org.springframework.web.servlet.DispatcherServlet.</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-1-实验代码\"><a href=\"#3-1-实验代码\" class=\"headerlink\" title=\"3.1 实验代码\"></a>3.1 实验代码</h2><p>1）增加页面链接：GET请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;testDefaultHandlerExceptionResolver&quot;&gt;testDefaultHandlerExceptionResolver&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>增加处理器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//@RequestMapping(value=&quot;/testDefaultHandlerExceptionResolver&quot;)</span><br><span class=\"line\">@RequestMapping(value=&quot;/testDefaultHandlerExceptionResolver&quot;,method=RequestMethod.POST)  //不支持GET请求</span><br><span class=\"line\">public String testDefaultHandlerExceptionResolver()&#123;</span><br><span class=\"line\">System.out.println(&quot;testDefaultHandlerExceptionResolver...&quot;);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2）出现异常错误<br>网页错误码405<br><img src=\"https://s2.ax1x.com/2019/05/06/EDZXqJ.png\" alt=\"EDZXqJ.png\"></p>\n<p>3） 出现异常交给DefaultHandlerExceptionResolver处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected ModelAndView doResolveException(</span><br><span class=\"line\">HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">if (ex instanceof NoSuchRequestHandlingMethodException) &#123;</span><br><span class=\"line\">return handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, request, response,</span><br><span class=\"line\">handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof HttpRequestMethodNotSupportedException) &#123;</span><br><span class=\"line\">return handleHttpRequestMethodNotSupported((HttpRequestMethodNotSupportedException) ex, request,</span><br><span class=\"line\">response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof HttpMediaTypeNotSupportedException) &#123;</span><br><span class=\"line\">return handleHttpMediaTypeNotSupported((HttpMediaTypeNotSupportedException) ex, request, response,</span><br><span class=\"line\">handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof HttpMediaTypeNotAcceptableException) &#123;</span><br><span class=\"line\">return handleHttpMediaTypeNotAcceptable((HttpMediaTypeNotAcceptableException) ex, request, response,</span><br><span class=\"line\">handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof MissingServletRequestParameterException) &#123;</span><br><span class=\"line\">return handleMissingServletRequestParameter((MissingServletRequestParameterException) ex, request,</span><br><span class=\"line\">response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof ServletRequestBindingException) &#123;</span><br><span class=\"line\">return handleServletRequestBindingException((ServletRequestBindingException) ex, request, response,</span><br><span class=\"line\">handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof ConversionNotSupportedException) &#123;</span><br><span class=\"line\">return handleConversionNotSupported((ConversionNotSupportedException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof TypeMismatchException) &#123;</span><br><span class=\"line\">return handleTypeMismatch((TypeMismatchException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof HttpMessageNotReadableException) &#123;</span><br><span class=\"line\">return handleHttpMessageNotReadable((HttpMessageNotReadableException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof HttpMessageNotWritableException) &#123;</span><br><span class=\"line\">return handleHttpMessageNotWritable((HttpMessageNotWritableException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof MethodArgumentNotValidException) &#123;</span><br><span class=\"line\">return handleMethodArgumentNotValidException((MethodArgumentNotValidException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof MissingServletRequestPartException) &#123;</span><br><span class=\"line\">return handleMissingServletRequestPartException((MissingServletRequestPartException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof BindException) &#123;</span><br><span class=\"line\">return handleBindException((BindException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ex instanceof NoHandlerFoundException) &#123;</span><br><span class=\"line\">return handleNoHandlerFoundException((NoHandlerFoundException) ex, request, response, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (Exception handlerException) &#123;</span><br><span class=\"line\">logger.warn(&quot;Handling of [&quot; + ex.getClass().getName() + &quot;] resulted in Exception&quot;, handlerException);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-异常处理-SimpleMappingExceptionResolver\"><a href=\"#4-异常处理-SimpleMappingExceptionResolver\" class=\"headerlink\" title=\"4 异常处理_SimpleMappingExceptionResolver\"></a>4 异常处理_SimpleMappingExceptionResolver</h1><p>1）如果希望对所有异常进行统一处理，可以使用 SimpleMappingExceptionResolver，它将异<br>  常类名映射为视图名，即发生异常时使用对应的视图报告异常</p>\n<p> <img src=\"https://s2.ax1x.com/2019/05/06/EDeGZj.png\" alt=\"EDeGZj.png\"></p>\n<h2 id=\"4-1实验代码\"><a href=\"#4-1实验代码\" class=\"headerlink\" title=\"4.1实验代码\"></a>4.1实验代码</h2><p>1）增加页面链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;testSimpleMappingExceptionResolver?i=1&quot;&gt;testSimpleMappingExceptionResolver&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>2）增加控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;/testSimpleMappingExceptionResolver&quot;)</span><br><span class=\"line\">public String testSimpleMappingExceptionResolver(@RequestParam(&quot;i&quot;) int i)&#123;</span><br><span class=\"line\">System.out.println(&quot;testSimpleMappingExceptionResolver...&quot;); </span><br><span class=\"line\">String[] s = new String[10]; </span><br><span class=\"line\">System.out.println(s[i]); </span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）出现异常情况：参数i的值大于10<br>错误码500</p>\n<p><a href=\"https://imgchr.com/i/EDegF1\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDegF1.md.png\" alt=\"EDegF1.md.png\"></a></p>\n<p>4）配置异常解析器:自动将异常对象信息，存放到request范围内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置SimpleMappingExceptionResolver异常解析器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;simpleMappingExceptionResolver&quot;</span><br><span class=\"line\"> class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;</span><br><span class=\"line\">&lt;!-- exceptionAttribute默认值(通过ModelAndView传递给页面)：</span><br><span class=\"line\">exception   -&gt;  $&#123;requestScope.exception&#125;</span><br><span class=\"line\">public static final String DEFAULT_EXCEPTION_ATTRIBUTE = &quot;exception&quot;;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;property name=&quot;exceptionAttribute&quot; value=&quot;exception&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;property name=&quot;exceptionMappings&quot;&gt;</span><br><span class=\"line\">&lt;props&gt;</span><br><span class=\"line\">&lt;prop key=&quot;java.lang.ArrayIndexOutOfBoundsException&quot;&gt;error&lt;/prop&gt;</span><br><span class=\"line\">&lt;/props&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>error.jsp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class=\"line\"> &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt; </span><br><span class=\"line\">&lt;h3&gt;Error Page&lt;/h3&gt; </span><br><span class=\"line\">$&#123;exception &#125;</span><br><span class=\"line\">$&#123;requestScope.exception &#125; </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDmApV.png\" alt=\"EDmApV.png\">  </p>\n<p>5）源码分析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleMappingExceptionResolver    L187 L339</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/EDmU7d\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDmU7d.md.png\" alt=\"EDmU7d.md.png\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected ModelAndView doResolveException(HttpServletRequest request,</span><br><span class=\"line\"> HttpServletResponse response,Object handler, Exception ex) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">// Expose ModelAndView for chosen error view.</span><br><span class=\"line\">String viewName = determineViewName(ex, request);</span><br><span class=\"line\">if (viewName != null) &#123;</span><br><span class=\"line\">// Apply HTTP status code for error views, if specified.</span><br><span class=\"line\">// Only apply it if we&apos;re processing a top-level request.</span><br><span class=\"line\">Integer statusCode = determineStatusCode(request, viewName);</span><br><span class=\"line\">if (statusCode != null) &#123;</span><br><span class=\"line\">applyStatusCodeIfPossible(request, response, statusCode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return getModelAndView(viewName, ex, request);</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">return null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Return a ModelAndView for the given view name and exception.</span><br><span class=\"line\"> * &lt;p&gt;The default implementation adds the specified exception attribute.</span><br><span class=\"line\"> * Can be overridden in subclasses.</span><br><span class=\"line\"> * @param viewName the name of the error view</span><br><span class=\"line\"> * @param ex the exception that got thrown during handler execution</span><br><span class=\"line\"> * @return the ModelAndView instance</span><br><span class=\"line\"> * @see #setExceptionAttribute</span><br><span class=\"line\"> */</span><br><span class=\"line\">protected ModelAndView getModelAndView(String viewName, Exception ex) &#123;</span><br><span class=\"line\">ModelAndView mv = new ModelAndView(viewName);</span><br><span class=\"line\">if (this.exceptionAttribute != null) &#123;</span><br><span class=\"line\">if (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">logger.debug(&quot;Exposing Exception as model attribute &apos;&quot; + this.exceptionAttribute + &quot;&apos;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mv.addObject(this.exceptionAttribute, ex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return mv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"11. SpringMVC拦截器","url":"http://yoursite.com/2018/02/25/53. SpringMVC拦截器 /","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li>自定义拦截器<br> 1.1 实现HandlerInterceptor接口<br> 1.2 继承HandlerInterceptorAdaptor类</li>\n<li>拦截器的配置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:interceptors&gt;</span><br><span class=\"line\">\t\t&lt;bean class=&quot;&quot;&gt;</span><br><span class=\"line\">\t\t&lt;ref bean=&quot;&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;mvc:interceptor&gt;</span><br><span class=\"line\">\t\t\t&lt;mvc:mapping&gt;</span><br><span class=\"line\">\t\t\t&lt;mvc:exclude-mapping&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;ref bean=&quot;&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/mvc:interceptor&gt;</span><br><span class=\"line\">   &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>拦截器中三个方法的执行顺序 以及 执行时机:<br> preHandle    DispatcherServlet的939行开始执行，是在请求处理方法之前执行的.<br> postHandle   DispatcherServlet的954行开始执行，是在请求处理方法之后， 视图处理之前执行的.<br> afterCompletion  DispatcherServlet的1030行开始执行，是在视图处理之后执行的.</li>\n<li>多个拦截器的执行顺序:<br> 拦截器的执行顺序由配置顺序决定，先配置的先执行. </li>\n<li>多个拦截器中方法的执行顺序:<br> preHandle:      与拦截器的执行顺序一致.<br> postHandle:     与拦截器的执行顺序相反.<br> afterCompletion:与拦截器的执行顺序相反.</li>\n<li>拦截器中preHandle方法返回false:<br> 如果第一个拦截器的preHandle返回false,后续的处理都不执行.<br> 如果不是第一个拦截器的preHandle返回false, 之前拦截器的afterCompletion方法都会执行.</li>\n</ol>\n<h1 id=\"1-自定义拦截器概述\"><a href=\"#1-自定义拦截器概述\" class=\"headerlink\" title=\"1 自定义拦截器概述\"></a>1 自定义拦截器概述</h1><p>1）Spring MVC也可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器来实现特定的功能，<strong>自定义的拦截器可以实现HandlerInterceptor接口，也可以继承HandlerInterceptorAdapter 适配器类</strong><br>①preHandle()：这个方法在业务处理器处理请求之前被调用，在该方法中对用户请求 request 进行处理。<strong>如果程序员决定该拦截器对请求进行拦截处理后还要调用其他的拦截器，或者是业务处理器去进行处理，则返回true；如果程序员决定不需要再调用其他的组件去处理请求，则返回false。</strong><br>②postHandle()：<strong>这个方法在业务处理器处理完请求后，但是DispatcherServlet 向客户端返回响应前被调用</strong>，在该方法中对用户请求request进行处理。<br>③afterCompletion()：这个方法<strong>在 DispatcherServlet 完全处理完请求后被调用</strong>，可以在该方法中进行一些资源清理的操作。</p>\n<h1 id=\"2-实验代码-单个拦截器\"><a href=\"#2-实验代码-单个拦截器\" class=\"headerlink\" title=\"2 实验代码(单个拦截器)\"></a>2 实验代码(单个拦截器)</h1><p>1）自定义拦截器类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.interceptors;</span><br><span class=\"line\"> </span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class FirstHandlerInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void afterCompletion(HttpServletRequest arg0,</span><br><span class=\"line\">HttpServletResponse arg1, Object arg2, Exception arg3) throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - afterCompletion&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class=\"line\">Object arg2, ModelAndView arg3) throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - postHandle&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class=\"line\">Object arg2) throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - preHandle&quot;);</span><br><span class=\"line\">return true;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2）配置拦截器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:interceptors&gt;</span><br><span class=\"line\">&lt;!-- 声明自定义拦截器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;firstHandlerInterceptor&quot;</span><br><span class=\"line\">      class=&quot;com.atguigu.springmvc.interceptors.FirstHandlerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>\n<p>3）断点调试拦截器执行流程<br><a href=\"https://imgchr.com/i/EDMr5j\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDMr5j.md.png\" alt=\"EDMr5j.md.png\"></a><br>4）拦截器方法执行顺序（小总结）<br><img src=\"https://s2.ax1x.com/2019/05/06/EDMc2q.png\" alt=\"EDMc2q.png\"></p>\n<h1 id=\"3-实验代码-多个拦截器\"><a href=\"#3-实验代码-多个拦截器\" class=\"headerlink\" title=\"3 实验代码(多个拦截器)\"></a>3 实验代码(多个拦截器)</h1><h2 id=\"1）自定义拦截器类-两个\"><a href=\"#1）自定义拦截器类-两个\" class=\"headerlink\" title=\"1）自定义拦截器类(两个)\"></a>1）自定义拦截器类(两个)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.interceptors;</span><br><span class=\"line\"> </span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class FirstHandlerInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void afterCompletion(HttpServletRequest arg0,</span><br><span class=\"line\">HttpServletResponse arg1, Object arg2, Exception arg3)</span><br><span class=\"line\">throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - afterCompletion&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class=\"line\">Object arg2, ModelAndView arg3) throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - postHandle&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class=\"line\">Object arg2) throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - preHandle&quot;);</span><br><span class=\"line\">return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tpackage com.springmvc.interceptors;</span><br><span class=\"line\"> </span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\">import org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"> </span><br><span class=\"line\">public class SecondHandlerInterceptor implements HandlerInterceptor &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void afterCompletion(HttpServletRequest arg0,</span><br><span class=\"line\">HttpServletResponse arg1, Object arg2, Exception arg3)</span><br><span class=\"line\">throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - afterCompletion&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class=\"line\">Object arg2, ModelAndView arg3) throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - postHandle&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public boolean preHandle(HttpServletRequest arg0, HttpServletResponse arg1,</span><br><span class=\"line\">Object arg2) throws Exception &#123;</span><br><span class=\"line\">System.out.println(this.getClass().getName() + &quot; - preHandle&quot;);</span><br><span class=\"line\">return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2）配置自定义拦截器\"><a href=\"#2）配置自定义拦截器\" class=\"headerlink\" title=\"2）配置自定义拦截器\"></a>2）配置自定义拦截器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mvc:interceptors&gt;</span><br><span class=\"line\">&lt;!-- 声明自定义拦截器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;firstHandlerInterceptor&quot;</span><br><span class=\"line\">  class=&quot;com.atguigu.springmvc.interceptors.FirstHandlerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;!-- 配置拦截器引用 --&gt;</span><br><span class=\"line\">&lt;mvc:interceptor&gt;                        </span><br><span class=\"line\">&lt;mvc:mapping path=&quot;/empList&quot;/&gt;</span><br><span class=\"line\">&lt;!-- &lt;mvc:exclude-mapping path=&quot;/empList&quot;/&gt; --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;secondHandlerInterceptor&quot;</span><br><span class=\"line\">         class=&quot;com.atguigu.springmvc.interceptors.SecondHandlerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class=\"line\">&lt;/mvc:interceptor&gt;</span><br><span class=\"line\">&lt;/mvc:interceptors&gt;</span><br><span class=\"line\">两个都是返回true :</span><br><span class=\"line\">com.atguigu.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class=\"line\">com.atguigu.springmvc.interceptors.SecondHandlerInterceptor - preHandle</span><br><span class=\"line\">************************************biz method*******************************</span><br><span class=\"line\">com.springmvc.interceptors.SecondHandlerInterceptor - postHandle  </span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - postHandle</span><br><span class=\"line\">com.springmvc.interceptors.SecondHandlerInterceptor - afterCompletion</span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - afterCompletion</span><br><span class=\"line\">两个都是返回false:</span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class=\"line\">true,false</span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class=\"line\">com.springmvc.interceptors.SecondHandlerInterceptor - preHandle</span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - afterCompletion</span><br><span class=\"line\">false,true </span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-多个拦截方法的执行顺序\"><a href=\"#4-多个拦截方法的执行顺序\" class=\"headerlink\" title=\"4 多个拦截方法的执行顺序\"></a>4 多个拦截方法的执行顺序</h1><h2 id=\"1）关于执行顺序\"><a href=\"#1）关于执行顺序\" class=\"headerlink\" title=\"1）关于执行顺序\"></a>1）关于执行顺序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - preHandle</span><br><span class=\"line\">com.atguigu.springmvc.interceptors.SecondHandlerInterceptor – preHandle</span><br><span class=\"line\">************************************biz method*******************************</span><br><span class=\"line\">com.springmvc.interceptors.SecondHandlerInterceptor - postHandle</span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - postHandle</span><br><span class=\"line\">com.springmvc.interceptors.SecondHandlerInterceptor - afterCompletion</span><br><span class=\"line\">com.springmvc.interceptors.FirstHandlerInterceptor - afterCompletion</span><br></pre></td></tr></table></figure>\n<p>2）执行顺序图解<br><img src=\"https://s2.ax1x.com/2019/05/06/EDQFQP.png\" alt=\"EDQFQP.png\"></p>\n<p>3）从源代码的执行角度分析流程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class=\"line\">if (getInterceptors() != null) &#123;</span><br><span class=\"line\">for (int i = 0; i &lt; getInterceptors().length; i++) &#123;</span><br><span class=\"line\">HandlerInterceptor interceptor = getInterceptors()[i];</span><br><span class=\"line\">if (!interceptor.preHandle(request, response, this.handler)) &#123;</span><br><span class=\"line\">triggerAfterCompletion(request, response, null);</span><br><span class=\"line\">return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">this.interceptorIndex = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDQZdg.png\" alt=\"EDQZdg.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception &#123;</span><br><span class=\"line\">if (getInterceptors() == null) &#123;</span><br><span class=\"line\">return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (int i = getInterceptors().length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">HandlerInterceptor interceptor = getInterceptors()[i];</span><br><span class=\"line\">interceptor.postHandle(request, response, this.handler, mv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDQlQ0.png\" alt=\"EDQlQ0.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, Exception ex)</span><br><span class=\"line\">throws Exception &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">if (getInterceptors() == null) &#123;</span><br><span class=\"line\">return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (int i = this.interceptorIndex; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">HandlerInterceptor interceptor = getInterceptors()[i];</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">interceptor.afterCompletion(request, response, this.handler, ex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (Throwable ex2) &#123;</span><br><span class=\"line\">logger.error(&quot;HandlerInterceptor.afterCompletion threw exception&quot;, ex2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/EDQ1yV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDQ1yV.md.png\" alt=\"EDQ1yV.md.png\"></a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDQUY9.png\" alt=\"EDQUY9.png\">  </p>\n<p>4）源码分析：分析interceptorIndex的值情况  </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDQBy6.png\" alt=\"EDQBy6.png\"></p>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"10. SpringMVC文件上传","url":"http://yoursite.com/2018/02/21/52. SpringMVC文件上传/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li>MultipartResolver   是Springmvc对文件上传做的直接支持</li>\n<li>Springmvc基于 commons  fileUpload 技术 提供了  CommonsMultipartResolver实现类. </li>\n<li>配置上传组件 CommonsMutipartResolver：<br> id必须指定成 mutipartResolver<br> 选择性的给CommonsMutipartResolver中的属性赋值，  defaultEncoding  maxUploadSize ….</li>\n<li>MultipartFile  用于描述上传过来的文件对象. ·<h1 id=\"1-文件上传\"><a href=\"#1-文件上传\" class=\"headerlink\" title=\"1 文件上传\"></a>1 文件上传</h1>1）Spring MVC 为文件上传提供了直接的支持，这种支持是通过即插即用的 <strong>MultipartResolver</strong> 实现的。<br>2）Spring 用 <strong>Jakarta Commons FileUpload</strong> 技术实现了一个 <strong>MultipartResolver</strong> 实现类：<strong>CommonsMultipartResolver</strong><br>3）Spring MVC 上下文中默认没有装配 MultipartResovler，因此默认情况下不能处理文件的上传工作，如果想使用 Spring 的文件上传功能，需现在上下文中配置 <strong>MultipartResolver</strong>  </li>\n</ol>\n<p><a href=\"https://imgchr.com/i/EDl81I\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDl81I.md.png\" alt=\"EDl81I.md.png\"></a></p>\n<p>4）配置 MultipartResolver<br>    defaultEncoding: 必须和用户 JSP 的 pageEncoding 属性一致，以便正确解析表单的内<br>    容,为了让 <strong>CommonsMultipartResolver</strong> 正确工作，必须先将 Jakarta Commons     FileUpload 及 Jakarta Commons io 的类包添加到类路径下。</p>\n<p>   <img src=\"https://s2.ax1x.com/2019/05/06/EDlUHS.png\" alt=\"EDlUHS.png\"></p>\n<h1 id=\"2-文件上传示例\"><a href=\"#2-文件上传示例\" class=\"headerlink\" title=\"2 文件上传示例\"></a>2 文件上传示例</h1><p>1）拷贝jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commons-fileupload-1.2.1.jar</span><br><span class=\"line\">commons-io-2.0.jar</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">严重: Servlet /SpringMVC_06_FileUpload threw load() exception</span><br><span class=\"line\">java.lang.ClassNotFoundException: org.apache.commons.fileupload.FileItemFactory</span><br></pre></td></tr></table></figure>\n<p>2）配置文件上传解析器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置文件上传解析器</span><br><span class=\"line\">id必须是&quot;multipartResolver&quot;,否则，会报错误：</span><br><span class=\"line\">java.lang.IllegalArgumentException: Expected MultipartHttpServletRequest: is a MultipartResolver configured?</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;multipartResolver&quot;</span><br><span class=\"line\"> class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;property name=&quot;maxUploadSize&quot; value=&quot;1024000&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>3）上传页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class=\"line\"> &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form action=&quot;testUpload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">文件: &lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">描述: &lt;input type=&quot;text&quot; name=&quot;desc&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>4）控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.crud.handlers;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\">import org.springframework.web.multipart.MultipartFile;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class UploadHandler &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@RequestMapping(value=&quot;/testUpload&quot;,method=RequestMethod.POST)</span><br><span class=\"line\">public String testUpload(@RequestParam(value=&quot;desc&quot;,required=false) String desc, @RequestParam(&quot;file&quot;) MultipartFile multipartFile) throws IOException&#123;                </span><br><span class=\"line\">System.out.println(&quot;desc : &quot;+desc);</span><br><span class=\"line\">System.out.println(&quot;OriginalFilename : &quot;+multipartFile.getOriginalFilename());</span><br><span class=\"line\">InputStream inputStream = multipartFile.getInputStream();</span><br><span class=\"line\">System.out.println(&quot;inputStream.available() : &quot;+inputStream.available());</span><br><span class=\"line\">System.out.println(&quot;inputStream : &quot;+inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">return &quot;success&quot;; //增加成功页面: /views/success.jsp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-多个文件上传？\"><a href=\"#3-多个文件上传？\" class=\"headerlink\" title=\"3 多个文件上传？\"></a>3 多个文件上传？</h1><p><a href=\"https://imgchr.com/i/EDlog1\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDlog1.md.png\" alt=\"EDlog1.md.png\"></a></p>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"9. SpringMVC处理JSON","url":"http://yoursite.com/2018/02/20/51. SpringMVC处理JSON/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li>Springmvc如何处理Json<br> 基于jackson技术完成对json的处理. 在Springmvc中，在请求处理方法中将方法的返回值类型声明为具体java对象的类型， 然后在请求处理方法上<br>加上@ResponseBody注解. </li>\n<li>HttpMessageConverter<br> 主要负责将请求信息转换为具体的java对象, 将java对象输出为响应信息. </li>\n<li>如何使用消息转换<br> @RequestBody   @ResponseBody<br> HttpEntity    ResponseEntity <ol start=\"4\">\n<li>使用ResponseEntity 完成下载操作</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"1-返回JSON\"><a href=\"#1-返回JSON\" class=\"headerlink\" title=\"1 返回JSON\"></a>1 返回JSON</h1><p>前言：在javaWEB中:  Gson、fastJson、JsonLib、jackson…<br>1）加入 jar 包：<br><a href=\"http://wiki.fasterxml.com/JacksonDownload/\" target=\"_blank\" rel=\"noopener\">http://wiki.fasterxml.com/JacksonDownload/</a>   下载地址  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jackson-annotations-2.1.5.jar</span><br><span class=\"line\">jackson-core-2.1.5.jar</span><br><span class=\"line\">jackson-databind-2.1.5.jar</span><br></pre></td></tr></table></figure>\n<p>2）编写目标方法，使其返回 JSON 对应的对象或集合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ResponseBody  //SpringMVC对JSON的支持</span><br><span class=\"line\">@RequestMapping(&quot;/testJSON&quot;)</span><br><span class=\"line\">public Collection&lt;Employee&gt; testJSON()&#123;</span><br><span class=\"line\">return employeeDao.getAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）增加页面代码：index.jsp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class=\"line\"> &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;scripts/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">$(function()&#123; </span><br><span class=\"line\">$(&quot;#testJSON&quot;).click(function()&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">var url = this.href ;</span><br><span class=\"line\">var args = &#123;&#125;;</span><br><span class=\"line\">$.post(url,args,function(data)&#123;</span><br><span class=\"line\">for(var i=0; i&lt;data.length; i++)&#123;</span><br><span class=\"line\">var id = data[i].id;</span><br><span class=\"line\">var lastName = data[i].lastName ;</span><br><span class=\"line\">alert(id+&quot; - &quot; + lastName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">return false ;</span><br><span class=\"line\">&#125;);                </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;a href=&quot;empList&quot;&gt;To Employee List&lt;/a&gt;</span><br><span class=\"line\">&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;a id=&quot;testJSON&quot; href=&quot;testJSON&quot;&gt;testJSON&lt;/a&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>4）测试<br><img src=\"https://s2.ax1x.com/2019/05/06/ED1PDf.png\" alt=\"ED1PDf.png\"></p>\n<h1 id=\"2-HttpMessageConverter原理\"><a href=\"#2-HttpMessageConverter原理\" class=\"headerlink\" title=\"2 HttpMessageConverter原理\"></a>2 HttpMessageConverter原理</h1><h2 id=\"2-1-HttpMessageConverter\"><a href=\"#2-1-HttpMessageConverter\" class=\"headerlink\" title=\"2.1 HttpMessageConverter\"></a>2.1 HttpMessageConverter<t></t></h2><p>1）HttpMessageConverter<t> 是 Spring3.0 新添加的一个接口，<strong>负责将请求信息转换为一个对象（类型为 T），将对象（类型为 T）输出为响应信息</strong><br>2）HttpMessageConverter<t>接口定义的方法：  </t></t></p>\n<blockquote>\n<p>①Boolean canRead(Class&lt;?&gt; clazz,MediaType mediaType): 指定转换器可以读取的对象类型，即转换器是否可将请求信息转换为 clazz 类型的对象，同时指定支持 MIME 类型(text/html,applaiction/json等)<br>②Boolean canWrite(Class&lt;?&gt; clazz,MediaType mediaType):指定转换器是否可将 clazz 类型的对象写到响应流中，响应流支持的媒体类型在MediaType 中定义。<br>③List<mediatype> getSupportMediaTypes()：该转换器支持的媒体类型。<br>④T read(Class&lt;? extends T&gt; clazz,HttpInputMessage inputMessage)：将请求信息流转换为 T 类型的对象。<br>⑤void write(T t,MediaType contnetType,HttpOutputMessgae outputMessage):将T类型的对象写到响应流中，同时指定相应的媒体类型为 contentType。</mediatype></p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED1dr6.png\" alt=\"ED1dr6.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.springframework.http;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"> </span><br><span class=\"line\">public interface HttpInputMessage extends HttpMessage &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">InputStream getBody() throws IOException;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.springframework.http;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.OutputStream;</span><br><span class=\"line\"> </span><br><span class=\"line\">public interface HttpOutputMessage extends HttpMessage &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">OutputStream getBody() throws IOException;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/ED1cRA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/ED1cRA.md.png\" alt=\"ED1cRA.md.png\"></a></p>\n<p>3）DispatcherServlet 默认装配 RequestMappingHandlerAdapter ，<br>而 RequestMappingHandlerAdapter 默认装配如下 HttpMessageConverter：</p>\n<p><a href=\"https://imgchr.com/i/ED1zoF\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/ED1zoF.md.png\" alt=\"ED1zoF.md.png\"></a></p>\n<p>4）加入 jackson jar 包后， RequestMappingHandlerAdapter<br>装配的 HttpMessageConverter  如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED3AL6.png\" alt=\"ED3AL6.png\"></p>\n<p>==默认情况下数组长度是6个；增加了jackson的包后多了一个<br>MappingJackson2HttpMessageConverter==</p>\n<p><a href=\"https://imgchr.com/i/ED3KWd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/ED3KWd.md.png\" alt=\"ED3KWd.md.png\"></a></p>\n<h1 id=\"3-使用HttpMessageConverter\"><a href=\"#3-使用HttpMessageConverter\" class=\"headerlink\" title=\"3 使用HttpMessageConverter\"></a>3 使用HttpMessageConverter</h1><p>1）<strong>使用 HttpMessageConverter<t> 将请求信息转化并绑定到处理方法的入参中或将响应结果转为对应类型的响应信息，Spring 提供了两种途径</t></strong>：</p>\n<ul>\n<li>使用 @RequestBody / @ResponseBody 对处理方法进行标注</li>\n<li>使用 HttpEntity<t> / ResponseEntity<t> 作为处理方法的入参或返回值  </t></t></li>\n</ul>\n<p>2）当控制器处理方法使用到 @RequestBody/@ResponseBody 或<br> HttpEntity<t>/ResponseEntity<t> 时, Spring <strong>首先根据请求头或响应头的 Accept 属性选择匹配的 HttpMessageConverter,  进而根据参数类型或泛型类型的过滤得到匹配的 HttpMessageConverter</strong>, 若找不到可用的 HttpMessageConverter 将报错<br>3）@RequestBody 和 @ResponseBody 不需要成对出现<br>4）Content-Disposition：attachment; filename=abc.pdf  </t></t></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED8yjI.png\" alt=\"ED8yjI.png\"></p>\n<p>5）@RequestBody  @ResponseBody</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED8gDP.png\" alt=\"ED8gDP.png\"></p>\n<p>①实验代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;testHttpMessageConverter&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">文件: &lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">描述: &lt;input type=&quot;text&quot; name=&quot;desc&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<p>@ResponseBody  //<strong>@ResponseBody:是将内容或对象作为Http响应正文返回</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;/testHttpMessageConverter&quot;)</span><br></pre></td></tr></table></figure>\n<p>//<strong>@RequestBody:是将Http请求正文插入方法中，修饰目标方法的入参</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String testHttpMessageConverter(@RequestBody String body)&#123;</span><br><span class=\"line\">System.out.println(&quot;body=&quot;+body);</span><br><span class=\"line\">return &quot;Hello,&quot; + new Date();  //不再查找跳转的页面</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6）HttpEntity  ResponseEntity</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED8XUU.png\" alt=\"ED8XUU.png\"></p>\n<p>①实验代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/files/abc.txt    准备一个下载的文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;testResponseEntity&quot;&gt;abc.txt&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;testResponseEntity&quot;)</span><br><span class=\"line\">public ResponseEntity&lt;byte[]&gt; testResponseEntity(HttpSession session) throws IOException&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">ServletContext servletContext = session.getServletContext();</span><br><span class=\"line\">InputStream resourceAsStream = servletContext.getResourceAsStream(&quot;/files/abc.txt&quot;);</span><br><span class=\"line\">byte[] body = new byte[resourceAsStream.available()] ;</span><br><span class=\"line\">resourceAsStream.read(body);</span><br><span class=\"line\"> </span><br><span class=\"line\">MultiValueMap&lt;String, String&gt; headers = new HttpHeaders();</span><br><span class=\"line\">headers.add(&quot;Content-Disposition&quot;, &quot;attachment;filename=abc.txt&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">HttpStatus statusCode = HttpStatus.OK;</span><br><span class=\"line\"> </span><br><span class=\"line\">ResponseEntity&lt;byte[]&gt; responseEntity = new ResponseEntity&lt;byte[]&gt;(body, headers, statusCode);</span><br><span class=\"line\"> </span><br><span class=\"line\">return responseEntity ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDGKKI.png\" alt=\"EDGKKI.png\"></p>\n<p>②源码参考<br>HttpHeaders<br>HttpStatus</p>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"8. SpringMVC综合案例RESTRUL_CRUD","url":"http://yoursite.com/2018/02/17/50. SpringMVC综合案例RESTRUL_CRUD/","content":"<h1 id=\"1-RESTRUL-CRUD-需求\"><a href=\"#1-RESTRUL-CRUD-需求\" class=\"headerlink\" title=\"1 RESTRUL_CRUD_需求\"></a>1 RESTRUL_CRUD_需求</h1><h2 id=\"1-1-显示所有员工信息\"><a href=\"#1-1-显示所有员工信息\" class=\"headerlink\" title=\"1.1 显示所有员工信息\"></a>1.1 显示所有员工信息</h2><p>1）URI：emps<br>2）请求方式：GET<br>3）显示效果<br><img src=\"https://s2.ax1x.com/2019/05/04/EapJ9x.png\" alt=\"image\">  </p>\n<h2 id=\"1-2-添加操作-去往添加页面\"><a href=\"#1-2-添加操作-去往添加页面\" class=\"headerlink\" title=\"1.2 添加操作-去往添加页面\"></a>1.2 添加操作-去往添加页面</h2><p>1）显示添加页面：<br>2）URI：emp<br>3）请求方式：GET<br>4）显示效果<br> <img src=\"https://s2.ax1x.com/2019/05/04/EaptgK.png\" alt=\"image\">  </p>\n<h2 id=\"1-3-添加操作-添加员工\"><a href=\"#1-3-添加操作-添加员工\" class=\"headerlink\" title=\"1.3 添加操作-添加员工\"></a>1.3 添加操作-添加员工</h2><p>1）添加员工信息：<br>2）URI：emp<br>3）请求方式：POST<br>4）显示效果：完成添加，重定向到 list 页面。<br><img src=\"https://s2.ax1x.com/2019/05/04/EapauD.png\" alt=\"image\"></p>\n<h2 id=\"1-4-删除操作\"><a href=\"#1-4-删除操作\" class=\"headerlink\" title=\"1.4    删除操作\"></a>1.4    删除操作</h2><p>1）URL：emp/{id}<br>2）请求方式：DELETE<br>3）删除后效果：对应记录从数据表中删除  </p>\n<h2 id=\"1-5-修改操作-去往修改页面\"><a href=\"#1-5-修改操作-去往修改页面\" class=\"headerlink\" title=\"1.5 修改操作-去往修改页面\"></a>1.5 修改操作-去往修改页面</h2><p>1）URI：emp/{id}<br>2）请求方式：GET<br>3）显示效果：回显表单。  </p>\n<h2 id=\"1-6-修改操作-修改员工\"><a href=\"#1-6-修改操作-修改员工\" class=\"headerlink\" title=\"1.6 修改操作-修改员工\"></a>1.6 修改操作-修改员工</h2><p>1）URI：emp<br>2）请求方式：PUT<br>3）显示效果：完成修改，重定向到 list 页面。  </p>\n<h2 id=\"1-7-相关的类\"><a href=\"#1-7-相关的类\" class=\"headerlink\" title=\"1.7 相关的类\"></a>1.7 相关的类</h2><pre><code>为了方便，省略了Service层\n</code></pre><p>1）实体类：Employee、Department<br>2）Handler：EmployeeHandler<br>3）Dao：EmployeeDao、DepartmentDao<br><img src=\"https://s2.ax1x.com/2019/05/04/EapDUA.png\" alt=\"image\"></p>\n<h2 id=\"1-8-相关的页面\"><a href=\"#1-8-相关的页面\" class=\"headerlink\" title=\"1.8 相关的页面\"></a>1.8 相关的页面</h2><p>1）list.jsp<br>2）input.jsp<br>3）edit.jsp  </p>\n<h1 id=\"2-搭建开发环境\"><a href=\"#2-搭建开发环境\" class=\"headerlink\" title=\"2 搭建开发环境\"></a>2 搭建开发环境</h1><h2 id=\"1）拷贝jar包\"><a href=\"#1）拷贝jar包\" class=\"headerlink\" title=\"1）拷贝jar包\"></a>1）拷贝jar包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.springsource.net.sf.cglib-2.2.0.jar</span><br><span class=\"line\">com.springsource.org.aopalliance-1.0.0.jar</span><br><span class=\"line\">com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</span><br><span class=\"line\">spring-aop-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-aspects-4.0.0.RELEASE.jar</span><br><span class=\"line\">commons-logging-1.1.3.jar</span><br><span class=\"line\">spring-beans-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-context-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-core-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-expression-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-jdbc-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-orm-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-tx-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-web-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-webmvc-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<h2 id=\"2）创建配置文件-springmvc-xml\"><a href=\"#2）创建配置文件-springmvc-xml\" class=\"headerlink\" title=\"2）创建配置文件:springmvc.xml\"></a>2）创建配置文件:springmvc.xml</h2><p>==增加context,mvc,beans名称空间。==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class=\"line\">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class=\"line\">xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 配置扫描的包：com.springmvc.crud --&gt;</span><br><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 配置视图解析器：默认采用转发 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;internalResourceViewResolver&quot; </span><br><span class=\"line\">class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span><br><span class=\"line\">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt; </span><br><span class=\"line\">&lt;!-- 解决静态资源请求 </span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t  将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，</span><br><span class=\"line\">\t\t  它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，</span><br><span class=\"line\">\t\t  就将该请求交由 WEB 应用服务器默认的 Servlet 处理，如果是经过映射的映射，才由 DispatcherServlet 继续处理</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t --&gt;</span><br><span class=\"line\">\t&lt;mvc:default-servlet-handler/&gt; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- </span><br><span class=\"line\">\t\tmvc:default-servlet-handler可以解决静态资源访问的问题，但是会导致@RequestMapping映射的请求失效</span><br><span class=\"line\">\t\t需要再添加 &lt;mvc:annotation-driven/&gt;配置</span><br><span class=\"line\">\t --&gt;</span><br><span class=\"line\">\t&lt;mvc:annotation-driven/&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3）配置核心控制器：web-xml\"><a href=\"#3）配置核心控制器：web-xml\" class=\"headerlink\" title=\"3）配置核心控制器：web.xml\"></a>3）配置核心控制器：web.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;init-param&gt;</span><br><span class=\"line\">&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/init-param&gt;</span><br><span class=\"line\">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">&lt;/servlet&gt; </span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4）将-POST-请求转换为-PUT-或-DELETE-请求\"><a href=\"#4）将-POST-请求转换为-PUT-或-DELETE-请求\" class=\"headerlink\" title=\"4）将 POST 请求转换为 PUT 或 DELETE 请求\"></a>4）将 POST 请求转换为 PUT 或 DELETE 请求</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5）创建相关页面\"><a href=\"#5）创建相关页面\" class=\"headerlink\" title=\"5）创建相关页面\"></a>5）创建相关页面</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/WEB-INF/views/list.jsp</span><br><span class=\"line\">index.jsp</span><br></pre></td></tr></table></figure>\n<h2 id=\"6）增加实体类\"><a href=\"#6）增加实体类\" class=\"headerlink\" title=\"6）增加实体类\"></a>6）增加实体类</h2><p><img src=\"https://s2.ax1x.com/2019/05/04/EapRKS.png\" alt=\"image\">    <img src=\"https://s2.ax1x.com/2019/05/04/EapWDg.png\" alt=\"image\">    </p>\n<h2 id=\"7）增加DAO类\"><a href=\"#7）增加DAO类\" class=\"headerlink\" title=\"7）增加DAO类\"></a>7）增加DAO类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.crud.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Repository;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.atguigu.springmvc.crud.entities.Department;</span><br><span class=\"line\">import com.atguigu.springmvc.crud.entities.Employee;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Repository</span><br><span class=\"line\">public class EmployeeDao &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">private static Map&lt;Integer, Employee&gt; employees = null;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">private DepartmentDao departmentDao;</span><br><span class=\"line\"> </span><br><span class=\"line\">static&#123;</span><br><span class=\"line\">employees = new HashMap&lt;Integer, Employee&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">employees.put(1001, new Employee(1001, &quot;E-AA&quot;, &quot;aa@163.com&quot;, 1, new Department(101, &quot;D-AA&quot;)));</span><br><span class=\"line\">employees.put(1002, new Employee(1002, &quot;E-BB&quot;, &quot;bb@163.com&quot;, 1, new Department(102, &quot;D-BB&quot;)));</span><br><span class=\"line\">employees.put(1003, new Employee(1003, &quot;E-CC&quot;, &quot;cc@163.com&quot;, 0, new Department(103, &quot;D-CC&quot;)));</span><br><span class=\"line\">employees.put(1004, new Employee(1004, &quot;E-DD&quot;, &quot;dd@163.com&quot;, 0, new Department(104, &quot;D-DD&quot;)));</span><br><span class=\"line\">employees.put(1005, new Employee(1005, &quot;E-EE&quot;, &quot;ee@163.com&quot;, 1, new Department(105, &quot;D-EE&quot;)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">private static Integer initId = 1006;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void save(Employee employee)&#123;</span><br><span class=\"line\">if(employee.getId() == null)&#123;</span><br><span class=\"line\">employee.setId(initId++);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">employee.setDepartment(departmentDao.getDepartment(</span><br><span class=\"line\">employee.getDepartment().getId()));</span><br><span class=\"line\">employees.put(employee.getId(), employee);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public Collection&lt;Employee&gt; getAll()&#123;</span><br><span class=\"line\">return employees.values();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public Employee get(Integer id)&#123;</span><br><span class=\"line\">return employees.get(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public void delete(Integer id)&#123;</span><br><span class=\"line\">employees.remove(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.crud.dao;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.util.Collection;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.stereotype.Repository;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.atguigu.springmvc.crud.entities.Department;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Repository</span><br><span class=\"line\">public class DepartmentDao &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">private static Map&lt;Integer, Department&gt; departments = null;</span><br><span class=\"line\"> </span><br><span class=\"line\">static&#123;</span><br><span class=\"line\">departments = new LinkedHashMap&lt;Integer, Department&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">departments.put(101, new Department(101, &quot;D-AA&quot;));</span><br><span class=\"line\">departments.put(102, new Department(102, &quot;D-BB&quot;));</span><br><span class=\"line\">departments.put(103, new Department(103, &quot;D-CC&quot;));</span><br><span class=\"line\">departments.put(104, new Department(104, &quot;D-DD&quot;));</span><br><span class=\"line\">departments.put(105, new Department(105, &quot;D-EE&quot;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public Collection&lt;Department&gt; getDepartments()&#123;</span><br><span class=\"line\">return departments.values();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">public Department getDepartment(Integer id)&#123;</span><br><span class=\"line\">return departments.get(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-RESTRUL-CRUD-显示所有员工信息\"><a href=\"#3-RESTRUL-CRUD-显示所有员工信息\" class=\"headerlink\" title=\"3 RESTRUL_CRUD_显示所有员工信息\"></a>3 RESTRUL_CRUD_显示所有员工信息</h1><p>1）增加页面链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;empList&quot;&gt;To Employee List&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>2）增加处理器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.crud.handlers;</span><br><span class=\"line\"> </span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"> </span><br><span class=\"line\">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">import org.springframework.stereotype.Controller;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\">import com.atguigu.springmvc.crud.dao.EmployeeDao;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class EmployeeHandler &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">private EmployeeDao employeeDao ;</span><br><span class=\"line\"> </span><br><span class=\"line\">@RequestMapping(&quot;/empList&quot;)</span><br><span class=\"line\">public String empList(Map&lt;String,Object&gt; map)&#123;</span><br><span class=\"line\">map.put(&quot;empList&quot;, employeeDao.getAll());        //默认存放到request域中        </span><br><span class=\"line\">return &quot;list&quot;;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）SpringMVC中没遍历的标签，需要使用jstl标签进行集合遍历增加jstl标签库jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;    </span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 </span><br><span class=\"line\">Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:if test=&quot;$&#123;empty requestScope.empList &#125;&quot;&gt;</span><br><span class=\"line\">对不起，没有找到任何员工！</span><br><span class=\"line\">&lt;/c:if&gt;</span><br><span class=\"line\">&lt;c:if test=&quot;$&#123;!empty requestScope.empList &#125;&quot;&gt;</span><br><span class=\"line\">&lt;table border=&quot;1&quot; cellpadding=&quot;10&quot; cellspacing=&quot;0&quot;&gt;                </span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">&lt;td&gt;EmpId&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;LastName&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;Gender&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;Email&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;DepartmentName&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;Edit&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;Delete&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;c:forEach items=&quot;$&#123;requestScope.empList &#125;&quot; var=&quot;emp&quot;&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">&lt;td&gt;$&#123;emp.id &#125;&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;$&#123;emp.lastName &#125;&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;$&#123;emp.gender==0?&quot;Female&quot;:&quot;Male&quot; &#125;&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;$&#123;emp.email &#125;&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;$&#123;emp.department.departmentName &#125;&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;&lt;a href=&quot;&quot;&gt;Edit&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;&lt;a href=&quot;&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;                </span><br><span class=\"line\">&lt;/c:forEach&gt;        </span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\">&lt;/c:if&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-RESTRUL-CRUD-添加操作\"><a href=\"#4-RESTRUL-CRUD-添加操作\" class=\"headerlink\" title=\"4 RESTRUL_CRUD_添加操作\"></a>4 RESTRUL_CRUD_添加操作</h1><p>1）在list.jsp上增加连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;empInput&quot;&gt;Add Employee&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>2）增加处理器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value=&quot;/empInput&quot;,method=RequestMethod.GET)</span><br><span class=\"line\">public String empInput(Map&lt;String,Object&gt; map)&#123;</span><br><span class=\"line\">map.put(&quot;deptList&quot;, departmentDao.getDepartments());</span><br><span class=\"line\">//解决错误：java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name &apos;command&apos; available as request attribute</span><br><span class=\"line\">Employee employee = new Employee();</span><br><span class=\"line\">//map.put(&quot;command&quot;, employee);</span><br><span class=\"line\">map.put(&quot;employee&quot;, employee);</span><br><span class=\"line\">return &quot;add&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）显示添加页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 </span><br><span class=\"line\">Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\">1.为什么使用SpringMVC的form标签  </span><br><span class=\"line\">① 快速开发  </span><br><span class=\"line\">② 表单回显  </span><br><span class=\"line\">2.可以通过modelAttribute指定绑定的模型属性，</span><br><span class=\"line\">若没有指定该属性，则默认从request域中查找command的表单的bean</span><br><span class=\"line\">如果该属性也不存在，那么，则会发生错误。</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;form:form action=&quot;empAdd&quot; method=&quot;POST&quot; modelAttribute=&quot;employee&quot;&gt;</span><br><span class=\"line\">         LastName : &lt;form:input path=&quot;lastName&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         Email : &lt;form:input path=&quot;email&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         &lt;%</span><br><span class=\"line\">                 Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class=\"line\">                 map.put(&quot;1&quot;, &quot;Male&quot;);</span><br><span class=\"line\">                 map.put(&quot;0&quot;,&quot;Female&quot;);</span><br><span class=\"line\">                 request.setAttribute(&quot;genders&quot;, map);</span><br><span class=\"line\">         %&gt;</span><br><span class=\"line\">        Gender : &lt;br&gt;&lt;form:radiobuttons path=&quot;gender&quot; items=&quot;$&#123;genders &#125;&quot; delimiter=&quot;&lt;br&gt;&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         DeptName : </span><br><span class=\"line\">                 &lt;form:select path=&quot;department.id&quot; </span><br><span class=\"line\">                                                 items=&quot;$&#123;deptList &#125;&quot; </span><br><span class=\"line\">                                                 itemLabel=&quot;departmentName&quot; </span><br><span class=\"line\">                                                 itemValue=&quot;id&quot;&gt;&lt;/form:select&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">                 &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\"> &lt;/form:form&gt; </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>4）显示表单信息时，会报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP Status 500 - </span><br><span class=\"line\"> </span><br><span class=\"line\">type Exception report</span><br><span class=\"line\">message </span><br><span class=\"line\">description The server encountered an internal error () that prevented it from fulfilling this request.</span><br><span class=\"line\">exception </span><br><span class=\"line\">org.apache.jasper.JasperException: An exception occurred processing JSP page /WEB-INF/views/add.jsp at line 18</span><br><span class=\"line\">15:                         ② 表单回显</span><br><span class=\"line\">16:          --&gt;</span><br><span class=\"line\">17:          &lt;form:form action=&quot;empAdd&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">18:                  LastName : &lt;form:input path=&quot;lastName&quot;/&gt;</span><br><span class=\"line\">19:                  Email : &lt;form:input path=&quot;email&quot;/&gt;</span><br><span class=\"line\">20:                  &lt;%</span><br><span class=\"line\">21:                          Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class=\"line\">Stacktrace:</span><br><span class=\"line\">        org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:505)</span><br><span class=\"line\">        org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:410)</span><br><span class=\"line\">        org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:337)</span><br><span class=\"line\">        org.apache.jasper.servlet.JspServlet.service(JspServlet.java:266)</span><br><span class=\"line\">        javax.servlet.http.HttpServlet.service(HttpServlet.java:803)</span><br><span class=\"line\">        org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:209)</span><br><span class=\"line\">        org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:266)</span><br><span class=\"line\">        org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1225)</span><br><span class=\"line\">        org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1012)</span><br><span class=\"line\">        org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)</span><br><span class=\"line\">        org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)</span><br><span class=\"line\">        org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931)</span><br><span class=\"line\">        org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:822)</span><br><span class=\"line\">        javax.servlet.http.HttpServlet.service(HttpServlet.java:690)</span><br><span class=\"line\">        org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807)</span><br><span class=\"line\">        javax.servlet.http.HttpServlet.service(HttpServlet.java:803)</span><br><span class=\"line\">        org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)</span><br><span class=\"line\">        org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)</span><br><span class=\"line\">root cause </span><br><span class=\"line\">java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name &apos;command&apos; available as request attribute</span><br><span class=\"line\">        org.springframework.web.servlet.support.BindStatus.&lt;init&gt;(BindStatus.java:141)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-使用Spring的表单标签\"><a href=\"#5-使用Spring的表单标签\" class=\"headerlink\" title=\"5 使用Spring的表单标签\"></a>5 使用Spring的表单标签</h1><p>1）通过 SpringMVC的表单标签可以实现将模型数据中的属性和 HTML 表单元素相绑定，以实现表单数据更便捷编辑和表单值的回显<br>2）form 标签  </p>\n<blockquote>\n<ul>\n<li>一般情况下，通过 GET 请求获取表单页面，而通过 POST 请求提交表单页面，因此获取表单页面和提交表单页面的 URL 是相同的。</li>\n<li>只要满足该最佳条件的契约，<a href=\"form:form\" target=\"_blank\" rel=\"noopener\">form:form</a> 标签就无需通过 action 属性指定表单提交的 URL</li>\n<li>可以通过 modelAttribute属性指定绑定的模型属性，若没有指定该属性，则默认从 request 域对象中读取 command 的表单 bean，如果该属性值也不存在，则会发生错误。 </li>\n</ul>\n</blockquote>\n<p>3）SpringMVC 提供了多个表单组件标签，如 <a href=\"form:input/\" target=\"_blank\" rel=\"noopener\">form:input/</a>、<a href=\"form:select/\" target=\"_blank\" rel=\"noopener\">form:select/</a> 等，用以绑定表单字段的属性值，它们的共有属性如下：</p>\n<blockquote>\n<ul>\n<li>path：表单字段，对应 html 元素的 name 属性，支持级联属性</li>\n<li>htmlEscape：是否对表单值的 HTML 特殊字符进行转换，默认值为 true</li>\n<li>cssClass：表单组件对应的 CSS 样式类名</li>\n<li>cssErrorClass：表单组件的数据存在错误时，采取的 CSS 样式  </li>\n</ul>\n</blockquote>\n<p>4）form:input、form:password、form:hidden、form:textarea：对应 HTML 表单的 text、password、hidden、textarea 标签<br>5）form:radiobutton：单选框组件标签，当表单 bean 对应的属性值和 value 值相等时，单选框被选中<br>6）form:radiobuttons：单选框组标签，用于构造多个单选框  </p>\n<blockquote>\n<ul>\n<li>items：可以是一个 List、String[] 或 Map</li>\n<li>itemValue：指定 radio 的 value 值。可以是集合中 bean 的一个属性值</li>\n<li>itemLabel：指定 radio 的 label 值</li>\n<li>delimiter：多个单选框可以通过 delimiter 指定分隔符</li>\n</ul>\n</blockquote>\n<p>7）form:checkbox：复选框组件。用于构造单个复选框<br>8）form:checkboxs：用于构造多个复选框。使用方式同   form:radiobuttons 标签<br>9）form:select：用于构造下拉框组件。使用方式同 form:radiobuttons 标签<br>10）form:option：下拉框选项组件标签。使用方式同 form:radiobuttons 标签<br>11）form:errors：显示表单组件或数据校验所对应的错误  </p>\n<blockquote>\n<ul>\n<li>&lt;form:errors path= “*” /&gt; ：显示表单所有的错误</li>\n<li>&lt;form:errors path= “user*” /&gt; ：显示所有以 user 为前缀的属性对应的错误</li>\n<li>&lt;form:errors path= “username” /&gt; ：显示特定表单对象属性的错误</li>\n</ul>\n</blockquote>\n<h1 id=\"6-添加员工实验代码\"><a href=\"#6-添加员工实验代码\" class=\"headerlink\" title=\"6 添加员工实验代码\"></a>6 添加员工实验代码</h1><p>1）表单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class=\"line\"> &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">1.为什么使用SpringMVC的form标签</span><br><span class=\"line\">① 快速开发</span><br><span class=\"line\">② 表单回显</span><br><span class=\"line\">2.可以通过modelAttribute指定绑定的模型属性，</span><br><span class=\"line\">若没有指定该属性，则默认从request域中查找command的表单的bean</span><br><span class=\"line\">如果该属性也不存在，那么，则会发生错误。</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;form:form action=&quot;empAdd&quot; method=&quot;POST&quot; modelAttribute=&quot;employee&quot;&gt;</span><br><span class=\"line\">         LastName : &lt;form:input path=&quot;lastName&quot; /&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         Email : &lt;form:input path=&quot;email&quot; /&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         &lt;%</span><br><span class=\"line\">                 Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class=\"line\">                 map.put(&quot;1&quot;, &quot;Male&quot;);</span><br><span class=\"line\">                 map.put(&quot;0&quot;,&quot;Female&quot;);</span><br><span class=\"line\">                 request.setAttribute(&quot;genders&quot;, map);</span><br><span class=\"line\">         %&gt;</span><br><span class=\"line\">         Gender : &lt;br&gt;&lt;form:radiobuttons path=&quot;gender&quot; items=&quot;$&#123;genders &#125;&quot; delimiter=&quot;&lt;br&gt;&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         DeptName : </span><br><span class=\"line\">                 &lt;form:select path=&quot;department.id&quot; </span><br><span class=\"line\">                                                 items=&quot;$&#123;deptList &#125;&quot; </span><br><span class=\"line\">                                                 itemLabel=&quot;departmentName&quot; </span><br><span class=\"line\">                                                 itemValue=&quot;id&quot;&gt;&lt;/form:select&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">                 &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\"> &lt;/form:form&gt; </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>2）控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Controller</span><br><span class=\"line\">public class EmployeeHandler &#123;</span><br><span class=\"line\">@RequestMapping(value=&quot;/empAdd&quot;,method=RequestMethod.POST)</span><br><span class=\"line\">public String empAdd(Employee employee)&#123;</span><br><span class=\"line\">employeeDao.save(employee);</span><br><span class=\"line\">return &quot;redirect:/empList&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-RESTRUL-CRUD-删除操作-amp-处理静态资源\"><a href=\"#7-RESTRUL-CRUD-删除操作-amp-处理静态资源\" class=\"headerlink\" title=\"7 RESTRUL_CRUD_删除操作&amp;处理静态资源\"></a>7 RESTRUL_CRUD_删除操作&amp;处理静态资源</h1><h2 id=\"7-1-删除实验代码\"><a href=\"#7-1-删除实验代码\" class=\"headerlink\" title=\"7.1 删除实验代码\"></a>7.1 删除实验代码</h2><p>1）页面链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;a href=&quot;/empDelete/$&#123;emp.id &#125;&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n<p>2）控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value=&quot;/empDelete/&#123;id&#125;&quot; ,method=RequestMethod.DELETE)</span><br><span class=\"line\">public String empDelete(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class=\"line\">employeeDao.delete(id);</span><br><span class=\"line\">return &quot;redirect:/empList&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-2-HiddenHttpMethodFilter过滤器\"><a href=\"#7-2-HiddenHttpMethodFilter过滤器\" class=\"headerlink\" title=\"7.2 HiddenHttpMethodFilter过滤器\"></a>7.2 HiddenHttpMethodFilter过滤器</h2><p>发起请求，无法执行，因为delete请求必须通过post请求转换为delete请求，借助：HiddenHttpMethodFilter过滤器</p>\n<h2 id=\"7-3-需要使用jQuery来转换请求方式\"><a href=\"#7-3-需要使用jQuery来转换请求方式\" class=\"headerlink\" title=\"7.3 需要使用jQuery来转换请求方式\"></a>7.3 需要使用jQuery来转换请求方式</h2><p>1）加入jQuery库文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/scripts/jquery-1.9.1.min.js</span><br></pre></td></tr></table></figure>\n<p>2）jQuery库文件不起作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">警告: No mapping found for HTTP request with URI [/SpringMVC_03_RESTFul_CRUD/scripts/jquery-1.9.1.min.js] in DispatcherServlet with name &apos;springDispatcherServlet&apos;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/05/04/Ea9Aqe.png\" alt=\"image\"></p>\n<p>3）解决办法，SpringMVC 处理静态资源  </p>\n<blockquote>\n<p>①为什么会有这样的问题:<br>优雅的 REST 风格的资源URL 不希望带 .html 或 .do 等后缀，若将 DispatcherServlet 请求映射配置为 /, 则 Spring MVC 将捕获 WEB 容器的所有请求, 包括静态资源的请求, SpringMVC 会将他们当成一个普通请求处理, 因找不到对应处理器将导致错误。<br>②解决: 在 SpringMVC 的配置文件中配置 <a href=\"mvc:default-servlet-handler/\" target=\"_blank\" rel=\"noopener\">mvc:default-servlet-handler/</a><br>4）配置后，原来的请求又不好使了<br>        需要配置&lt;mvc:annotation-driven /&gt;</p>\n</blockquote>\n<h2 id=\"7-4-关于mvc-default-servlet-handler-作用\"><a href=\"#7-4-关于mvc-default-servlet-handler-作用\" class=\"headerlink\" title=\"7.4 关于mvc:default-servlet-handler/作用\"></a>7.4 关于<a href=\"mvc:default-servlet-handler/\" target=\"_blank\" rel=\"noopener\">mvc:default-servlet-handler/</a>作用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- </span><br><span class=\"line\">&lt;mvc:default-servlet-handler/&gt; 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，</span><br><span class=\"line\">它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，</span><br><span class=\"line\">就将该请求交由 WEB 应用服务器默认的 Servlet 处理，如果不是静态资源的请求，才由 DispatcherServlet 继续处理</span><br><span class=\"line\">一般 WEB 应用服务器默认的 Servlet 的名称都是 default。</span><br><span class=\"line\">若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定        </span><br><span class=\"line\">参考：CATALINA_HOME/config/web.xml</span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;debug&lt;/param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;0&lt;/param-value&gt;</span><br><span class=\"line\">        &lt;/init-param&gt;</span><br><span class=\"line\">        &lt;init-param&gt;</span><br><span class=\"line\">            &lt;param-name&gt;listings&lt;/param-name&gt;</span><br><span class=\"line\">            &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class=\"line\">        &lt;/init-param&gt;</span><br><span class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">    &lt;/servlet&gt;</span><br><span class=\"line\">该标签属性default-servlet-name默认值是&quot;default&quot;,可以省略。        </span><br><span class=\"line\">&lt;mvc:default-servlet-handler/&gt;        </span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;mvc:default-servlet-handler default-servlet-name=&quot;default&quot;/&gt;</span><br><span class=\"line\">\t7.7.5 通过jQuery转换为DELETE请求</span><br><span class=\"line\">&lt;td&gt;&lt;a class=&quot;delete&quot; href=&quot;empDelete/$&#123;emp.id &#125;&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;scripts/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">$(function()&#123;</span><br><span class=\"line\">$(&quot;.delete&quot;).click(function()&#123;</span><br><span class=\"line\">var href = $(this).attr(&quot;href&quot;);</span><br><span class=\"line\">$(&quot;form&quot;).attr(&quot;action&quot;,href).submit();</span><br><span class=\"line\">return false ;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-6-删除操作流程图解\"><a href=\"#7-6-删除操作流程图解\" class=\"headerlink\" title=\"7.6 删除操作流程图解\"></a>7.6 删除操作流程图解</h1><p><img src=\"https://s2.ax1x.com/2019/05/04/Ea9nPI.png\" alt=\"image\"></p>\n<h1 id=\"8-RESTRUL-CRUD-修改操作\"><a href=\"#8-RESTRUL-CRUD-修改操作\" class=\"headerlink\" title=\"8 RESTRUL_CRUD_修改操作\"></a>8 RESTRUL_CRUD_修改操作</h1><h2 id=\"8-1-根据id查询员工对象，表单回显\"><a href=\"#8-1-根据id查询员工对象，表单回显\" class=\"headerlink\" title=\"8.1 根据id查询员工对象，表单回显\"></a>8.1 根据id查询员工对象，表单回显</h2><p>1）页面链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;&lt;a href=&quot;empEdit/$&#123;emp.id &#125;&quot;&gt;Edit&lt;/a&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n<p>2）控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改员工 - 表单回显</span><br><span class=\"line\">@RequestMapping(value=&quot;/empEdit/&#123;id&#125;&quot;,method=RequestMethod.GET)</span><br><span class=\"line\">public String empEdit(@PathVariable(&quot;id&quot;) Integer id,Map&lt;String,Object&gt; map)&#123;</span><br><span class=\"line\">map.put(&quot;employee&quot;, employeeDao.get(id));</span><br><span class=\"line\">map.put(&quot;deptList&quot;,departmentDao.getDepartments());</span><br><span class=\"line\">return &quot;edit&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）修改页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</span><br><span class=\"line\">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class=\"line\"> &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">1.为什么使用SpringMVC的form标签</span><br><span class=\"line\">① 快速开发</span><br><span class=\"line\">② 表单回显</span><br><span class=\"line\">2.可以通过modelAttribute指定绑定的模型属性，</span><br><span class=\"line\">若没有指定该属性，则默认从request域中查找command的表单的bean</span><br><span class=\"line\">如果该属性也不存在，那么，则会发生错误。</span><br><span class=\"line\">修改功能需要增加绝对路径，相对路径会报错，路径不对</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\"> &lt;form:form action=&quot;$&#123;pageContext.request.contextPath &#125;/empUpdate&quot; </span><br><span class=\"line\">method=&quot;POST&quot; modelAttribute=&quot;employee&quot;&gt;                        </span><br><span class=\"line\">&lt;%--</span><br><span class=\"line\">         LastName : &lt;form:input path=&quot;lastName&quot; /&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">          --%&gt;</span><br><span class=\"line\">                 &lt;form:hidden path=&quot;id&quot;/&gt;</span><br><span class=\"line\">                 &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</span><br><span class=\"line\">                 &lt;%-- 这里不要使用form:hidden标签，否则会报错。 </span><br><span class=\"line\">&lt;form:hidden path=&quot;_method&quot; value=&quot;PUT&quot;/&gt;</span><br><span class=\"line\">                         Spring的隐含标签，没有value属性，同时,path指定的值，在模型对象中也没有这个属性(_method)，所以回显时会报错。</span><br><span class=\"line\">                         org.springframework.beans.NotReadablePropertyException: </span><br><span class=\"line\">                         Invalid property &apos;_method&apos; of bean class [com.atguigu.springmvc.crud.entities.Employee]: </span><br><span class=\"line\">                         Bean property &apos;_method&apos; is not readable or has an invalid getter method: </span><br><span class=\"line\">                         Does the return type of the getter match the parameter type of the setter?</span><br><span class=\"line\">                  --%&gt;</span><br><span class=\"line\">                          </span><br><span class=\"line\">         Email : &lt;form:input path=&quot;email&quot; /&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         &lt;%</span><br><span class=\"line\">                 Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class=\"line\">                 map.put(&quot;1&quot;, &quot;Male&quot;);</span><br><span class=\"line\">                 map.put(&quot;0&quot;,&quot;Female&quot;);</span><br><span class=\"line\">                 request.setAttribute(&quot;genders&quot;, map);</span><br><span class=\"line\">         %&gt;</span><br><span class=\"line\">         Gender : &lt;br&gt;&lt;form:radiobuttons path=&quot;gender&quot; items=&quot;$&#123;genders &#125;&quot; delimiter=&quot;&lt;br&gt;&quot;/&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">         DeptName : </span><br><span class=\"line\">                 &lt;form:select path=&quot;department.id&quot; </span><br><span class=\"line\">                                                 items=&quot;$&#123;deptList &#125;&quot; </span><br><span class=\"line\">                                                 itemLabel=&quot;departmentName&quot; </span><br><span class=\"line\">                                                 itemValue=&quot;id&quot;&gt;&lt;/form:select&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">                 &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\"> &lt;/form:form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-提交表单，修改数据\"><a href=\"#8-2-提交表单，修改数据\" class=\"headerlink\" title=\"8.2 提交表单，修改数据\"></a>8.2 提交表单，修改数据</h2><p>1）控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value=&quot;/empUpdate&quot;,method=RequestMethod.PUT)</span><br><span class=\"line\">public String empUpdate(Employee employee)&#123;</span><br><span class=\"line\">employeeDao.save(employee);              </span><br><span class=\"line\">return &quot;redirect:/empList&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"7. SpringMVC视图解析.md","url":"http://yoursite.com/2018/02/16/49. SpringMVC视图解析.md/","content":"<h1 id=\"1-SpringMVC如何解析视图概述\"><a href=\"#1-SpringMVC如何解析视图概述\" class=\"headerlink\" title=\"1 SpringMVC如何解析视图概述\"></a>1 SpringMVC如何解析视图概述</h1><p>1）不论控制器返回一个String,ModelAndView,View都会转换为ModelAndView对象，由视图解析器解析视图，然后，进行页面的跳转。<br><img src=\"https://s2.ax1x.com/2019/05/03/EUXpXd.png\" alt=\"image\"><br>2）视图解析源码分析：重要的两个接口<br><img src=\"https://s2.ax1x.com/2019/05/03/EUXwH1.png\" alt=\"image\"><br><img src=\"https://s2.ax1x.com/2019/05/03/EUXr4K.png\" alt=\"image\"><br>3）断点调试源码<br><img src=\"https://s2.ax1x.com/2019/05/03/EUXfHI.png\" alt=\"image\"><br>4）流程图<br><a href=\"https://s2.ax1x.com/2019/05/03/EUXvEq.png\" target=\"_blank\" rel=\"noopener\">https://s2.ax1x.com/2019/05/03/EUXvEq.png</a></p>\n<h1 id=\"2-视图和视图解析器\"><a href=\"#2-视图和视图解析器\" class=\"headerlink\" title=\"2 视图和视图解析器\"></a>2 视图和视图解析器</h1><blockquote>\n<p>1）请求处理方法执行完成后，最终返回一个 ModelAndView 对象。对于那些返回 String，View 或 ModeMap 等类型的处理方法，Spring MVC 也会在内部将它们装配成一个 ModelAndView 对象，它包含了逻辑名和模型对象的视图<br>2）Spring MVC 借助视图解析器（ViewResolver）得到最终的视图对象（View），最终的视图可以是 JSP ，也可能是 Excel、JFreeChart等各种表现形式的视图<br>3）对于最终究竟采取何种视图对象对模型数据进行渲染，处理器并不关心，处理器工作重点聚焦在生产模型数据的工作上，从而实现 MVC 的充分解耦  </p>\n</blockquote>\n<h1 id=\"3-视图\"><a href=\"#3-视图\" class=\"headerlink\" title=\"3 视图\"></a>3 视图</h1><p>1）视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户。<br>2）为了实现视图模型和具体实现技术的解耦，Spring 在 org.springframework.web.servlet 包中定义了一个高度抽象的 View 接口：<br><img src=\"https://s2.ax1x.com/2019/05/03/EUjZUx.png\" alt=\"image\"><br>3）==视图对象由视图解析器负责实例化==。由于视图是==无状态==的，所以他们不会有==线程安全==的问题<br>6.4 常用的视图实现类<br><img src=\"https://s2.ax1x.com/2019/05/03/EUj1rd.png\" alt=\"image\"></p>\n<h1 id=\"5-JstlView\"><a href=\"#5-JstlView\" class=\"headerlink\" title=\"5 JstlView\"></a>5 JstlView</h1><p>1）若项目中使用了JSTL，则SpringMVC 会自动把视图由InternalResourceView转为 JstlView  （==断点调试，将JSTL的jar包增加到项目中，视图解析器会自动修改为JstlView==）<br>2）若使用 JSTL 的 fmt 标签则需要在 SpringMVC 的配置文件中配置国际化资源文件<br><img src=\"https://s2.ax1x.com/2019/05/03/EUjgiV.png\" alt=\"image\"><br>3）若希望直接响应通过 SpringMVC 渲染的页面，可以使用 mvc:view-controller 标签实现<br><img src=\"https://s2.ax1x.com/2019/05/03/EUjTd1.png\" alt=\"image\"></p>\n<h2 id=\"5-1-实验代码\"><a href=\"#5-1-实验代码\" class=\"headerlink\" title=\"5.1 实验代码\"></a>5.1 实验代码</h2><p>1）增加jstl标签 jar包（断点调试，这时的View对象就是JstlView）<br>  <img src=\"https://s2.ax1x.com/2019/05/03/EUjxLd.png\" alt=\"image\">  </p>\n<h1 id=\"6-视图解析器\"><a href=\"#6-视图解析器\" class=\"headerlink\" title=\"6 视图解析器\"></a>6 视图解析器</h1><p>1）SpringMVC 为逻辑视图名的解析提供了不同的策略，可以在 SpringMVC 上下文中配置一种或多种解析策略，并指定他们之间的先后顺序。每一种映射策略对应一个具体的视图解析器实现类。<br>2）视图解析器的作用比较单一：将逻辑视图解析为一个具体的视图对象。<br>3）所有的视图解析器都必须实现 ViewResolver 接口：<br><img src=\"https://s2.ax1x.com/2019/05/03/EUviJf.png\" alt=\"image\"></p>\n<h1 id=\"7-常用的视图解析器实现类\"><a href=\"#7-常用的视图解析器实现类\" class=\"headerlink\" title=\"7 常用的视图解析器实现类\"></a>7 常用的视图解析器实现类</h1><p><img src=\"https://s2.ax1x.com/2019/05/03/EUvASS.png\" alt=\"image\"><br>1）程序员可以选择一种视图解析器或混用多种视图解析器<br>2）每个视图解析器都实现了 Ordered 接口并开放出一个 order 属性，可以通过 order 属性指定解析器的优先顺序，order  越小优先级越高。<br>3）SpringMVC 会按视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则将抛出 ServletException 异常<br>4）InternalResourceViewResolver<br>①JSP 是最常见的视图技术，可以使用 InternalResourceViewResolve作为视图解析器：<br>②<img src=\"https://s2.ax1x.com/2019/05/03/EUv3SU.png\" alt=\"image\"></p>\n<h1 id=\"8mvc-view-controller标签\"><a href=\"#8mvc-view-controller标签\" class=\"headerlink\" title=\"8mvc:view-controller标签\"></a>8mvc:view-controller标签</h1><p>1）若希望直接响应通过 SpringMVC 渲染的页面，可以使用 mvc:view-controller 标签实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 直接配置响应的页面：无需经过控制器来执行结果 --&gt;</span><br><span class=\"line\">&lt;mvc:view-controller path=&quot;/success&quot; view-name=&quot;success&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>2）请求的路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/SpringMVC_02_View/success</span><br></pre></td></tr></table></figure>\n<p>3）配置<a href=\"mvc:view-controller\" target=\"_blank\" rel=\"noopener\">mvc:view-controller</a>会导致其他请求路径失效<br>       解决办法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 在实际开发过程中都需要配置mvc:annotation-driven标签 --&gt;</span><br><span class=\"line\">&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9重定向\"><a href=\"#9重定向\" class=\"headerlink\" title=\"9重定向\"></a>9重定向</h1><p>1）关于重定向  </p>\n<blockquote>\n<p>①一般情况下，控制器方法返回字符串类型的值会被当成逻辑视图名处理<br>②如果返回的字符串中带 forward: 或 redirect: 前缀时，SpringMVC 会对他们进行特殊处理：将 forward: 和 redirect: 当成指示符，其后的字符串作为 URL 来处理<br>③redirect:success.jsp：会完成一个到 success.jsp的重定向的操作<br>④forward:success.jsp：会完成一个到 success.jsp的转发操作   </p>\n</blockquote>\n<p>2）定义页面链接 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;springmvc/testRedirect&quot;&gt;testRedirect&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>3）定义控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;/testRedirect&quot;)</span><br><span class=\"line\">public String testRedirect()&#123;</span><br><span class=\"line\">System.out.println(&quot;testRedirect&quot;);</span><br><span class=\"line\">return &quot;redirect:/index.jsp&quot;;</span><br><span class=\"line\">//return &quot;forward:/index.jsp&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4）源码分析：重定向原理<br>1.源码分析：重定向原理<br><img src=\"https://s2.ax1x.com/2019/05/03/EUvcmd.png\" alt=\"image\"> </p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUvb0s.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUxpX4.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUxEh6.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUxe1O.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return &quot;forward:/index.jsp&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUxMBd.png\" alt=\"image\"></p>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"6. SpringMVC处理响应数据","url":"http://yoursite.com/2018/02/14/48. SpringMVC处理响应数据/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"1ModelAndView\"><a href=\"#1ModelAndView\" class=\"headerlink\" title=\"1ModelAndView\"></a>1ModelAndView</h2><h3 id=\"1-1-两个重要的成员变量\"><a href=\"#1-1-两个重要的成员变量\" class=\"headerlink\" title=\"1.1  两个重要的成员变量\"></a>1.1  两个重要的成员变量</h3><blockquote>\n<p>private Object view;     描述视图信息<br>private ModelMap model; 描述模型数据（响应数据)  </p>\n</blockquote>\n<h3 id=\"1-2-常用的方法\"><a href=\"#1-2-常用的方法\" class=\"headerlink\" title=\"1.2  常用的方法\"></a>1.2  常用的方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setViewName(String viewName)  设置视图信息 </span><br><span class=\"line\">public ModelAndView addObject(String attributeName, Object attributeValue)  设置模型数据     </span><br><span class=\"line\">protected Map&lt;String, Object&gt; getModelInternal  获取模型数据  </span><br><span class=\"line\">public ModelMap getModelMap()  获取模型数据  </span><br><span class=\"line\">public Map&lt;String, Object&gt; getModel()  获取模型数据</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-ModelAndView-源码流程分析总结\"><a href=\"#1-3-ModelAndView-源码流程分析总结\" class=\"headerlink\" title=\"1.3 ModelAndView  源码流程分析总结:\"></a>1.3 ModelAndView  源码流程分析总结:</h3><blockquote>\n<p>[1]. 在DispatcherServlet的945行, 准备执行请求处理器，调用请求处理方法          </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[2]. 执行请求处理方法， 返回一个ModelAndView对象,  返回到DispatcherServlet的945行.<br> [3]. 在DispatcherServlet的959行,准备开始处理ModelAndView<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>[4]. 在DispatcherServlet的1012行，准备分析ModelAndView，得到一个视图对象.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(mv, request, response);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p> [5]. 在DispatcherServlet的1204行, 通过ModelAndView中的视图信息解析得到视图对象==&gt;InternalResourceView<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view = resolveViewName(mv.getViewName(),mv.getModelInternal(), locale, request);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUsIfO.png\" alt=\"image\"><br> [6]. 在DispatcherServlet的1225行，视图对象开始处理模型数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.render(mv.getModelInternal(), request, response);</span><br></pre></td></tr></table></figure></p>\n<pre><code>解释: render()方法是View接口中的抽象方法，在AbstractView中对render()方法做了统一实现.\n</code></pre><p> [7]. 在AbstractView中的266行，准备处理模型数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">renderMergedOutputModel(mergedModel, request, response);</span><br></pre></td></tr></table></figure></p>\n<pre><code> 解释: \n renderMergetOutputModel方法是在AbstractView中定义的抽象方法，该方法在不同的视图类中做了不同的实现。  \n因为当前解析得到的视图对象时InternalResourceView,\n因此会调用到InternalResourceView中的renderMergedOutputModel方法.\n</code></pre><p> [8]. 在InternalResourceView中的180行, 将模型数据设置到request域对象中.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exposeModelAsRequestAttributes(model, requestToExpose);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUygC8.png\" alt=\"image\"></p>\n<p>[9].在InternalResourceView中的189行，获取到转发器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestDispatcher rd = getRequestDispatcher(requestToExpose, dispatcherPath);</span><br></pre></td></tr></table></figure>\n<p> [10].在InternalResourceView中的209行，开始转发</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rd.forward(requestToExpose, response);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Map  Model ==&gt;BingingAwareModelMap </li>\n<li>一个结论:  不论请求处理方法的返回值是ModelAndView、String 等, Springmvc在调用完请求处理方法后，都会统一处理成一个 ModelAndView对象.</li>\n</ol>\n<h1 id=\"以前web使用方法\"><a href=\"#以前web使用方法\" class=\"headerlink\" title=\"以前web使用方法\"></a>以前web使用方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javaWEB： request.setAttribute(xxx)  request.getRequestDispatcher(“地址”).forward(req,resp);</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-SpringMVC-输出模型数据概述\"><a href=\"#1-SpringMVC-输出模型数据概述\" class=\"headerlink\" title=\"1 SpringMVC 输出模型数据概述\"></a>1 SpringMVC 输出模型数据概述</h1><h2 id=\"1-1提供了以下几种途径输出模型数据\"><a href=\"#1-1提供了以下几种途径输出模型数据\" class=\"headerlink\" title=\"1.1提供了以下几种途径输出模型数据\"></a>1.1提供了以下几种途径输出模型数据</h2><blockquote>\n<p>1）==ModelAndView==: 处理方法返回值类型为 ModelAndView 时, 方法体即可通过该对象添加模型数据<br>2）==Map 或 Model==: 入参为 org.springframework.ui.Model、<br>org.springframework.ui.ModelMap 或 java.uti.Map 时，处理方法返回时，Map 中的数据会自动添加到模型中。</p>\n</blockquote>\n<h1 id=\"2处理模型数据之-ModelAndView\"><a href=\"#2处理模型数据之-ModelAndView\" class=\"headerlink\" title=\"2处理模型数据之 ModelAndView\"></a>2处理模型数据之 ModelAndView</h1><h2 id=\"2-1ModelAndView介绍\"><a href=\"#2-1ModelAndView介绍\" class=\"headerlink\" title=\"2.1ModelAndView介绍\"></a>2.1ModelAndView介绍</h2><p><strong>控制器处理方法的返回值如果为 ModelAndView, 则其既包含视图信息，也包含模型数<br>据信息。</strong>  </p>\n<h3 id=\"1）两个重要的成员变量\"><a href=\"#1）两个重要的成员变量\" class=\"headerlink\" title=\"1）两个重要的成员变量:\"></a>1）两个重要的成员变量:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Object view;      视图信息</span><br><span class=\"line\">private ModelMap model; 模型数据</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）添加模型数据\"><a href=\"#2）添加模型数据\" class=\"headerlink\" title=\"2）添加模型数据:\"></a>2）添加模型数据:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MoelAndView addObject(String attributeName, Object attributeValue)   设置模型数据</span><br><span class=\"line\">ModelAndView addAllObject(Map&lt;String, ?&gt; modelMap)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）设置视图\"><a href=\"#4）设置视图\" class=\"headerlink\" title=\"4）设置视图:\"></a>4）设置视图:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void setView(View view)                设置视图对象</span><br><span class=\"line\">void setViewName(String viewName)     设置视图名字</span><br></pre></td></tr></table></figure>\n<h3 id=\"5）获取模型数据\"><a href=\"#5）获取模型数据\" class=\"headerlink\" title=\"5）获取模型数据\"></a>5）获取模型数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected Map&lt;String, Object&gt; getModelInternal()   获取模型数据</span><br><span class=\"line\">  public ModelMap getModelMap()</span><br><span class=\"line\">  public Map&lt;String, Object&gt; getModel()</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-实验代码\"><a href=\"#2-2-实验代码\" class=\"headerlink\" title=\"2.2 实验代码\"></a>2.2 实验代码</h2><h3 id=\"1）增加控制器方法\"><a href=\"#1）增加控制器方法\" class=\"headerlink\" title=\"1）增加控制器方法\"></a>1）增加控制器方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 目标方法的返回类型可以是ModelAndView类型</span><br><span class=\"line\"> *                 其中包含视图信息和模型数据信息</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class=\"line\">public ModelAndView testModelAndView()&#123;</span><br><span class=\"line\">System.out.println(&quot;testModelAndView&quot;);</span><br><span class=\"line\">String viewName = &quot;success&quot;;</span><br><span class=\"line\">ModelAndView mv = new ModelAndView(viewName );</span><br><span class=\"line\">mv.addObject(&quot;time&quot;,new Date().toString()); //实质上存放到request域中 </span><br><span class=\"line\">return mv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）增加页面链接\"><a href=\"#2）增加页面链接\" class=\"headerlink\" title=\"2）增加页面链接\"></a>2）增加页面链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--测试 ModelAndView 作为处理返回结果 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;springmvc/testModelAndView&quot;&gt;testModelAndView&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）增加成功页面，显示数据\"><a href=\"#3）增加成功页面，显示数据\" class=\"headerlink\" title=\"3）增加成功页面，显示数据\"></a>3）增加成功页面，显示数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time: $&#123;requestScope.time &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）断点调试\"><a href=\"#4）断点调试\" class=\"headerlink\" title=\"4）断点调试\"></a>4）断点调试</h3><p><img src=\"https://s2.ax1x.com/2019/05/03/EUcbX4.png\" alt=\"image\"></p>\n<h2 id=\"2-2-源码解析\"><a href=\"#2-2-源码解析\" class=\"headerlink\" title=\"2.2 源码解析\"></a>2.2 源码解析</h2><p><img src=\"https://s2.ax1x.com/2019/05/03/EUg91O.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUgu38.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EURxNn.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUWp90.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUWCcT.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUWkB4.png\" alt=\"image\"></p>\n<h1 id=\"3-处理模型数据之-Map-Model\"><a href=\"#3-处理模型数据之-Map-Model\" class=\"headerlink\" title=\"3 处理模型数据之 Map   Model\"></a>3 处理模型数据之 Map   Model</h1><h2 id=\"3-1Map介绍\"><a href=\"#3-1Map介绍\" class=\"headerlink\" title=\"3.1Map介绍\"></a>3.1Map介绍</h2><p>1）Spring MVC 在内部使用了一个 org.springframework.ui.Model 接口存储模型数据<br>具体使用步骤<br>2）Spring MVC 在调用方法前会创建一个隐含的模型对象作为模型数据的存储容器。<br>3）如果方法的入参为 Map 或 Model 类型，Spring MVC 会将隐含模型的引用传递给这些入参。<br>4）在方法体内，开发者可以通过这个入参对象访问到模型中的所有数据，也可以向模型中添加新的属性数据<br><img src=\"https://s2.ax1x.com/2019/05/03/EUWn9x.png\" alt=\"image\"><br><img src=\"https://s2.ax1x.com/2019/05/03/EUWluD.png\" alt=\"image\"> </p>\n<h2 id=\"3-2-实验代码\"><a href=\"#3-2-实验代码\" class=\"headerlink\" title=\"3.2 实验代码\"></a>3.2 实验代码</h2><h3 id=\"1）增加控制器方法-1\"><a href=\"#1）增加控制器方法-1\" class=\"headerlink\" title=\"1）增加控制器方法\"></a>1）增加控制器方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//目标方法的返回类型也可以是一个Map类型参数（也可以是Model,或ModelMap类型）</span><br><span class=\"line\">@RequestMapping(&quot;/testMap&quot;)</span><br><span class=\"line\">public String testMap(Map&lt;String,Object&gt; map)&#123; //【重点】</span><br><span class=\"line\">System.out.println(map.getClass().getName());</span><br><span class=\"line\">//org.springframework.validation.support.BindingAwareModelMap</span><br><span class=\"line\">map.put(&quot;names&quot;, Arrays.asList(&quot;Tom&quot;,&quot;Jerry&quot;,&quot;Kite&quot;));</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2）增加页面链接-1\"><a href=\"#2）增加页面链接-1\" class=\"headerlink\" title=\"2）增加页面链接\"></a>2）增加页面链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 测试 Map 作为处理返回结果 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;springmvc/testMap&quot;&gt;testMap&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3）增加成功页面，显示结果\"><a href=\"#3）增加成功页面，显示结果\" class=\"headerlink\" title=\"3）增加成功页面，显示结果\"></a>3）增加成功页面，显示结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names: $&#123;requestScope.names &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4）显示结果截图\"><a href=\"#4）显示结果截图\" class=\"headerlink\" title=\"4）显示结果截图\"></a>4）显示结果截图</h3><p><img src=\"https://s2.ax1x.com/2019/05/03/EUWBDg.png\" alt=\"image\"></p>\n<h3 id=\"5）注意问题\"><a href=\"#5）注意问题\" class=\"headerlink\" title=\"5）注意问题:\"></a>5）注意问题:</h3><p>Map集合的泛型，key为String,Value为Object,而不是String</p>\n<h3 id=\"6）测试参数类型\"><a href=\"#6）测试参数类型\" class=\"headerlink\" title=\"6）测试参数类型\"></a>6）测试参数类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//目标方法的返回类型也可以是一个Map类型参数（也可以是Model,或ModelMap类型）</span><br><span class=\"line\">@RequestMapping(&quot;/testMap2&quot;)</span><br><span class=\"line\">public String testMap2(Map&lt;String,Object&gt; map,Model model,ModelMap modelMap)&#123;</span><br><span class=\"line\">System.out.println(map.getClass().getName());</span><br><span class=\"line\">map.put(&quot;names&quot;, Arrays.asList(&quot;Tom&quot;,&quot;Jerry&quot;,&quot;Kite&quot;));</span><br><span class=\"line\">model.addAttribute(&quot;model&quot;, &quot;org.springframework.ui.Model&quot;);</span><br><span class=\"line\">modelMap.put(&quot;modelMap&quot;, &quot;org.springframework.ui.ModelMap&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">System.out.println(map == model);</span><br><span class=\"line\">System.out.println(map == modelMap);</span><br><span class=\"line\">System.out.println(model == modelMap);</span><br><span class=\"line\"> </span><br><span class=\"line\">System.out.println(map.getClass().getName());</span><br><span class=\"line\">System.out.println(model.getClass().getName());</span><br><span class=\"line\">System.out.println(modelMap.getClass().getName());</span><br><span class=\"line\"> </span><br><span class=\"line\">/*</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">org.springframework.validation.support.BindingAwareModelMap</span><br><span class=\"line\">org.springframework.validation.support.BindingAwareModelMap</span><br><span class=\"line\">org.springframework.validation.support.BindingAwareModelMap</span><br><span class=\"line\">    */ </span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7）类层次结构\"><a href=\"#7）类层次结构\" class=\"headerlink\" title=\"7）类层次结构\"></a>7）类层次结构</h3><p><img src=\"https://s2.ax1x.com/2019/05/03/EUW5b4.png\" alt=\"image\"><br>8） 推荐：==Map,  便于框架移植==。<br>9）源码参考</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BindingAwareModelMap extends ExtendedModelMap &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public Object put(String key, Object value) &#123;</span><br><span class=\"line\">removeBindingResultIfNecessary(key, value);</span><br><span class=\"line\">return super.put(key, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void putAll(Map&lt;? extends String, ?&gt; map) &#123;</span><br><span class=\"line\">for (Map.Entry&lt;? extends String, ?&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">removeBindingResultIfNecessary(entry.getKey(), entry.getValue());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">super.putAll(map);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">private void removeBindingResultIfNecessary(Object key, Object value) &#123;</span><br><span class=\"line\">if (key instanceof String) &#123;</span><br><span class=\"line\">String attributeName = (String) key;</span><br><span class=\"line\">if (!attributeName.startsWith(BindingResult.MODEL_KEY_PREFIX)) &#123;</span><br><span class=\"line\">String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + attributeName;</span><br><span class=\"line\">BindingResult bindingResult = (BindingResult) get(bindingResultKey);</span><br><span class=\"line\">if (bindingResult != null &amp;&amp; bindingResult.getTarget() != value) &#123;</span><br><span class=\"line\">remove(bindingResultKey);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"5. SpringMVC处理请求数据","url":"http://yoursite.com/2018/02/10/47. SpringMVC处理请求数据/","content":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><ol>\n<li>Springmvc如何处理请求数据?<br> Springmvc会结合 请求对象(请求数据的来源) 与 请求处理方法(请求数据的去向) 进行分析， 最终将请求数据映射到请求处理方法对应的形参中 . </li>\n<li>@RequestParam   value=”请求参数名”  required=”true/false”   defaultValue=”默认值”</li>\n<li>@RequestHeader</li>\n<li>@CookieValue</li>\n<li>使用POJO封装请求参数 ，要求请求参数名与POJO的属性名一致. </li>\n<li>使用原生的ServletAPI ： HttpServletRequest  HttpServletResponse  HttpSession …</li>\n</ol>\n<h1 id=\"1请求处理方法签名\"><a href=\"#1请求处理方法签名\" class=\"headerlink\" title=\"1请求处理方法签名\"></a>1请求处理方法签名</h1><p>1）Spring MVC 通过分析处理方法的签名(方法名+ 参数列表)，HTTP请 求信息绑定到处理方法的相应形参中。<br>2）Spring MVC 对控制器处理方法签名的限制是很宽松的，几乎可以按喜欢的任何方式对方法进行签名。<br>3）必要时可以对方法及方法入参标注相应的注解（ @PathVariable 、@RequestParam、@RequestHeader 等）、<br>4）Spring MVC 框架会将 HTTP 请求的信息绑定到相应的方法入参中，并根据方法的返回值类型做出相应的后续处理。  </p>\n<h1 id=\"2-RequestParam注解\"><a href=\"#2-RequestParam注解\" class=\"headerlink\" title=\"2 @RequestParam注解\"></a>2 @RequestParam注解</h1><p>1）在处理方法入参处使用 @RequestParam 可以把请求参数传递给请求方法<br>2）value：参数名<br>3）required：是否必须。默认为 true, 表示请求参数中必须包含对应的参数，若不存在，将抛出异常<br>4）defaultValue: 默认值，当没有传递参数时使用该值</p>\n<h2 id=\"2-1-实验代码\"><a href=\"#2-1-实验代码\" class=\"headerlink\" title=\"2.1 实验代码\"></a>2.1 实验代码</h2><p>1）增加控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @RequestParam 注解用于映射请求参数</span><br><span class=\"line\"> *         value 用于映射请求参数名称</span><br><span class=\"line\"> *         required 用于设置请求参数是否必须的</span><br><span class=\"line\"> *         defaultValue 设置默认值，当没有传递参数时使用该值</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RequestMapping(value=&quot;/testRequestParam&quot;)</span><br><span class=\"line\">public String testRequestParam(</span><br><span class=\"line\">@RequestParam(value=&quot;username&quot;) String username,</span><br><span class=\"line\">@RequestParam(value=&quot;age&quot;,required=false,defaultValue=&quot;0&quot;) int age)&#123;</span><br><span class=\"line\">System.out.println(&quot;testRequestParam - username=&quot;+username +&quot;,age=&quot;+age);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2）增加页面链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--测试 请求参数 @RequestParam 注解使用 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;springmvc/testRequestParam?username=atguigu&amp;age=10&quot;&gt;testRequestParam&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-RequestHeader-注解\"><a href=\"#3-RequestHeader-注解\" class=\"headerlink\" title=\"3 @RequestHeader 注解\"></a>3 @RequestHeader 注解</h1><p>1）使用 @RequestHeader 绑定请求报头的属性值<br>2）请求头包含了若干个属性，服务器可据此获知客户端的信息，通过 @RequestHeader 即可将请求头中的属性值绑定到处理方法的入参中<br><img src=\"https://s2.ax1x.com/2019/05/03/EUGnUA.png\" alt=\"image\"></p>\n<h2 id=\"3-1-实验代码\"><a href=\"#3-1-实验代码\" class=\"headerlink\" title=\"3.1 实验代码\"></a>3.1 实验代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//了解: 映射请求头信息 用法同 @RequestParam</span><br><span class=\"line\">@RequestMapping(value=&quot;/testRequestHeader&quot;)</span><br><span class=\"line\">public String testRequestHeader(@RequestHeader(value=&quot;Accept-Language&quot;) String al)&#123;</span><br><span class=\"line\">System.out.println(&quot;testRequestHeader - Accept-Language：&quot;+al);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 测试 请求头@RequestHeader 注解使用 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;springmvc/testRequestHeader&quot;&gt;testRequestHeader&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-CookieValue-注解\"><a href=\"#4-CookieValue-注解\" class=\"headerlink\" title=\"4 @CookieValue 注解\"></a>4 @CookieValue 注解</h1><p>1）使用 @CookieValue 绑定请求中的 Cookie 值<br>2）@CookieValue 可让处理方法入参绑定某个 Cookie 值<br><img src=\"https://s2.ax1x.com/2019/05/03/EUtba4.png\" alt=\"image\"></p>\n<h2 id=\"4-1实验代码\"><a href=\"#4-1实验代码\" class=\"headerlink\" title=\"4.1实验代码\"></a>4.1实验代码</h2><p>1）增加控制器方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//了解:@CookieValue: 映射一个 Cookie 值. 属性同 @RequestParam</span><br><span class=\"line\">@RequestMapping(&quot;/testCookieValue&quot;)</span><br><span class=\"line\">public String testCookieValue(@CookieValue(&quot;JSESSIONID&quot;) String sessionId) &#123;</span><br><span class=\"line\">System.out.println(&quot;testCookieValue: sessionId: &quot; + sessionId);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2）增加页面链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--测试 请求Cookie @CookieValue 注解使用 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;springmvc/testCookieValue&quot;&gt;testCookieValue&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-使用POJO作为参数\"><a href=\"#5-使用POJO作为参数\" class=\"headerlink\" title=\"5 使用POJO作为参数\"></a>5 使用POJO作为参数</h1><p>1）使用 POJO 对象绑定请求参数值<br>2）Spring MVC 会按请求参数名和 POJO 属性名进行自动匹配，自动为该对象填充属性值。支持级联属性。如：dept.deptId、dept.address.tel 等</p>\n<h2 id=\"5-1实验代码\"><a href=\"#5-1实验代码\" class=\"headerlink\" title=\"5.1实验代码\"></a>5.1实验代码</h2><p>1）增加控制器方法、表单页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Spring MVC 会按请求参数名和 POJO 属性名进行自动匹配， 自动为该对象填充属性值。</span><br><span class=\"line\"> * 支持级联属性</span><br><span class=\"line\"> *                 如：dept.deptId、dept.address.tel 等</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RequestMapping(&quot;/testPOJO&quot;)</span><br><span class=\"line\">public String testPojo(User user) &#123;</span><br><span class=\"line\">System.out.println(&quot;testPojo: &quot; + user);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 测试 POJO 对象传参，支持级联属性 --&gt;</span><br><span class=\"line\">&lt;form action=&quot; testPOJO&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">username: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br&gt;</span><br><span class=\"line\">password: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;&lt;br&gt;</span><br><span class=\"line\">email: &lt;input type=&quot;text&quot; name=&quot;email&quot;/&gt;&lt;br&gt;</span><br><span class=\"line\">age: &lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;&lt;br&gt;</span><br><span class=\"line\">city: &lt;input type=&quot;text&quot; name=&quot;address.city&quot;/&gt;&lt;br&gt;</span><br><span class=\"line\">province: &lt;input type=&quot;text&quot; name=&quot;address.province&quot;/&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://s2.ax1x.com/2019/05/03/EUapUe.png\" alt=\"image\"></p>\n<p>2）增加实体类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.springmvc.entities;</span><br><span class=\"line\">public class Address &#123;</span><br><span class=\"line\">private String province;</span><br><span class=\"line\">private String city;</span><br><span class=\"line\">//get/set</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.com.springmvc.entities;</span><br><span class=\"line\">public class User &#123;</span><br><span class=\"line\">private Integer id ;</span><br><span class=\"line\">private String username;</span><br><span class=\"line\">private String password;</span><br><span class=\"line\">private String email;</span><br><span class=\"line\">private int age;</span><br><span class=\"line\">private Address address;</span><br><span class=\"line\">//get/set </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3）执行结果：<br><img src=\"https://s2.ax1x.com/2019/05/03/EUaVDf.png\" alt=\"image\"></p>\n<p>4）如果中文有乱码，需要配置字符编码过滤器，且配置其他过滤器之前，<br>如（HiddenHttpMethodFilter），否则不起作用。（思考method=”get”请求的乱码问题怎么解决的）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置字符集 --&gt;</span><br><span class=\"line\">\t&lt;filter&gt;</span><br><span class=\"line\">\t\t&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class=\"line\">\t\t&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t\t&lt;init-param&gt;</span><br><span class=\"line\">\t\t\t&lt;param-name&gt;forceEncoding&lt;/param-name&gt;</span><br><span class=\"line\">\t\t\t&lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">\t\t&lt;/init-param&gt;</span><br><span class=\"line\">\t&lt;/filter&gt;</span><br><span class=\"line\">\t&lt;filter-mapping&gt;</span><br><span class=\"line\">\t\t&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class=\"line\">\t\t&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">\t&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-使用Servlet原生API作为参数\"><a href=\"#6-使用Servlet原生API作为参数\" class=\"headerlink\" title=\"6 使用Servlet原生API作为参数\"></a>6 使用Servlet原生API作为参数</h1><p>1）MVC 的 Handler 方法可以接受哪些 ServletAPI 类型的参数</p>\n<blockquote>\n<p>1)HttpServletRequest<br>2)HttpServletResponse<br>3)HttpSession<br>4)java.security.Principal //安全相关<br>5)Locale //国际化 本地化<br>6)InputStream //输入流<br>7)OutputStream //输出流<br>8)Reader //字符流 输入<br>9)Writer //字符流 输出  </p>\n</blockquote>\n<p>2）源码参考：AnnotationMethodHandlerAdapter L866<br><img src=\"https://s2.ax1x.com/2019/05/03/EUdwTS.png\" alt=\"image\"><br>3）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected Object resolveStandardArgument(Class&lt;?&gt; parameterType, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class=\"line\">HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">if (ServletRequest.class.isAssignableFrom(parameterType) ||</span><br><span class=\"line\">MultipartRequest.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">Object nativeRequest = webRequest.getNativeRequest(parameterType);</span><br><span class=\"line\">if (nativeRequest == null) &#123;</span><br><span class=\"line\">throw new IllegalStateException(</span><br><span class=\"line\">&quot;Current request is not of type [&quot; + parameterType.getName() + &quot;]: &quot; + request);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return nativeRequest;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ServletResponse.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">this.responseArgumentUsed = true;</span><br><span class=\"line\">Object nativeResponse = webRequest.getNativeResponse(parameterType);</span><br><span class=\"line\">if (nativeResponse == null) &#123;</span><br><span class=\"line\">throw new IllegalStateException(</span><br><span class=\"line\">&quot;Current response is not of type [&quot; + parameterType.getName() + &quot;]: &quot; + response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return nativeResponse;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (HttpSession.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">return request.getSession();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (Principal.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">return request.getUserPrincipal();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (Locale.class.equals(parameterType)) &#123;</span><br><span class=\"line\">return RequestContextUtils.getLocale(request);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (InputStream.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">return request.getInputStream();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (Reader.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">return request.getReader();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (OutputStream.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">this.responseArgumentUsed = true;</span><br><span class=\"line\">eturn response.getOutputStream();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (Writer.class.isAssignableFrom(parameterType)) &#123;</span><br><span class=\"line\">this.responseArgumentUsed = true;</span><br><span class=\"line\">return response.getWriter();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return super.resolveStandardArgument(parameterType, webRequest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-1-实验代码\"><a href=\"#6-1-实验代码\" class=\"headerlink\" title=\"6.1 实验代码\"></a>6.1 实验代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 可以使用 Serlvet 原生的 API 作为目标方法的参数 具体支持以下类型</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * HttpServletRequest </span><br><span class=\"line\"> * HttpServletResponse </span><br><span class=\"line\"> * HttpSession</span><br><span class=\"line\"> * java.security.Principal </span><br><span class=\"line\"> * Locale InputStream </span><br><span class=\"line\"> * OutputStream </span><br><span class=\"line\"> * Reader </span><br><span class=\"line\"> * Writer</span><br><span class=\"line\"> * @throws IOException </span><br><span class=\"line\"> */</span><br><span class=\"line\">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class=\"line\">public void testServletAPI(HttpServletRequest request,HttpServletResponse response, Writer out) throws IOException &#123;</span><br><span class=\"line\">System.out.println(&quot;testServletAPI, &quot; + request + &quot;, &quot; + response);</span><br><span class=\"line\">out.write(&quot;hello springmvc&quot;);</span><br><span class=\"line\">//return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 测试 Servlet API 作为处理请求参数 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;springmvc/testServletAPI&quot;&gt;testServletAPI&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"4. SpringMVC-REST","url":"http://yoursite.com/2018/02/08/46. SpringMVC-REST/","content":"<h1 id=\"概览：\"><a href=\"#概览：\" class=\"headerlink\" title=\"概览：\"></a>概览：</h1><blockquote>\n<ol>\n<li>Http中定义了四种表示操作的动词 , GET  POST  PUT  DELETE , 对应  查询  添加  修改  删除 操作.<br> 也就意味着完成什么样的操作需要通过对应的请求方式来发送请求. </li>\n<li>HiddenHttpMethodFilter:<br> 在满足转换条件的情况下， 将客户端的请求转换为对应的PUT/DELETE。<br> 需要满足的条件:<pre><code>当前的请求方式必须是POST\n从当前的请求中能通过 _method 获取到对应的请求参数值. \n</code></pre></li>\n<li>REST  CRUD<br> 查询   user/1001    ==GET==<br>添加   user        == POST==<br>删除   user/1001    ==POST(_method=DELETE) -&gt;HiddenHttpMethodFilter -&gt;DELETE<br>修改   user        ==POST(_method=PUT)-&gt;HiddenHttpMethodFilter-&gt;PUT==<br><img src=\"https://s2.ax1x.com/2019/05/02/ENQJ1g.png\" alt=\"image\"></li>\n</ol>\n</blockquote>\n<h1 id=\"3-1-REST参考资料：\"><a href=\"#3-1-REST参考资料：\" class=\"headerlink\" title=\"3.1 REST参考资料：\"></a>3.1 REST参考资料：</h1><p>1）理解本真的REST架构风格:   <a href=\"http://kb.cnblogs.com/page/186516/\" target=\"_blank\" rel=\"noopener\">http://kb.cnblogs.com/page/186516/</a><br>2）REST: <a href=\"http://www.infoq.com/cn/articles/rest-introduction\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/rest-introduction</a>  </p>\n<h1 id=\"3-2-REST是什么？\"><a href=\"#3-2-REST是什么？\" class=\"headerlink\" title=\"3.2 REST是什么？\"></a>3.2 REST是什么？</h1><p>1）REST：即 Representational State Transfer。（资源）表现层状态转化。是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用  </p>\n<blockquote>\n<p>①资源（Resources）：网络上的一个实体，或者说是网络上的一个具体信息。<br>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。<br>可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。<br>获取这个资源，访问它的URI就可以，因此 URI 即为每一个资源的独一无二的识别符。<br>②表现层（Representation）：把资源具体呈现出来的形式，叫做它的表现层（Representation）。比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。<br>③状态转化（State Transfer）：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（State Transfer)而这种转化是建立在表现层之上的，所以就是 “表现层状态转化”。<br>④具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。<br>2）URL风格<br>示例：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/order/1   HTTP GET ：得到 id = 1 的 order           gerOrder?id=1</span><br><span class=\"line\">/order/1   HTTP DELETE：删除 id = 1的 order         deleteOrder?id=1</span><br><span class=\"line\">/order     HTTP PUT：更新order   </span><br><span class=\"line\">/order      HTTP POST：新增 order</span><br></pre></td></tr></table></figure>\n<p>3）HiddenHttpMethodFilter  </p>\n<blockquote>\n<p>浏览器 form 表单只支持 GET 与 POST 请求，而DELETE、PUT 等 method 并不<br>支持，Spring3.0 添加了一个过滤器，可以将这些请求转换为标准的 http 方法，使<br>得支持 GET、POST、PUT 与 DELETE 请求。</p>\n</blockquote>\n<h1 id=\"3-3-HiddenHttpMethodFilter过滤器源码分析\"><a href=\"#3-3-HiddenHttpMethodFilter过滤器源码分析\" class=\"headerlink\" title=\"3.3 HiddenHttpMethodFilter过滤器源码分析\"></a>3.3 HiddenHttpMethodFilter过滤器源码分析</h1><p>1）为什么请求隐含参数名称必须叫做”_method”<br><img src=\"https://s2.ax1x.com/2019/05/01/EJ3kV0.png\" alt=\"image\"><br>2）hiddenHttpMethodFilter 的处理过程!<br><img src=\"https://s2.ax1x.com/2019/05/01/EJ3dsA.png\" alt=\"image\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/01/EJ3IoV.png\" alt=\"image\"></p>\n<h1 id=\"3-4-实验代码\"><a href=\"#3-4-实验代码\" class=\"headerlink\" title=\"3.4 实验代码\"></a>3.4 实验代码</h1><h2 id=\"1）配置HiddenHttpMethodFilter过滤器\"><a href=\"#1）配置HiddenHttpMethodFilter过滤器\" class=\"headerlink\" title=\"1）配置HiddenHttpMethodFilter过滤器\"></a>1）配置HiddenHttpMethodFilter过滤器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 支持REST风格的过滤器：可以将POST请求转换为PUT或DELETE请求 --&gt;</span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\">&lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">&lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;</span><br><span class=\"line\">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2）代码\"><a href=\"#2）代码\" class=\"headerlink\" title=\"2）代码\"></a>2）代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 1.测试REST风格的  GET,POST,PUT,DELETE 操作</span><br><span class=\"line\"> * 以CRUD为例：</span><br><span class=\"line\"> * 新增: /order POST</span><br><span class=\"line\"> * 修改: /order/1 PUT           update?id=1</span><br><span class=\"line\"> * 获取: /order/1 GET                get?id=1</span><br><span class=\"line\"> * 删除: /order/1 DELETE        delete?id=1</span><br><span class=\"line\"> </span><br><span class=\"line\"> * 2.如何发送PUT请求或DELETE请求?</span><br><span class=\"line\"> * ①.配置HiddenHttpMethodFilter</span><br><span class=\"line\"> * ②.需要发送POST请求</span><br><span class=\"line\"> * ③.需要在发送POST请求时携带一个 name=&quot;_method&quot;的隐含域，值为PUT或DELETE</span><br><span class=\"line\"> </span><br><span class=\"line\"> * 3.在SpringMVC的目标方法中如何得到id值呢?</span><br><span class=\"line\"> *   使用@PathVariable注解</span><br><span class=\"line\"> */</span><br><span class=\"line\">@RequestMapping(value=&quot;/testRESTGet/&#123;id&#125;&quot;,method=RequestMethod.GET)</span><br><span class=\"line\">public String testRESTGet(@PathVariable(value=&quot;id&quot;) Integer id)&#123;</span><br><span class=\"line\">System.out.println(&quot;testRESTGet id=&quot;+id);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@RequestMapping(value=&quot;/testRESTPost&quot;,method=RequestMethod.POST)</span><br><span class=\"line\">public String testRESTPost()&#123;</span><br><span class=\"line\">System.out.println(&quot;testRESTPost&quot;);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@RequestMapping(value=&quot;/testRESTPut/&#123;id&#125;&quot;,method=RequestMethod.PUT)</span><br><span class=\"line\">public String testRESTPut(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class=\"line\">System.out.println(&quot;testRESTPut id=&quot;+id);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@RequestMapping(value=&quot;/testRESTDelete/&#123;id&#125;&quot;,method=RequestMethod.DELETE)</span><br><span class=\"line\">public String testRESTDelete(@PathVariable(&quot;id&quot;) Integer id)&#123;</span><br><span class=\"line\">System.out.println(&quot;testRESTDelete id=&quot;+id);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3）请求链接\"><a href=\"#3）请求链接\" class=\"headerlink\" title=\"3）请求链接\"></a>3）请求链接</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 实验1 测试 REST风格 GET 请求 --&gt;</span><br><span class=\"line\">&lt;a href=&quot;springmvc/testRESTGet/1&quot;&gt;testREST GET&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 实验2 测试 REST风格 POST 请求 --&gt;</span><br><span class=\"line\">&lt;form action=&quot;springmvc/testRESTPost&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;testRESTPost&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 实验3 测试 REST风格 PUT 请求 --&gt;</span><br><span class=\"line\">&lt;form action=&quot;springmvc/testRESTPut/1&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;testRESTPut&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;!-- 实验4 测试 REST风格 DELETE 请求 --&gt;</span><br><span class=\"line\">&lt;form action=&quot;springmvc/testRESTDelete/1&quot; method=&quot;POST&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;testRESTDelete&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"3. SpringMVC-HelloWorld深度解析","url":"http://yoursite.com/2018/02/05/45. SpringMVC-HelloWorld深度解析/","content":"<h1 id=\"1-HelloWorld运行原理\"><a href=\"#1-HelloWorld运行原理\" class=\"headerlink\" title=\"1. HelloWorld运行原理\"></a>1. HelloWorld运行原理</h1><p>1 启动Tomcat服务器</p>\n<blockquote>\n<p>  启动Tomcat服务器时，因为DispatcherServlet中配置了<load-on-startup>,DispatcherServlet会在服务器启动时加载，<br>    因为还配置了<init-param>，指定了Springmvc框架的核心配置文件，因此在加载DispatcherServlet时会读取核心配置文件，<br>     进而将Springmvc的容器对象创建好.<br>    在创建Springmvc的容器对象时,<br>    会通过组件扫描，将加了@Controller注解的组件管理到容器中，<br>    因为在请求处理中的方法上加了@RequestMapping注解，<br>    所以也会分析到当前Springmvc可以处理哪些请求，<br>    以及哪些请求交给哪个请求处理中的请求处理方法进行处理. </init-param></load-on-startup></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">信息: Mapped URL path [/hello] onto handler &apos;helloWorldHandler&apos;</span><br><span class=\"line\">       三月 04, 2019 10:24:02 上午 org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler</span><br><span class=\"line\">       信息: Mapped URL path [/hello.*] onto handler &apos;helloWorldHandler&apos;</span><br><span class=\"line\">       三月 04, 2019 10:24:02 上午 org.springframework.web.servlet.handler.AbstractUrlHandlerMapping registerHandler</span><br><span class=\"line\">       信息: Mapped URL path [/hello/] onto handler &apos;helloWorldHandler&apos;</span><br></pre></td></tr></table></figure>\n<p>2 浏览器端发送请求 <a href=\"http://localhost:8888/Springmvc01/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/Springmvc01/hello</a><br>3 请求先到达web.xml中与DispatcherServlet中配置的<servlet-mapping>中的<url-pattern>进行匹配。匹配成功，将请求交给DispatcherServlet<br>4 DispatcherServlet根据请求映射，将当前的请求交给对应的请求处理器<br>5 请求处理器调用具体的请求处理方法进行当前请求的处理.处理完成后，返回一个字符串(逻辑视图名)<br>6 视图解析器结合prefix + 方法的返回值 + suffix生成一个物理视图路径，再通过转发的方式去往该视图.<br>7 浏览器端接收到响应，呈现结果。</url-pattern></servlet-mapping></p>\n<h1 id=\"2-HelloWorld请求流程图解：\"><a href=\"#2-HelloWorld请求流程图解：\" class=\"headerlink\" title=\"2. HelloWorld请求流程图解：\"></a>2. HelloWorld请求流程图解：</h1><p><img src=\"https://s2.ax1x.com/2019/05/01/EJlpFS.png\" alt=\"image\"></p>\n<h1 id=\"3-一般请求的映射路径名称和处理请求的方法名称最好一致\"><a href=\"#3-一般请求的映射路径名称和处理请求的方法名称最好一致\" class=\"headerlink\" title=\"3. 一般请求的映射路径名称和处理请求的方法名称最好一致\"></a>3. 一般请求的映射路径名称和处理请求的方法名称最好一致</h1><p>（实质上方法名称任意）  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(value=&quot;/helloworld&quot;,method=RequestMethod.GET)</span><br><span class=\"line\">public String helloworld()&#123;</span><br><span class=\"line\">//public String abc123()&#123;</span><br><span class=\"line\">System.out.println(&quot;hello,world&quot;);</span><br><span class=\"line\">return &quot;success&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-演示一个错误\"><a href=\"#4-演示一个错误\" class=\"headerlink\" title=\"4. 演示一个错误\"></a>4. 演示一个错误</h1><p>经常会出现配置上错误，把“/WEB-INF/views/”配置成了 “/WEB-INF/views”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;internalResourceViewResolver&quot; </span><br><span class=\"line\">  class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span><br><span class=\"line\">&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>处理请求方式有哪几种</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum RequestMethod &#123;</span><br><span class=\"line\">GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-RequestMapping可以应用在什么地方\"><a href=\"#5-RequestMapping可以应用在什么地方\" class=\"headerlink\" title=\"5. @RequestMapping可以应用在什么地方\"></a>5. @RequestMapping可以应用在什么地方</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 请求处理器</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">//@RequestMapping(value=&quot;/springmvc&quot;)</span><br><span class=\"line\">@Controller</span><br><span class=\"line\">public class RequestMappingHandler &#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\">\t * 处理请求参数: </span><br><span class=\"line\">\t * \t1.如果请求参数名与请求处理方法的形参名一致,Springmvc可以默认处理.</span><br><span class=\"line\">\t * \t2.如果请求参数名与请求处理方法的形参名不一致，可以使用@RequestParam注解来帮助Springmvc处理请求参数. </span><br><span class=\"line\">\t * \t  @RequestParam注解的属性:</span><br><span class=\"line\">\t * \t   value : 用于指定请求参数名 </span><br><span class=\"line\">\t * \t   required:  设置指定的请求参数是否必须要能获取到.</span><br><span class=\"line\">\t * \t   defaultValue: 指定默认值, 如果从请求中获取不到对应的参数，且required=false, Springmvc</span><br><span class=\"line\">\t * \t\t\t\t\t 会将一个null值赋值给当前的形参。</span><br><span class=\"line\">\t * \t\t\t\t\t 可以通过defaultValue指定一个值替换默认的null值. </span><br><span class=\"line\">\t *     </span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * 客户端的请求: testRequestParam?username=Tom&amp;age=22</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * @RequestMapping 支持带占位符的URL</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @PathVariable  将占位符对应的值映射到形参中。</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t * 浏览器端的请求:testRequestMappingPathVariable/Tom/22</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * @RequestMapping 可标注的位置</span><br><span class=\"line\">\t * \t</span><br><span class=\"line\">\t *  类上\t  : 对当前类中所有的方法都起作用</span><br><span class=\"line\">\t *  方法上  : 只对当前的方法起作用</span><br><span class=\"line\">\t * \t</span><br><span class=\"line\">\t *  类上+方法上: 如果类上与方法上都加了该注解，那么对于每一个请求处理方法来说, </span><br><span class=\"line\">\t *  \t\t      映射的请求就变成   类上@RequestMapping的URL + 方法上@RequestMapping的URL </span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@RequestMapping(value=&quot;/testRequestMappingPathVariable/&#123;username&#125;/&#123;age&#125;&quot;)</span><br><span class=\"line\">\tpublic String testRequestMappingPathVariable( @PathVariable(&quot;username&quot;) String username,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t@PathVariable(&quot;age&quot;)Integer age  ) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(username + &quot; , &quot; + age );</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn &quot;success&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 了解: </span><br><span class=\"line\">\t * @RequestMapping 支持 Ant风格的URL</span><br><span class=\"line\">\t * 三个匹配符:</span><br><span class=\"line\">\t * \t ? : 匹配一个任意字符</span><br><span class=\"line\">\t * \t * : 匹配任意个任意字符</span><br><span class=\"line\">\t * \t **: 匹配多层路径</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@RequestMapping(value=&quot;/testRequestMappingAnt/*/test??/**/end&quot;)</span><br><span class=\"line\">\tpublic String  testRequestMappingAnt() &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn &quot;success&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * @RequestMapping  method : 映射请求方式</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * 请求方式: GET  POST  PUT  DELETE .....</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@RequestMapping(value=&quot;/testRequestMappingMethod&quot;, method= &#123;RequestMethod.POST,RequestMethod.GET&#125;)</span><br><span class=\"line\">\tpublic String  testRequestMappingMethod() &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn &quot;success&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * @RequestMapping 可标注的位置:</span><br><span class=\"line\">\t * \t类上   :  对类中的每个方法都起作用</span><br><span class=\"line\">\t *  方法上:  只对当前的方法起作用</span><br><span class=\"line\">\t *  </span><br><span class=\"line\">\t *  如果类上和方法上都加了个@RequestMapping注解，请求处理方法对应的URL映射就是 类上的URL + 方法上的URL.</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@RequestMapping(value=&quot;/testRequestMappingTarget&quot;)</span><br><span class=\"line\">\tpublic String  testRequestMappingTarget() &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn &quot;success&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-流程分析\"><a href=\"#6-流程分析\" class=\"headerlink\" title=\"6. 流程分析:\"></a>6. 流程分析:</h1><p><img src=\"https://s2.ax1x.com/2019/05/01/EJluYF.png\" alt=\"image\"></p>\n<h1 id=\"7-基本步骤\"><a href=\"#7-基本步骤\" class=\"headerlink\" title=\"7. 基本步骤:\"></a>7. 基本步骤:</h1><pre><code>&gt;a. 客户端请求提交到DispatcherServlet\nb. 由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller\nc. DispatcherServlet将请求提交到Controller（也称为Handler）\nd. Controller调用业务逻辑处理后，返回ModelAndView\ne. DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图\nf. 视图负责将结果显示到客户端\n</code></pre>","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"2. SpringMVC-永远的HelloWorld","url":"http://yoursite.com/2018/02/01/44. SpringMVC-永远的HelloWorld/","content":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><blockquote>\n<blockquote>\n<p>1.搭建工程环境<br>2.在web.xml中配置Springmvc的前端控制器 DispatcherServlet<br>3.编写Springmvc的核心配置文件   springmvc.xml<br>    3.1 组件扫描<br>    3.2 视图解析器<br>4.编写请求处理器 、 请求处理方法<br>5.准备视图页面<br>6.浏览器端发送请求进行测试. </p>\n</blockquote>\n</blockquote>\n<h1 id=\"1-新建Web工程，加入-jar-包（-jar包点击下载-）\"><a href=\"#1-新建Web工程，加入-jar-包（-jar包点击下载-）\" class=\"headerlink\" title=\"1. 新建Web工程，加入 jar 包（++jar包点击下载++）\"></a>1. 新建Web工程，加入 jar 包（++<a href=\"https://pan.baidu.com/s/134QX6K-F1nC2oGnE8bs9Ow\" target=\"_blank\" rel=\"noopener\">jar包点击下载</a>++）</h1><blockquote>\n<blockquote>\n<p>   spring-aop-4.0.0.RELEASE.jar<br>    spring-beans-4.0.0.RELEASE.jar<br>    spring-context-4.0.0.RELEASE.jar<br>    spring-core-4.0.0.RELEASE.jar<br>    spring-expression-4.0.0.RELEASE.jar<br>    commons-logging-1.1.3.jar<br>    spring-web-4.0.0.RELEASE.jar<br>    spring-webmvc-4.0.0.RELEASE.jar  </p>\n</blockquote>\n</blockquote>\n<h1 id=\"2-在-web-xml-中配置-DispatcherServlet\"><a href=\"#2-在-web-xml-中配置-DispatcherServlet\" class=\"headerlink\" title=\"2. 在 web.xml 中配置 DispatcherServlet\"></a>2. 在 web.xml 中配置 DispatcherServlet</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;!-- 配置SpringMVC核心控制器： --&gt;</span><br><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;!-- 配置DispatcherServlet的初始化參數：设置文件的路径和文件名称 --&gt;</span><br><span class=\"line\">&lt;init-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class=\"line\">&lt;/init-param&gt;</span><br><span class=\"line\">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">&lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<pre><code>解释配置文件的名称定义规则:\n    实际上也可以不通过 contextConfigLocation 来配置 SpringMVC 的配置文件, 而使用默认的.默认的配置文件为: /WEB-INF/&lt;servlet-name&gt;-servlet.xml\n加入 Spring MVC 的配置文件：springmvc.xml\n增加名称空间\n</code></pre><h1 id=\"3-增加配置\"><a href=\"#3-增加配置\" class=\"headerlink\" title=\"3. 增加配置\"></a>3. 增加配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 设置扫描组件的包： --&gt;`</span><br><span class=\"line\">\t&lt;context:component-scan base-package=&quot;com.atguigu.springmvc&quot;/&gt;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t&lt;!-- 配置映射解析器：如何将控制器返回的结果字符串，转换为一个物理的视图文件--&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;internalResourceViewResolver&quot; </span><br><span class=\"line\">\t  class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-需要创建一个入口页面，index-jsp\"><a href=\"#4-需要创建一个入口页面，index-jsp\" class=\"headerlink\" title=\"4. 需要创建一个入口页面，index.jsp\"></a>4. 需要创建一个入口页面，index.jsp</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;$&#123;pageContext.request.contextPath &#125;/helloworld&quot;&gt;Hello World&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-编写处理请求的处理器，并标识为处理器\"><a href=\"#5-编写处理请求的处理器，并标识为处理器\" class=\"headerlink\" title=\"5. 编写处理请求的处理器，并标识为处理器\"></a>5. 编写处理请求的处理器，并标识为处理器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lbb.springmvc.controller;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\timport org.springframework.stereotype.Controller;</span><br><span class=\"line\">\timport org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Controller  //声明Bean对象，为一个控制器组件</span><br><span class=\"line\">\tpublic class HelloWorldController &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 映射请求的名称：用于客户端请求；类似Struts2中action映射配置的action名称</span><br><span class=\"line\">\t * 1. 使用 @RequestMapping 注解来映射请求的 URL</span><br><span class=\"line\">\t * 2. 返回值会通过视图解析器解析为实际的物理视图, 对于 InternalResourceViewResolver 视图解析器, </span><br><span class=\"line\">\t * 会做如下的解析:</span><br><span class=\"line\">\t *                 通过 prefix + returnVal + suffix 这样的方式得到实际的物理视图, 然后做转发操作.</span><br><span class=\"line\">\t *                 /WEB-INF/views/success.jsp</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@RequestMapping(value=&quot;/helloworld&quot;,method=RequestMethod.GET)</span><br><span class=\"line\">\tpublic String helloworld()&#123;</span><br><span class=\"line\">\t     System.out.println(&quot;hello,world&quot;);</span><br><span class=\"line\">\t     return &quot;success&quot;; //结果如何跳转呢？需要配置映射解析器</span><br><span class=\"line\">\t&#125;        </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-编写视图\"><a href=\"#6-编写视图\" class=\"headerlink\" title=\"6. 编写视图\"></a>6. 编写视图</h1><pre><code>创建/WEB-INF/views/success.jsp\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h4&gt;Sucess Page&lt;/h4&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-部署测试：\"><a href=\"#7-部署测试：\" class=\"headerlink\" title=\"7. 部署测试：\"></a>7. 部署测试：</h1><p>浏览器输入<br><a href=\"http://localhost:8080/SpringMVC_01_HelloWorld/index.jsp\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/SpringMVC_01_HelloWorld/index.jsp</a></p>\n","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"1. SpringMVC简介","url":"http://yoursite.com/2018/01/29/43. SpringMVC简介/","content":"<h1 id=\"1-1-SpringMVC-概述\"><a href=\"#1-1-SpringMVC-概述\" class=\"headerlink\" title=\"1.1 SpringMVC 概述\"></a>1.1 SpringMVC 概述</h1><p>1）Spring 为展现层提供的基于 MVC 设计理念的优秀的 Web 框架，是目前最主流的MVC 框架之一<br>2）Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架。<br>3）Spring MVC 通过一套 MVC 注解，让 POJO 成为处理请求的控制器，而无须实现任何接口。<br>4）支持 REST 风格的 URL 请求。     Restful<br>5）采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性。  </p>\n<h1 id=\"1-2-SpringMVC是什么\"><a href=\"#1-2-SpringMVC是什么\" class=\"headerlink\" title=\"1.2 SpringMVC是什么\"></a>1.2 SpringMVC是什么</h1><p>1）一种轻量级的、基于MVC的Web层应用框架。偏前端而不是基于业务逻辑层。Spring框架的一个后续产品。<br>2）Spring框架结构图(新版本)：</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/01/EJuIIg.png\" alt=\"image\"></p>\n<h1 id=\"1-3-SpringMVC能干什么\"><a href=\"#1-3-SpringMVC能干什么\" class=\"headerlink\" title=\"1.3 SpringMVC能干什么\"></a>1.3 SpringMVC能干什么</h1><pre><code>○ 天生与Spring框架集成，如：(IOC,AOP)\n○ 支持Restful风格\n○ 进行更简洁的Web层开发\n○ 支持灵活的URL到页面控制器的映射\n○ 非常容易与其他视图技术集成，如:Velocity、FreeMarker等等\n○ 因为模型数据不存放在特定的API里，而是放在一个Model里(Map数据结构实现，因此很容易被其他框架使用)\n○ 非常灵活的数据验证、格式化和数据绑定机制、能使用任何对象进行数据绑定，不必实现特定框架的API\n○ 更加简单、强大的异常处理\n○ 对静态资源的支持\n○ 支持灵活的本地化、主题等解析\n</code></pre><h1 id=\"1-4-SpringMVC怎么玩\"><a href=\"#1-4-SpringMVC怎么玩\" class=\"headerlink\" title=\"1.4 SpringMVC怎么玩\"></a>1.4 SpringMVC怎么玩</h1><pre><code>将Web层进行了职责解耦，基于请求-响应模型\n常用主要组件\n    ○ DispatcherServlet：前端控制器\n    ○ Controller：处理器/页面控制器，做的是MVC中的C的事情，但控制逻辑转移到前端控制器了，用于对请求进行处理\n    ○ HandlerMapping ：请求映射到处理器，找谁来处理，如果映射成功返回一个HandlerExecutionChain对象（包含一个Handler处理器(页面控制器)对象、多个HandlerInterceptor拦截器对象） \n    ○ View Resolver : 视图解析器，找谁来处理返回的页面。把逻辑视图解析为具体的View,进行这种策略模式，很容易更换其他视图技术；\n        如InternalResourceViewResolver将逻辑视图名映射为JSP视图\n    ○ LocalResolver：本地化、国际化\n    ○ MultipartResolver：文件上传解析器\n    ○ HandlerExceptionResolver：异常处理器\n</code></pre>","categories":["Java框架"],"tags":["SSM框架","SpringMVC框架"]},{"title":"8. Spring声明式事务管理","url":"http://yoursite.com/2018/01/26/42. Spring声明式事务管理/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>声明式事务管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Spring既支持编程式事务管理，   也支持声明式事务管理.   </span><br><span class=\"line\">2. 事务管理器： DataSourceTransactionManager</span><br><span class=\"line\">3. 基于注解:</span><br><span class=\"line\">\t3.1  &lt;tx:annotation-driven transaction-manger=&quot;指定事务管理器&quot;/&gt;</span><br><span class=\"line\">\t3.2  @Transactional</span><br><span class=\"line\">\t     a.  该注解可以加在类上或者是方法上. </span><br><span class=\"line\">\t     b.  事务的传播行为 ： propgation = REQUIRED / REQUIRES_NEW</span><br><span class=\"line\"> \t     c.  事务的隔离级别 :  isolation  = 读未提交  、 读已提交  、 可重复读  、 串行化</span><br><span class=\"line\">\t     d.  事务的回滚与不回滚</span><br><span class=\"line\">\t     e.  事务的只读设置    readOnly = true  /  false . </span><br><span class=\"line\">\t     f.  事务的超时设置    timeOut </span><br><span class=\"line\">4. 基于xml</span><br><span class=\"line\">   &lt;tx:advice  id=&quot;txAdvice&quot;  transaction-manager=&quot;&quot;&gt;</span><br><span class=\"line\">\t    &lt;tx:attributes&gt;</span><br><span class=\"line\">\t\t&lt;tx:method name=&quot;&quot;  .....&gt;</span><br><span class=\"line\">\t    &lt;/tx:attributes&gt;</span><br><span class=\"line\">\t&lt;/tx:advice&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:pointcut   expression=&quot;&quot;  id=&quot;txPointcut&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;aop:advisor  advice-ref=&quot;txAdvice&quot;  pointcut-ref=&quot;txPointcut&quot;&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-1事务简介\"><a href=\"#8-1事务简介\" class=\"headerlink\" title=\"8.1事务简介\"></a>8.1事务简介</h1><blockquote>\n<p>1)在JavaEE企业级开发的应用领域，为了保证数据的完整性和一致性，必须引入数据库事务的概念，所以事务管理是企业级应用程序开发中必不可少的技术。<br>2)事务就是一组由于逻辑上紧密关联而合并成一个整体(工作单元)的多个数据库操作，这些操作要么都执行，要么都不执行。<br>3)事务的四个关键属性(ACID)  </p>\n<blockquote>\n<p>   ①原子性(atomicity)：“原子”的本意是“不可再分”，事务的原子性表现为一个事务中涉及到的多个操作在逻辑上缺一不可。事务的原子性要求事务中的所有操作要么都执行，要么都不执行。<br>   ②一致性(consistency)：“一致”指的是数据的一致，具体是指：所有数据都处于满足业务规则的一致性状态。一致性原则要求：一个事务中不管涉及到多少个操作，都必须保证事务执行之前数据是正确的，事务执行之后数据仍然是正确的。如果一个事务在执行的过程中，其中某一个或某几个操作失败了，则必须将其他所有操作撤销，将数据恢复到事务执行之前的状态，这就是回滚。<br>   ③隔离性(isolation)：在应用程序实际运行过程中，事务往往是并发执行的，所以很有可能有许多事务同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。隔离性原则要求多个事务在并发执行过程中不会互相干扰。<br>     ④持久性(durability)：持久性原则要求事务执行完成后，对数据的修改永久的保存下来，不会因各种系统错误或其他意外情况而受到影响。通常情况下，事务对数据的修改应该被写入到持久化存储器中。</p>\n</blockquote>\n</blockquote>\n<h1 id=\"8-2-Spring事务管理\"><a href=\"#8-2-Spring事务管理\" class=\"headerlink\" title=\"8.2 Spring事务管理\"></a>8.2 Spring事务管理</h1><h2 id=\"8-2-1编程式事务管理\"><a href=\"#8-2-1编程式事务管理\" class=\"headerlink\" title=\"8.2.1编程式事务管理\"></a>8.2.1编程式事务管理</h2><p>1)使用原生的JDBC API进行事务管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ①获取数据库连接Connection对象</span><br><span class=\"line\">②取消事务的自动提交</span><br><span class=\"line\">③执行操作</span><br><span class=\"line\">④正常完成操作时手动提交事务</span><br><span class=\"line\">⑤执行失败时回滚事务</span><br><span class=\"line\">⑥关闭相关资源</span><br></pre></td></tr></table></figure>\n<p>2)评价  </p>\n<blockquote>\n<ul>\n<li>使用原生的JDBC API实现事务管理是所有事务管理方式的基石，同时也是最典型的编程式事务管理。  </li>\n<li>编程式事务管理需要将事务管理代码嵌入到业务方法中来控制事务的提交和回滚。  </li>\n<li>在使用编程的方式管理事务时，必须在每个事务操作中包含额外的事务管理代码。  </li>\n<li>相对于核心业务而言，事务管理的代码显然属于非核心业务，  </li>\n<li>如果多个模块都使用同样模式的代码进行事务管理，显然会造成较大程度的代码冗余。</li>\n</ul>\n</blockquote>\n<h2 id=\"8-2-2-声明式事务管理\"><a href=\"#8-2-2-声明式事务管理\" class=\"headerlink\" title=\"8.2.2 声明式事务管理\"></a>8.2.2 声明式事务管理</h2><pre><code>大多数情况下声明式事务比编程式事务管理更好：它将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。\n事务管理代码的固定模式作为一种横切关注点，可以通过AOP方法模块化，进而借助Spring AOP框架实现声明式事务管理。\nSpring在不同的事务管理API之上定义了一个抽象层，通过配置的方式使其生效，从而让应用程序开发人员不必了解事务管理API的底层实现细节，就可以使用Spring的事务管理机制。\nSpring既支持编程式事务管理，也支持声明式的事务管理。\n</code></pre><p>8.2.3 Spring提供的事务管理器</p>\n<ul>\n<li>Spring从不同的事务管理API中抽象出了一整套事务管理机制，让事务管理代码从特定的事务技术中独立出来。开发人员通过配置的方式进行事务管理，而不必了解其底层是如何实现的。</li>\n<li>Spring的核心事务管理抽象是它为事务管理封装了一组独立于技术的方法。无论使用Spring的哪种事务管理策略(编程式或声明式)，事务管理器都是必须的。</li>\n<li>事务管理器可以以普通的bean的形式声明在Spring IOC容器中。<h2 id=\"8-2-4事务管理器的主要实现\"><a href=\"#8-2-4事务管理器的主要实现\" class=\"headerlink\" title=\"8.2.4事务管理器的主要实现\"></a>8.2.4事务管理器的主要实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)DataSourceTransactionManager：</span><br><span class=\"line\">    在应用程序中只需要处理一个数据源，而且通过JDBC存取。</span><br><span class=\"line\">2)JtaTransactionManager：</span><br><span class=\"line\">    在JavaEE应用服务器上用JTA(Java Transaction API)进行事务管理</span><br><span class=\"line\">3)HibernateTransactionManager：</span><br><span class=\"line\">    用Hibernate框架存取数据库</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/E4Q7DS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4Q7DS.md.png\" alt=\"E4Q7DS.md.png\"></a></p>\n<h1 id=\"8-3-测试数据准备\"><a href=\"#8-3-测试数据准备\" class=\"headerlink\" title=\"8.3 测试数据准备\"></a>8.3 测试数据准备</h1><h2 id=\"8-3-1-需求\"><a href=\"#8-3-1-需求\" class=\"headerlink\" title=\"8.3.1 需求\"></a>8.3.1 需求</h2><p><a href=\"https://imgchr.com/i/E4QHHg\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4QHHg.md.png\" alt=\"E4QHHg.md.png\"></a></p>\n<h2 id=\"8-3-2-数据库表\"><a href=\"#8-3-2-数据库表\" class=\"headerlink\" title=\"8.3.2 数据库表\"></a>8.3.2 数据库表</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE book (</span><br><span class=\"line\">  isbn VARCHAR (50) PRIMARY KEY,</span><br><span class=\"line\">  book_name VARCHAR (100),</span><br><span class=\"line\">  price INT</span><br><span class=\"line\">) ;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE book_stock (</span><br><span class=\"line\">  isbn VARCHAR (50) PRIMARY KEY,</span><br><span class=\"line\">  stock INT</span><br><span class=\"line\">  ) ;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE account (</span><br><span class=\"line\">  username VARCHAR (50) PRIMARY KEY,</span><br><span class=\"line\">  balance INT</span><br><span class=\"line\">) ;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO account (`username`,`balance`) VALUES (&apos;Tom&apos;,100000);</span><br><span class=\"line\">INSERT INTO account (`username`,`balance`) VALUES (&apos;Jerry&apos;,150000);</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO book (`isbn`,`book_name`,`price`) VALUES (&apos;ISBN-001&apos;,&apos;book01&apos;,100);</span><br><span class=\"line\">INSERT INTO book (`isbn`,`book_name`,`price`) VALUES (&apos;ISBN-002&apos;,&apos;book02&apos;,200);</span><br><span class=\"line\">INSERT INTO book (`isbn`,`book_name`,`price`) VALUES (&apos;ISBN-003&apos;,&apos;book03&apos;,300);</span><br><span class=\"line\">INSERT INTO book (`isbn`,`book_name`,`price`) VALUES (&apos;ISBN-004&apos;,&apos;book04&apos;,400);</span><br><span class=\"line\">INSERT INTO book (`isbn`,`book_name`,`price`) VALUES (&apos;ISBN-005&apos;,&apos;book05&apos;,500);</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO book_stock (`isbn`,`stock`) VALUES (&apos;ISBN-001&apos;,1000);</span><br><span class=\"line\">INSERT INTO book_stock (`isbn`,`stock`) VALUES (&apos;ISBN-002&apos;,2000);</span><br><span class=\"line\">INSERT INTO book_stock (`isbn`,`stock`) VALUES (&apos;ISBN-003&apos;,3000);</span><br><span class=\"line\">INSERT INTO book_stock (`isbn`,`stock`) VALUES (&apos;ISBN-004&apos;,4000);</span><br><span class=\"line\">INSERT INTO book_stock (`isbn`,`stock`) VALUES (&apos;ISBN-005&apos;,5000);</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-4-初步实现\"><a href=\"#8-4-初步实现\" class=\"headerlink\" title=\"8.4 初步实现\"></a>8.4 初步实现</h1><p>1)配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务管理器 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;transactionManager&quot; </span><br><span class=\"line\">\tclass=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;\t  </span><br><span class=\"line\">&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 启用事务注解 --&gt;</span><br><span class=\"line\">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>2)在需要进行事务控制的方法上加注解 @Transactional</p>\n<h1 id=\"8-5-事务的传播行为\"><a href=\"#8-5-事务的传播行为\" class=\"headerlink\" title=\"8.5 事务的传播行为\"></a>8.5 事务的传播行为</h1><h2 id=\"8-5-1-简介\"><a href=\"#8-5-1-简介\" class=\"headerlink\" title=\"8.5.1 简介\"></a>8.5.1 简介</h2><ul>\n<li>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</li>\n<li>事务的传播行为可以由传播属性指定。Spring定义了7种类传播行为。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/13/E4Qxg0.png\" alt=\"E4Qxg0.png\"></p>\n<p>事务传播属性可以在@Transactional注解的propagation属性中定义。</p>\n<h2 id=\"8-5-2-测试\"><a href=\"#8-5-2-测试\" class=\"headerlink\" title=\"8.5.2 测试\"></a>8.5.2 测试</h2><p><img src=\"https://s2.ax1x.com/2019/05/13/E4lFUJ.png\" alt=\"E4lFUJ.png\"></p>\n<p>1). 说明<br>①REQUIRED传播行为<br>当bookService的purchase()方法被另一个事务方法checkout()调用时，它默认会在现有的事务内运行。这个默认的传播行为就是REQUIRED。因此在checkout()方法的开始和终止边界内只有一个事务。这个事务只在checkout()方法结束的时候被提交，结果用户一本书都买不了。</p>\n<p><a href=\"https://imgchr.com/i/E4lnKK\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4lnKK.md.png\" alt=\"E4lnKK.md.png\"></a></p>\n<p>②. REQUIRES_NEW传播行为<br>表示该方法必须启动一个新事务，并在自己的事务内运行。如果有事务在运行，就应该先挂起它。</p>\n<p><a href=\"https://imgchr.com/i/E4l8PA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4l8PA.md.png\" alt=\"E4l8PA.md.png\"></a></p>\n<h2 id=\"8-5-3-补充\"><a href=\"#8-5-3-补充\" class=\"headerlink\" title=\"8.5.3 补充\"></a>8.5.3 补充</h2><p>在Spring 2.x事务通知中，可以像下面这样在<a href=\"tx:method\" target=\"_blank\" rel=\"noopener\">tx:method</a>元素中设定传播事务属性。</p>\n<p><a href=\"https://imgchr.com/i/E4lJ2t\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4lJ2t.md.png\" alt=\"E4lJ2t.md.png\"></a></p>\n<h1 id=\"8-6-事务的隔离级别\"><a href=\"#8-6-事务的隔离级别\" class=\"headerlink\" title=\"8.6 事务的隔离级别\"></a>8.6 事务的隔离级别</h1><h2 id=\"8-6-1-数据库事务并发问题\"><a href=\"#8-6-1-数据库事务并发问题\" class=\"headerlink\" title=\"8.6.1 数据库事务并发问题\"></a>8.6.1 数据库事务并发问题</h2><pre><code>假设现在有两个事务：Transaction01和Transaction02并发执行。\n</code></pre><p>1)脏读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ①Transaction01将某条记录的AGE值从20修改为30。</span><br><span class=\"line\">②Transaction02读取了Transaction01更新后的值：30。</span><br><span class=\"line\">③Transaction01回滚，AGE值恢复到了20。</span><br><span class=\"line\">④Transaction02读取到的30就是一个无效的值</span><br></pre></td></tr></table></figure>\n<p>。<br>2)不可重复读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ①Transaction01读取了AGE值为20。</span><br><span class=\"line\">②Transaction02将AGE值修改为30。</span><br><span class=\"line\">③Transaction01再次读取AGE值为30，和第一次读取不一致。</span><br></pre></td></tr></table></figure>\n<p>3)幻读</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ①Transaction01读取了STUDENT表中的一部分数据。</span><br><span class=\"line\">②Transaction02向STUDENT表中插入了新的行。</span><br><span class=\"line\">③Transaction01读取了STUDENT表时，多出了一些行。</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-6-2-隔离级别\"><a href=\"#8-6-2-隔离级别\" class=\"headerlink\" title=\"8.6.2 隔离级别\"></a>8.6.2 隔离级别</h2><blockquote>\n<p>数据库系统必须具有隔离并发运行各个事务的能力，<br>使它们不会相互影响，避免各种并发问题。<br>一个事务与其他事务隔离的程度称为隔离级别。<br>SQL标准中规定了多种事务隔离级别，<br>不同隔离级别对应不同的干扰程度，<br>隔离级别越高，数据一致性就越好，但并发性越弱。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)读未提交：READ UNCOMMITTED</span><br><span class=\"line\">       允许Transaction01读取Transaction02未提交的修改。</span><br><span class=\"line\">2)读已提交：READ COMMITTED</span><br><span class=\"line\">\t   要求Transaction01只能读取Transaction02已提交的修改。</span><br><span class=\"line\">3)可重复读：REPEATABLE READ</span><br><span class=\"line\">\t   确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。</span><br><span class=\"line\">4)串行化：SERIALIZABLE</span><br><span class=\"line\">\t   确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</span><br><span class=\"line\">5)各个隔离级别解决并发问题的能力见下表</span><br><span class=\"line\">\t脏读\t     不可重  复读\t幻读</span><br><span class=\"line\">READ UNCOMMITTED\t有\t 有\t    有</span><br><span class=\"line\">READ COMMITTED\t    无 \t 有\t    有</span><br><span class=\"line\">REPEATABLE READ\t    无\t 无\t    有</span><br><span class=\"line\">SERIALIZABLE\t    无\t 无\t    无</span><br></pre></td></tr></table></figure>\n<p>6)各种数据库产品对事务隔离级别的支持程度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                    Oracle\t    MySQL</span><br><span class=\"line\">READ UNCOMMITTED\t    ×\t    √</span><br><span class=\"line\">READ COMMITTED\t    √(默认)\t    √</span><br><span class=\"line\">REPEATABLE READ\t        ×   \t√(默认)</span><br><span class=\"line\">SERIALIZABLE    \t    √      \t√</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-6-3-在Spring中指定事务隔离级别\"><a href=\"#8-6-3-在Spring中指定事务隔离级别\" class=\"headerlink\" title=\"8.6.3 在Spring中指定事务隔离级别\"></a>8.6.3 在Spring中指定事务隔离级别</h2><p>1)注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用@Transactional注解声明式地管理事务时</span><br><span class=\"line\">可以在@Transactional的isolation属性中设置隔离级别</span><br></pre></td></tr></table></figure>\n<p>2)XML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Spring 2.x事务通知中，可以在&lt;tx:method&gt;元素中指定隔离级别</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E4lfZF\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4lfZF.md.png\" alt=\"E4lfZF.md.png\"></a></p>\n<h1 id=\"8-7-触发事务回滚的异常\"><a href=\"#8-7-触发事务回滚的异常\" class=\"headerlink\" title=\"8.7 触发事务回滚的异常\"></a>8.7 触发事务回滚的异常</h1><h2 id=\"8-7-1默认情况\"><a href=\"#8-7-1默认情况\" class=\"headerlink\" title=\"8.7.1默认情况\"></a>8.7.1默认情况</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">捕获到RuntimeException或Error时回滚，而捕获到编译时异常不回滚。</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-7-2设置途经\"><a href=\"#8-7-2设置途经\" class=\"headerlink\" title=\"8.7.2设置途经\"></a>8.7.2设置途经</h2><p>1)注解@Transactional 注解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ① rollbackFor属性：指定遇到时必须进行回滚的异常类型，可以为多个</span><br><span class=\"line\">② noRollbackFor属性：指定遇到时不回滚的异常类型，可以为多个</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E4l4IJ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4l4IJ.md.png\" alt=\"E4l4IJ.md.png\"></a></p>\n<p>2)XML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Spring 2.x事务通知中，</span><br><span class=\"line\">可以在&lt;tx:method&gt;元素中指定回滚规则。</span><br><span class=\"line\">如果有不止一种异常则用逗号分隔。</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E4loGR\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4loGR.md.png\" alt=\"E4loGR.md.png\"></a></p>\n<h1 id=\"8-8-事务的超时和只读属性\"><a href=\"#8-8-事务的超时和只读属性\" class=\"headerlink\" title=\"8.8 事务的超时和只读属性\"></a>8.8 事务的超时和只读属性</h1><h2 id=\"8-8-1简介\"><a href=\"#8-8-1简介\" class=\"headerlink\" title=\"8.8.1简介\"></a>8.8.1简介</h2><ul>\n<li>由于事务可以在行和表上获得锁，因此长事务会占用资源，并对整体性能产生影响。</li>\n<li>如果一个事务只读取数据但不做修改，数据库引擎可以对这个事务进行优化。</li>\n<li>超时事务属性：事务在强制回滚之前可以保持多久。这样可以防止长期运行的事务占用资源。</li>\n<li>只读事务属性: 表示这个事务只读取数据但不更新数据, 这样可以帮助数据库引擎优化事务。<br>8.8.2设置<br>1)注解</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transaction注解</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E41AeS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E41AeS.md.png\" alt=\"E41AeS.md.png\"></a></p>\n<p>2)XML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Spring 2.x事务通知中，超时和只读属性可以在&lt;tx:method&gt;元素中进行指定</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E41VoQ\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E41VoQ.md.png\" alt=\"E41VoQ.md.png\"></a></p>\n<p>8.9 基于XML文档的声明式事务配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 配置事务切面 --&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:pointcut </span><br><span class=\"line\">\t\t\texpression=&quot;execution(* com.atguigu.tx.component.service.BookShopServiceImpl.purchase(..))&quot; </span><br><span class=\"line\">\t\t\tid=&quot;txPointCut&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;!-- 将切入点表达式和事务属性配置关联到一起 --&gt;</span><br><span class=\"line\">\t\t&lt;aop:advisor advice-ref=&quot;myTx&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 配置基于XML的声明式事务  --&gt;</span><br><span class=\"line\">\t&lt;tx:advice id=&quot;myTx&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;tx:attributes&gt;</span><br><span class=\"line\">\t\t\t&lt;!-- 设置具体方法的事务属性 --&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;tx:method name=&quot;purchase&quot; </span><br><span class=\"line\">\t\t\t\tisolation=&quot;READ_COMMITTED&quot; </span><br><span class=\"line\">\tno-rollback-for=&quot;java.lang.ArithmeticException,java.lang.NullPointerException&quot;</span><br><span class=\"line\">\t\t\t\tpropagation=&quot;REQUIRES_NEW&quot;</span><br><span class=\"line\">\t\t\t\tread-only=&quot;false&quot;</span><br><span class=\"line\">\t\t\t\ttimeout=&quot;10&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;/tx:attributes&gt;</span><br><span class=\"line\">\t&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"7. SpringJdbcTemplate","url":"http://yoursite.com/2018/01/23/41. SpringJdbcTemplate /","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spring Jdbc  ： JdbcTemplate</span><br><span class=\"line\">1. update(): 完成增删改操作\t </span><br><span class=\"line\">2. batchUpdate(): 完成批量增删改</span><br><span class=\"line\">3. queryForObject():  查询单条数据返回单个对象 /  查询返回单个值</span><br><span class=\"line\">4. query(): 查询多条数据返回多个对象的集合</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-1-简介\"><a href=\"#7-1-简介\" class=\"headerlink\" title=\"7.1  简介\"></a>7.1  简介</h1><ul>\n<li>为了使JDBC更加易于使用，Spring在JDBC API上定义了一个抽象层，以此建立一个JDBC存取框架。  </li>\n<li>作为Spring JDBC框架的核心，JDBC模板的设计目的是为不同类型的JDBC操作提供模板方法，通过这种方式，可以在尽可能保留灵活性的情况下，将数据库存取的工作量降到最低。 </li>\n<li>可以将Spring的JdbcTemplate看作是一个小型的轻量级持久化层框架，和我们之前使用过的DBUtils风格非常接近。</li>\n</ul>\n<h1 id=\"7-2-环境准备\"><a href=\"#7-2-环境准备\" class=\"headerlink\" title=\"7.2  环境准备\"></a>7.2  环境准备</h1><h2 id=\"7-2-1导入JAR包\"><a href=\"#7-2-1导入JAR包\" class=\"headerlink\" title=\"7.2.1导入JAR包\"></a>7.2.1导入JAR包</h2><p>1)IOC容器所需要的JAR包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commons-logging-1.1.1.jar</span><br><span class=\"line\">spring-beans-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-context-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-core-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-expression-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<p>2)JdbcTemplate所需要的JAR包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring-jdbc-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-orm-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-tx-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure>\n<p>3)数据库驱动和数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">druid-1.1.9.jar</span><br><span class=\"line\">mysql-connector-java-5.1.7-bin.jar</span><br></pre></td></tr></table></figure>\n<p>7.2.2创建连接数据库基本信息属性文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user=root</span><br><span class=\"line\">password=root</span><br><span class=\"line\">jdbcUrl=jdbc:mysql:///query_data</span><br><span class=\"line\">driverClass=com.mysql.jdbc.Driver</span><br><span class=\"line\"></span><br><span class=\"line\">initialPoolSize=30</span><br><span class=\"line\">minPoolSize=10</span><br><span class=\"line\">maxPoolSize=100</span><br><span class=\"line\">acquireIncrement=5</span><br><span class=\"line\">maxStatements=1000</span><br><span class=\"line\">maxStatementsPerConnection=10</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-2-3在Spring配置文件中配置相关的bean\"><a href=\"#7-2-3在Spring配置文件中配置相关的bean\" class=\"headerlink\" title=\"7.2.3在Spring配置文件中配置相关的bean\"></a>7.2.3在Spring配置文件中配置相关的bean</h2><p>1)数据源对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;user&quot; value=&quot;$&#123;user&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbcUrl&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;driverClass&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;initialPoolSize&quot; value=&quot;$&#123;initialPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;minPoolSize&quot; value=&quot;$&#123;minPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;maxPoolSize&quot; value=&quot;$&#123;maxPoolSize&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;acquireIncrement&quot; value=&quot;$&#123;acquireIncrement&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;maxStatements&quot; value=&quot;$&#123;maxStatements&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;property name=&quot;maxStatementsPerConnection&quot; </span><br><span class=\"line\">value=&quot;$&#123;maxStatementsPerConnection&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>2)JdbcTemplate对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;template&quot; </span><br><span class=\"line\">class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-3-持久化操作\"><a href=\"#7-3-持久化操作\" class=\"headerlink\" title=\"7.3 持久化操作\"></a>7.3 持久化操作</h1><p>1)增删改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JdbcTemplate.update(String, Object...)</span><br></pre></td></tr></table></figure>\n<p>2)批量增删改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JdbcTemplate.batchUpdate(String, List&lt;Object[]&gt;)</span><br><span class=\"line\">\t\tObject[]封装了SQL语句每一次执行时所需要的参数</span><br><span class=\"line\">\t\tList集合封装了SQL语句多次执行时的所有参数</span><br></pre></td></tr></table></figure>\n<p>3)查询单行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JdbcTemplate.queryForObject(String, RowMapper&lt;Department&gt;, Object...)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E4QEX8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4QEX8.md.png\" alt=\"E4QEX8.md.png\"></a></p>\n<p>4)查询多行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JdbcTemplate.query(String, RowMapper&lt;Department&gt;, Object...)</span><br><span class=\"line\">RowMapper对象依然可以使用BeanPropertyRowMapper</span><br></pre></td></tr></table></figure>\n<p>5)查询单一值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JdbcTemplate.queryForObject(String, Class, Object...)</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-5-使用JdbcTemplate实现Dao\"><a href=\"#7-5-使用JdbcTemplate实现Dao\" class=\"headerlink\" title=\"7.5 使用JdbcTemplate实现Dao\"></a>7.5 使用JdbcTemplate实现Dao</h1><p>1)通过IOC容器自动注入<br>JdbcTemplate类是线程安全的，所以可以在IOC容器中声明它的单个实例，并将这个实例注入到所有的Dao实例中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Repository</span><br><span class=\"line\">public class EmployeeDao &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Autowired</span><br><span class=\"line\">\tprivate JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Employee get(Integer id)&#123;</span><br><span class=\"line\">\t\t//…</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"6. Spring以XML方式配置切面","url":"http://yoursite.com/2018/01/22/40. Spring以XML方式配置切面 /","content":"<p>#概述<br>AspectJ  xml配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aop:config&gt;</span><br><span class=\"line\">\t&lt;aop:pointcut expression=&quot;&quot;  id =&quot;myPointcut&quot;/&gt;</span><br><span class=\"line\">\t&lt;aop:aspect ref=&quot;切面&quot; order=&quot;优先级&quot;&gt;</span><br><span class=\"line\">\t\t&lt;aop:before method=&quot;&quot; pointcut-ref=&quot;myPointcut&quot;  /&gt;</span><br><span class=\"line\">\t\t&lt;aop:after/&gt;</span><br><span class=\"line\">\t\t...........</span><br><span class=\"line\">\t&lt;/aop:aspect&gt;</span><br><span class=\"line\">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-1-简介\"><a href=\"#6-1-简介\" class=\"headerlink\" title=\"6.1 简介\"></a>6.1 简介</h1><ul>\n<li>除了使用AspectJ注解声明切面，Spring也支持在bean配置文件中声明切面。这种声明是通过aop名称空间中的XML元素完成的。  </li>\n<li>正常情况下，基于注解的声明要优先于基于XML的声明。通过AspectJ注解，切面可以与AspectJ兼容，而基于XML的配置则是Spring专有的。由于AspectJ得到越来越多的 AOP框架支持，所以以注解风格编写的切面将会有更多重用的机会。<h1 id=\"6-2-配置细节\"><a href=\"#6-2-配置细节\" class=\"headerlink\" title=\"6.2 配置细节\"></a>6.2 配置细节</h1></li>\n<li>在bean配置文件中，所有的Spring AOP配置都必须定义在<a href=\"aop:config\" target=\"_blank\" rel=\"noopener\">aop:config</a>元素内部。对于每个切面而言，都要创建一个<a href=\"aop:aspect\" target=\"_blank\" rel=\"noopener\">aop:aspect</a>元素来为具体的切面实现引用后端bean实例。</li>\n<li>切面bean必须有一个标识符，供<a href=\"aop:aspect\" target=\"_blank\" rel=\"noopener\">aop:aspect</a>元素引用。</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/E4MnRx\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4MnRx.md.png\" alt=\"E4MnRx.md.png\"></a></p>\n<h1 id=\"6-3-声明切入点\"><a href=\"#6-3-声明切入点\" class=\"headerlink\" title=\"6.3 声明切入点\"></a>6.3 声明切入点</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)切入点使用&lt;aop:pointcut&gt;元素声明。</span><br><span class=\"line\">2)切入点必须定义在&lt;aop:aspect&gt;元素下，或者直接定义在&lt;aop:config&gt;元素下。</span><br><span class=\"line\">\t① 定义在&lt;aop:aspect&gt;元素下：只对当前切面有效</span><br><span class=\"line\">\t② 定义在&lt;aop:config&gt;元素下：对所有切面都有效</span><br><span class=\"line\">3)基于XML的AOP配置不允许在切入点表达式中用名称引用其他切入点。</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E4MYFA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4MYFA.md.png\" alt=\"E4MYFA.md.png\"></a></p>\n<h1 id=\"6-4-声明通知\"><a href=\"#6-4-声明通知\" class=\"headerlink\" title=\"6.4 声明通知\"></a>6.4 声明通知</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)在aop名称空间中，每种通知类型都对应一个特定的XML元素。</span><br><span class=\"line\">2)通知元素需要使用 &lt;pointcut-ref&gt; 来引用切入点，或用&lt;pointcut&gt;直接嵌入切入点表达式。</span><br><span class=\"line\">3)method属性指定切面类中通知方法的名称</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgchr.com/i/E4MYFA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/13/E4MYFA.md.png\" alt=\"E4MYFA.md.png\"></a></p>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"5. SpringAOP细节","url":"http://yoursite.com/2018/01/18/39. SpringAOP细节/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>1  切入点表达式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(修饰符 返回值类型        包+类+方法(参数列表) )</span><br><span class=\"line\">execution([权限修饰符] [返回值类型] [简单类名/全类名] [方法名]([参数列表]))</span><br><span class=\"line\">任意修饰符任意返回值 包下的任意类+类中的任意方法名+方法中的任意参数列表</span><br><span class=\"line\">//@After(value=&quot;execution( * com.aop.aspectJ.*.*(..))&quot;)</span><br><span class=\"line\">定义及使用切入点表达式</span><br><span class=\"line\">@Pointcut(value=&quot;execution( *  com.spring.aop.aspectJ.*.*(..))&quot;)</span><br><span class=\"line\">\tpublic void declarePointcut() &#123;&#125;</span><br><span class=\"line\">@After(value=&quot;declarePointcut()&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>2  连接点对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JoinPoint</span><br><span class=\"line\">proceedingJoinPoint</span><br></pre></td></tr></table></figure>\n<p>3  切面的优先级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过@Order  注解来指定切面的优先级,</span><br><span class=\"line\">需要指定 int 类型的值， 值越小优先级越高。</span><br><span class=\"line\">默认值就是 int 的最大值.</span><br></pre></td></tr></table></figure>\n<p>4  重用切入点表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在切面中，随便定义一个方法，</span><br><span class=\"line\">然后使用@PointCut 注解定义切入点表达式. </span><br><span class=\"line\">然后在各个通知的注解中就可以使用方法名() </span><br><span class=\"line\">来使用定义好的切入点表达式.</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-1-切入点表达式\"><a href=\"#5-1-切入点表达式\" class=\"headerlink\" title=\"5.1 切入点表达式\"></a>5.1 切入点表达式</h1><h2 id=\"5-1-1-作用\"><a href=\"#5-1-1-作用\" class=\"headerlink\" title=\"5.1.1 作用\"></a>5.1.1 作用</h2><pre><code>通过表达式的方式定位一个或多个具体的连接点。\n</code></pre><h2 id=\"5-1-2-语法细节\"><a href=\"#5-1-2-语法细节\" class=\"headerlink\" title=\"5.1.2 语法细节\"></a>5.1.2 语法细节</h2><p>1)切入点表达式的语法格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution([权限修饰符] [返回值类型] [简单类名/全类名] [方法名]([参数列表]))</span><br></pre></td></tr></table></figure>\n<p>2)举例说明 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式\texecution(* com.atguigu.spring.ArithmeticCalculator.*(..))</span><br><span class=\"line\">含义\tArithmeticCalculator接口中声明的所有方法。</span><br><span class=\"line\">        第一个“*”代表任意修饰符及任意返回值。</span><br><span class=\"line\">        第二个“*”代表任意方法。</span><br><span class=\"line\">        “..”匹配任意数量、任意类型的参数。</span><br><span class=\"line\">        若目标类、接口与该切面类在同一个包中可以省略包名</span><br></pre></td></tr></table></figure>\n<p>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式\texecution(public * ArithmeticCalculator.*(..))</span><br><span class=\"line\">含义\tArithmeticCalculator接口的所有公有方法</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式\texecution(public double ArithmeticCalculator.*(..))</span><br><span class=\"line\">含义\tArithmeticCalculator接口中返回double类型数值的方法</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式\texecution(public double ArithmeticCalculator.*(double, ..))</span><br><span class=\"line\">含义\t第一个参数为double类型的方法。</span><br><span class=\"line\">        “..” 匹配任意数量、任意类型的参数。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表达式\texecution(public double ArithmeticCalculator.*(double, double))</span><br><span class=\"line\">含义\t参数类型为double，double类型的方法</span><br></pre></td></tr></table></figure>\n<p>3）在AspectJ中，切入点表达式可以通过<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“&amp;&amp;”、“||”、“!”等操作符结合起来。</span><br><span class=\"line\">表达式\texecution (* *.add(int,..)) || execution(* *.sub(int,..))</span><br><span class=\"line\">含义\t任意类中第一个参数为int类型的add方法或sub方法</span><br><span class=\"line\">表达式\t!execution (* *.add(int,..)) </span><br><span class=\"line\">含义\t匹配不是任意类中第一个参数为int类型的add方法</span><br></pre></td></tr></table></figure></p>\n<p>5.1.3切入点表达式应用到实际的切面类中</p>\n<p><a href=\"https://imgchr.com/i/E4uc7j\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/12/E4uc7j.md.png\" alt=\"E4uc7j.md.png\"></a></p>\n<h1 id=\"5-2-当前连接点细节\"><a href=\"#5-2-当前连接点细节\" class=\"headerlink\" title=\"5.2 当前连接点细节\"></a>5.2 当前连接点细节</h1><h2 id=\"5-2-1-概述\"><a href=\"#5-2-1-概述\" class=\"headerlink\" title=\"5.2.1 概述\"></a>5.2.1 概述</h2><blockquote>\n<p>切入点表达式通常都会是从宏观上定位一组方法，<br>和具体某个通知的注解结合起来就能够确定对应的连接点。<br>那么就一个具体的连接点而言，<br>我们可能会关心这个连接点的一些具体信息，<br>例如：<br>当前连接点所在方法的方法名、当前传入的参数值等等。<br>这些信息都封装在JoinPoint接口的实例对象中。<br>5.2.2 JoinPoint</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/E4uv36\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/12/E4uv36.md.png\" alt=\"E4uv36.md.png\"></a></p>\n<h1 id=\"5-3通知\"><a href=\"#5-3通知\" class=\"headerlink\" title=\"5.3通知\"></a>5.3通知</h1><h2 id=\"5-3-1-概述\"><a href=\"#5-3-1-概述\" class=\"headerlink\" title=\"5.3.1 概述\"></a>5.3.1 概述</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)在具体的连接点上要执行的操作。  </span><br><span class=\"line\">2)一个切面可以包括一个或者多个通知。  </span><br><span class=\"line\">3)通知所使用的注解的值往往是切入点表达式。</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3-2前置通知\"><a href=\"#5-3-2前置通知\" class=\"headerlink\" title=\"5.3.2前置通知\"></a>5.3.2前置通知</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)前置通知：在方法执行之前执行的通知</span><br><span class=\"line\">2)使用@Before注解</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3-3后置通知\"><a href=\"#5-3-3后置通知\" class=\"headerlink\" title=\"5.3.3后置通知\"></a>5.3.3后置通知</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)后置通知：后置通知是在连接点完成之后执行的，即连接点返回结果或者抛出异常的时候</span><br><span class=\"line\">2)使用@After注解</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3-4返回通知\"><a href=\"#5-3-4返回通知\" class=\"headerlink\" title=\"5.3.4返回通知\"></a>5.3.4返回通知</h2><blockquote>\n<p>1)返回通知：无论连接点是正常返回还是抛出异常，后置通知都会执行。如果只想在连接点返回的时候记录日志，应使用返回通知代替后置通知。<br>2)使用@AfterReturning注解,在返回通知中访问连接点的返回值</p>\n<blockquote>\n<p>①在返回通知中，只要将returning属性添加到@AfterReturning注解中，就可以访问连接点的返回值。该属性的值即为用来传入返回值的参数名称<br>②必须在通知方法的签名中添加一个同名参数。在运行时Spring AOP会通过这个参数传递返回值<br>③原始的切点表达式需要出现在pointcut属性中</p>\n</blockquote>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/12/E4K15n.png\" alt=\"E4K15n.png\"></p>\n<h2 id=\"5-3-5异常通知\"><a href=\"#5-3-5异常通知\" class=\"headerlink\" title=\"5.3.5异常通知\"></a>5.3.5异常通知</h2><blockquote>\n<p>1)异常通知：只在连接点抛出异常时才执行异常通知<br>2)将throwing属性添加到@AfterThrowing注解中，也可以访问连接点抛出的异常。Throwable是所有错误和异常类的顶级父类，所以在异常通知方法可以捕获到任何错误和异常。<br>3)如果只对某种特殊的异常类型感兴趣，可以将参数声明为其他异常的参数类型。然后通知就只在抛出这个类型及其子类的异常时才被执行  </p>\n</blockquote>\n<h2 id=\"5-3-6环绕通知\"><a href=\"#5-3-6环绕通知\" class=\"headerlink\" title=\"5.3.6环绕通知\"></a>5.3.6环绕通知</h2><blockquote>\n<p>1)环绕通知是所有通知类型中功能最为强大的，能够全面地控制连接点，甚至可以控制是否执行连接点。<br>2)对于环绕通知来说，连接点的参数类型必须是ProceedingJoinPoint。它是 JoinPoint的子接口，允许控制何时执行，是否执行连接点。<br>3)在环绕通知中需要明确调用ProceedingJoinPoint的proceed()方法来执行被代理的方法。如果忘记这样做就会导致通知被执行了，但目标方法没有被执行。<br>4)注意：环绕通知的方法需要返回目标方法执行之后的结果，即调用 joinPoint.proceed();的返回值，否则会出现空指针异常。</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/E4K0a9\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/12/E4K0a9.png\" alt=\"E4K0a9.png\"></a></p>\n<h1 id=\"5-4-重用切入点定义\"><a href=\"#5-4-重用切入点定义\" class=\"headerlink\" title=\"5.4 重用切入点定义\"></a>5.4 重用切入点定义</h1><blockquote>\n<p>1)在编写AspectJ切面时，可以直接在通知注解中书写切入点表达式。但同一个切点表达式可能会在多个通知中重复出现。<br>2)在AspectJ切面中，可以通过@Pointcut注解将一个切入点声明成简单的方法。切入点的方法体通常是空的，因为将切入点定义与应用程序逻辑混在一起是不合理的。<br>3)切入点方法的访问控制符同时也控制着这个切入点的可见性。如果切入点要在多个切面中共用，最好将它们集中在一个公共的类中。在这种情况下，它们必须被声明为public。在引入这个切入点时，必须将类名也包括在内。如果类没有与这个切面放在同一个包中，还必须包含包名。<br>4)其他通知可以通过方法名称引入该切入点</p>\n</blockquote>\n<p>[<img src=\"https://s2.ax1x.com/2019/05/12/E4K7xf.md.png\" alt=\"E4K7xf.md.png\">]</p>\n<p>5.4指定切面的优先级<br>1)在同一个连接点上应用不止一个切面时，除非明确指定，否则它们的优先级是不确定的。<br>2)切面的优先级可以通过实现Ordered接口或利用@Order注解指定。<br>3)实现Ordered接口，getOrder()方法的返回值越小，优先级越高。<br>4)若使用@Order注解，序号出现在注解中</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/13/E4KqsS.png\" alt=\"E4KqsS.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/13/E4KLqg.png\" alt=\"E4KLqg.png\"></p>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"4. SpringAOP概述","url":"http://yoursite.com/2018/01/15/38. SpringAOP概述/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ol>\n<li>AOP  面向切面编程. </li>\n<li>AOP 术语<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">横切关注点 、 切面 、 通知 、 目标 、 代理 、 连接点 、 切入点</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component  // 标识为一个组件</span><br><span class=\"line\">@Aspect     // 标识为一个切面</span><br><span class=\"line\">@Order(0)  //优先级</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>AspectJ </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AspectJ 不属于Spring.  但是AspectJ是比较完整流行的AOP框架. Spring对AspectJ进行了支持. 支持注解以及XML两种方式.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>AspectJ 注解开发<br> 4.1 组件扫描<br> 4.2 开启注解支持  &lt;aop: aspectj-autoproxy/&gt;<br> 4.3 切面    </p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过@Component注解标识为一个组件 在通过@Aspect注解标识为切面</span><br></pre></td></tr></table></figure>\n<p>4.4 通知  </p>\n<ul>\n<li><p>前置通知：在目标方法执行之前执行. </p>\n<ul>\n<li>@Before :标识前置通知    </li>\n<li>value: 用于指定切入点表达式  </li>\n<li>JoinPoint: 连接点对象， 用于描述连接点相关的信息  </li>\n</ul>\n</li>\n<li><p>后置通知：在目标方法执行之后执行 </p>\n<ul>\n<li>@After 不管目标方法有没有抛出异常都会执行,不能获取到目标方法的返回值.</li>\n</ul>\n</li>\n<li><p>返回通知：在目标方法正常执行结束后执行，  </p>\n<ul>\n<li>@AfterReturning 可以获取到方法的返回值.  </li>\n</ul>\n</li>\n<li><p>获取目标方法的返回值:  </p>\n<ul>\n<li>通过returning来指定一个形参名，来接收目标方法的返回值.  </li>\n</ul>\n</li>\n<li><p>异常通知 </p>\n<ul>\n<li>@AfterThrowing在目标方法抛出异常以后执行.<ul>\n<li>获取目标方法抛出的异常: 通过throwing来指定一个形参名， 来接收目标方法抛出的异常</li>\n<li>可以通过形参的类型来设置抛出指定异常后再执行异常通知.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>环绕通知          环绕着整个目标方法.  <ul>\n<li>@Around可以理解为 前置 后置 返回 异常 通知的结合.<br>更类似于动态代理InvocationHandler中的invoke方法的处理。<h1 id=\"4-1-AOP简介\"><a href=\"#4-1-AOP简介\" class=\"headerlink\" title=\"4.1 AOP简介\"></a>4.1 AOP简介</h1><blockquote>\n<p>1)AOP(Aspect-Oriented Programming，面向切面编程)：<br>是一种新的方法论，是对统 OOP(Object-OrientedProgramming，面向对象编程)的补充。<br>2)AOP编程操作的主要对象是切面(aspect)，而切面用于模块化横切关注点（公共功能）。<br>3)在应用AOP编程时，仍然需要定义公共功能，但可以明确的定义这个功能应用在哪里，以什么方式应用，并且不必修改受影响的类。这样一来横切关注点就被模块化到特殊的类里——这样的类我们通常称之为“切面”。<br>4)AOP的好处：   </p>\n<blockquote>\n<p>① 每个事物逻辑位于一个位置，代码不分散，便于维护和升级<br>② 业务模块更简洁，只包含核心业务代码<br>③ AOP图解  </p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/EhL3VA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/12/EhL3VA.md.png\" alt=\"EhL3VA.md.png\"></a></p>\n<h1 id=\"4-2-AOP术语\"><a href=\"#4-2-AOP术语\" class=\"headerlink\" title=\"4.2 AOP术语\"></a>4.2 AOP术语</h1><h2 id=\"4-2-1-横切关注点\"><a href=\"#4-2-1-横切关注点\" class=\"headerlink\" title=\"4.2.1 横切关注点\"></a>4.2.1 横切关注点</h2><p>从每个方法中抽取出来的同一类非核心业务。</p>\n<h2 id=\"4-2-2-切面-Aspect\"><a href=\"#4-2-2-切面-Aspect\" class=\"headerlink\" title=\"4.2.2 切面(Aspect)\"></a>4.2.2 切面(Aspect)</h2><p>封装横切关注点信息的类，每个关注点体现为一个通知方法。</p>\n<h2 id=\"4-2-3-通知-Advice\"><a href=\"#4-2-3-通知-Advice\" class=\"headerlink\" title=\"4.2.3 通知(Advice)\"></a>4.2.3 通知(Advice)</h2><p>切面必须要完成的各个具体工作</p>\n<h2 id=\"4-2-4-目标-Target\"><a href=\"#4-2-4-目标-Target\" class=\"headerlink\" title=\"4.2.4 目标(Target)\"></a>4.2.4 目标(Target)</h2><p>被通知的对象</p>\n<h2 id=\"4-2-5-代理-Proxy\"><a href=\"#4-2-5-代理-Proxy\" class=\"headerlink\" title=\"4.2.5 代理(Proxy)\"></a>4.2.5 代理(Proxy)</h2><p>向目标对象应用通知之后创建的代理对象</p>\n<h2 id=\"4-2-6-连接点-Joinpoint\"><a href=\"#4-2-6-连接点-Joinpoint\" class=\"headerlink\" title=\"4.2.6 连接点(Joinpoint)\"></a>4.2.6 连接点(Joinpoint)</h2><p>横切关注点在程序代码中的具体体现，对应程序执行的某个特定位置。<br>例如：类某个方法调用前、调用后、方法捕获到异常后等。</p>\n<blockquote>\n<p>在应用程序中可以使用横纵两个坐标来定位一个具体的连接点：<br><a href=\"https://imgchr.com/i/EhOYw9\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/12/EhOYw9.md.png\" alt=\"EhOYw9.md.png\"></a></p>\n</blockquote>\n<h2 id=\"4-2-7-切入点-pointcut-：\"><a href=\"#4-2-7-切入点-pointcut-：\" class=\"headerlink\" title=\"4.2.7 切入点(pointcut)：\"></a>4.2.7 切入点(pointcut)：</h2><blockquote>\n<p>定位连接点的方式。每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物。<br>如果把连接点看作数据库中的记录，那么切入点就是查询条件——AOP可以通过切入点定位到特定的连接点。<br>切点通过org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p>\n</blockquote>\n<h2 id=\"4-2-8-图解\"><a href=\"#4-2-8-图解\" class=\"headerlink\" title=\"4.2.8 图解\"></a>4.2.8 图解</h2><p><img src=\"https://s2.ax1x.com/2019/05/12/EhXZ6O.png\" alt=\"EhXZ6O.png\"></p>\n<h1 id=\"4-3-AspectJ\"><a href=\"#4-3-AspectJ\" class=\"headerlink\" title=\"4.3 AspectJ\"></a>4.3 AspectJ</h1><h2 id=\"4-3-1-简介\"><a href=\"#4-3-1-简介\" class=\"headerlink\" title=\"4.3.1    简介\"></a>4.3.1    简介</h2><blockquote>\n<p>AspectJ：Java社区里最完整最流行的AOP框架。<br>在Spring2.0以上版本中，可以使用基于AspectJ注解或基于XML配置的AOP。<br>Spring AOP旨在通过Spring IoC提供一个简单的AOP实现，以解决编码人员面临的最常出现的问题。<br>这并不是完整的AOP解决方案，它只能用于Spring容器管理的beans。<br>AspectJ是最原始的AOP实现技术，提供了完整的AOP解决方案。<br>AspectJ更为健壮，相对于Spring AOP也显得更为复杂。<br>值得注意的是，AspectJ能够被应用于所有的领域对象。</p>\n</blockquote>\n<h2 id=\"4-3-2-在Spring中启用AspectJ注解支持\"><a href=\"#4-3-2-在Spring中启用AspectJ注解支持\" class=\"headerlink\" title=\"4.3.2    在Spring中启用AspectJ注解支持\"></a>4.3.2    在Spring中启用AspectJ注解支持</h2><p>1)导入JAR包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.springsource.net.sf.cglib-2.2.0.jar</span><br><span class=\"line\">com.springsource.org.aopalliance-1.0.0.jar</span><br><span class=\"line\">com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</span><br><span class=\"line\">spring-aop-4.0.0.RELEASE.jar</span><br><span class=\"line\">spring-aspects-4.0.0.RELEASE.jar</span><br></pre></td></tr></table></figure></p>\n<p>2)引入aop名称空间<br><img src=\"https://s2.ax1x.com/2019/05/12/E4mJgO.png\" alt=\"E4mJgO.png\"></p>\n<p>3)配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当Spring IOC容器侦测到bean配置文件中的<a href=\"aop:aspectj-autoproxy\" target=\"_blank\" rel=\"noopener\">aop:aspectj-autoproxy</a>元素时，会自动为    与AspectJ切面匹配的bean创建代理</p>\n</blockquote>\n<h2 id=\"4-3-3-用AspectJ注解声明切面\"><a href=\"#4-3-3-用AspectJ注解声明切面\" class=\"headerlink\" title=\"4.3.3 用AspectJ注解声明切面\"></a>4.3.3 用AspectJ注解声明切面</h2><blockquote>\n<p>1)要在Spring中声明AspectJ切面，只需要在IOC容器中将切面声明为bean实例。<br>2)当在Spring IOC容器中初始化AspectJ切面之后，Spring IOC容器就会为那些与 AspectJ切面相匹配的bean创建代理。<br>3)在AspectJ注解中，切面只是一个带有@Aspect注解的Java类，它往往要包含很多通知。<br>4)通知是标注有某种注解的简单的Java方法。<br>5)AspectJ支持5种类型的通知注解：<br>① @Before：前置通知，在方法执行之前执行<br>② @After：后置通知，在方法执行之后执行<br>③ @AfterRunning：返回通知，在方法返回结果之后执行<br>④ @AfterThrowing：异常通知，在方法抛出异常之后执行<br>⑥ @Around：环绕通知，围绕着方法执行</p>\n</blockquote>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"3. SpringAOP前奏","url":"http://yoursite.com/2018/01/12/37. SpringAOP前奏/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>动态代理</p>\n<ol>\n<li>代理模式的原理</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用一个代理对象将目标对象包装起来. </span><br><span class=\"line\">然后使用代理对象&quot;取代&quot;目标对象.   </span><br><span class=\"line\">所有对目标对象的操作都需要通过代理对象.  </span><br><span class=\"line\">代理对象也可以决定是否以及何时将方法的调用转回到目标对象.</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>动态代理的方式 (面试)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   基于接口实现动态代理: JDK动态代理</span><br><span class=\"line\">基于继承实现动态代理(第三方): Cglib  javassist 等.</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>JDK动态代理</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy  :  是所有动态代理类的父类，主要用于创建动态代理类 或者 代理类的对象. </span><br><span class=\"line\">\t\t  Object proxy =  newProxyInstance(ClassLoader, Interfaces ,InvocationHandler)</span><br><span class=\"line\">\t\t  Class  proxyClass = getProxyClass(ClassLoader,Interfaces );</span><br><span class=\"line\">  InvocationHandler: 主要用于完成代理过程.</span><br><span class=\"line\">\t\t  invoke(proxy, Mehtod , args)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>动态代理相关的问题分析:</p>\n<pre><code>1.获取到的Object类型的代理对象可以强制转换成目标对象实现过的接口类型.  \n但是不能转换成目标类型的. \n\n2.代理对象调用代理方法， 会执行InvocationHandler中的invoke方法.\n(InvocationHandler中的invoke方法何时执行?)\n\n   a. 在调用newproxyInstance方法的时候， 我们将自己创建好的InvocatHandler对象 myH 传入到该方法中. \n\n   b. 在newProxyInstance方法中， 会获取到代理类中的带InvocationHandler参数的构造器\n    (参考Proxy类中729行),\n      然后再执行该构造器，将我们传入的myH又传入到了构造器中，\n      (参考Proxy类中的739行)\n\n   c. 在代理类的构造器中，通过super(h) 将我们出入的myH又传入到了父类Proxy的构造器中. \n\n  d. 在Proxy的构造器中，又将我们传入的myH赋值给成员变量h(参考Proxy中的266行)\n\n   e. 在代理类中的每个代理方法中，都一行 super.h.invoke()方法，因为super.h获取到的对象实际就是我们自己创建的myH\n\n   f. 因此, 代理对象调用代理方法，代理方法中的super.h.invoke 就会调用到我们自己创建好的myH对象中的invoke方法.\n</code></pre><h1 id=\"3-1-提出问题\"><a href=\"#3-1-提出问题\" class=\"headerlink\" title=\"3.1 提出问题\"></a>3.1 提出问题</h1><h2 id=\"3-1-1-情景：数学计算器\"><a href=\"#3-1-1-情景：数学计算器\" class=\"headerlink\" title=\"3.1.1 情景：数学计算器\"></a>3.1.1 情景：数学计算器</h2><p>1)    要求<br>①执行加减乘除运算<br>②日志：在程序执行期间追踪正在发生的活动<br>③验证：希望计算器只能处理正数的运算<br><img src=\"https://s2.ax1x.com/2019/04/24/EVfNu9.png\" alt=\"image\"><br>2)    常规实现  </p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 需求:</span><br><span class=\"line\"> * \t核心业务: + - * / </span><br><span class=\"line\">\t非核心业务: 记录日志。 在运算的前后记录日志.</span><br><span class=\"line\">\t</span><br><span class=\"line\">      问题:</span><br><span class=\"line\">      1. 代码分散</span><br><span class=\"line\">      2. 代码混乱</span><br><span class=\"line\"></span><br><span class=\"line\"> * 希望: </span><br><span class=\"line\"> * \t  1.将非核心业务代码从核心业务代码中提取(抽取),再定义到某个特定的位置.  </span><br><span class=\"line\"> * \t  2.在核心业务方法执行时动态的将非核心业务功能作用上去. </span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 涉及到的技术:</span><br><span class=\"line\"> * \t  代理模式 动态代理</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ArithmeticCalculatorImpl  implements ArithmeticCalculator\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int add(int i, int j) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method add begin with [ &quot; +i+ &quot;,&quot; + j + &quot; ]&quot;);</span><br><span class=\"line\">\t\tint result = i + j ;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method add end wiht result : &quot; + result );</span><br><span class=\"line\">\t\treturn result ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int sub(int i, int j) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method sub begin with [ &quot; +i+ &quot;,&quot; + j + &quot; ]&quot;);</span><br><span class=\"line\">\t\tint result = i - j ; </span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method sub end wiht result : &quot; + result );</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int mul(int i, int j) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method mul begin with [ &quot; +i+ &quot;,&quot; + j + &quot; ]&quot;);</span><br><span class=\"line\">\t\tint result = i * j ;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method mul end wiht result : &quot; + result );</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int div(int i, int j) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method div begin with [ &quot; +i+ &quot;,&quot; + j + &quot; ]&quot;);</span><br><span class=\"line\">\t\tint result = i / j ; </span><br><span class=\"line\">\t\tSystem.out.println(&quot;AtGuigu==&gt;The method div end wiht result : &quot; + result );</span><br><span class=\"line\">\t\treturn result ;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>3)    问题<br>①代码混乱：越来越多的非业务需求(日志和验证等)加入后，原有的业务方法急剧膨胀。每个方法在处理核心逻辑的同时还必须兼顾其他多个关注点。<br>②代码分散: 以日志需求为例，只是为了满足这个单一需求，就不得不在多个模块（方法）里多次重复相同的日志代码。如果日志需求发生变化，必须修改所有模块。  </p>\n<h1 id=\"3-2-动态代理\"><a href=\"#3-2-动态代理\" class=\"headerlink\" title=\"3.2 动态代理\"></a>3.2 动态代理</h1><h2 id=\"3-2-1-动态代理的原理\"><a href=\"#3-2-1-动态代理的原理\" class=\"headerlink\" title=\"3.2.1 动态代理的原理\"></a>3.2.1 动态代理的原理</h2><p>代理设计模式的原理：==使用一个代理将原本对象包装起来==，然后用该代理对象”取代”原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。<br><img src=\"https://s2.ax1x.com/2019/04/24/EVhPKJ.png\" alt=\"image\"></p>\n<h2 id=\"3-2-2-动态代理的方式\"><a href=\"#3-2-2-动态代理的方式\" class=\"headerlink\" title=\"3.2.2 动态代理的方式\"></a>3.2.2 动态代理的方式</h2><p>1)    基于接口实现动态代理： JDK动态代理<br>2)    基于继承实现动态代理： Cglib、Javassist动态代理 </p>\n<h1 id=\"3-3-数学计算器的改进\"><a href=\"#3-3-数学计算器的改进\" class=\"headerlink\" title=\"3.3 数学计算器的改进\"></a>3.3 数学计算器的改进</h1><h2 id=\"3-3-1-日志处理器\"><a href=\"#3-3-1-日志处理器\" class=\"headerlink\" title=\"3.3.1 日志处理器\"></a>3.3.1 日志处理器</h2><p><img src=\"https://s2.ax1x.com/2019/04/24/EVhePK.png\" alt=\"image\"></p>\n<h2 id=\"3-3-2-验证处理器\"><a href=\"#3-3-2-验证处理器\" class=\"headerlink\" title=\"3.3.2 验证处理器\"></a>3.3.2 验证处理器</h2><p><img src=\"https://s2.ax1x.com/2019/04/24/EVh3VI.png\" alt=\"image\"></p>\n<h2 id=\"3-3-3-测试代码\"><a href=\"#3-3-3-测试代码\" class=\"headerlink\" title=\"3.3.3 测试代码\"></a>3.3.3 测试代码</h2><p><img src=\"https://s2.ax1x.com/2019/04/24/EVh8at.png\" alt=\"image\"></p>\n<h2 id=\"3-3-4-保存生成的动态代理类\"><a href=\"#3-3-4-保存生成的动态代理类\" class=\"headerlink\" title=\"3.3.4 保存生成的动态代理类\"></a>3.3.4 保存生成的动态代理类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在测试方法中加入如下代码：</span><br><span class=\"line\"> Properties properties = System.getProperties();</span><br><span class=\"line\">\t properties.put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"2. SpringIOC容器和Bean的配置","url":"http://yoursite.com/2018/01/06/36. SpringIOC容器和Bean的配置/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>一 IOC  DI</p>\n<ol>\n<li>IOC是反转控制, 反转了资源获取的方向.  从主动获取变成被动接收。 </li>\n<li>DI是依赖注入. </li>\n<li>IOC是一种反转控制的思想,  DI是对IOC思想的具体实现.   </li>\n</ol>\n<p>二 Bean的配置  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean&gt;:   </span><br><span class=\"line\">\tid： 唯一标识.  </span><br><span class=\"line\">\tclass: 指定全类名。 通过反射的方式创建对象. </span><br><span class=\"line\">\t&lt;property&gt;: 为对象的属性注入值.   </span><br><span class=\"line\">\t    name: 指定属性名。对应类中的set方法. </span><br><span class=\"line\">\t    value:指定属性值.   </span><br><span class=\"line\">\t&lt;constructor-args&gt;:使用构造器的方式给对象的属性注入值</span><br></pre></td></tr></table></figure>\n<p>三 IOC容器的结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BeanFactory ： IOC容器的基本实现， 面向Spring框架本身的</span><br><span class=\"line\">\t  ApplicationContext\t： BeanFactory的子接口， 提供了更多高级的特性,面向框架的使用者的.</span><br><span class=\"line\">\t\tConfigurableApplicationContext : 额外提供了 close refresh方法. 支持我们进行关闭，刷新的操作. </span><br><span class=\"line\">\t\t   ClasspathXmlApplicationContext:  从类路径下读取xml文件并创建IOC容器对象</span><br><span class=\"line\">\t\t   FileSystemXmlApplicationContext: 从文件系统下读取xml文件并创建IOC容器对象 </span><br><span class=\"line\"> WebApplicationContext : 专门为web应用准备的.</span><br></pre></td></tr></table></figure>\n<p>四 getBean方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getBean方法是在BeanFactory接口中定义的. 有重载现象。 </span><br><span class=\"line\">getBean(String id): 通过&lt;bean&gt;的id来获取对象。 </span><br><span class=\"line\">getBean(Class cls): 通过&lt;bean&gt;的class来获取对象,需要注意匹配到多个bean的情况. </span><br><span class=\"line\">getBean(String id, Class cls): 通过&lt;bean&gt;的id和class来获取对象.</span><br></pre></td></tr></table></figure>\n<p>五 依赖注入的方式<br> set方式<br> 构造器方式：必要的时候通过type指定参数的类型 ；index指定参数的位置</p>\n<p>六 依赖注入可以使用的值</p>\n<ol>\n<li>字面值   可以通过字符串表示的值.   使用value  或者是<value>来进行注入.<br>特殊字符:  可以使用实体. 或者使用  &lt;![CDATA[ …. ]]&gt;</value></li>\n<li>引用其他的bean  使用ref或者是<ref bean>来引用IOC容器中的bean对象</ref></li>\n<li>级联属性操作 </li>\n<li>内部bean   只能在内部使用. </li>\n<li>集合（List 、Set 、Array、Map）:<list>  <set> <array>  <map> </map></array></set></list></li>\n<li>独立的集合bean<br> &lt;util:list &gt;  <a href=\"util:set\" target=\"_blank\" rel=\"noopener\">util:set</a>  <a href=\"util:map\" target=\"_blank\" rel=\"noopener\">util:map</a> ……  </li>\n</ol>\n<p>七 p名称空间    p:xxx  p:xxx-ref     </p>\n<p>八 FactoryBean<br>1.Spring通过工厂bean支持我们参与到bean对象的创建过程中.<br>2.工厂bean最终返回的对象是由getObject方法(这个方法是最重要的方法)来决定。<br>SqlSessionFactory=&gt; 用到工厂bean FactoryBean=&gt; SqlSession  </p>\n<p>九 bean的作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 通过scope来设置bean的作用域， 默认的作用域是 singleton.</span><br><span class=\"line\">2. singleton : 单例的 , 在整个IOC容器中只会创建一个bean对象,是在IOC容器对象被创建时就创建 .</span><br><span class=\"line\">3. prototype ：多例的 ，在整个IOC容器中会创建多个bean对象. 不会在IOC容器对象被创建时创建. 而是每次getBean时， 创建一个新对象返回. </span><br><span class=\"line\">4. request   : 一次请求期间. (在web之中使用)</span><br><span class=\"line\">5. session   : 一次会话期间. (在web之中使用)</span><br></pre></td></tr></table></figure>\n<p>十 bean的生命周期</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 默认的生命周期的5个阶段:</span><br><span class=\"line\">\ta. 调用构造器创建bean对象</span><br><span class=\"line\">\tb. 调用set方法给bean对象的属性赋值</span><br><span class=\"line\">\tc. 调用初始化方法.  初始化方法需要我们自己定义， 并且要通过 init-method进行指定. </span><br><span class=\"line\">\td. 使用bean</span><br><span class=\"line\">    e. 容器关闭时，调用销毁方法.  销毁方法需要我们自己定义，并且要通过destroy-method进行指定. </span><br><span class=\"line\">2. Bean的后置处理器(在生命周期的前后)</span><br><span class=\"line\">\ta. 可以通过实现BeanPostProcessor接口，定义后置处理器</span><br><span class=\"line\">\tb. 后置处理器会对IOC容器中的每一个bean的生命周期都起作用.</span><br><span class=\"line\">    c. 后置处理器会在默认的生命周期的初始化阶段的前后再进行额外的处理.</span><br></pre></td></tr></table></figure>\n<p>面试题 :  后置处理器具体使用</p>\n<p>十一 引用外部的属性文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 在IOC容器中配置连接池对象 </span><br><span class=\"line\">2. 引入外部的属性文件</span><br><span class=\"line\">\ta. &lt;bean class=&quot;PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class=\"line\">\t   \t&lt;property name=&quot;location&quot; value=&quot;classpath*:db.properties&quot;&gt;</span><br><span class=\"line\">\t   &lt;/bean&gt; </span><br><span class=\"line\">\tb. &lt;context:property-placeholder location=&quot;classpath:db.properties&quot;/&gt;</span><br><span class=\"line\">3. 在Spring的配置文件中， 通过 $&#123;&#125; 的方式读取到属性文件中的内容.</span><br></pre></td></tr></table></figure>\n<p>十二 自动装配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 通过autowire来指定自动装配的模式.</span><br><span class=\"line\">2. byName: 使用要装配的属性名 与 IOC容器中的bean的id进行匹配，匹配成功则进行装配. </span><br><span class=\"line\">3. byType: 使用要装配的属性的类型  与 IOC容器中的bean的class进行匹配. 如果能唯一匹配， 在装配成功，</span><br><span class=\"line\">\t\t 如果匹配到多个兼容类型的bean，则装配失败.</span><br></pre></td></tr></table></figure>\n<p>十三 基于注解配置bean  装配bean</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 几个常用的注解</span><br><span class=\"line\">\t@Component</span><br><span class=\"line\">\t@Controller</span><br><span class=\"line\">\t@Service</span><br><span class=\"line\">\t@Repository</span><br><span class=\"line\">   @Autowired</span><br><span class=\"line\">\t@Qualifer</span><br><span class=\"line\">2. 组件扫描</span><br><span class=\"line\">  &lt;context:component-scan   base-package=&quot;包&quot;/&gt;  : Spring会扫描指定包以及子包下的所有的类，将带有注解的进行管理. </span><br><span class=\"line\">  &lt;context:include-filter  type=&quot;annotation/ assignable&quot;&gt; : 指定扫描。 使用指定扫描 需要设置 use-default-filters=&quot;false&quot;</span><br><span class=\"line\">  &lt;context:exclude-filter&gt; : 排除扫描.</span><br><span class=\"line\">3. 组件装配</span><br><span class=\"line\">    1. @Autowired\t 的工作机制:</span><br><span class=\"line\">       首先使用byType的方式进行自动装配，如果能唯一匹配，则进行装配，如果匹配到多个兼容类型的bean, </span><br><span class=\"line\">    \t   再使用byName的方式进行唯一性确定， 如果能唯一确定，则装配成功，如果不能唯一确定，则抛出异常. </span><br><span class=\"line\">    2. required 属性:</span><br><span class=\"line\">    \t   默认情况下，使用@Autowired标注的属性，必须要进行 装配，可以使用required=false来设置为不是必须的. </span><br><span class=\"line\">    3. @Qualifier</span><br><span class=\"line\">    \t\t这个注解不会单独用和@Autowired配合用   不建议用 用的话写死了就</span><br><span class=\"line\">    \t  必要的时候，还可以使用该注解指定要装配的bean的id值. </span><br><span class=\"line\">    4.  @Autowired @Qualifier</span><br><span class=\"line\">      注解可以加到属性上(不推荐用  老项目会用)，也可以加在带有形参的方法上(一般来讲set方法)</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-1-IOC和DI\"><a href=\"#2-1-IOC和DI\" class=\"headerlink\" title=\"2.1 IOC和DI\"></a>2.1 IOC和DI</h1><h2 id=\"2-1-1-IOC-Inversion-of-Control-：反转控制\"><a href=\"#2-1-1-IOC-Inversion-of-Control-：反转控制\" class=\"headerlink\" title=\"2.1.1 IOC(Inversion of Control)：反转控制\"></a>2.1.1 IOC(Inversion of Control)：反转控制</h2><ul>\n<li>在应用程序中的组件需要获取资源时，传统的方式是组件主动的从容器中获取所需要的资源，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率。  </li>\n<li>[反转控制的思想完全颠覆了应用程序组件获取资源的传统方式]：反转了资源的获取方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。<h2 id=\"2-1-2-DI-Dependency-Injection-：依赖注入\"><a href=\"#2-1-2-DI-Dependency-Injection-：依赖注入\" class=\"headerlink\" title=\"2.1.2 DI(Dependency Injection)：依赖注入\"></a>2.1.2 DI(Dependency Injection)：依赖注入</h2></li>\n<li>IOC的另一种表述方式：即组件以一些预先定义好的方式(例如：setter 方法)接受来自于容器的资源注入。相对于IOC而言，这种表述更直接。  </li>\n<li>总结: IOC 就是一种反转控制的思想， 而DI是对IOC的一种具体实现。  </li>\n<li></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 依赖注入：set方式 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;employeeSet&quot; class=&quot;com.atguigu.spring.ioc.Employee&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;lastName&quot; value=&quot;宋&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;age&quot; value=&quot;30&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;desc&quot; value=&quot;60秒刚刚好!&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 依赖注入: 构造器方式 </span><br><span class=\"line\">\t\t 必要的时候可以通过index指定参数的位置， type指定参数的类型. </span><br><span class=\"line\">\t--&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;employeeCons&quot; class=&quot;com.atguigu.spring.ioc.Employee&quot;&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;婷姐&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;美女之一&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;18&quot; index=&quot;3&quot; type=&quot;java.lang.Integer&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-3-IOC容器在Spring中的实现\"><a href=\"#2-1-3-IOC容器在Spring中的实现\" class=\"headerlink\" title=\"2.1.3 IOC容器在Spring中的实现\"></a>2.1.3 IOC容器在Spring中的实现</h2><blockquote>\n<p>前提:<br>Spring中有IOC思想， IOC思想必须基于IOC容器来完成，而IOC容器在最底层实质上就是一个对象工厂.  </p>\n</blockquote>\n<p>1）在通过IOC容器读取Bean的实例之前，需要先将IOC容器本身实例化。<br>2）Spring提供了IOC容器的两种实现方式<br>① BeanFactory：IOC容器的基本实现，是Spring内部的基础设施，是面向Spring本身的，不是提供给开发人员使用的。<br>② ApplicationContext：BeanFactory的子接口，提供了更多高级特性。面向Spring的使用者，几乎所有场合都使用ApplicationContext而不是底层的BeanFactory。</p>\n<h2 id=\"2-1-4-ApplicationContext的主要实现类\"><a href=\"#2-1-4-ApplicationContext的主要实现类\" class=\"headerlink\" title=\"2.1.4 ApplicationContext的主要实现类\"></a>2.1.4 ApplicationContext的主要实现类</h2><p>1)    ClassPathXmlApplicationContext：对应类路径下的XML格式的配置文件<br>2)    FileSystemXmlApplicationContext：对应文件系统中的XML格式的配置文件<br>3)    在初始化时就创建单例的bean，也可以通过配置的方式指定创建的Bean是多实例的。</p>\n<h2 id=\"2-1-5-ConfigurableApplicationContext\"><a href=\"#2-1-5-ConfigurableApplicationContext\" class=\"headerlink\" title=\"2.1.5 ConfigurableApplicationContext\"></a>2.1.5 ConfigurableApplicationContext</h2><p>1)    是ApplicationContext的子接口，包含一些扩展方法<br>2)    refresh()和close()让ApplicationContext具有启动、关闭和刷新上下文的能力。</p>\n<h2 id=\"2-1-6-WebApplicationContext\"><a href=\"#2-1-6-WebApplicationContext\" class=\"headerlink\" title=\"2.1.6 WebApplicationContext\"></a>2.1.6 WebApplicationContext</h2><blockquote>\n<p>专门为WEB应用而准备的，它允许从相对于WEB根目录的路径中完成初始化工作</p>\n</blockquote>\n<h2 id=\"2-1-7-容器的结构图\"><a href=\"#2-1-7-容器的结构图\" class=\"headerlink\" title=\"2.1.7 容器的结构图\"></a>2.1.7 容器的结构图</h2><p><img src=\"https://s2.ax1x.com/2019/04/23/EEEBZ9.png\" alt=\"image\"></p>\n<h1 id=\"2-2-通过类型获取bean\"><a href=\"#2-2-通过类型获取bean\" class=\"headerlink\" title=\"2.2 通过类型获取bean\"></a>2.2 通过类型获取bean</h1><p>1)    从IOC容器中获取bean时，除了通过id值获取，还可以通过bean的类型获取。但如果同一个类型的bean在XML文件中配置了多个，则获取时会抛出异常，所以同一个类型的bean在容器中必须是唯一的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloWorld helloWorld = cxt.getBean(HelloWorld. class);</span><br></pre></td></tr></table></figure>\n<p>2)     或者可以使用另外一个重载的方法，同时指定bean的id值和类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloWorld helloWorld = cxt.getBean(“helloWorld”,HelloWorld. class);</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-给bean的属性赋值\"><a href=\"#2-3-给bean的属性赋值\" class=\"headerlink\" title=\"2.3 给bean的属性赋值\"></a>2.3 给bean的属性赋值</h1><h2 id=\"2-3-1-依赖注入的方式\"><a href=\"#2-3-1-依赖注入的方式\" class=\"headerlink\" title=\"2.3.1 依赖注入的方式\"></a>2.3.1 依赖注入的方式</h2><h3 id=\"1-通过bean的setXxx-方法赋值\"><a href=\"#1-通过bean的setXxx-方法赋值\" class=\"headerlink\" title=\"1. 通过bean的setXxx()方法赋值\"></a>1. 通过bean的setXxx()方法赋值</h3><p>Hello World中使用的就是这种方式<br><img src=\"https://s2.ax1x.com/2019/04/23/EEE4Zd.png\" alt=\"image\"></p>\n<h3 id=\"2-通过bean的构造器赋值\"><a href=\"#2-通过bean的构造器赋值\" class=\"headerlink\" title=\"2. 通过bean的构造器赋值\"></a>2. 通过bean的构造器赋值</h3><p>1)    Spring自动匹配合适的构造器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring.bean.Book&quot; &gt;</span><br><span class=\"line\">           &lt;constructor-arg value= &quot;10010&quot;/&gt;</span><br><span class=\"line\">           &lt;constructor-arg value= &quot;Book01&quot;/&gt;</span><br><span class=\"line\">           &lt;constructor-arg value= &quot;Author01&quot;/&gt;</span><br><span class=\"line\">           &lt;constructor-arg value= &quot;20.2&quot;/&gt;</span><br><span class=\"line\">     &lt;/bean &gt;</span><br></pre></td></tr></table></figure>\n<p>2)    通过索引值指定参数位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring.bean.Book&quot; &gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;10010&quot; index =&quot;0&quot;/&gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;Book01&quot; index =&quot;1&quot;/&gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;Author01&quot; index =&quot;2&quot;/&gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;20.2&quot; index =&quot;3&quot;/&gt;</span><br><span class=\"line\">&lt;/bean &gt;</span><br></pre></td></tr></table></figure>\n<p>3)    通过类型区分重载的构造器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;book&quot; &lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring.bean.Book&quot; &gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;10010&quot; index =&quot;0&quot; type=&quot;java.lang.Integer&quot; /&gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;Book01&quot; index =&quot;1&quot; type=&quot;java.lang.String&quot; /&gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;Author01&quot; index =&quot;2&quot; type=&quot;java.lang.String&quot; /&gt;</span><br><span class=\"line\">      &lt;constructor-arg value= &quot;20.2&quot; index =&quot;3&quot; type=&quot;java.lang.Double&quot; /&gt;</span><br><span class=\"line\">&lt;/bean &gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-2-可以使用的值\"><a href=\"#2-3-2-可以使用的值\" class=\"headerlink\" title=\"2.3.2 可以使用的值\"></a>2.3.2 可以使用的值</h2><ol>\n<li>字面量<blockquote>\n<p>1)    可以使用字符串表示的值，可以通过value属性或value子节点的方式指定<br>2)    基本数据类型及其封装类、String等类型都可以采取字面值注入的方式<br>3)    若字面值中包含特殊字符，可以使用&lt;![CDATA[]]&gt;把字面值包裹起来</p>\n<ol start=\"2\">\n<li>null值</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean class=&quot;com.atguigu.spring.bean.Book&quot; id=&quot;bookNull&quot; &gt;</span><br><span class=\"line\">      &lt;property name= &quot;bookId&quot; value =&quot;2000&quot;/&gt;</span><br><span class=\"line\">      &lt;property name= &quot;bookName&quot;&gt;</span><br><span class=\"line\">          &lt;null/&gt;</span><br><span class=\"line\">      &lt;/property&gt;</span><br><span class=\"line\">      &lt;property name= &quot;author&quot; value =&quot;nullAuthor&quot;/&gt;</span><br><span class=\"line\">      &lt;property name= &quot;price&quot; value =&quot;50&quot;/&gt;</span><br><span class=\"line\">&lt;/bean &gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>外部已声明的bean、引用其他的bean</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;shop&quot; class=&quot;com.atguigu.spring.bean.Shop&quot; &gt;</span><br><span class=\"line\">         &lt;property name= &quot;book&quot; ref =&quot;book&quot;/&gt;</span><br><span class=\"line\">   &lt;/bean &gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>给bean的级联属性赋值</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;action&quot; class=&quot;com.atguigu.spring.ref.Action&quot;&gt;</span><br><span class=\"line\">          &lt;property name=&quot;service&quot; ref=&quot;service&quot;/&gt;</span><br><span class=\"line\">          &lt;!-- 设置级联属性(了解) --&gt;</span><br><span class=\"line\">          &lt;property name=&quot;service.dao.dataSource&quot; value=&quot;DBCP&quot;/&gt;</span><br><span class=\"line\">     &lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>内部bean<blockquote>\n<p>当bean实例仅仅给一个特定的属性使用时，可以将其声明为内部bean。内部bean声明直接包含在<property>或<constructor-arg>元素里，不需要设置任何id或name属性<br>==注意:内部bean不能使用在任何其他地方==</constructor-arg></property></p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;shop2&quot; class=&quot;com.atguigu.spring.bean.Shop&quot; &gt;</span><br><span class=\"line\">    &lt;property name= &quot;book&quot;&gt;</span><br><span class=\"line\">        &lt;bean class= &quot;com.atguigu.spring.bean.Book&quot; &gt;</span><br><span class=\"line\">           &lt;property name= &quot;bookId&quot; value =&quot;1000&quot;/&gt;</span><br><span class=\"line\">           &lt;property name= &quot;bookName&quot; value=&quot;innerBook&quot; /&gt;</span><br><span class=\"line\">           &lt;property name= &quot;author&quot; value=&quot;innerAuthor&quot; /&gt;</span><br><span class=\"line\">           &lt;property name= &quot;price&quot; value =&quot;50&quot;/&gt;</span><br><span class=\"line\">        &lt;/bean&gt;</span><br><span class=\"line\">    &lt;/property&gt;</span><br><span class=\"line\">&lt;/bean &gt;</span><br></pre></td></tr></table></figure>\n<p>2.3.3  p名称空间</p>\n<blockquote>\n<p>为了简化XML文件的配置，越来越多的XML文件采用属性而非子元素配置信息。Spring从2.5版本开始引入了一个新的p命名空间，可以通过<bean>元素属性的方式配置Bean    的属性。 </bean></p>\n</blockquote>\n<p>使用p命名空间后，基于XML的配置方式将进一步简化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean </span><br><span class=\"line\">\tid=&quot;studentSuper&quot; </span><br><span class=\"line\">\tclass=&quot;com.atguigu.helloworld.bean.Student&quot;</span><br><span class=\"line\">\tp:studentId=&quot;2002&quot; p:stuName=&quot;Jerry2016&quot; p:age=&quot;18&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-集合属性\"><a href=\"#2-4-集合属性\" class=\"headerlink\" title=\"2.4 集合属性\"></a>2.4 集合属性</h1><p>==在Spring中可以通过一组内置的XML标签来配置集合属性，例如：<list>，<set>或<map>。==</map></set></list></p>\n<h2 id=\"2-4-1-数组和List\"><a href=\"#2-4-1-数组和List\" class=\"headerlink\" title=\"2.4.1 数组和List\"></a>2.4.1 数组和List</h2><ul>\n<li><p>配置java.util.List类型的属性，需要指定<list>标签，在标签里包含一些元素。 </list></p>\n</li>\n<li><p>这些标签  可以通过<value>指定简单的常量值，通过<ref>指定对其他Bean的引用。  </ref></value></p>\n</li>\n<li><p>通过<bean>指定内置bean定义。通过<null>指定空元素。甚至可以内嵌其他集合。  </null></bean></p>\n</li>\n<li><p>数组的定义和List一样，都使用<list>元素。</list></p>\n</li>\n<li>配置java.util.Set需要使用<set>标签，定义的方法与List一样。</set></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;shop&quot; class=&quot;com.atguigu.spring.bean.Shop&quot; &gt;</span><br><span class=\"line\">          &lt;property name= &quot;categoryList&quot;&gt;</span><br><span class=\"line\">              &lt;!-- 以字面量为值的List集合 --&gt;</span><br><span class=\"line\">              &lt;list&gt;</span><br><span class=\"line\">                   &lt;value&gt; 历史&lt;/value &gt;</span><br><span class=\"line\">                   &lt;value&gt; 军事&lt;/value &gt;</span><br><span class=\"line\">              &lt;/list&gt;</span><br><span class=\"line\">          &lt;/property&gt;</span><br><span class=\"line\">          &lt;property name= &quot;bookList&quot;&gt;</span><br><span class=\"line\">              &lt;!-- 以bean的引用为值的List集合 --&gt;</span><br><span class=\"line\">              &lt;list&gt;</span><br><span class=\"line\">                   &lt;ref bean= &quot;book01&quot;/&gt;</span><br><span class=\"line\">                   &lt;ref bean= &quot;book02&quot;/&gt;</span><br><span class=\"line\">              &lt;/list&gt;</span><br><span class=\"line\">          &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean &gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-2-Map\"><a href=\"#2-4-2-Map\" class=\"headerlink\" title=\"2.4.2 Map\"></a>2.4.2 Map</h2><p>Java.util.Map通过<map>标签定义，<map>标签里可以使用多个<entry>作为子标签。每个条目包含一个键和一个值。   </entry></map></map></p>\n<p>必须在<key>标签里定义键。<br>因为键和值的类型没有限制，所以可以自由地为它们指定<value>、<ref>、<bean>或<null>元素。  </null></bean></ref></value></key></p>\n<p>可以将Map的键和值作为<entry>的属性定义：<br>简单常量使用key和value来定义；bean引用通过key-ref和value-ref属性定义。</entry></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;cup&quot; class=&quot;com.atguigu.spring.bean.Cup&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;bookMap&quot;&gt;</span><br><span class=\"line\">\t\t&lt;map&gt;</span><br><span class=\"line\">\t\t\t&lt;entry&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;value&gt;bookKey01&lt;/value&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;ref bean=&quot;book01&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;/entry&gt;</span><br><span class=\"line\">\t\t\t&lt;entry&gt;</span><br><span class=\"line\">\t\t\t\t&lt;key&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;value&gt;bookKey02&lt;/value&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/key&gt;</span><br><span class=\"line\">\t\t\t\t&lt;ref bean=&quot;book02&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;/entry&gt;</span><br><span class=\"line\">\t\t&lt;/map&gt;</span><br><span class=\"line\">\t&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-3-集合类型的bean\"><a href=\"#2-4-3-集合类型的bean\" class=\"headerlink\" title=\"2.4.3 集合类型的bean\"></a>2.4.3 集合类型的bean</h2><p>如果只能将集合对象配置在某个bean内部，则这个集合的配置将不能重用。我们需要将集合bean的配置拿到外面，供其他bean引用。<br>==配置集合类型的bean需要引入util名称空间==</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;util:list id=&quot;bookList&quot;&gt;</span><br><span class=\"line\">\t&lt;ref bean=&quot;book01&quot;/&gt;</span><br><span class=\"line\">\t&lt;ref bean=&quot;book02&quot;/&gt;</span><br><span class=\"line\">\t&lt;ref bean=&quot;book03&quot;/&gt;</span><br><span class=\"line\">\t&lt;ref bean=&quot;book04&quot;/&gt;</span><br><span class=\"line\">\t&lt;ref bean=&quot;book05&quot;/&gt;</span><br><span class=\"line\">&lt;/util:list&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;util:list id=&quot;categoryList&quot;&gt;</span><br><span class=\"line\">\t&lt;value&gt;编程&lt;/value&gt;</span><br><span class=\"line\">\t&lt;value&gt;极客&lt;/value&gt;</span><br><span class=\"line\">\t&lt;value&gt;相声&lt;/value&gt;</span><br><span class=\"line\">\t&lt;value&gt;评书&lt;/value&gt;</span><br><span class=\"line\">&lt;/util:list&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-FactoryBean\"><a href=\"#2-5-FactoryBean\" class=\"headerlink\" title=\"2.5  FactoryBean\"></a>2.5  FactoryBean</h2><p>Spring中有两种类型的bean，一种是普通bean，另一种是工厂bean，即FactoryBean。  </p>\n<p>工厂bean跟普通bean不同，其返回的对象不是指定类的一个实例，其返回的是该工厂bean的getObject方法所返回的对象。</p>\n<p>工厂bean必须实现org.springframework.beans.factory.FactoryBean接口。<br><img src=\"https://s2.ax1x.com/2019/04/23/EEGSun.png\" alt=\"image\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;product&quot; class=&quot;com.atguigu.spring.bean.ProductFactory&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;productName&quot; value=&quot;Mp3&quot; /&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-6-bean的作用域\"><a href=\"#2-6-bean的作用域\" class=\"headerlink\" title=\"2.6  bean的作用域\"></a>2.6  bean的作用域</h2><blockquote>\n<p>在Spring中，可以在<bean>元素的scope属性里设置bean的作用域，以决定这个bean是单实例的还是多实例的。  </bean></p>\n<p>默认情况下，Spring只为每个在IOC容器里声明的bean创建唯一一个实例，整个IOC容器范围内都能共享该实例：所有后续的getBean()调用和bean引用都将返回这个唯一的bean实例。该作用域被称为singleton，它是所有bean的默认作用域。<br><img src=\"https://s2.ax1x.com/2019/04/23/EEGME6.png\" alt=\"image\">  </p>\n</blockquote>\n<blockquote>\n<p>  当bean的作用域为单例时，Spring会在IOC容器对象创建时就创建bean的对象实例。而当bean的作用域为prototype时，IOC容器在获取bean的实例时创建bean的实例对象。  </p>\n</blockquote>\n<h2 id=\"2-7-bean的生命周期\"><a href=\"#2-7-bean的生命周期\" class=\"headerlink\" title=\"2.7  bean的生命周期\"></a>2.7  bean的生命周期</h2><p>1)    Spring IOC容器可以管理bean的生命周期，Spring允许在bean生命周期内特定的时间点执行指定的任务。<br>2)    Spring IOC容器对bean的生命周期进行管理的过程：<br>    ① 通过构造器或工厂方法创建bean实例<br>    ② 为bean的属性设置值和对其他bean的引用<br>    ③ 调用bean的初始化方法<br>    ④  bean可以使用了<br>    ⑤ 当容器关闭时，调用bean的销毁方法<br>3)    在配置bean时，通过init-method和destroy-method 属性为bean指定初始化和销毁方法<br>4)    bean的后置处理器<br>    ① bean后置处理器允许在调用初始化方法前后对bean进行额外的处理<br>    ② bean后置处理器对IOC容器里的所有bean实例逐一处理，而非单一实例。<br>       其典型应用是：检查bean属性的正确性或根据特定的标准更改bean的属性。<br>    ③ bean后置处理器需要实现接口：<br>org.springframework.beans.factory.config.BeanPostProcessor。<br>在初始化方法被调用前后，Spring将把每个bean实例分别传递给上述接口的<br>以下两个方法：  </p>\n<blockquote>\n<p>●postProcessBeforeInitialization(Object, String)<br>●postProcessAfterInitialization(Object, String)  </p>\n</blockquote>\n<p>5)    添加bean后置处理器后bean的生命周期<br>    ①通过构造器或工厂方法创建bean实例<br>    ②为bean的属性设置值和对其他bean的引用<br>    ③将bean实例传递给bean后置处理器的postProcessBeforeInitialization()方法<br>    ④调用bean的初始化方法<br>    ⑤将bean实例传递给bean后置处理器的postProcessAfterInitialization()方法<br>    ⑥bean可以使用了<br>    ⑦当容器关闭时调用bean的销毁方法</p>\n<h2 id=\"2-8-引用外部属性文件\"><a href=\"#2-8-引用外部属性文件\" class=\"headerlink\" title=\"2.8 引用外部属性文件\"></a>2.8 引用外部属性文件</h2><blockquote>\n<p>当bean的配置信息逐渐增多时，查找和修改一些bean的配置信息就变得愈加困难。这时可以将一部分信息提取到bean配置文件的外部，以properties格式的属性文件保存起来，同时在bean的配置文件中引用properties属性文件中的内容，从而实现一部分属性值在发生变化时仅修改properties属性文件即可。这种技术多用于连接数据库的基本信息的配置。  </p>\n</blockquote>\n<h2 id=\"2-8-1-直接配置\"><a href=\"#2-8-1-直接配置\" class=\"headerlink\" title=\"2.8.1 直接配置\"></a>2.8.1 直接配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 直接配置 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;user&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql:///test&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-8-2-使用外部的属性文件\"><a href=\"#2-8-2-使用外部的属性文件\" class=\"headerlink\" title=\"2.8.2 使用外部的属性文件\"></a>2.8.2 使用外部的属性文件</h2><ol>\n<li>创建properties属性文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prop.userName=root</span><br><span class=\"line\">prop.password=root</span><br><span class=\"line\">prop.url=jdbc:mysql:///test</span><br><span class=\"line\">prop.driverClass=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入context名称空间<br><img src=\"https://s2.ax1x.com/2019/04/23/EEYBcQ.png\" alt=\"image\"><br>3.指定properties属性文件的位置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 指定properties属性文件的位置 --&gt;</span><br><span class=\"line\">&lt;!-- classpath:xxx 表示属性文件位于类路径下 --&gt;</span><br><span class=\"line\">&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;`</span><br></pre></td></tr></table></figure>\n<p>4.从properties属性文件中引入属性值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 从properties属性文件中引入属性值 --&gt;</span><br><span class=\"line\">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;user&quot; value=&quot;$&#123;prop.userName&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;password&quot; value=&quot;$&#123;prop.password&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;prop.url&#125;&quot;/&gt;</span><br><span class=\"line\">\t&lt;property name=&quot;driverClass&quot; value=&quot;$&#123;prop.driverClass&#125;&quot;/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-9自动装配\"><a href=\"#2-9自动装配\" class=\"headerlink\" title=\"2.9自动装配\"></a>2.9自动装配</h2><h3 id=\"2-9-1-自动装配的概念\"><a href=\"#2-9-1-自动装配的概念\" class=\"headerlink\" title=\"2.9.1 自动装配的概念\"></a>2.9.1 自动装配的概念</h3><p>1)    手动装配：以value或ref的方式==明确指定属性值==都是手动装配。<br>2)    自动装配：根据指定的装配规则，==不需要明确指定==，Spring==自==动将匹配的属性值==注==入bean中。</p>\n<h3 id=\"2-9-2-装配模式\"><a href=\"#2-9-2-装配模式\" class=\"headerlink\" title=\"2.9.2 装配模式\"></a>2.9.2 装配模式</h3><p>1)    根据==类型==自动装配：将类型匹配的bean作为属性注入到另一个bean中。若IOC容器中有多个与目标bean类型一致的bean，Spring将无法判定哪个bean最合适该属性，所以不能执行自动装配<br>2)    根据==名称==自动装配：必须将目标bean的名称和属性名设置的完全相同<br>3)    通过构造器自动装配：当bean中存在多个构造器时，此种自动装配方式将会很复杂。不推荐使用。</p>\n<h3 id=\"2-9-3-选用建议\"><a href=\"#2-9-3-选用建议\" class=\"headerlink\" title=\"2.9.3 选用建议\"></a>2.9.3 选用建议</h3><blockquote>\n<p>相对于使用注解的方式实现的自动装配，在XML文档中进行的自动装配略显笨拙，在项目中更多的使用注解的方式实现。  </p>\n</blockquote>\n<h2 id=\"2-10-通过注解配置bean\"><a href=\"#2-10-通过注解配置bean\" class=\"headerlink\" title=\"2.10 通过注解配置bean\"></a>2.10 通过注解配置bean</h2><h3 id=\"2-10-1-概述\"><a href=\"#2-10-1-概述\" class=\"headerlink\" title=\"2.10.1 概述\"></a>2.10.1 概述</h3><blockquote>\n<p>相对于XML方式而言，通过注解的方式配置bean更加简洁和优雅，而且和MVC组件化开发的理念十分契合，是开发中常用的使用方式。</p>\n</blockquote>\n<h3 id=\"2-10-2-使用注解标识组件\"><a href=\"#2-10-2-使用注解标识组件\" class=\"headerlink\" title=\"2.10.2 使用注解标识组件\"></a>2.10.2 使用注解标识组件</h3><p>1)    普通组件：==@Component<br>标识一个受Spring IOC容器管理的组件==<br>2)    持久化层组件：==@Repository<br>标识一个受Spring IOC容器管理的持久化层组件==<br>3)    业务逻辑层组件：==@Service<br>标识一个受Spring IOC容器管理的业务逻辑层组件==<br>4)    表述层控制器组件：==@Controller<br>标识一个受Spring IOC容器管理的表述层控制器组件==<br>5)    组件命名规则<br>    ①默认情况：使用组件的简单类名首字母小写后得到的字符串作为bean的id<br>    ②使用组件注解的value属性指定bean的id  </p>\n<blockquote>\n<p>注意：事实上Spring并没有能力识别一个组件到底是不是它所标记的类型，即使将@Respository注解用在一个表述层控制器组件上面也不会产生任何错误，所以@Respository、@Service、@Controller这几个注解仅仅是为了让开发人员自己明确当前的组件扮演的角色。</p>\n</blockquote>\n<h3 id=\"2-10-3-扫描组件\"><a href=\"#2-10-3-扫描组件\" class=\"headerlink\" title=\"2.10.3  扫描组件\"></a>2.10.3  扫描组件</h3><p>==组件被上述注解标识后还需要通过Spring进行扫描才能够侦测到。==<br>1)    指定被扫描的package</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:component-scan base-package=&quot;com.atguigu.component&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>2)    详细说明<br>    ①base-package属性指定一个需要扫描的基类包，Spring容器将会扫描这个基类包及其子包中的所有类。<br>    ②当需要扫描多个包时可以使用逗号分隔。<br>    ③如果仅希望扫描特定的类而非基包下的所有类，可使用resource-pattern属性过滤特定的类，示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:component-scan </span><br><span class=\"line\">\tbase-package=&quot;com.atguigu.component&quot; </span><br><span class=\"line\">\tresource-pattern=&quot;autowire/*.class&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>④包含与排除<br>●<a href=\"context:include-filter\" target=\"_blank\" rel=\"noopener\">context:include-filter</a>子节点表示要包含的目标类 </p>\n<blockquote>\n<p>注意：通常需要与use-default-filters属性配合使用才能够达到“仅包含某些组件”这样的效果。<br>即：通过将use-default-filters属性设置为false，禁用默认过滤器，然后扫描的就只是include-filter中的规则指定的组件了。  </p>\n</blockquote>\n<p>●<a href=\"context:exclude-filter\" target=\"_blank\" rel=\"noopener\">context:exclude-filter</a>子节点表示要排除在外的目标类<br>●component-scan下可以拥有若干个include-filter和exclude-filter子节点<br>●过滤表达式</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th style=\"text-align:center\">示例</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>annotation</td>\n<td style=\"text-align:center\">com.atguigu.XxxAnnotation</td>\n<td style=\"text-align:right\">过滤所有标注了XxxAnnotation的类。这个规则根据目标组件是否标注了指定类型的注解进行过滤。</td>\n</tr>\n<tr>\n<td>assignable</td>\n<td style=\"text-align:center\">com.atguigu.BaseXxx</td>\n<td style=\"text-align:right\">过滤所有BaseXxx类的子类。这个规则根据目标组件是否是指定类型的子类的方式进行过滤。</td>\n</tr>\n<tr>\n<td>aspectj</td>\n<td style=\"text-align:center\">com.atguigu.*Service+</td>\n<td style=\"text-align:right\">所有类名是以Service结束的，或这样的类的子类。这个规则根据AspectJ表达式进行过滤。</td>\n</tr>\n<tr>\n<td>regex</td>\n<td style=\"text-align:center\">com\\.atguigu\\.anno\\.*</td>\n<td style=\"text-align:right\">所有com.atguigu.anno包下的类。这个规则根据正则表达式匹配到的类名进行过滤。</td>\n</tr>\n<tr>\n<td>custom</td>\n<td style=\"text-align:center\">com.atguigu.XxxTypeFilter</td>\n<td style=\"text-align:right\">使用XxxTypeFilter类通过编码的方式自定义过滤规则。该类必须实现org.springframework.core.type.filter.TypeFilter接口</td>\n</tr>\n</tbody>\n</table>\n<p>3)    JAR包<br>必须在原有JAR包组合的基础上再导入一个：==spring-aop-4.0.0.RELEASE.jar==</p>\n<h3 id=\"2-10-4-组件装配\"><a href=\"#2-10-4-组件装配\" class=\"headerlink\" title=\"2.10.4 组件装配\"></a>2.10.4 组件装配</h3><p>1)    需求<br>    Controller组件中往往需要用到Service组件的实例，Service组件中往往需要用到    Repository组件的实例。Spring可以通过注解的方式帮我们实现属性的装配。<br>2)    实现依据<br>    在指定要扫描的包时，==<a href=\"context:component-scan\" target=\"_blank\" rel=\"noopener\">context:component-scan</a>==元素会自动注册一个bean的后置处理器：AutowiredAnnotationBeanPostProcessor的实例。该后置处理器可以自动装配标记了@Autowired、@Resource或@Inject注解的属性。<br>3)    @Autowired注解<br>    ①根据类型实现自动装配。<br>    ②构造器、普通字段(即使是非public)、一切具有参数的方法都可以应用@Autowired注解<br>    ③默认情况下，所有使用@Autowired注解的属性都需要被设置。当Spring找不到匹配的bean装配属性时，会抛出异常。<br>    ④若某一属性允许不被设置，可以设置@Autowired注解的required属性为 false<br>    ⑤默认情况下，当IOC容器里存在多个类型兼容的bean时，Spring会尝试匹配bean的id值是否与变量名相同，如果相同则进行装配。如果bean的id值不相同，通过类型的自动装配将无法工作。此时可以在@Qualifier注解里提供bean的名称。Spring甚至允许在方法的形参上标注@Qualifiter注解以指定注入bean的名称。<br>    ⑥@Autowired注解也可以应用在数组类型的属性上，此时Spring将会把所有匹配的bean进行自动装配。<br>    ⑦@Autowired注解也可以应用在集合属性上，此时Spring读取该集合的类型信息，然后自动装配所有与之兼容的bean。<br>    ⑧@Autowired注解用在java.util.Map上时，若该Map的键值为String，那么 Spring将自动装配与值类型兼容的bean作为值，并以bean的id值作为键。</p>\n<p>4)    @Resource<br>    @Resource注解要求提供一个bean名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为bean的名称。<br>5)    @Inject<br>    @Inject和@Autowired注解一样也是按类型注入匹配的bean，但没有reqired属性。</p>\n<h1 id=\"实用参考代码1\"><a href=\"#实用参考代码1\" class=\"headerlink\" title=\"实用参考代码1\"></a>实用参考代码1</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class=\"line\">\txmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">\t\thttp://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 依赖注入：set方式 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;employeeSet&quot; class=&quot;com.atguigu.spring.ioc.Employee&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;lastName&quot; value=&quot;宋老师&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;age&quot; value=&quot;30&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;desc&quot; value=&quot;60秒刚刚好!&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 依赖注入: 构造器方式 </span><br><span class=\"line\">\t\t 必要的时候可以通过index指定参数的位置， type指定参数的类型. </span><br><span class=\"line\">\t--&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;employeeCons&quot; class=&quot;com.atguigu.spring.ioc.Employee&quot;&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;婷姐&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;女&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;尚硅谷美女老师之一&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;18&quot; index=&quot;3&quot; type=&quot;java.lang.Integer&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=&quot;employeeCons2&quot; class=&quot;com.atguigu.spring.ioc.Employee&quot;&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;郭斌&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;男&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;喜欢婷姐!!!&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t\t&lt;constructor-arg value=&quot;10000&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;!-- 字面量 </span><br><span class=\"line\">\t\t特殊字符的处理:</span><br><span class=\"line\">\t\t\t1. 转义(实体)  &amp;nbsp;   &amp;lt; &amp;gt;</span><br><span class=\"line\">\t\t\t2. &lt;![CDATA[ ....  ]]&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring.ioc.Book&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;isbn&quot; &gt;</span><br><span class=\"line\">\t\t\t&lt;value&gt;ISBN-1001&lt;/value&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;bookName&quot; &gt;</span><br><span class=\"line\">\t\t\t&lt;value&gt; &lt;![CDATA[&lt;&lt; Java编程思想  &gt;&gt; &apos; &quot; !@#￥%……&amp;  ]]&gt;   &lt;/value&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;!-- &lt;property name=&quot;bookName&quot; value=&quot;&amp;lt;&amp;lt;宋老师与婷姐的故事.avi&amp;gt;&amp;gt;&quot;&gt;&lt;/property&gt; --&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实用参考代码2\"><a href=\"#实用参考代码2\" class=\"headerlink\" title=\"实用参考代码2\"></a>实用参考代码2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class=\"line\">\txmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;!-- Person --&gt;</span><br><span class=\"line\">\t&lt;!-- </span><br><span class=\"line\">\t\t&lt;bean&gt;: 用于配置具体的Bean对象.</span><br><span class=\"line\">\t\t\tid : 唯一标识.</span><br><span class=\"line\">\t\t\tclass : 指定全类名.  通过反射的方式创建Bean对象. </span><br><span class=\"line\">\t\t\t\t\tClass cls = Class.forName(&quot;com.atguigu.spring.helloworld.Person&quot;);</span><br><span class=\"line\">\t\t\t\t\tObject obj = cls.newInstance();  要求提供无参数构造器. </span><br><span class=\"line\">\t\t\t&lt;property&gt;: 为对象的属性赋值、注入值. \t</span><br><span class=\"line\">\t\t\t\tname : 指定属性名</span><br><span class=\"line\">\t\t\t\tvalue :指定属性值 \t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;person&quot; class=&quot;com.atguigu.spring.helloworld.Person&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;personName1&quot; value=&quot;Spring!!!&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=&quot;person1&quot; class=&quot;com.atguigu.spring.helloworld.Person&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;personName1&quot; value=&quot;Spring&quot;&gt;&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实用参考代码3\"><a href=\"#实用参考代码3\" class=\"headerlink\" title=\"实用参考代码3\"></a>实用参考代码3</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//1.创建容器对象</span><br><span class=\"line\">\t\tApplicationContext ctx = </span><br><span class=\"line\">\t\t\t\t\tnew ClassPathXmlApplicationContext(&quot;spring-ioc.xml&quot;);</span><br><span class=\"line\">\t\t//现象: 默认情况下， 配置到Spring容器中的bean，会在Spring容器对象被创建时创建.</span><br><span class=\"line\">\t\t//2. 获取Bean</span><br><span class=\"line\">\t\tEmployee employeeSet = ctx.getBean(&quot;employeeSet&quot;,Employee.class);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;employeeSet： &quot;+ employeeSet);</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"1. Spring概述","url":"http://yoursite.com/2018/01/02/35. Spring概述/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>框架 SSM<br>细解: SSM(Spring + Spring WEB  MVC  + MyBatis ) + Linux + Redis  ….<br>统一环境: JDK1.8 +  STS3.9.2 +  Tomcat7  + MySQL5.5以上   </p>\n<p>框架:  平台 、 简化开发 、 提供标准 、 方便扩展维护 ….  </p>\n<p>现有技术在开发中存在的一些问题: </p>\n<ol>\n<li>创建对象<br>   现在: new<br>框架: 把对象的创建及管理交给Spring的IOC容器管理. </li>\n<li>对象与对象的关系：  xxxServlet  —&gt; xxxService —-&gt;xxxDao(xxxJdbcDaoImpl  xxxMyBatisDaoImpl)<br>   现在:  例如在xxxService中通过new的方式创建xxxDao对象.<br>框架:  将各个组件管理到IOC容器中，IOC容器能够进行自动装配.   </li>\n<li>事务管理:<br>  现在:  将事务管理的代码写到每个JDBC方法中.  conn.setAutoCommit(false);  conn.commit();  conn.rollback();<br>  框架:  声明式事务管理（基于简单的配置+ 注解 作用到Service层）  </li>\n<li>JavaWEB：<br>  现在: 写代码时严重耦合与ServletAPI<br>  框架: SpringMVC 将ServletAPI进行了封装, 间接的依赖于ServletAPI  </li>\n<li>……..  </li>\n</ol>\n<p>一、 Spring框架简介</p>\n<ol>\n<li>开源框架</li>\n<li>简化企业级开发.  </li>\n<li>非侵入式(轻量级) 、 IOC 、 AOP 、 容器(对象工厂) 、 组件化 、 一站式 …..  </li>\n</ol>\n<p>二、 Spring  HelloWorld</p>\n<ol>\n<li>导入jar包: spring-beans  spring-core  spring-context  spring-expression  commons-logging    </li>\n<li>创建框架的配置文件: New -&gt; Spring Bean Configuration File -&gt; applicationContext.xml  </li>\n<li>在配置文件中通过<bean>配置:  <bean id class>  <property name value></property> </bean></bean></li>\n<li>在测试方法中, 创建IOC容器对象，  从容器中获取Bean对象. </li>\n</ol>\n<h1 id=\"简单了解框架\"><a href=\"#简单了解框架\" class=\"headerlink\" title=\"简单了解框架\"></a>简单了解框架</h1><blockquote>\n<p>框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。</p>\n<p>框架是对特定应用领域中的应用系统的部分设计和实现的整体结构。</p>\n<p>因为软件系统发展到今天已经很复杂了，特别是服务器端软件，涉及到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事务处理，安全性，数据流控制等问题。还有框架一般都经过很多人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。   </p>\n</blockquote>\n<h1 id=\"Spring框架\"><a href=\"#Spring框架\" class=\"headerlink\" title=\"Spring框架\"></a>Spring框架</h1><h2 id=\"1-1-Spring概述\"><a href=\"#1-1-Spring概述\" class=\"headerlink\" title=\"1.1 Spring概述\"></a>1.1 Spring概述</h2><p>1)    Spring是一个开源框架<br>2)    Spring为简化企业级开发而生，使用Spring，JavaBean就可以实现很多以前要靠EJB才能实现的功能。同样的功能，在EJB中要通过繁琐的配置和复杂的代码才能够实现，而在Spring中却非常的优雅和简洁。<br>注: EJB即EnterpriseJavaBean，是SUN的JavaEE服务器端组件模型。在JavaEE里，EJB称为Java企业Bean，是Java的核心代码，分别是会话Bean（Session Bean），实体Bean（Entity Bean）和消息驱动Bean（MessageDriven Bean）。在EJB3.0推出以后，实体Bean被单独分了出来，形成了新的规范JPA。<br>3)    Spring是一个IOC(DI)和AOP容器框架。<br>4)    Spring的优良特性<br>①非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API<br>②依赖注入：DI——DependencyInjection，反转控制(IOC)最经典的实现。<br>③面向切面编程：Aspect Oriented Programming——AOP<br>④容器：Spring是一个容器，因为它包含并且管理应用对象的生命周期<br>⑤   组件化：Spring实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。<br>⑥  一站式：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上Spring 自身也提供了表述层的SpringMVC和持久层的Spring JDBC）。</p>\n<ol start=\"5\">\n<li>Spring模块<br><img src=\"https://s2.ax1x.com/2019/04/23/EEAQtx.png\" alt=\"image\"></li>\n<li>Spring 官网<br><a href=\"https://spring.io/\" target=\"_blank\" rel=\"noopener\">https://spring.io/</a><h2 id=\"1-2-搭建Spring运行时环境\"><a href=\"#1-2-搭建Spring运行时环境\" class=\"headerlink\" title=\"1.2 搭建Spring运行时环境\"></a>1.2 搭建Spring运行时环境</h2>1)    加入JAR包<br>① Spring自身JAR包：spring-framework-4.0.0.RELEASE\\libs目录下<br>spring-beans-4.0.0.RELEASE.jar<br>spring-context-4.0.0.RELE2ASE.jar<br>spring-core-4.0.0.RELEASE.jar<br>spring-expression-4.0.0.RELEASE.jar<br>② commons-logging-1.1.1.jar<br>2)    在Spring Tool Suite工具中通过如下步骤创建Spring的配置文件<br> ① File-&gt;New-&gt;Spring Bean Configuration File<br> ② 为文件取名字 例如：applicationContext.xml   <h2 id=\"1-3-HelloWorld\"><a href=\"#1-3-HelloWorld\" class=\"headerlink\" title=\"1.3 HelloWorld\"></a>1.3 HelloWorld</h2>1)    目标：使用Spring创建对象，为属性赋值<br>2)    创建Student类<br><img src=\"https://s2.ax1x.com/2019/04/23/EEAHu4.png\" alt=\"image\"><br>3)    创建Spring配置文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 使用bean元素定义一个由IOC容器创建的对象 --&gt;</span><br><span class=\"line\">\t&lt;!-- class属性指定用于创建bean的全类名 --&gt;</span><br><span class=\"line\">\t&lt;!-- id属性指定用于引用bean实例的标识 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;student&quot; class=&quot;com.atguigu.helloworld.bean.Student&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 使用property子元素为bean的属性赋值 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;studentId&quot; value=&quot;1001&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;stuName&quot; value=&quot;Tom&quot;/&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;age&quot; value=&quot;20&quot;/&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>4)    测试：通过Spring的IOC容器创建Student类实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.创建IOC容器对象</span><br><span class=\"line\">ApplicationContext iocContainer = </span><br><span class=\"line\">\t\tnew ClassPathXmlApplicationContext(&quot;helloworld.xml&quot;);</span><br><span class=\"line\">//2.根据id值获取bean实例对象</span><br><span class=\"line\">Student student = (Student) iocContainer.getBean(&quot;student&quot;);</span><br><span class=\"line\">//3.打印bean</span><br><span class=\"line\">System.out.println(student);</span><br></pre></td></tr></table></figure>\n","categories":["Java框架"],"tags":["Spring框架","SSM框架"]},{"title":"15 web-文件的上传和下载","url":"http://yoursite.com/2017/12/26/34 web-文件的上传和下载/","content":"<h1 id=\"文件的上传和下载\"><a href=\"#文件的上传和下载\" class=\"headerlink\" title=\"文件的上传和下载\"></a>文件的上传和下载</h1><ul>\n<li>文件的上传和下载在web应用中是非常常用，也是非常有用的功能。<ul>\n<li>例如：发送电子邮件时可以同过上传附件发送文件，OA系统中可以通过上传文件来提交公文，社交网站通过上传图片来自定义头像等等。</li>\n<li>例如：下载实际上只要资源放在用户可访问的目录中用户就可以直接通过地址下载，但是一些资源是存放到数据库中的，还有一些资源需要一定权限才能下载，这里就需要我们通过Servlet来完成下载的功能。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>可以说上传和下载是每一个web应用都需要具有的一个功能，所以需要我们掌握。</li>\n</ul>\n<h1 id=\"文件的上传\"><a href=\"#文件的上传\" class=\"headerlink\" title=\"文件的上传\"></a>文件的上传</h1><p>文件的上传主要分成两个步骤</p>\n<pre><code>- 用户在页面中选择要上传的文件，然后将请求提交到Servlet\n- Servlet收到请求，解析用户上传的文件，然后将文件存储到服务器\n</code></pre><h2 id=\"创建上传文件的表单\"><a href=\"#创建上传文件的表单\" class=\"headerlink\" title=\"创建上传文件的表单\"></a>创建上传文件的表单</h2><h3 id=\"1-创建一个form表单\"><a href=\"#1-创建一个form表单\" class=\"headerlink\" title=\"1.    创建一个form表单\"></a>1.    创建一个form表单</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class=\"line\">\t&lt;input type=&quot;submit&quot; value=&quot;上传&quot; /&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<p>文件上传的表单和之前的表单类似，但有以下内容需要注意</p>\n<ul>\n<li>表单的method属性必须为post</li>\n<li>表单的enctype属性必须为multipart/form-data</li>\n<li>上传文件的控件是input，type属性为file</li>\n</ul>\n<p>该表单打开后是如下效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606161759.png\" alt></p>\n<h3 id=\"2-编写Servelet。\"><a href=\"#2-编写Servelet。\" class=\"headerlink\" title=\"2.    编写Servelet。\"></a>2.    编写Servelet。</h3><ul>\n<li>页面的表单控件创建好以后，选中文件点击上传按钮请求将会提交到指定的Servlet来处理。</li>\n<li>注意：这里不能再像以前的Servlet中那样，通过request.getParamter()来获取请求参数了，当enctype=”multipart/form-data” 时，再使用getParamter()获取到内容永远为空。因为浏览器发送请求的方式已经改变。</li>\n<li>既然以前的方法不能使用了，这里我们必须要引入一个新的工具来解析请求中的参数和文件，这个工具就是commons-fileupload。</li>\n</ul>\n<h2 id=\"commons-fileupload。\"><a href=\"#commons-fileupload。\" class=\"headerlink\" title=\"commons-fileupload。\"></a>commons-fileupload。</h2><ul>\n<li>commons-fileupload是Apache开发的一款专门用来处理上传的工具，它的作用就是可以从request对象中解析出，用户发送的请求参数和上传文件的流。</li>\n<li>commons-fileupload包依赖commons-io，两个包需要同时导入。</li>\n<li>核心类：</li>\n</ul>\n<h3 id=\"1-DiskFileItemFactory\"><a href=\"#1-DiskFileItemFactory\" class=\"headerlink\" title=\"1.    DiskFileItemFactory\"></a>1.    DiskFileItemFactory</h3><ul>\n<li>工厂类，用于创建ServletFileUpload，设置缓存等  </li>\n<li>该类一般直接使用构造器直接创建实例</li>\n<li>方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setSizeThreshold(int sizeThreshold)</span><br><span class=\"line\">   \t用于设置缓存文件的大小（默认值10kb）</span><br><span class=\"line\">public void setRepository(File repository)</span><br><span class=\"line\">   \t用于设置缓存文件位置（默认系统缓存目录）</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-ServletFileUpload\"><a href=\"#2-ServletFileUpload\" class=\"headerlink\" title=\"2.    ServletFileUpload\"></a>2.    ServletFileUpload</h3><ul>\n<li>该类用于解析request对象从而获取用户发送的请求参数（包括普通参数和文件参数）</li>\n<li>该类需要调用有参构造器创建实例，构造器中需要一个Di- skFileItemFactory作为参数</li>\n<li>方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;FileItem&gt; parseRequest(HttpServletRequest request)</span><br><span class=\"line\">\t解析request对象，获取请求参数，返回的是一个List，</span><br><span class=\"line\">\tList中保存的是一个FileItem对象，一个对象代表一个请求参数。</span><br><span class=\"line\">public void setFileSizeMax(long fileSizeMax)</span><br><span class=\"line\">\t设置单个文件的大小限制，单位为B</span><br><span class=\"line\">\t如果上传文件超出限制，会在parseRequest()抛出异常</span><br><span class=\"line\">        FileSizeLimitExceededException。</span><br><span class=\"line\">public void setSizeMax(long sizeMax)</span><br><span class=\"line\">\t限制请求内容的总大小，单位为B</span><br><span class=\"line\">\t如果上传文件超出限制，会在parseRequest()抛出异常</span><br><span class=\"line\">    \tSizeLimitExceededException。</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-FileItem\"><a href=\"#3-FileItem\" class=\"headerlink\" title=\"3.    FileItem\"></a>3.    FileItem</h3><ul>\n<li>该类用于封装用户发送的参数和文件，也就是用户发送来的信息将会被封装成一个FileItem对象，我们通过该对象获取请求参数或上传文件的信息。</li>\n<li>该类不用我们手动创建，由ServletFileItem解析request后返回。</li>\n<li>方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String getFieldName()</span><br><span class=\"line\">\t获取表单项的名字，也就是input当中的name属性的值。</span><br><span class=\"line\">String getName();</span><br><span class=\"line\">\t获取上传的文件名，普通的请求参数为null。</span><br><span class=\"line\">String getString(String encoding);</span><br><span class=\"line\">\t获取内容</span><br><span class=\"line\">    \t若为文件，将文件的流转换为字符串。</span><br><span class=\"line\">    \t若为请求参数，则获取请求参数的value。</span><br><span class=\"line\">\tencoding参数需要指定一个字符集</span><br><span class=\"line\">boolean isFormField();</span><br><span class=\"line\">\t判断当前的FileItem封装的是普通请求参数，还是一个文件。</span><br><span class=\"line\">    \t如果为普通参数返回：true</span><br><span class=\"line\">    \t如果为文件参数返回：false</span><br><span class=\"line\">String getContentType();</span><br><span class=\"line\">\t获取上传文件的MIME类型</span><br><span class=\"line\">long getSize();</span><br><span class=\"line\">\t获取内容的大小</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实例代码，创建一个Servlet并在doPost()方法中编写如下代码:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建工厂类</span><br><span class=\"line\">DiskFileItemFactory factory = new DiskFileItemFactory();</span><br><span class=\"line\">//创建请求解析器</span><br><span class=\"line\">ServletFileUpload fileUpload = new ServletFileUpload(factory);</span><br><span class=\"line\">//设置上传单个文件的的大小</span><br><span class=\"line\">fileUpload.setFileSizeMax(1024*1024*3);</span><br><span class=\"line\">//设置上传总文件的大小</span><br><span class=\"line\">fileUpload.setSizeMax(1024*1024*3*10);</span><br><span class=\"line\">//设置响应内容的编码</span><br><span class=\"line\">response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\t//解析请求信息，获取FileItem的集合</span><br><span class=\"line\">\tList&lt;FileItem&gt; items = fileUpload.parseRequest(request);</span><br><span class=\"line\">\t//遍历集合</span><br><span class=\"line\">\tfor (FileItem fileItem : items) &#123;</span><br><span class=\"line\">\t\t//如果是普通的表单项</span><br><span class=\"line\">\t\tif(fileItem.isFormField())&#123;</span><br><span class=\"line\">\t\t    //获取参数名</span><br><span class=\"line\">\t\t    String fieldName = fileItem.getFieldName();</span><br><span class=\"line\">\t\t    //获取参数值</span><br><span class=\"line\">\t\t    String value = fileItem.getString(&quot;utf-8&quot;);</span><br><span class=\"line\">\t\t    System.out.println(fieldName+&quot; = &quot;+value);</span><br><span class=\"line\">\t        //如果是文件表单项</span><br><span class=\"line\">\t    &#125;else&#123;</span><br><span class=\"line\">\t\t    //获取文件名</span><br><span class=\"line\">\t\t    String fileName = fileItem.getName();</span><br><span class=\"line\">\t\t    //获取上传路径</span><br><span class=\"line\">\t\t    String realPath = getServletContext().getRealPath(&quot;/WEB-INF/upload&quot;);</span><br><span class=\"line\">\t\t    //检查upload文件夹是否存在，如果不存在则创建</span><br><span class=\"line\">\t\t    File f = new File(realPath);</span><br><span class=\"line\">\t\t    if(!f.exists())&#123;</span><br><span class=\"line\">\t\t\t    f.mkdir();</span><br><span class=\"line\">\t\t    &#125;;</span><br><span class=\"line\">\t\t    //为避免重名生成一个uuid作为文件名的前缀</span><br><span class=\"line\">\t\t    String prefix = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class=\"line\">\t\t    //将文件写入到服务器中</span><br><span class=\"line\">\t\t    fileItem.write(new File(realPath+&quot;/&quot;+prefix+&quot;_&quot;+fileName));</span><br><span class=\"line\">\t\t    //清楚文件缓存</span><br><span class=\"line\">\t\t    fileItem.delete();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\tif(e instanceof SizeLimitExceededException)&#123;</span><br><span class=\"line\">\t\t//文件总大小超出限制</span><br><span class=\"line\">\t\tresponse.getWriter().print(&quot;上传文件的总大小不能超过30M&quot;);</span><br><span class=\"line\">\t&#125;else if(e instanceof FileSizeLimitExceededException)&#123;</span><br><span class=\"line\">\t\t//单个文件大小超出限制</span><br><span class=\"line\">\t\tresponse.getWriter().print(&quot;上传单个文件的大小不能超过3M&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">response.getWriter().print(&quot;上传成功&quot;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件的下载\"><a href=\"#文件的下载\" class=\"headerlink\" title=\"文件的下载\"></a>文件的下载</h1><ul>\n<li>文件下载最直接的方法就是把文件直接放到服务器的目录中，用户直接访问该文件就可以直接下载。</li>\n<li>但是实际上这种方式并不一定好用，比如我们在服务器上直接放置一个MP3文件，然后通过浏览器访问该文件的地址，如果是IE浏览器可能就会弹出下载窗口，而如果是FireFox和Chrome则有可能直接播放。再有就是有一些文件我们是不希望用户可以直接访问到的，这是我们就要通过Servlet来完成下载功能。</li>\n<li>下载文件的关键是几点：<br>1     服务器以一个流的形式将文件发送给浏览器。<br>2      发送流的同时还需要设置几个响应头，来告诉浏览器下载的信息。</li>\n<li>具体响应头如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Type</span><br><span class=\"line\">\t下载文件的MIME类型</span><br><span class=\"line\">\t可以通过servletContext. getMimeType(String file)获取</span><br><span class=\"line\">\t也可以直接手动指定</span><br><span class=\"line\">\t使用response.setContentType(String type);</span><br><span class=\"line\">\t响应头样式：</span><br><span class=\"line\">    \tContent-Type: audio/mpeg</span><br><span class=\"line\">Content-Disposition</span><br><span class=\"line\">\t下载文件的名字，主要作用是提供一个默认的用户名</span><br><span class=\"line\">\t通过response.setHeader(&quot;Content-Disposition&quot;, disposition)设置</span><br><span class=\"line\">\t响应头样式：</span><br><span class=\"line\">    \tContent-Disposition: attachment; filename=xxx.mp3</span><br><span class=\"line\">Content-Length</span><br><span class=\"line\">\t下载文件的长度，用于设置文件的长处（不必须）</span><br><span class=\"line\">\t通过response. setContentLength(int len)设置。</span><br><span class=\"line\">\t设置后样式：</span><br><span class=\"line\">    \tContent-Length: 3140995</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>接下来需要以输入流的形式读入硬盘上的文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileInputStream is = new FileInputStream(file);</span><br><span class=\"line\">这个流就是我们一会要发送给浏览器的内容</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>通过response获取一个输出流，并将文件（输入流）通过该流发送给浏览器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取输出流</span><br><span class=\"line\">\tServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">通过输出流向浏览器发送文件（不要忘了关闭输入流）</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[] b = new byte[1024];</span><br><span class=\"line\">int len = 0;</span><br><span class=\"line\">while((len=is.read(b))&gt; 0)&#123;</span><br><span class=\"line\">\tout.write(b, 0, len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">is.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h2><ul>\n<li>一下步骤都是在同一个Servlet的doGet()方法中编写的</li>\n<li>我所下载的文件是放在WEB-INF下mp3文件夹中的文件</li>\n<li>具体步骤</li>\n</ul>\n<h3 id=\"1-获取文件的流：\"><a href=\"#1-获取文件的流：\" class=\"headerlink\" title=\"1.    获取文件的流：\"></a>1.    获取文件的流：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String realPath = getServletContext().getRealPath(&quot;/WEB-INF/mp3/中国话.mp3&quot;);</span><br><span class=\"line\">//获取文件的File对象</span><br><span class=\"line\">File file = new File(realPath);</span><br><span class=\"line\">//获取文件的输入流</span><br><span class=\"line\">FileInputStream is = new FileInputStream(file);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-获取头信息\"><a href=\"#2-获取头信息\" class=\"headerlink\" title=\"2.    获取头信息\"></a>2.    获取头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取文件的MIME信息</span><br><span class=\"line\">String contentType = getServletContext().getMimeType(realPath);</span><br><span class=\"line\">//设置下载文件的名字</span><br><span class=\"line\">String filename = &quot;zhongguohua.mp3&quot;;</span><br><span class=\"line\">//创建Content-Disposition信息</span><br><span class=\"line\">String disposition = &quot;attachment; filename=&quot;+ filename ;</span><br><span class=\"line\">//获取文件长度</span><br><span class=\"line\">long size = file.length();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-设置头信息\"><a href=\"#3-设置头信息\" class=\"headerlink\" title=\"3.    设置头信息\"></a>3.    设置头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置Content-Type</span><br><span class=\"line\">response.setContentType(contentType);</span><br><span class=\"line\">//设置Content-Disposition</span><br><span class=\"line\">response.setHeader(&quot;Content-Disposition&quot;, disposition);</span><br><span class=\"line\">//设置文件长度</span><br><span class=\"line\">response.setContentLength((int)size);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-发送文件\"><a href=\"#4-发送文件\" class=\"headerlink\" title=\"4.    发送文件\"></a>4.    发送文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过response获取输出流，用于向浏览器输出内容</span><br><span class=\"line\">ServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">//将文件输入流通过输出流输出</span><br><span class=\"line\">byte[] b = new byte[1024];</span><br><span class=\"line\">int len = 0;</span><br><span class=\"line\">while((len=is.read(b))&gt; 0)&#123;</span><br><span class=\"line\">\tout.write(b, 0, len);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//最后不要忘记关闭输入流，输出流由Tomcat自己处理，我们不用手动关闭</span><br><span class=\"line\">is.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"乱码：\"><a href=\"#乱码：\" class=\"headerlink\" title=\"乱码：\"></a>乱码：</h2><ul>\n<li>至此实际上文件下载的主要功能都已经完成。但是还有一个问题我们这里没有体现出来，因为目前我们的文件名使用的是纯英文的，没有乱码问题。这里如果我们要使用中文文件名的话，毫无疑问会出现乱码问题。</li>\n<li>解决此问题的方法很简单，在获取文件名之后为文件名进行编码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename = java.net.URLEncoder.encode(filename,&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但是注意这里火狐浏览器比较特殊，因为他默认是以BASE64解码的，所以这块如果需要考虑火狐的问题的话还需要特殊处理一下。</li>\n</ul>\n<ol>\n<li>先要获取客户端信息（通过获取请求头中的User-Agent信息）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取客户端信息</span><br><span class=\"line\">String ua = request.getHeader(&quot;User-Agent&quot;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>然后判断浏览器版本，做不同的处理（通过判断头信息中是否包含Firefox字符串来判断浏览器版本）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断客户端是否为火狐</span><br><span class=\"line\">if(ua.contains(&quot;Firefox&quot;))&#123;</span><br><span class=\"line\">\t//若为火狐使用BASE64编码</span><br><span class=\"line\">\tfilename = &quot;=?utf-8?B?&quot;+new BASE64Encoder()</span><br><span class=\"line\">.encode(filename.getBytes(&quot;utf-8&quot;))+&quot;?=&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\t//否则使用UTF-8</span><br><span class=\"line\">\tfilename = URLEncoder.encode(filename,&quot;utf-8&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"14 web-异步 AJAX","url":"http://yoursite.com/2017/12/16/33 web-异步 AJAX/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ul>\n<li>AJAX 是 Asynchronous JavaScript And XML 的简称。直译为，异步的JS和XML。</li>\n<li>AJAX的实际意义是，不发生页面跳转、异步载入内容并改写页面内容的技术。</li>\n<li>AJAX也可以简单的理解为通过JS向服务器发送请求。</li>\n<li>回调函数</li>\n<li>AJAX这门技术很早就被发明，但是直到2005年被谷歌的大量使用，才在市场中流行起来，可以说Google为AJAX的推广起到到推波助澜的作用。</li>\n</ul>\n<h2 id=\"同步处理-amp-异步处理：\"><a href=\"#同步处理-amp-异步处理：\" class=\"headerlink\" title=\"同步处理&amp;异步处理：\"></a>同步处理&amp;异步处理：</h2><h3 id=\"同步处理：\"><a href=\"#同步处理：\" class=\"headerlink\" title=\"同步处理：\"></a>同步处理：</h3><ul>\n<li>AJAX出现之前，我们访问互联网时一般都是同步请求，也就是当我们通过一个页面向服务器发送一个请求时，在服务器响应结束之前，我们的整个页面是不能操作的，也就是直观上来看他是卡主不动的。</li>\n<li>这就带来了非常糟糕的用户体验。首先，同步请求时，用户只能等待服务器的响应，而不能做任何操作。其次，如果请求时间过长可能会给用户一个卡死的感觉。最后，同步请求的最大缺点就是即使整个页面中只有一小部分内容发生改变我们也要刷新整个页面。</li>\n</ul>\n<h3 id=\"异步处理：\"><a href=\"#异步处理：\" class=\"headerlink\" title=\"异步处理：\"></a>异步处理：</h3><ul>\n<li>而异步处理指的是我们在浏览网页的同时，通过AJAX向服务器发送请求，发送请求的过程中我们浏览网页的行为并不会收到任何影响，甚至主观上感知不到在向服务器发送请求。当服务器正常响应请求后，响应信息会直接发送到AJAX中，AJAX可以根据服务器响应的内容做一些操作。</li>\n<li>使用AJAX的异步请求基本上完美的解决了同步请求带来的问题。首先，发送请求时不会影响到用户的正常访问。其次，即使请求时间过长，用户不会有任何感知。最后，AJAX可以根据服务器的响应信息局部的修改页面，而不需要整个页面刷新。</li>\n</ul>\n<h4 id=\"同步处理问题；\"><a href=\"#同步处理问题；\" class=\"headerlink\" title=\"同步处理问题；\"></a>同步处理问题；</h4><ul>\n<li>请求：发送二次请求时，只能等上次请求响应后，才能执行</li>\n<li>效率：就算我们需要刷新局部，也必须刷新整个页面</li>\n</ul>\n<h4 id=\"异步解决问题\"><a href=\"#异步解决问题\" class=\"headerlink\" title=\"异步解决问题\"></a>异步解决问题</h4><ul>\n<li>请求：aJax请求不会影响其他请求</li>\n<li>效率：局部刷新</li>\n</ul>\n<h1 id=\"请求对象\"><a href=\"#请求对象\" class=\"headerlink\" title=\"请求对象\"></a>请求对象</h1><ul>\n<li>向服务器发送请求，毫无疑问需要使用Http协议，也就是我们需要通过JS来向服务器发送一个请求报文。这里我们来回顾一下请求报文的格式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求首行</span><br><span class=\"line\">请求头</span><br><span class=\"line\">空行</span><br><span class=\"line\">请求体</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这是一个请求报文的格式，那我们如果手动的创建这么一个报文格式来发送给服务器想必是非常麻烦呢，于是浏览器为我们提供了一个XMLHttpRequest对象。</li>\n</ul>\n<h2 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h2><ul>\n<li>XMLHttpRequest对象是AJAX中非常重要的对象，所有的AJAX操作都是基于该对象的。</li>\n<li>XMLHttpRequest对象用来封装请求报文，我们向服务器发送的请求信息全部都需要封装到该对象中。</li>\n<li>这里需要稍微注意一下，XMLHttpRequest对象并没有成为标准，但是现在的主流浏览器都支持该对象，而一些如IE6的老版本浏览器中的创建方式有一些区别，但是问题不大。</li>\n<li>获取XMLHttpRequest对象：<ul>\n<li>由于浏览器之间的差异，不同浏览器中获取XMLHttpRequest的方式不同，但总的来说一共有三种方式：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest()</span><br><span class=\"line\">\t目前主流浏览器都支持</span><br><span class=\"line\">var xhr = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;)</span><br><span class=\"line\">\tIE6支持的方式</span><br><span class=\"line\">var xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</span><br><span class=\"line\">\tIE5.5一下支持的方式</span><br></pre></td></tr></table></figure>\n<ul>\n<li>根据三种不同的方式编写通用方法来获取XMLHttpRequest对象：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取XMLHttpRequest的通用方法</span><br><span class=\"line\">function getXMLHttpRequest()&#123;</span><br><span class=\"line\">\tvar xhr;</span><br><span class=\"line\">\ttry&#123;</span><br><span class=\"line\">\t\t//大部分浏览器都支持</span><br><span class=\"line\">\t\txhr = new XMLHttpRequest();</span><br><span class=\"line\">\t&#125;catch(e)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\t//如果不支持，在这里捕获异常并且采用IE6支持的方式</span><br><span class=\"line\">\t\t\txhr = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);</span><br><span class=\"line\">\t\t&#125;catch(e)&#123;</span><br><span class=\"line\">\t\t\t//如果还不支持，在这里捕获异常并采用IE5支持的方式</span><br><span class=\"line\">\t\t\txhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn xhr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"XMLHttpRequest对象的方法：\"><a href=\"#XMLHttpRequest对象的方法：\" class=\"headerlink\" title=\"XMLHttpRequest对象的方法：\"></a>XMLHttpRequest对象的方法：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(method,url,async)</span><br><span class=\"line\">\topen()用于设置请求的基本信息，接收三个参数。</span><br><span class=\"line\">        1.\tmethod</span><br><span class=\"line\">            请求的方法：get或post</span><br><span class=\"line\">        \t接收一个字符串</span><br><span class=\"line\">        2.\turl</span><br><span class=\"line\">        \t请求的地址，接收一个字符串</span><br><span class=\"line\">        3.\tAssync</span><br><span class=\"line\">        \t发送的请求是否为异步请求，接收一个布尔值。</span><br><span class=\"line\">        \ttrue 是异步请求</span><br><span class=\"line\">        \tfalse 不是异步请求（同步请求）</span><br><span class=\"line\">send(string)</span><br><span class=\"line\">\tsend()用于将请求发送给服务器，可以接收一个参数</span><br><span class=\"line\">        1.\tstring参数</span><br><span class=\"line\">        \t该参数只在发送post请求时需要。</span><br><span class=\"line\">        \tstring参数用于设置请求体</span><br><span class=\"line\">setRequestHeader(header,value)</span><br><span class=\"line\">\t用于设置请求头</span><br><span class=\"line\">        1.\theader参数</span><br><span class=\"line\">        \t字符串类型，要设置的请求头的名字</span><br><span class=\"line\">        2.\tvalue参数</span><br><span class=\"line\">        \t字符串类型，要设置的请求头的值</span><br></pre></td></tr></table></figure>\n<h2 id=\"XMLHttpRequest对象的属性：\"><a href=\"#XMLHttpRequest对象的属性：\" class=\"headerlink\" title=\"XMLHttpRequest对象的属性：\"></a>XMLHttpRequest对象的属性：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readyState</span><br><span class=\"line\">\t描述XMLHttpRequest的状态</span><br><span class=\"line\">\t一共有五种状态分别对应了五个数字：</span><br><span class=\"line\">    \t0 ：请求尚未初始化，open()尚未被调用</span><br><span class=\"line\">    \t1 ：服务器连接已建立，send()尚未被调用</span><br><span class=\"line\">    \t2 ：请求已接收，服务器尚未响应</span><br><span class=\"line\">    \t3 ：请求已处理，正在接收服务器发送的响应</span><br><span class=\"line\">    \t4 ：请求已处理完毕，且响应已就绪。</span><br><span class=\"line\">status</span><br><span class=\"line\">\t请求的响应码</span><br><span class=\"line\">    \t200 响应成功</span><br><span class=\"line\">    \t404 页面为找到</span><br><span class=\"line\">    \t500 服务器内部错误 </span><br><span class=\"line\"></span><br><span class=\"line\">… … … …</span><br><span class=\"line\">onreadystatechange</span><br><span class=\"line\">\t该属性需要指向一个函数</span><br><span class=\"line\">\t该函数会在readyState属性发生改变时被调用</span><br><span class=\"line\">responseText</span><br><span class=\"line\">\t获得字符串形式的响应数据。</span><br><span class=\"line\">responseXML（用的比较少）</span><br><span class=\"line\">\t获得 XML 形式的响应数据。</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><ul>\n<li>使用AJAX发送GET请求</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取xhr对象</span><br><span class=\"line\">var xhr = getXMLHttpRequest();</span><br><span class=\"line\">//设置请求信息</span><br><span class=\"line\">xhr.open(&quot;get&quot;,&quot;AjaxServlet?&amp;t=&quot;+Math.random(),true);</span><br><span class=\"line\">//发送请求</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\">//监听请求状态</span><br><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">//当响应完成</span><br><span class=\"line\">\tif(xhr.readyState == 4)&#123;</span><br><span class=\"line\">\t\t//且状态码为200时</span><br><span class=\"line\">\t\tif(xhr.status == 200)&#123;</span><br><span class=\"line\">\t\t\t//接收响应信息（文本形式）</span><br><span class=\"line\">\t\t\tvar text = xhr.responseText;</span><br><span class=\"line\">\t\t\t//弹出消息</span><br><span class=\"line\">\t      alert(text);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这是一个最简单的AJAX代码，向AjaxServlet发送了一个get请求，并且在页面中输出响应的内容</p>\n<ul>\n<li>使用AJAX发送POST请求</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取xhr对象</span><br><span class=\"line\">var xhr = getXMLHttpRequest();</span><br><span class=\"line\">//设置请求信息</span><br><span class=\"line\">xhr.open(&quot;post&quot;,&quot;2.jsp&quot;,true);</span><br><span class=\"line\">//设置请求头</span><br><span class=\"line\">xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">//发送请求</span><br><span class=\"line\">xhr.send(&quot;hello=123456&quot;);</span><br><span class=\"line\">//监听请求状态</span><br><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">//当响应完成</span><br><span class=\"line\">if(xhr.readyState == 4)&#123;</span><br><span class=\"line\">\t//且状态码为200时</span><br><span class=\"line\">\tif(xhr.status == 200)&#123;</span><br><span class=\"line\">\t\t//接收响应信息（文本形式）</span><br><span class=\"line\">\t\tvar text = xhr.responseText;</span><br><span class=\"line\">\t\t//弹出消息</span><br><span class=\"line\">\t\talert(text);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h1><ul>\n<li>上边两个示例返回都是一个字符串，那当我们需要返回一个复杂的数据时，比如说需要返回一个对象时，就需要定义一下数据的格式。</li>\n<li>AJAX一开始使用的时XML的数据格式，XML的数据格式非常简单清晰，容易编写，但是由于XML中包含了过多的标签，以及十分复杂的结构，解析起来也相对复杂，所以目前来讲，AJAX中已经几乎不使用XML来发送数据了。取而代之的是一项新的技术JSON。</li>\n<li>JSON是JavaScript Object Notation 的缩写，是JS提供的一种数据交换格式。</li>\n<li>JSON对象本质上就是一个JS对象，但是这个对象比较特殊，它可以直接转换为字符串，在不同语言中进行传递，通过工具又可以转换为其他语言中的对象。</li>\n<li>例，有如下一个JSON对象：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;“name”:”sunwukong” , ”age”:18 , ”address”:”beijing” &#125;</span><br><span class=\"line\">\t这个对象中有三个属性name、age和address</span><br><span class=\"line\">\t如果将该对象使用单引号引起了，那么他就变成了一个字符串</span><br><span class=\"line\">‘&#123;“name”:”sunwukong” , ”age”:18 , ”address”:”beijing” &#125;’</span><br><span class=\"line\">\t变成字符串后有一个好处，就是可以在不同语言之间传递。</span><br><span class=\"line\">\t比如，将JSON作为一个字符串发送给Servlet，在Java中就可以把JSON字符串转换为一个Java对象。</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSON通过6种数据类型来表示：\"><a href=\"#JSON通过6种数据类型来表示：\" class=\"headerlink\" title=\"JSON通过6种数据类型来表示：\"></a>JSON通过6种数据类型来表示：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串</span><br><span class=\"line\">\t例子：”字符串”</span><br><span class=\"line\">\t注意：不能使用单引号</span><br><span class=\"line\">数字：</span><br><span class=\"line\">\t例子：123.4</span><br><span class=\"line\">布尔值：</span><br><span class=\"line\">\t例子：true、false</span><br><span class=\"line\">null值:</span><br><span class=\"line\">\t例子：null</span><br><span class=\"line\">对象</span><br><span class=\"line\">\t例子：&#123;“name”:”sunwukong”, ”age”:18&#125;</span><br><span class=\"line\">数组</span><br><span class=\"line\">\t例子：[1,”str”,true]</span><br></pre></td></tr></table></figure>\n<h2 id=\"在JS中操作JSON\"><a href=\"#在JS中操作JSON\" class=\"headerlink\" title=\"在JS中操作JSON\"></a>在JS中操作JSON</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建JSON对象</span><br><span class=\"line\">var json = &#123;“name1”:”value1”,”name2”:”value2” , “name3”:[1,”str”,true]&#125;;</span><br><span class=\"line\">var json = [&#123;“name1”:”value1”&#125;,&#123;“name2”:”value2”&#125;];</span><br><span class=\"line\">\tJSON对象转换为JSON字符串</span><br><span class=\"line\">\tJSON.stringify(JSON对象)</span><br><span class=\"line\">\tJSON字符串转换为JSON对象</span><br><span class=\"line\">\tJSON.parse(JSON字符串)</span><br></pre></td></tr></table></figure>\n<h2 id=\"在Java中操作JSON\"><a href=\"#在Java中操作JSON\" class=\"headerlink\" title=\"在Java中操作JSON\"></a>在Java中操作JSON</h2><ul>\n<li>在Java中可以从文件中读取JSON字符串，也可以是客户端发送的JSON字符串，所以第一个问题，我们先来看如何将一个JSON字符串转换成一个Java对象。</li>\n<li>首先解析JSON字符串我们需要导入第三方的工具，目前主流的解析JSON的工具大概有三种json-lib、jackson、gson。三种解析工具相比较json-lib的使用复杂，且效率较差。而Jackson和gson解析效率较高。使用简单，这里我们以gson为例讲解。</li>\n<li>Gson是Google公司出品的解析JSON工具，使用简单，解析性能好。</li>\n<li>Gson中解析JSON的核心是Gson的类，解析操作都是通过该类实例进行。</li>\n<li>废话不多说直接上代码。</li>\n</ul>\n<h3 id=\"解析外部文本文件中的JSON：\"><a href=\"#解析外部文本文件中的JSON：\" class=\"headerlink\" title=\"解析外部文本文件中的JSON：\"></a>解析外部文本文件中的JSON：</h3><h4 id=\"1-JSON字符串转换为对象\"><a href=\"#1-JSON字符串转换为对象\" class=\"headerlink\" title=\"1.    JSON字符串转换为对象\"></a>1.    JSON字符串转换为对象</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String json = &quot;&#123;\\&quot;name\\&quot;:\\&quot;张三\\&quot;,\\&quot;age\\&quot;:18&#125;&quot;;</span><br><span class=\"line\">Gson gson = new Gson();</span><br><span class=\"line\">//转换为集合</span><br><span class=\"line\">Map&lt;String,Object&gt; stuMap = gson.fromJson(json, Map.class);</span><br><span class=\"line\">//如果编写了相应的类也可以转换为指定对象</span><br><span class=\"line\">Student fromJson = gson.fromJson(json, Student.class);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2．对象转换为JSON字符串\"><a href=\"#2．对象转换为JSON字符串\" class=\"headerlink\" title=\"2．对象转换为JSON字符串\"></a>2．对象转换为JSON字符串</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student stu = new Student(&quot;李四&quot;, 23);</span><br><span class=\"line\">Gson gson = new Gson();</span><br><span class=\"line\">//&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:23&#125;</span><br><span class=\"line\">String json = gson.toJson(stu);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">Map&lt;String , Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">map.put(&quot;name&quot;, &quot;孙悟空&quot;);</span><br><span class=\"line\">map.put(&quot;age&quot;, 30);</span><br><span class=\"line\">//&#123;&quot;age&quot;:30,&quot;name&quot;:&quot;孙悟空&quot;&#125;</span><br><span class=\"line\">String json2 = gson.toJson(map);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">List&lt;Student&gt; list = new ArrayList&lt;Student&gt;();</span><br><span class=\"line\">list.add(new Student(&quot;八戒&quot;, 18));</span><br><span class=\"line\">list.add(new Student(&quot;沙僧&quot;, 28));</span><br><span class=\"line\">list.add(new Student(&quot;唐僧&quot;, 38));</span><br><span class=\"line\">//[&#123;&quot;name&quot;:&quot;八戒&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;沙僧&quot;,&quot;age&quot;:28&#125;,&#123;&quot;name&quot;:&quot;唐僧&quot;,&quot;age&quot;:38&#125;]</span><br><span class=\"line\">String json3 = gson.toJson(list);</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"13 web-Listener(监听器)","url":"http://yoursite.com/2017/12/01/32 web-Listener(监听器)/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><ul>\n<li>Listener用于监听JavaWeb程序中的事件。</li>\n<li>例如：ServletContext、HttpSession、ServletRequest的创建、修改和删除。</li>\n<li>Listener和我们之前学习的JS中的事件处理机制类似。在JS中，当我们触发某个事件后（例如：点击一个按钮）程序会调用一个响应函数来处理事件。同样的，在JavaWeb中，我们可以为某些事件来设置监听器，当事件被触发时，监听器中的指定方法将会被调用。</li>\n</ul>\n<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><ul>\n<li>Listener的原理是基于观察者模式的，所谓观察者模式简单来说，就是当被观察者的特定事件被触发（一般这某些方法被调用）后，会通知观察者（调用观察者的方法），观察者可以在自己的方法中来对事件做一些处理。</li>\n<li>在我们的JavaWeb中，观察者就是Listener，而被观察者可能有三个ServletContext、HttpSession、ServletRequest。而事件指的就是这些对象的创建、修改和删除等。</li>\n</ul>\n<h1 id=\"监听器的分类\"><a href=\"#监听器的分类\" class=\"headerlink\" title=\"监听器的分类\"></a>监听器的分类</h1><h2 id=\"1-监听对象的创建与销毁\"><a href=\"#1-监听对象的创建与销毁\" class=\"headerlink\" title=\"1.    监听对象的创建与销毁\"></a>1.    监听对象的创建与销毁</h2><h3 id=\"ServletContextListener\"><a href=\"#ServletContextListener\" class=\"headerlink\" title=\"ServletContextListener\"></a>ServletContextListener</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听ServletContext对象的创建与销毁</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void contextInitialized ( ServletContextEvent sce );</span><br><span class=\"line\">    \tServletContext创建时调用</span><br><span class=\"line\">\tpublic void contextDestroyed ( ServletContextEvent sce );</span><br><span class=\"line\">    \tServletContext销毁时调用</span><br><span class=\"line\">ServletContextEvent对象</span><br><span class=\"line\">    作用：public ServletContext getServletContext ()</span><br><span class=\"line\">    \t获取ServletContext对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"HttpSessionListener\"><a href=\"#HttpSessionListener\" class=\"headerlink\" title=\"HttpSessionListener\"></a>HttpSessionListener</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听HttpSession对象的创建与销毁</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void sessionCreated ( HttpSessionEvent se );</span><br><span class=\"line\">    \tHttpSession对象创建时调用</span><br><span class=\"line\">\tpublic void sessionDestroyed ( HttpSessionEvent se );</span><br><span class=\"line\">    \tHttpSession对象销毁时调用</span><br><span class=\"line\">HttpSessionEvent对象</span><br><span class=\"line\">\t作用：public HttpSession getSession ()</span><br><span class=\"line\">\t获取当前HttpSession对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"ServletRequestListener\"><a href=\"#ServletRequestListener\" class=\"headerlink\" title=\"ServletRequestListener\"></a>ServletRequestListener</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听ServletRequest对象的创建与销毁</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void requestInitialized ( ServletRequestEvent sre );</span><br><span class=\"line\">    \tServletRequest对象创建时调用</span><br><span class=\"line\">\tpublic void requestDestroyed ( ServletRequestEvent sre );</span><br><span class=\"line\">    \tServletRequest对象销毁时调用</span><br><span class=\"line\">\tServletRequestEvent对象</span><br><span class=\"line\">\t作用：</span><br><span class=\"line\">    \tpublic ServletRequest getServletRequest ();</span><br><span class=\"line\">        \t获取当前的ServletRequest对象。</span><br><span class=\"line\">    \tpublic ServletContext getServletContext ();</span><br><span class=\"line\">        \t获取当前项目的ServletContext对象。</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建与销毁监听器的使用：\"><a href=\"#创建与销毁监听器的使用：\" class=\"headerlink\" title=\"创建与销毁监听器的使用：\"></a>创建与销毁监听器的使用：</h4><ul>\n<li>三种创建与销毁的监听器使用起来基本一致。</li>\n<li>下边来编写一个ServletContext的监听器：<blockquote>\n<ul>\n<li>步骤：</li>\n<li>创建一个类实现ServletContextListener</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyServletContextListener implements ServletContextListener &#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;哈哈，我是ServletContext，我出生了&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;~~~~(&gt;_&lt;)~~~~，我是ServletContext，我要死了&quot;);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>在web.xml文件中注册监听器</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">&lt;listener-class&gt;com.atguigu.web.listener.MyServletContextListener&lt;/listener-class&gt;</span><br><span class=\"line\">&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>由于ServletContext对象在服务器启动时创建，停止时销毁。所以启动服务器时我们会发现contextInitialized()方法被调用，服务器停止时contextDestroyed()方法被调用。<br>ν    其他两个监听器和该监听器使用方法一样，不再多说。</li>\n</ul>\n<h2 id=\"2-监听对象的属性变化\"><a href=\"#2-监听对象的属性变化\" class=\"headerlink\" title=\"2. 监听对象的属性变化\"></a>2. 监听对象的属性变化</h2><h4 id=\"ServletContextAttributeListener\"><a href=\"#ServletContextAttributeListener\" class=\"headerlink\" title=\"ServletContextAttributeListener\"></a>ServletContextAttributeListener</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听ServletContext中属性的创建、修改和销毁</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void attributeAdded(ServletContextAttributeEvent scab);</span><br><span class=\"line\">    \t向ServletContext中添加属性时调用</span><br><span class=\"line\">\tpublic void attributeRemoved(ServletContextAttributeEvent scab);</span><br><span class=\"line\">    \t从ServletContext中移除属性时调用</span><br><span class=\"line\">\tpublic void attributeReplaced(ServletContextAttributeEvent scab);</span><br><span class=\"line\">    \t当ServletContext中的属性被修改时调用</span><br><span class=\"line\"></span><br><span class=\"line\">ServletContextAttributeEvent对象</span><br><span class=\"line\">    作用：</span><br><span class=\"line\">    \tpublic String getName() </span><br><span class=\"line\">         \t获取修改或添加的属性名</span><br><span class=\"line\">    \tpublic Object getValue()</span><br><span class=\"line\">        \t获取被修改或添加的属性值</span><br><span class=\"line\">    \tpublic ServletContext getServletContext ()</span><br><span class=\"line\">        \t获取当前WEB应用的ServletContext对象</span><br></pre></td></tr></table></figure>\n<h4 id=\"HttpSessionAttributeListener\"><a href=\"#HttpSessionAttributeListener\" class=\"headerlink\" title=\"HttpSessionAttributeListener\"></a>HttpSessionAttributeListener</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听HttpSession中属性的创建、修改和销毁</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void attributeAdded ( HttpSessionBindingEvent se );</span><br><span class=\"line\">    \t向HttpSession中添加属性时调用</span><br><span class=\"line\">\tpublic void attributeRemoved(HttpSessionBindingEvent se);</span><br><span class=\"line\">    \t从HttpSession中移除属性时调用</span><br><span class=\"line\">\tpublic void attributeReplaced(HttpSessionBindingEvent se);</span><br><span class=\"line\">    \t当HttpSession中的属性被修改时调用</span><br><span class=\"line\">    </span><br><span class=\"line\">    HttpSessionBindingEvent对象</span><br><span class=\"line\">        作用：</span><br><span class=\"line\">        \tpublic String getName() </span><br><span class=\"line\">            \t获取修改或添加的属性名</span><br><span class=\"line\">        \tpublic Object getValue()</span><br><span class=\"line\">            \t获取被修改或添加的属性值</span><br><span class=\"line\">        \tpublic HttpSession getSession ()</span><br><span class=\"line\">            \t获取当前的HttpSession对象</span><br></pre></td></tr></table></figure>\n<h4 id=\"ServletRequestAttributeListener\"><a href=\"#ServletRequestAttributeListener\" class=\"headerlink\" title=\"ServletRequestAttributeListener\"></a>ServletRequestAttributeListener</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听ServletRequest中属性的创建、修改和销毁</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void attributeAdded (ServletRequestAttributeEvent srae );</span><br><span class=\"line\">    \t向ServletRequest中添加属性时调用</span><br><span class=\"line\">\tpublic void attributeRemoved(ServletRequestAttributeEvent srae);</span><br><span class=\"line\">    \t从ServletRequest中移除属性时调用</span><br><span class=\"line\">\tpublic void attributeReplaced(ServletRequestAttributeEvent srae);</span><br><span class=\"line\">    \t当ServletRequest中的属性被修改时调用</span><br><span class=\"line\"></span><br><span class=\"line\">\tServletRequestAttributeEvent对象</span><br><span class=\"line\">\t作用：</span><br><span class=\"line\">    \tpublic String getName() </span><br><span class=\"line\">        \t获取修改或添加的属性名</span><br><span class=\"line\">    \tpublic Object getValue()</span><br><span class=\"line\">        \t获取被修改或添加的属性值</span><br><span class=\"line\">    \tpublic ServletRequest getServletRequest () </span><br><span class=\"line\">        \t获取当前的ServletRequest对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象属性变化监听器的使用：\"><a href=\"#对象属性变化监听器的使用：\" class=\"headerlink\" title=\"对象属性变化监听器的使用：\"></a>对象属性变化监听器的使用：</h3><ul>\n<li>同样三种对象属性变化监听器使用方式类似，下边以request属性监听器为例。<ul>\n<li>创建一个类实现ServletRequestAttributeListener接口</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ReqAttrListener implements ServletRequestAttributeListener &#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void attributeAdded(ServletRequestAttributeEvent srae) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;request域中添加一个属性&quot;+srae.getName()+&quot;=&quot;+srae.getValue());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void attributeRemoved(ServletRequestAttributeEvent srae) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;request域中移除一个属性&quot;+srae.getName()+&quot;=&quot;+srae.getValue());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void attributeReplaced(ServletRequestAttributeEvent srae) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;request域中一个属性被修改了&quot;+srae.getName()+&quot;=&quot;+srae.getValue());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在web.xml文件中注册监听器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">\t\t&lt;listener-class&gt;com.atguigu.web.listener.ReqAttrListener&lt;/listener-class&gt;</span><br><span class=\"line\">\t&lt;/listener&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如此当我们操作request域中的属性时，对应方法将会被调用。</li>\n</ul>\n<h2 id=\"3-监听Session内的对象\"><a href=\"#3-监听Session内的对象\" class=\"headerlink\" title=\"3. 监听Session内的对象\"></a>3. 监听Session内的对象</h2><h3 id=\"HttpSessionBindingListener\"><a href=\"#HttpSessionBindingListener\" class=\"headerlink\" title=\"HttpSessionBindingListener\"></a>HttpSessionBindingListener</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听某个对象在session域中的创建与移除。</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void valueBound(HttpSessionBindingEvent event)</span><br><span class=\"line\">    \t该类的实例被放到Session域中时调用</span><br><span class=\"line\">\tpublic void valueUnbound(HttpSessionBindingEvent event)</span><br><span class=\"line\">    \t该类的实例从Session中移除时调用</span><br><span class=\"line\">HttpSessionBindingEvent对象</span><br><span class=\"line\">作用：</span><br><span class=\"line\">\tpublic HttpSession getSession ()</span><br><span class=\"line\">    \t获取HttpSession对象</span><br><span class=\"line\">\tpublic String getName()</span><br><span class=\"line\">    \t获取操作的属性名</span><br><span class=\"line\">\tpublic Object getValue()</span><br><span class=\"line\">    \t获取操作的属性值</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用：要监听哪一个类，直接使该类实现HttpSessionB</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">indingListener接口即可。</span><br><span class=\"line\">public class Student implements HttpSessionBindingListener &#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void valueBound(HttpSessionBindingEvent event) &#123;</span><br><span class=\"line\">\t\t//doSomeThing</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void valueUnbound(HttpSessionBindingEvent event) &#123;</span><br><span class=\"line\">\t\t//doSomeThing</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HttpSessionActivationListener\"><a href=\"#HttpSessionActivationListener\" class=\"headerlink\" title=\"HttpSessionActivationListener\"></a>HttpSessionActivationListener</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：监听某个对象在session中的序列化与反序列化。</span><br><span class=\"line\">方法：</span><br><span class=\"line\">\tpublic void sessionWillPassivate(HttpSessionEvent se)</span><br><span class=\"line\">    \t该类实例和Session一起钝化到硬盘时调用</span><br><span class=\"line\">\tpublic void sessionDidActivate(HttpSessionEvent se)</span><br><span class=\"line\">    \t该类实例和Session一起活化到内存时调用</span><br><span class=\"line\">HttpSessionEvent对象</span><br><span class=\"line\">作用：</span><br><span class=\"line\">\tpublic HttpSession getSession ()</span><br><span class=\"line\">    \t获取HttpSession对象</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用：要监听哪一个类，直接使该类实现HttpSessionActivationListener接口即可。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student implements HttpSessionActivationListener , Serializable &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void sessionWillPassivate(HttpSessionEvent se) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void sessionDidActivate(HttpSessionEvent se) &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：这里为了是Student对象可以正常序列化到硬盘上，还需要让类实现java.io.Serializable接口</li>\n</ul>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"12 web-Filter(过滤器)","url":"http://yoursite.com/2017/11/28/31 web-Filter(过滤器)/","content":"<h1 id=\"Filter简介\"><a href=\"#Filter简介\" class=\"headerlink\" title=\"Filter简介\"></a>Filter简介</h1><ul>\n<li>Filter中文意思为过滤器。顾名思义，过滤器可在浏览器以及目标资源之间起到一个过滤的作用。例如：水净化器，可以看成是生活中的一个过滤器，他可以将污水中的杂质过滤，从而使进入的污水变成净水。</li>\n<li>对于WEB应用来说，过滤器是一个驻留在服务器中的WEB组件，他可以截取客户端和WEB资源之间的请求和响应信息。</li>\n<li>WEB资源可能包括Servlet、JSP、HTML页面等</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606152116.png\" alt></p>\n<ul>\n<li>当服务器收到特定的请求后，会先将请求交给过滤器，程序员可以在过滤器中对请求信息进行读取修改等操作，然后将请求信息再发送给目标资源。目标资源作出响应后，服务器会再次将响应转交给过滤器，在过滤器中同样可以对响应信息做一些操作，然后再将响应发送给服务器。</li>\n<li>也就是说过滤器可以在WEB资源收到请求之前，浏览器收到响应之前，对请求和响应信息做一些相应的操作。</li>\n<li>在一个WEB应用中可以部署多个过滤器，多个过滤器就组成了一个过滤器链，请求和响应必须在经过多个过滤器后才能到达目标；</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606152327.png\" alt></p>\n<ul>\n<li>过滤器不是必须将请求传送到下一个过滤器（或WEB资源），也可以自己来处理请求，发送响应。</li>\n</ul>\n<h1 id=\"Filter相关接口\"><a href=\"#Filter相关接口\" class=\"headerlink\" title=\"Filter相关接口\"></a>Filter相关接口</h1><ul>\n<li>编写Filter和编写Servlet类似，都需要实现接口。</li>\n<li>编写Filter需要实现Filter接口，我们来看一下Filter接口的主要方法：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606152426.png\" alt></p>\n<ul>\n<li>Filter接口，实现Filter需要实现该接口</li>\n</ul>\n<ol>\n<li>init()方法用于初始化Filter  </li>\n<li>doFilter()作用和service()方法类似，是过滤请求和响应的主要方法。  </li>\n<li>destroy()用于在Filter对象被销毁前做一些收尾工作。如：释放资源等。  </li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606152507.png\" alt></p>\n<ul>\n<li>FilterConfig对象在服务器调用init()方法时传递进来。</li>\n</ul>\n<ol>\n<li>getFilterName() 获取Filter的名字  </li>\n<li>getServletContext() 获取ServletContext对象（即application）</li>\n<li>getInitParameter() 获取Filter的初始化参数  </li>\n<li>getInitParameterNames() 获取所有初始化参数的名字</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606152559.png\" alt></p>\n<ul>\n<li>FilterChain对象是在doFilter()方法被调用时作为参数传递进来的。</li>\n</ul>\n<ol>\n<li>doFilter()方法用于调用Filter链上的下一个过滤器，如果当前过滤器为最后一个过滤器则将请求发送到目标资源。</li>\n</ol>\n<h1 id=\"创建Filter\"><a href=\"#创建Filter\" class=\"headerlink\" title=\"创建Filter\"></a>创建Filter</h1><h2 id=\"1-实现Filter接口\"><a href=\"#1-实现Filter接口\" class=\"headerlink\" title=\"1    实现Filter接口\"></a>1    实现Filter接口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HelloFilter implements Filter &#123;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void doFilter(ServletRequest request, ServletResponse response,</span><br><span class=\"line\">\t\t\tFilterChain chain) throws IOException, ServletException &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Hello Filter&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void destroy() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在web-xml注册Filter\"><a href=\"#2-在web-xml注册Filter\" class=\"headerlink\" title=\"2    在web.xml注册Filter\"></a>2    在web.xml注册Filter</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;filter&gt;</span><br><span class=\"line\">\t&lt;filter-name&gt;HelloFilter&lt;/filter-name&gt;</span><br><span class=\"line\">\t&lt;filter-class&gt;com.atguigu.web.filter.HelloFilter&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">\t&lt;filter-name&gt;HelloFilter&lt;/filter-name&gt;</span><br><span class=\"line\">\t&lt;url-pattern&gt;/index.html&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我们编写的这个Filter用来过滤发送到index.html的请求。</li>\n<li>在doFilter()方法中我们只写了一个打印语句，并没有将请求转交给目标资源处理。</li>\n<li>所以这个过滤器的效果是我们将不能正常查看到index.html页面，在访问index.html时页面上将会是一片空白。同时，控制台将输出Hello Filter。</li>\n<li>如果想要index.html正确显示，需要在输出语句后，调用一个chain.doFilter(request, response)将请求放行。</li>\n<li>Filter的配置文件和Servlet的配置文件类似</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter-name 指定的是过滤器的名字</span><br><span class=\"line\">filter-class 指定的是过滤器的全类名</span><br><span class=\"line\">url-pattern 指定的是需要过滤器处理的请求地址</span><br></pre></td></tr></table></figure>\n<ul>\n<li>除此之外在filter-mapping还有一个子标签dispatcher，该标签用来指定需要Filter处理的请求类型，该标签可以配置四个值：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;</span><br><span class=\"line\">\t用户直接访问资源时，会调用Filter</span><br><span class=\"line\">&lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;</span><br><span class=\"line\">\t通过转发访问时，会调用Filter</span><br><span class=\"line\">&lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;</span><br><span class=\"line\">\t通过动态包含获取时，会调用Filter</span><br><span class=\"line\">&lt;dispatcher&gt;ERROR&lt;/dispatcher&gt;</span><br><span class=\"line\">\t当通过异常处理访问页面时，会调用Filter</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这四种情况可以设置一个，也可以同时设置多个，如果不设置那么默认为REQUEST。</li>\n</ul>\n<h2 id=\"Filter的生命周期\"><a href=\"#Filter的生命周期\" class=\"headerlink\" title=\"Filter的生命周期\"></a>Filter的生命周期</h2><p>Filter的生命周期和Servlet类似</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造器：创建Filter实例是调用，Filter实例服务器一旦启动就会被创建</span><br><span class=\"line\"></span><br><span class=\"line\">init()：实例创建后马上被调用，用来对Filter做一些初始化的操作</span><br><span class=\"line\"></span><br><span class=\"line\">doFilter()：Filter的主要方法，用来完成过滤器主要功能的方法，每次访问目标资源时都会调用。</span><br><span class=\"line\"></span><br><span class=\"line\">destroy()：服务器停止时调用，用来释放资源。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Filter的目标资源\"><a href=\"#Filter的目标资源\" class=\"headerlink\" title=\"Filter的目标资源\"></a>Filter的目标资源</h2><p> Filter的目标资源指的是需要调用Filter来进行过滤处理的资源，例如上文我们配置的/index.html就是我们的目标资源，当我们访问项目根目录下的index.html时就会调用HelloFilter来进行过滤。</p>\n<ul>\n<li>目标资源的配置方式主要有两种：<ul>\n<li>第一种：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1通过filter-mapping的url-pattern来配置</span><br><span class=\"line\">这里的配置和Servlet的url-pattern的规则相同</span><br><span class=\"line\">    精确匹配：/路径/资源名。</span><br><span class=\"line\">        如：/index.html 、/hello/index.jsp 、 /client/LoginServlet</span><br><span class=\"line\">        精确匹配只要在请求地址完全一样时才会调用Filter</span><br><span class=\"line\">    路径匹配：/路径名/*</span><br><span class=\"line\">        如：/hello/* 、/*</span><br><span class=\"line\">        路径匹配只要是所请求的资源是在设置的路径下就会调用Filter</span><br><span class=\"line\">            如：/hello/* 只要访问 项目根目录/hello/ 下的任意资源就会调用Filter</span><br><span class=\"line\">            如: /* 只要访问 项目根目录下的资源就会调用Filter</span><br><span class=\"line\">    后缀匹配：*.后缀名</span><br><span class=\"line\">        如：*.jsp 、 *.html</span><br><span class=\"line\">        后缀匹配只要访问的资源路径是以指定后缀结尾就会调用Filter</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二种<ul>\n<li>通过filter-mapping中的servlet-name来指定要过滤的Servlet</li>\n<li>如：以下是一个项目中的web.xml配置文件，在项目中有一个Filter加做HelloFilter，一个Servlet叫做HelloServlet。在Filter的filter-mapping中增加了一个servlet-name标签，将该标签的值设置成Servlet的名字，在访问Servlet时就会调用该过滤器过滤请求。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">  &lt;filter-name&gt;HelloFilter&lt;/filter-name&gt;</span><br><span class=\"line\">  &lt;filter-class&gt;com.atguigu.web.filter.HelloFilter&lt;/filter-class&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">  &lt;filter-name&gt;HelloFilter&lt;/filter-name&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;servlet-class&gt;com.atguigu.web.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;url-pattern&gt;/HelloServlet&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Filter的执行顺序\"><a href=\"#Filter的执行顺序\" class=\"headerlink\" title=\"Filter的执行顺序\"></a>Filter的执行顺序</h1><ul>\n<li>我们可以为一个资源配置多个Filter，当配置多个Filter以后就有一个执行顺序的问题，实际执行顺序是按照在web.xml文件中servlet-mapping的顺序决定的，如果顺序越靠前越先被调用。</li>\n</ul>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"11 web-会话控制-Cookie","url":"http://yoursite.com/2017/11/21/30 web-会话控制-Cookie/","content":"<h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><h2 id=\"Cookie简介\"><a href=\"#Cookie简介\" class=\"headerlink\" title=\"Cookie简介\"></a>Cookie简介</h2><ul>\n<li>    HTTP是无状态协议，服务器不能记录浏览器的访问状态，也就是说服务器不能区分中两次请求是否由一个客户端发出。这样的设计严重阻碍的Web程序的设计。如：在我们进行网购时，买了一条裤子，又买了一个手机。由于http协议是无状态的，如果不通过其他手段，服务器是不能知道用户到底买了什么。而Cookie就是解决方案之一。</li>\n<li>    Cookie实际上就是服务器保存在浏览器上的一段信息。浏览器有了Cookie之后，每次向服务器发送请求时都会同时将该信息发送给服务器，服务器收到请求后，就可以根据该信息处理请求。</li>\n<li>    例如：我们上文说的网上商城，当用户向购物车中添加一个商品时，服务器会将这个条信息封装成一个Cookie发送给浏览器，浏览器收到Cookie，会将它保存在内存中(注意这里的内存是本机内存，而不是服务器内存)，那之后每次向服务器发送请求，浏览器都会携带该Cookie，而服务器就可以通过读取Cookie来判断用户到底买了哪些商品。当用户进行结账操作时，服务器就可以根据Cookie的信息来做结算。</li>\n<li>Cookie的用途：<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked>     网上商城的购物车</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked>     保持用户登录状态</li>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked>     163邮箱的7天免登陆</li>\n</ul>\n</li>\n<li><p>    Cookie的原理：  </p>\n<blockquote>\n<p>总的来看Cookie像是服务器发给浏览器的一张“会员卡”，浏览器每次向服务器发送请求时都会带着这张“会员卡”，当服务器看到这张“会员卡”时就可以识别浏览器的身份。</p>\n</blockquote>\n<blockquote>\n<p>   实际上这个所谓的“会员卡”就是服务器发送的一个响应头：</p>\n<blockquote>\n<ul>\n<li>Set-Cookie这个响应头就是服务器在向服务器发“会员卡”，这个响应头的名字是Set-Cookie，后边JSESSIONID=95A92EC1D7CCB4ADFC24584CB316382E和Path=/Test_cookie，是两组键值对的结构就是服务器为这个“会员卡”设置的信息。浏览器收到该信息后就会将它保存到内存或硬盘中。    </li>\n<li>当浏览器再次向服务器发送请求时就会携带这个Cookie信息：  </li>\n<li>这是浏览器发送的请求报文，中间画红框的就是Cookie信息，这里可以理解为浏览器这次带着“会员卡”再次访问服务器。<br>-于是服务器就可以根据Cookie信息来判断浏览器的状态。  </li>\n</ul>\n</blockquote>\n</blockquote>\n</li>\n<li>Cookie的缺点<blockquote>\n<ul>\n<li>Cookie最为请求或响应报文发送，无形中增加了网络流量。</li>\n<li>Cookie是明文传送的安全性差。  </li>\n<li>各个浏览器对Cookie有限制，使用上有局限  </li>\n</ul>\n</blockquote>\n<h1 id=\"使用Cookie\"><a href=\"#使用Cookie\" class=\"headerlink\" title=\"使用Cookie\"></a>使用Cookie</h1></li>\n<li>使用Cookie主要是先创建Cookie对象，然后将Cookie信息发送给浏览器，浏览器收到Cookie后会自动保存，然后我们可以在下次浏览器发送请求时读取Cookie信息。  <h2 id=\"设置Cookie\"><a href=\"#设置Cookie\" class=\"headerlink\" title=\"设置Cookie\"></a>设置Cookie</h2></li>\n</ul>\n<ol>\n<li>创建一个CookieServlet  </li>\n<li>在Servlet的doPost()方法中编写如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个Cookie对象Cookie cookie = new Cookie(&quot;username&quot;, &quot;zhangsan&quot;);//将Cookie对象放入response对象中response.addCookie(cookie);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在浏览器中访问该Servlet，会发现响应头中出现如下内容：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-Cookie: username=zhangsan</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>如此就成功的向浏览器设置了一个Cookie，当我们在刷新页面时会发现浏览器的请求头中出现如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: username=zhangsan</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>同样我们还可以同时设置多个Cookie：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建一个Cookie对象Cookie cookie1 = new</span><br><span class=\"line\">Cookie(&quot;username&quot;, &quot;zhangsan&quot;);Cookie cookie2 = newCookie(&quot;password&quot;, &quot;123456&quot;);</span><br><span class=\"line\">Cookie cookie3 = new Cookie(&quot;age&quot;, &quot;20&quot;);</span><br><span class=\"line\">//将Cookie对象放入response对象中</span><br><span class=\"line\">response.addCookie(cookie1);</span><br><span class=\"line\">response.addCookie(cookie2);</span><br><span class=\"line\">response.addCookie(cookie3);</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>浏览器会以一下形式发送Cookie：  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie: username=zhangsan;</span><br><span class=\"line\">password=123456;</span><br><span class=\"line\">age=20</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>总之，设置Cookie就是两个步骤：</li>\n</ol>\n<ul>\n<li>创建Cookie对象</li>\n<li>将Cookie对象加入到response中</li>\n</ul>\n<h2 id=\"读取Cookie\"><a href=\"#读取Cookie\" class=\"headerlink\" title=\"读取Cookie\"></a>读取Cookie</h2><ul>\n<li>读取Cookie主要指从读取浏览器中携带的Cookie</li>\n<li>只需要通过一个方法就可以得到浏览器中的Cookie，在Servlet或JSP中通过request对象调用getCookies()方法可以获得浏览器传送过来的所有Cookie对象，返回的是一个Cookie数组，通过遍历Cookie数组可以获得所有的Cookie信息。</li>\n<li>如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过request的getCookies()方法获的Cookie数组</span><br><span class=\"line\">Cookie[] cookies = request.getCookies();</span><br><span class=\"line\">//判断数组是否为空</span><br><span class=\"line\">if(cookies != null)&#123;</span><br><span class=\"line\">//如果不为空遍历数组</span><br><span class=\"line\">for(Cookie cookie : cookies)&#123;</span><br><span class=\"line\">//获取cookie的名字</span><br><span class=\"line\">String name = cookie.getName();</span><br><span class=\"line\">//获取cookie的键</span><br><span class=\"line\">String value = cookie.getValue();</span><br><span class=\"line\">System.out.println(name+&quot;---&quot;+value);    &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Cookie有效时间\"><a href=\"#Cookie有效时间\" class=\"headerlink\" title=\"Cookie有效时间\"></a>Cookie有效时间</h2><ul>\n<li>经过上边的介绍我们已经知道Cookie是存储在浏览器中的，但是可想而知一般情况下浏览器不可能永远保存一个Cookie，一来是占用硬盘空间，再来一个Cookie可能只在某一时刻有用没必要长久保存。</li>\n<li>所以我们还需要为Cookie设置一个有效时间。</li>\n<li>通过Cookie对象的setMaxAge()可以设置Cookie的有效时间。</li>\n<li>其中setMaxAge()接收一个int型的参数，来设置有效时间。参数主要有一下四种情况：<ul>\n<li>设置为0，setMaxAge(0)<ul>\n<li>Cookie立即失效，下次浏览器发送请求将不会在携带该Cookie</li>\n</ul>\n</li>\n<li>设置大于0，setMaxAge(60)<ul>\n<li>表示有效的秒数60就代表60秒即1分钟，也就是Cookie在1分钟后失效。</li>\n</ul>\n</li>\n<li>设置小于0，setMaxAge(-1)<ul>\n<li>设置为负数表示当前会话有效。也就是关闭浏览器后Cookie失效</li>\n</ul>\n</li>\n<li>不设置<ul>\n<li>如果不设置失效时间，则默认当前会话有效。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cookie的路径\"><a href=\"#Cookie的路径\" class=\"headerlink\" title=\"Cookie的路径\"></a>Cookie的路径</h2><ul>\n<li>Cookie的路径指告诉浏览器访问那些地址时该携带该Cookie，我们知道浏览器会保存很多不同网站的Cookie，比如百度的Cookie，新浪的Cookie，腾讯的Cookie等等。那我们不可能访问百度的时候携带新浪的Cookie，也不可能访问每个网站时都带上所有的Cookie这是不现实的，所以往往我们还需要为Cookie设置一个Path属性，来告诉浏览器何时携带该Cookie。</li>\n<li>我们同过Cookie的setPath()来设置路径，这个路径是由浏览器来解析的所以/代表服务器的根目录。</li>\n<li>如：<ul>\n<li>设置为 /项目名/路径 à cookie.setPath(“/项目名/路径”)<ul>\n<li>这样设置只有访问“/项目名/路径”下的的资源才会携带Cookie</li>\n<li>如：/项目名/路径/1.jsp 、/项目名/路径/hello/2.jsp 等</li>\n</ul>\n</li>\n<li>如果不设置，默认会在访问“/项目名”下的资源时携带<ul>\n<li>如：“/项目名/index.jsp” 、 “/项目名/hello/index.jsp”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"HttpSession\"><a href=\"#HttpSession\" class=\"headerlink\" title=\"HttpSession\"></a>HttpSession</h1><ul>\n<li>使用Cookie有一个非常大的局限，就是如果Cookie很多，则无形的增加了客户端与服务端的数据传输量。而且由于浏览器对Cookie数量的限制，注定我们不能再Cookie中保存过多的信息，于是Session出现。</li>\n<li>Session的作用就是在服务器端保存一些用户的数据，然后传递给用户一个名字为JSESSIONID的Cookie，这个JESSIONID对应这个服务器中的一个Session对象，通过它就可以获取到保存用户信息的Session。</li>\n</ul>\n<h2 id=\"Session的工作原理\"><a href=\"#Session的工作原理\" class=\"headerlink\" title=\"Session的工作原理\"></a>Session的工作原理</h2><ul>\n<li>Session的创建<ul>\n<li>Session的创建时机是在request.getSession()方法第一次被调用时。</li>\n<li>Session被创建后，同时还会有一个名为JSESSIONID的Cookie被创建。</li>\n<li>这个Cookie的默认时效就是当前会话。</li>\n</ul>\n</li>\n<li>Session的使用<ul>\n<li>Session被创建后，对应的Cookie被保存到浏览器中，之后浏览器每次访问项目时都会携带该Cookie。</li>\n<li>当我们再次调用时会根据该JSESSIONID获取已经存在的Cookie，而不是在创建一个新的Cookie。</li>\n<li>如果Cookie中有JSESSIONID，但是JSESSIONID没有对应的Session存在，则会重新创建一个HttpSession对象，并重新设置JSESSIONID。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Session时效\"><a href=\"#Session时效\" class=\"headerlink\" title=\"Session时效\"></a>Session时效</h2><p><strong>基本原则</strong>  </p>\n<blockquote>\n<p>Session对象在服务器端不能长期保存，它是有时间限制的，超过一定时间没有被访问过的Session对象就应该释放掉，以节约内存。所以Session的有效时间并不是从创建对象开始计时，到指定时间后释放——而是从最后一次被访问开始计时，统计其“空闲”的时间。<br><strong>默认设置</strong><br>在全局web.xml中能够找到如下配置：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ==================== Default Session Configuration ================= --&gt; </span><br><span class=\"line\">&lt;!-- You can set the default session timeout (in minutes) for all newly   --&gt;  </span><br><span class=\"line\">&lt;!-- created sessions by modifying the value below.                       --&gt;    </span><br><span class=\"line\">&lt;session-config&gt;       </span><br><span class=\"line\">&lt;session-timeout&gt;30&lt;/session-timeout&gt;   </span><br><span class=\"line\">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure>\n<p>说明Session对象默认的最长有效时间为30分钟。</p>\n<ul>\n<li>手工设置<ul>\n<li>session.setMaxInactiveInterval(int seconds)</li>\n<li>session.getMaxInactiveInterval()</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>强制失效<ul>\n<li>session.invalidate()</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>可以使Session对象释放的情况<ul>\n<li>Session对象空闲时间达到了目标设置的最大值，自动释放</li>\n<li>Session对象被强制失效</li>\n<li>Web应用卸载</li>\n<li>服务器进程停止</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"URL重写\"><a href=\"#URL重写\" class=\"headerlink\" title=\"URL重写\"></a>URL重写</h2><ul>\n<li>在整个会话控制技术体系中，保持JSESSIONID的值主要通过Cookie实现。但Cookie在浏览器端可能会被禁用，所以我们还需要一些备用的技术手段，例如：URL重写。</li>\n<li>URL重写其实就是将JSESSIONID的值以固定格式附着在URL地址后面，以实现保持JSESSIONID，进而保持会话状态。这个固定格式是：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL;jsessionid=xxxxxxxxx</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">targetServlet;jsessionid=F9C893D3E77E3E8329FF6BD9B7A09957</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现方式：\"><a href=\"#实现方式：\" class=\"headerlink\" title=\"实现方式：\"></a>实现方式：</h3><ul>\n<li>response.encodeURL(String)</li>\n<li>response.encodeRedirectURL(String)</li>\n<li>例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.获取Session对象</span><br><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\">//2.创建目标URL地址字符串</span><br><span class=\"line\">String url = &quot;targetServlet&quot;;</span><br><span class=\"line\">//3.在目标URL地址字符串后面附加JSESSIONID的值</span><br><span class=\"line\">url = response.encodeURL(url);</span><br><span class=\"line\">//4.重定向到目标资源</span><br><span class=\"line\">response.sendRedirect(url);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Session的活化和钝化\"><a href=\"#Session的活化和钝化\" class=\"headerlink\" title=\"Session的活化和钝化\"></a>Session的活化和钝化</h2><ul>\n<li>Session机制很好的解决了Cookie的不足，但是当访问应用的用户很多时，服务器上就会创建非常多的Session对象，如果不对这些Session对象进行处理，那么在Session失效之前，这些Session一直都会在服务器的内存中存在。那么就，就出现了Session活化和钝化的机制。</li>\n<li>Session钝化：Session在一段时间内没有被使用时，会将当前存在的Session对象序列化到磁盘上，而不再占用内存空间。</li>\n<li>Session活化：Session被钝化后，服务器再次调用Session对象时，将Session对象由磁盘中加载到内存中使用。</li>\n<li>如果希望Session域中的对象也能够随Session钝化过程一起序列化到磁盘上，则对象的实现类也必须实现java.io.Serializable接口。不仅如此，如果对象中还包含其他对象的引用，则被关联的对象也必须支持序列化，否则会抛出异常：java.io.NotSerializableException</li>\n</ul>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"10 web-JSTL概述","url":"http://yoursite.com/2017/11/15/29 web-JSTL概述/","content":"<h1 id=\"JSTL简介\"><a href=\"#JSTL简介\" class=\"headerlink\" title=\"JSTL简介\"></a>JSTL简介</h1><ul>\n<li>JSP虽然为我们提供了EL表达式用来替代JSP表达式，但是由于EL表达式仅仅具有输出功能，而不替代页面中的JSP脚本片段。</li>\n<li>为了解决这个问题，JSP为我们提供了可以自定义标签库(Tag Library)的功能。</li>\n<li>所谓自定义标签库就是指可以在JSP页面中以类似于HTML标签的形式调用Java中的方法。使用方法和我们JSP动作标签类似。</li>\n<li>而为了方便开发使用Sun公司又定义了一套通用的标签库名为JSTL(JSP Standard Tag Library)，里面定义很多我们开发中常用的方法，方便我们使用。</li>\n<li>JSTL的标准由Sun公司定制，Apache的Jakarta小组负责实现。</li>\n<li>JSTL由5个不同功能的标签库组成。</li>\n</ul>\n<h2 id=\"使用JSTL\"><a href=\"#使用JSTL\" class=\"headerlink\" title=\"使用JSTL\"></a>使用JSTL</h2><ul>\n<li>使用JSTL必须在项目中导入两个jar包<ul>\n<li>taglibs-standard-impl-1.2.1.jar</li>\n<li>taglibs-standard-spec-1.2.5.jar</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>然后还需要在JSP页面中通过taglib指令引入标签库。<ul>\n<li>&lt;%@ taglib prefix=”c” uri=”<a href=\"http://java.sun.com/jsp/jstl/core&quot;\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</li>\n<li>prefix用来指定前缀名，我们通过该名来使用JSTL</li>\n<li>uri相当于库的唯一标识，因为JSTL由多个不同的库组成，使用该属性指定要导入哪个库。</li>\n</ul>\n</li>\n<li>使用JSTL<ul>\n<li>&lt;c:out value=”hello”&gt;&lt;/c:out&gt;</li>\n<li>这个例子标识，调用前缀为c的标签的out方法，向页面中输出value属性中的字符串。</li>\n<li>JSTL的使用非常像html标签。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"标签库\"><a href=\"#标签库\" class=\"headerlink\" title=\"标签库\"></a>标签库</h1><p>JSTL由五个不同功能的标签库组成。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606115859.png\" alt></p>\n<h2 id=\"核心标签-Core-Tags\"><a href=\"#核心标签-Core-Tags\" class=\"headerlink\" title=\"核心标签(Core Tags)\"></a>核心标签(Core Tags)</h2><ul>\n<li>Core标签库，包括了我们最常用的标签。</li>\n<li>要使用Core标签库需要在JSP页面中加入：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-out-gt\"><a href=\"#lt-c-out-gt\" class=\"headerlink\" title=\"&lt;c:out&gt;\"></a>&lt;c:out&gt;</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:out&gt;用于计算一个表达式并将结果输出到当前页面。</span><br><span class=\"line\"></span><br><span class=\"line\">功能类似于JSP表达式&lt;%= &gt;和EL表达式$&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">可以设置的属性</span><br><span class=\"line\">    value</span><br><span class=\"line\">        作用：要输出的值</span><br><span class=\"line\">        参数类型：Object</span><br><span class=\"line\">    default</span><br><span class=\"line\">        作用：当value为null时显示的默认值。</span><br><span class=\"line\">        参数类型：Object</span><br><span class=\"line\">    escaXml</span><br><span class=\"line\">        作用：是否对特殊字符进行转义。</span><br><span class=\"line\">        参数类型：boolean</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:out value=&quot;$&#123;user.name&#125;&quot; default=&quot;&quot; escapeXml=&quot;true&quot;&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-set-gt\"><a href=\"#lt-c-set-gt\" class=\"headerlink\" title=\"&lt;c:set&gt;\"></a>&lt;c:set&gt;</h3><ul>\n<li>&lt;c:set&gt;用于添加或修改域中的属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以设置的属性：</span><br><span class=\"line\">    value</span><br><span class=\"line\">        作用：要设置的值</span><br><span class=\"line\">        参数类型：Object</span><br><span class=\"line\">    var</span><br><span class=\"line\">        作用：表示域中存放的属性名。</span><br><span class=\"line\">        参数类型：String</span><br><span class=\"line\">    scope</span><br><span class=\"line\">        作用：指定域（page、request、session、application），若不指定则为page域对象</span><br><span class=\"line\">        参数类型：String</span><br><span class=\"line\">    target</span><br><span class=\"line\">    \t作用：要修改的域对象的属性名（必须是JavaBean或者Map）</span><br><span class=\"line\">    \t参数类型：Object</span><br><span class=\"line\">    property</span><br><span class=\"line\">    \t作用：指定要修改的对象的属性名</span><br><span class=\"line\">    \t参数类型：String</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置属性：</span><br><span class=\"line\">&lt;c:set var=&quot;key&quot; value=&quot;value&quot; scope=&quot;request&quot;&gt;&lt;/c:set&gt;</span><br><span class=\"line\">修改属性：</span><br><span class=\"line\">&lt;c:set property=&quot;name&quot; target=&quot;$&#123;user&#125;&quot; value=&quot;孙悟空&quot;&gt;&lt;/c:set&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-remove-gt\"><a href=\"#lt-c-remove-gt\" class=\"headerlink\" title=\"&lt;c:remove&gt;\"></a>&lt;c:remove&gt;</h3><ul>\n<li>&lt;c:remove&gt;用于移除域中的属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以设置的属性：</span><br><span class=\"line\">var</span><br><span class=\"line\">\t作用：设置要移除的属性的名字</span><br><span class=\"line\">\t作用：String</span><br><span class=\"line\">scope</span><br><span class=\"line\">\t作用：设置要移除属性所在的域，若不指定则删除所有域中的对应属性</span><br><span class=\"line\">\t参数类型：String</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">移除所有域中key属性：&lt;c:remove var=&quot;key&quot;/&gt;</span><br><span class=\"line\">移除request中的key属性: &lt;c:remove var=&quot;key&quot; scope=&quot;request&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-if-gt\"><a href=\"#lt-c-if-gt\" class=\"headerlink\" title=\"&lt;c:if&gt;\"></a>&lt;c:if&gt;</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:if&gt;用于实现if语句的判断功能</span><br><span class=\"line\">可设置的属性</span><br><span class=\"line\">\ttest</span><br><span class=\"line\">    \t作用：设置if判断的条件，用于判断标签体是否被执行</span><br><span class=\"line\">    \t参数类型：boolean</span><br><span class=\"line\">\tvar</span><br><span class=\"line\">    \t作用：用于指定接收判断结果的变量名</span><br><span class=\"line\">    \t参数类型：boolean</span><br><span class=\"line\">\tscope</span><br><span class=\"line\">    \t作用：指定判断结果保存到哪个域</span><br><span class=\"line\">    \t参数类型：String</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c:if test=&quot;$&#123;empty user &#125;&quot; var=&quot;isUserEmpty&quot; scope=&quot;request&quot;&gt;</span><br><span class=\"line\">\t\t用户为空</span><br><span class=\"line\">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-choose-gt-、-lt-c-when-gt-、-lt-c-otherwise-gt\"><a href=\"#lt-c-choose-gt-、-lt-c-when-gt-、-lt-c-otherwise-gt\" class=\"headerlink\" title=\"&lt;c:choose&gt;、&lt;c:when&gt;、&lt;c:otherwise&gt;\"></a>&lt;c:choose&gt;、&lt;c:when&gt;、&lt;c:otherwise&gt;</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:choose&gt;、&lt;c:when&gt;、&lt;c:otherwise&gt;三个标签配合使用，功能类似于Java中的if/else</span><br><span class=\"line\">&lt;c:choose&gt;是&lt;c:when&gt;和&lt;c:otherwise&gt;的父标签</span><br><span class=\"line\">&lt;c:when&gt;的属性</span><br><span class=\"line\">\ttest</span><br><span class=\"line\">    \t作用：用于设置判断条件，若正确则c:when中的代码执行，否则不执行</span><br><span class=\"line\">    \t参数类型：boolean</span><br><span class=\"line\">\t&lt;c:otherwise&gt;</span><br><span class=\"line\">    \t作用：如果所有的&lt;c:when&gt;都没有执行则执行&lt;c:otherwise&gt;的标签体</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:choose&gt;</span><br><span class=\"line\">\t&lt;c:when test=&quot;$&#123;param.age&gt;=18 &#125;&quot;&gt;</span><br><span class=\"line\">\t\t您已经成年</span><br><span class=\"line\">\t&lt;/c:when&gt;</span><br><span class=\"line\">\t&lt;c:otherwise&gt;</span><br><span class=\"line\">\t\t您未成年</span><br><span class=\"line\">\t&lt;/c:otherwise&gt;</span><br><span class=\"line\">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-forEach-gt\"><a href=\"#lt-c-forEach-gt\" class=\"headerlink\" title=\"&lt;c:forEach&gt;\"></a>&lt;c:forEach&gt;</h3><ul>\n<li>&lt;c:forEach&gt;用于对多个对象的集合进行迭代，重复执行标签体，或者重复迭代固定的次数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可设置属性：</span><br><span class=\"line\">\tvar</span><br><span class=\"line\">    \t作用：设置遍历出对象的名称</span><br><span class=\"line\">    \t参数类型：String</span><br><span class=\"line\">\titems</span><br><span class=\"line\">    \t作用：指定要遍历的集合对象</span><br><span class=\"line\">    \t参数类型：数组、字符串和各种集合</span><br><span class=\"line\">\tvarStatus</span><br><span class=\"line\">    \t作用：指定保存迭代状态的对象的名字，该变量引用的是一个LoopTagStatus类型的对象，通过该对象可以获得一些遍历的状态：</span><br><span class=\"line\">        \tcount</span><br><span class=\"line\">        \tindex</span><br><span class=\"line\">        \tfirst</span><br><span class=\"line\">        \tlast</span><br><span class=\"line\">        \tname</span><br><span class=\"line\">\t    参数类型：String</span><br><span class=\"line\">\tbegin</span><br><span class=\"line\">    \t作用：指定遍历的开始位置</span><br><span class=\"line\">    \t参数类型：int</span><br><span class=\"line\">\tend</span><br><span class=\"line\">    \t作用：指定遍历的结束位置</span><br><span class=\"line\">    \t参数类型：int</span><br><span class=\"line\">\tstep</span><br><span class=\"line\">\t    作用：迭代的步长</span><br><span class=\"line\">        参数类型：int</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;user&quot; begin=&quot;0&quot; end=&quot;4&quot; step=&quot;2&quot; varStatus=&quot;vs&quot;&gt;</span><br><span class=\"line\">\t\t$&#123;vs.index&#125; -- $&#123;user.name &#125; -- $&#123;user.age &#125;&lt;br /&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-url-gt\"><a href=\"#lt-c-url-gt\" class=\"headerlink\" title=\"&lt;c:url&gt;\"></a>&lt;c:url&gt;</h3><ul>\n<li>&lt;c:url&gt;主要用来重写URL地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可设置的属性：</span><br><span class=\"line\">\tvalue</span><br><span class=\"line\">\t    作用：设置要处理的URI地址，注意这里要以/开头</span><br><span class=\"line\">可接受参数：String</span><br><span class=\"line\">\tvar</span><br><span class=\"line\">\t    作用：修改后存储到域对象中的uri属性名。</span><br><span class=\"line\">\t    可接受参数：String</span><br><span class=\"line\">\tscope</span><br><span class=\"line\">\t    作用：设置修改后uri存放的域</span><br><span class=\"line\">\t    可接受参数：String</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t使用相对路径：</span><br><span class=\"line\">&lt;c:url value=&quot;index.jsp&quot; var=&quot;uri&quot; scope=&quot;request&quot;&gt;</span><br><span class=\"line\">\t&lt;c:param name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/c:param&gt;</span><br><span class=\"line\">&lt;/c:url&gt;</span><br><span class=\"line\">会生成如下地址：index.jsp?name=%E5%BC%A0%E4%B8%89</span><br><span class=\"line\">使用绝对路径会自动在路径前加上项目名：</span><br><span class=\"line\">&lt;c:url value=&quot;/index.jsp&quot; var=&quot;uri&quot; scope=&quot;request&quot;&gt;</span><br><span class=\"line\">\t&lt;c:param name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/c:param&gt;</span><br><span class=\"line\">&lt;/c:url&gt;</span><br><span class=\"line\">会生成如下地址：/Test_JSTL/index.jsp?name=%E5%BC%A0%E4%B8%89</span><br></pre></td></tr></table></figure>\n<h3 id=\"lt-c-redirect-gt\"><a href=\"#lt-c-redirect-gt\" class=\"headerlink\" title=\"&lt;c:redirect&gt;\"></a>&lt;c:redirect&gt;</h3><ul>\n<li>&lt;c:redirect&gt;主要用于将请求重定向到另一个资源地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可设置的属性：</span><br><span class=\"line\">\turi</span><br><span class=\"line\">    \t作用：指定要重定向到的目标地址，注意这里指定绝对路径会自动加上项目名</span><br><span class=\"line\">    \t参数类型：String</span><br></pre></td></tr></table></figure>\n<ul>\n<li>例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:redirect url=&quot;/target.jsp&quot;&gt;&lt;/c:redirect&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSTL函数（JSTL-Functions）\"><a href=\"#JSTL函数（JSTL-Functions）\" class=\"headerlink\" title=\"JSTL函数（JSTL Functions）\"></a>JSTL函数（JSTL Functions）</h2><ul>\n<li>函数标签库是在JSTL中定义的标准的EL函数集。</li>\n<li>函数标签库中定义的函数基本上都是对字符串的操作。</li>\n<li>引入：&lt;%@ taglib prefix=”fn” uri=”<a href=\"http://java.sun.com/jsp/jstl/functions&quot;\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/functions&quot;</a> %&gt;</li>\n</ul>\n<h3 id=\"fn-contains和fn-containsIgnoreCase\"><a href=\"#fn-contains和fn-containsIgnoreCase\" class=\"headerlink\" title=\"fn:contains和fn:containsIgnoreCase\"></a>fn:contains和fn:containsIgnoreCase</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：用于判断字符串中是否包含指定字符串，containsIgnoreCase忽略大小写。</span><br><span class=\"line\">语法：fn:contains(string,subString)  --&gt;boolean</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606144819.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:contains(&quot;hello&quot;,&quot;HE&quot;)&#125;   --&gt;false</span><br><span class=\"line\">$&#123;fn:containsIgnoreCase(&quot;hello&quot;,&quot;HE&quot;)&#125;  --&gt;true</span><br></pre></td></tr></table></figure>\n<h2 id=\"fn-startsWith和fn-endsWith\"><a href=\"#fn-startsWith和fn-endsWith\" class=\"headerlink\" title=\"fn:startsWith和fn:endsWith\"></a>fn:startsWith和fn:endsWith</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：判断一个字符串是否以指定字符开头（startsWith）或结尾（endsWith）</span><br><span class=\"line\">语法：</span><br><span class=\"line\">    fn:startsWith(string , prefix)  --&gt;boolean</span><br><span class=\"line\">\tfn:endsWith(string,suffix)  --&gt;boolean</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606144520.png\" alt></p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:startsWith(&quot;hello&quot;,&quot;he&quot;) &#125;  --&gt;true</span><br><span class=\"line\">$&#123;fn:endsWith(&quot;hello&quot;,&quot;he&quot;) &#125;  --&gt;false</span><br></pre></td></tr></table></figure>\n<h2 id=\"fn-indexOf\"><a href=\"#fn-indexOf\" class=\"headerlink\" title=\"fn:indexOf\"></a>fn:indexOf</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：在一个字符串中查找指定字符串，并返回第一个符合的字符串的第一个字符的索引。</span><br><span class=\"line\">语法：fn:indexOf(string,subString)  --&gt;int</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606144625.png\" alt></p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:indexOf(&quot;hello&quot;,&apos;e&apos;) &#125;  --&gt;1</span><br></pre></td></tr></table></figure>\n<h2 id=\"fn-replace\"><a href=\"#fn-replace\" class=\"headerlink\" title=\"fn:replace\"></a>fn:replace</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：将一个字符串替换为另外一个字符串，并返回替换结果</span><br><span class=\"line\">语法：fn:replace(str , beforeSubString , afterSubString) --&gt;String</span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:replace(&quot;hello&quot;,&quot;llo&quot;,&apos;e&apos;) &#125;  hee</span><br><span class=\"line\">fn:substring</span><br><span class=\"line\">作用：截取字符串</span><br><span class=\"line\">语法：fn: substring (str , beginIndex , endIndex)  String</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"http://note.youdao.com/yws/res/8882/A47D18C6C90D47C19778B9EA50D9B13A\" alt=\"image\"></p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:substring(&quot;hello&quot;,1,3) &#125; --&gt; el</span><br></pre></td></tr></table></figure>\n<h2 id=\"fn-substringBefore和fn-substringAfter\"><a href=\"#fn-substringBefore和fn-substringAfter\" class=\"headerlink\" title=\"fn:substringBefore和fn:substringAfter\"></a>fn:substringBefore和fn:substringAfter</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：返回一个字符串指定子串之前（substringBefore）之后（substringAfter）的字符串</span><br><span class=\"line\">语法：fn: substringBefore(string,subString)  --&gt;String</span><br><span class=\"line\">fn: substringAfter (string,subString)  --&gt;String</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606145515.png\" alt></p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:substringBefore(&quot;hello&quot;,&quot;l&quot;) &#125;  --&gt;he</span><br><span class=\"line\">$&#123;fn:substringAfter(&quot;hello&quot;,&quot;l&quot;) &#125;  --&gt;lo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"fn-split\"><a href=\"#fn-split\" class=\"headerlink\" title=\"fn:split\"></a>fn:split</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：将一个字符串拆分成字符串数组。</span><br><span class=\"line\">语法：fn:split(string,delimiters)  --&gt;String</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606145633.png\" alt></p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:split(&quot;a-b-c-d-e-f-g&quot;,&quot;-&quot;)&#125;</span><br><span class=\"line\">返回一个数组对象[a,b,c,d,e,f,g]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"fn-join\"><a href=\"#fn-join\" class=\"headerlink\" title=\"fn:join\"></a>fn:join</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：将数组中所有元素连接成一个字符串</span><br><span class=\"line\">语法：fn:join(array,sparator)  --&gt;String</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606150021.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">String[] strs = new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;&#125;;</span><br><span class=\"line\">pageContext.setAttribute(&quot;strs&quot;, strs);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">$&#123;fn:join(strs,&apos;-&apos;) &#125;</span><br><span class=\"line\">\t返回：a-b-c-d-e-f</span><br></pre></td></tr></table></figure>\n<h2 id=\"fn-toLowerCase和fn-toUpperCase\"><a href=\"#fn-toLowerCase和fn-toUpperCase\" class=\"headerlink\" title=\"fn:toLowerCase和fn:toUpperCase\"></a>fn:toLowerCase和fn:toUpperCase</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：将字符串都转换成大写（toUpperCase）或小写（toLowerCase）字符</span><br><span class=\"line\">语法：</span><br><span class=\"line\">\tfn: toLowerCase (str)  --&gt;String</span><br><span class=\"line\">    fn: toUpperCase(str)  --&gt;String</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606150205.png\" alt></p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   $&#123;fn:toLowerCase(&quot;ABCDEFG&quot;) &#125;  --&gt;abcdefg</span><br><span class=\"line\">$&#123;fn:toUpperCase(&quot;abcdefg&quot;) &#125;  --&gt;ABCDEFG</span><br></pre></td></tr></table></figure>\n<h2 id=\"fn-trim\"><a href=\"#fn-trim\" class=\"headerlink\" title=\"fn:trim\"></a>fn:trim</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：去掉字符串的前后空格</span><br><span class=\"line\">用法：fn:trim(str)  --&gt;String</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606150313.png\" alt></p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:trim(&quot;     hello  &quot;) &#125;  --&gt;hello</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"fn-length\"><a href=\"#fn-length\" class=\"headerlink\" title=\"fn:length\"></a>fn:length</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：返回集合或者字符串的长度</span><br><span class=\"line\">用法：fn:trim(input)  --&gt;int</span><br></pre></td></tr></table></figure>\n<p>参数和返回值：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606150356.png\" alt></p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;fn:length(&quot;hello&quot;) &#125; --&gt;5</span><br></pre></td></tr></table></figure></p>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"09 web-EL表达式（Expression Language）概述","url":"http://yoursite.com/2017/11/09/28 web-EL表达式（Expression Language）概述/","content":"<h1 id=\"EL简介\"><a href=\"#EL简介\" class=\"headerlink\" title=\"EL简介\"></a>EL简介</h1><ul>\n<li>EL是JSP内置的表达式语言，用以访问页面的上下文以及不同作用域中的对象 ，取得对象属性的值，或执行简单的运算或判断操作。EL在得到某个数据时，会自动进行数据类型的转换。</li>\n<li>EL表达式用于代替JSP表达式(&lt;%= %&gt;)在页面中做输出操作。</li>\n<li>EL表达式仅仅用来读取数据，而不能对数据进行修改。</li>\n<li>使用EL表达式输出数据时，如果有则输出数据，如果为null则什么也不输出。</li>\n</ul>\n<h1 id=\"EL基本使用\"><a href=\"#EL基本使用\" class=\"headerlink\" title=\"EL基本使用\"></a>EL基本使用</h1><ul>\n<li>EL表达式总是放在{}中，而且前边有一个$作为前缀。<ul>\n<li>${EL表达式}</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>获取域中的对象可以直接使用对象名，如获取域中名字为user的对象<ul>\n<li>${user}</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>获取对象的属性值可以直接通过“对象.属性名”<ul>\n<li>${user.name}</li>\n<li>${user.age}</li>\n<li>注意：这里的属性名是get和set方法对应的属性值，并不是对象中的变量名。</li>\n<li>比如：如果获取name属性值，那么该对象中必定要存在一个getName()方法。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>获取对象的属性也可以通过“对象[“属性名”]”<ul>\n<li>${user[“name”]}</li>\n<li>${user[“age”]}</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>获取Map中属性时可以以直接通过属性的key<ul>\n<li>${map.key}</li>\n<li>${map[key]}</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>在指定域中获取属性<ul>\n<li>在EL表达式中如果我们直接使用属性名如：${user}，它将会在四个域中由小到大依次查找。顺序：pageScope、requestScope、sessionScope、applicationScope。</li>\n<li>也可以指定从哪个域中获取：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123; pageScope .user&#125;：当前页面</span><br><span class=\"line\">$&#123;requestScope.user&#125;：当前请求</span><br><span class=\"line\">$&#123;sessionScope.user&#125;：当前会话</span><br><span class=\"line\">$&#123;sessionScope.user&#125;：当前应用</span><br></pre></td></tr></table></figure>\n<h1 id=\"EL隐含对象\"><a href=\"#EL隐含对象\" class=\"headerlink\" title=\"EL隐含对象\"></a>EL隐含对象</h1><ul>\n<li>EL中包含11个隐含对象，这些对象可以在EL表达式中直接使用。</li>\n</ul>\n<h2 id=\"pageContext\"><a href=\"#pageContext\" class=\"headerlink\" title=\"pageContext\"></a>pageContext</h2><ul>\n<li>pageContext和JSP中的pageContext功能一样。</li>\n</ul>\n<h2 id=\"请求域\"><a href=\"#请求域\" class=\"headerlink\" title=\"请求域\"></a>请求域</h2><ul>\n<li>请求域主要用于获取域对象中的属性，四个对象分别对应</li>\n</ul>\n<h2 id=\"四个请求域。\"><a href=\"#四个请求域。\" class=\"headerlink\" title=\"四个请求域。\"></a>四个请求域。</h2><pre><code>- pageScope\n- requestScope\n- sessionScope\n- applicationScope\n</code></pre><h2 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h2><ul>\n<li>参数对象主要用于获取get或post请求中的参数。<ul>\n<li>param；</li>\n<li>获取指定的请求参数， 如：${param.username}</li>\n<li>paramValues；</li>\n<li>获取请求参数数组，如：${paramValues.hobby}会返回一个string类型的数组</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header；</span><br><span class=\"line\">headerValues；</span><br><span class=\"line\">initParam；</span><br><span class=\"line\">cookie；</span><br></pre></td></tr></table></figure>\n<h1 id=\"EL逻辑运算\"><a href=\"#EL逻辑运算\" class=\"headerlink\" title=\"EL逻辑运算\"></a>EL逻辑运算</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606115325.png\" alt></p>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"08 web-JSP概述","url":"http://yoursite.com/2017/11/03/27 web-JSP概述/","content":"<h1 id=\"1-JSP简介\"><a href=\"#1-JSP简介\" class=\"headerlink\" title=\"1.    JSP简介\"></a>1.    JSP简介</h1><ul>\n<li>JSP全称Java Server Pages，顾名思义就是运行在java服务器中的页面，也就是在我们JavaWeb中的动态页面，其本质就是一个Servlet。</li>\n<li>其本身是一个动态网页技术标准，它的主要构成有HTML网页代码、Java代码片段、JSP标签几部分组成，后缀是.jsp。</li>\n<li>JSP相比HTML页面来说，最直观的功能就是可以在页面中使用变量，这些变量一般都是从域对象中获取。有了变量的好处就是我们的页面可以动态的显示信息。</li>\n<li>相比于Servlet，JSP更加善于处理显示页面，而Servlet跟擅长处理业务逻辑，两种技术各有专长，所以一般我们会将Servlet和JSP结合使用，Servlet负责业务，JSP负责显示。</li>\n</ul>\n<h1 id=\"2-JSP的基本语法\"><a href=\"#2-JSP的基本语法\" class=\"headerlink\" title=\"2.    JSP的基本语法\"></a>2.    JSP的基本语法</h1><h2 id=\"2-1-基本格式\"><a href=\"#2-1-基本格式\" class=\"headerlink\" title=\"2.1 基本格式\"></a>2.1 基本格式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">\tpageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSP的基本格式和HTML页面相似，不同之处就是使用JSP时页面的顶部必须使用JSP指令声明一些JSP相关的信息。如上图JSP文件，首行使用一条page指令声明了JSP的相关信息，关于JSP指令我们在这里先不过多讲解，目前可以把它当成一种固定格式。</li>\n<li>在首行的JSP指令下边就可以来编辑我们的HTML代码了，从上边的文件中也可以看出实际上就是原封不动的HTML代码。</li>\n<li>如上这面的JSP文件，我们如果不需要加入动态代码，就可以直接来编写HTML代码，语法是一模一样的。</li>\n<li>代码编辑完成后启动服务器，访问JSP页面（和访问HTML页面一样，直接输入地址），会看到页面正常显示和普通HTML一样。</li>\n<li>注意：JSP文件的运行依赖于WEB服务器，也就是说如果不是通过WEB服务器，浏览器是不能直接打开JSP文件的。</li>\n</ul>\n<h2 id=\"2-2-JSP脚本元素\"><a href=\"#2-2-JSP脚本元素\" class=\"headerlink\" title=\"2.2 JSP脚本元素\"></a>2.2 JSP脚本元素</h2><ul>\n<li>在JSP中我们主要通过脚本元素来编写Java代码，这些Java代码一般会在页面被访问时调用。</li>\n<li>JSP脚本元素主要分三种：脚本片段、表达式还有声明。</li>\n</ul>\n<h3 id=\"2-2-1-JSP脚本片段\"><a href=\"#2-2-1-JSP脚本片段\" class=\"headerlink\" title=\"2.2.1 JSP脚本片段\"></a>2.2.1 JSP脚本片段</h3><ul>\n<li>脚本片段是嵌入到JSP中Java代码段，格式以&lt;%开头，%&gt;结尾，两个%号之间就可以编写Java代码了。</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% System.out.println(&quot;Hello World&quot;);%&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上边就是一个JSP的脚本片段，片段中的Java代码使我们非常熟悉的内容，这条语句会在JSP页面被访问时向页面中打印一条“Hello World”。</li>\n<li>通过这种方式我们可以在JSP中完成大量的Java代码，甚至写一些业务逻辑，但是并不建议这么做。</li>\n<li>这种方式编写的Java代码，会放到Servlet的service方法中执行，既然是写在一个方法中的代码那就对我们就不能随便的去写。比如：不能定义成员变量、不能定义方法、不能定义类。</li>\n</ul>\n<h3 id=\"2-2-2-JSP表达式\"><a href=\"#2-2-2-JSP表达式\" class=\"headerlink\" title=\"2.2.2 JSP表达式\"></a>2.2.2 JSP表达式</h3><ul>\n<li>JSP表达式用来直接将Java变量输出到页面中，格式以&lt;%=开头，以%&gt;结尾，中间是我们要输出的内容。</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%=str %&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上边语句中的str是JSP中的一个String型的变量，通过这种方式可以将该变量输出到页面中。</li>\n</ul>\n<h3 id=\"2-2-3-JSP声明（了解）\"><a href=\"#2-2-3-JSP声明（了解）\" class=\"headerlink\" title=\"2.2.3    JSP声明（了解）\"></a>2.2.3    JSP声明（了解）</h3><ul>\n<li>JSP声明中的内容会被直接写到类中，格式以&lt;%!开头，以%&gt;结尾，中间是Java代码</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%! private int a = 0; %&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上边这条语句相当于在类中声明了一个成员变量，由于JSP声明中的代码会被写在类中，所以在类中可以编写的内容在JSP声明中都可以编写。如：定义成员变量、定义方法、构造器、构造代码块、静态代码块。</li>\n<li>JSP声明使用的机会并不是很多，所以知道即可。</li>\n</ul>\n<h3 id=\"2-2-4-注释\"><a href=\"#2-2-4-注释\" class=\"headerlink\" title=\"2.2.4 注释\"></a>2.2.4 注释</h3><ul>\n<li>JSP注释和其他注释功能一样，注释的内容只有在当前JSP页面中可以看到，但是在转换后的Servlet中以及浏览器端显示的页面中都是不可见的。</li>\n</ul>\n<p>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%-- 注释内容 --%&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>JSP中个中注释的比较：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606221837.png\" alt></p>\n<h2 id=\"2-3-JSP运行原理\"><a href=\"#2-3-JSP运行原理\" class=\"headerlink\" title=\"2.3 JSP运行原理\"></a>2.3 JSP运行原理</h2><ul>\n<li>上边我们演示了JSP中的几种脚本元素，这几种脚本元素都是可以运行的Java代码，大家一定会有一个疑问，为什么在一个页面中可以运行Java代码呢？</li>\n<li>实际上Tomcat在运行JSP时，并不是直接显示的我们所编写的JSP页面，而是将JSP页面转换成了一个Java类，这个Java类是什么，我想大家也能猜到了，它实际上就是一个Servlet。</li>\n<li>这个Servlet在哪呢？还记得我们说过的Tomcat的work目录吗？在那个目录下保存着Tomcat自动生成的一些内容，下面让我们来找到那个目录。</li>\n<li>对于Eclipse来说是在:<ul>\n<li>工作空间下的<code>.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>对于MyEclipse来说就可以直接去Tomcat的安装目录去查找</li>\n<li>在Work目录下的<code>Catalina\\localhost\\07_WEB_SERVLET\\org\\apache\\jsp</code>文件夹中我们可以发现两个文件<code>index_jsp.java和index_jsp.class</code>，前者就是Tomcat自动生成的Servlet的源码，后者是编译后的.class文件。打开java文件内容如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package org.apache.jsp;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.*;</span><br><span class=\"line\">import javax.servlet.http.*;</span><br><span class=\"line\">import javax.servlet.jsp.*;</span><br><span class=\"line\"></span><br><span class=\"line\">public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase</span><br><span class=\"line\">    implements org.apache.jasper.runtime.JspSourceDependent &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private int a = 0; //JSP声明生成的代码</span><br><span class=\"line\">  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">  private static java.util.List _jspx_dependants;</span><br><span class=\"line\"></span><br><span class=\"line\">  private javax.el.ExpressionFactory _el_expressionfactory;</span><br><span class=\"line\">  private org.apache.AnnotationProcessor _jsp_annotationprocessor;</span><br><span class=\"line\"></span><br><span class=\"line\">  public Object getDependants() &#123;</span><br><span class=\"line\">    return _jspx_dependants;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void _jspInit() &#123;</span><br><span class=\"line\">    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();</span><br><span class=\"line\">    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void _jspDestroy() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public void _jspService(HttpServletRequest request, HttpServletResponse response)</span><br><span class=\"line\">        throws java.io.IOException, ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PageContext pageContext = null;</span><br><span class=\"line\">    HttpSession session = null;</span><br><span class=\"line\">    ServletContext application = null;</span><br><span class=\"line\">    ServletConfig config = null;</span><br><span class=\"line\">    JspWriter out = null;</span><br><span class=\"line\">    Object page = this;</span><br><span class=\"line\">    JspWriter _jspx_out = null;</span><br><span class=\"line\">    PageContext _jspx_page_context = null;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      response.setContentType(&quot;text/html; charset=UTF-8&quot;);</span><br><span class=\"line\">      pageContext = _jspxFactory.getPageContext(this, request, response,</span><br><span class=\"line\">      \t\t\tnull, true, 8192, true);</span><br><span class=\"line\">      _jspx_page_context = pageContext;</span><br><span class=\"line\">      application = pageContext.getServletContext();</span><br><span class=\"line\">      config = pageContext.getServletConfig();</span><br><span class=\"line\">      session = pageContext.getSession();</span><br><span class=\"line\">      out = pageContext.getOut();</span><br><span class=\"line\">      _jspx_out = out;</span><br><span class=\"line\"></span><br><span class=\"line\">      out.write(&quot;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;!DOCTYPE html&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;html&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;head&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;meta charset=\\&quot;UTF-8\\&quot;&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;title&gt;Insert title here&lt;/title&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;/head&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;body&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;\\t&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tSystem.out.println(&quot;Hello World&quot;);  //脚本片段生成的代码</span><br><span class=\"line\">\t\tint x = 20394; //脚本片段生成的代码</span><br><span class=\"line\">\t</span><br><span class=\"line\">      out.write(&quot;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;\\t\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;\\t\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;\\t&lt;!-- JSP表达式生成的代码 --&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;\\t&quot;);</span><br><span class=\"line\">      out.print(x );</span><br><span class=\"line\">      out.write(&quot;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;\\t\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;\\t&quot;);</span><br><span class=\"line\">      out.write(&quot;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;/body&gt;\\r\\n&quot;);</span><br><span class=\"line\">      out.write(&quot;&lt;/html&gt;&quot;);</span><br><span class=\"line\">    &#125; catch (Throwable t) &#123;</span><br><span class=\"line\">      if (!(t instanceof SkipPageException))&#123;</span><br><span class=\"line\">        out = _jspx_out;</span><br><span class=\"line\">        if (out != null &amp;&amp; out.getBufferSize() != 0)</span><br><span class=\"line\">          try &#123; out.clearBuffer(); &#125; catch (java.io.IOException e) &#123;&#125;</span><br><span class=\"line\">        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);</span><br><span class=\"line\">        else log(t.getMessage(), t);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      _jspxFactory.releasePageContext(_jspx_page_context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过观察发现index_jsp名字和我们创建的jsp文件名字类似，只是把index.jsp中的点换成的_，实际上他就是Tomcat根据我们编写的JSP文件自动生成的类。</li>\n<li>index_jsp这个类继承了org.apache.jasper.runtime.HttpJspBase，而HttpJspBase又继承了HttpServlet。由此证明，index_jsp就是一个Servlet。而在我们访问JSP时服务器就是调用了该Servlet来响应请求。</li>\n<li>有同学可能会有疑问，Servlet是需要在web.xml中配置的，而我们并没有配置JSP的serlvet映射，那他是如何访问的呢？实际在conf目录中的web.xml早已配置好了JSP的映射信息，具体内容如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class=\"line\">    &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;fork&lt;/param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;xpoweredBy&lt;/param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">    &lt;load-on-startup&gt;3&lt;/load-on-startup&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>既然已经证明其就是一个Servlet，那我们已知Servlet是调用service方法来处理请求的，在我们的index_jsp中并没有我们熟悉的service()方法，但是经仔细观察发现有如下方法<code>jspService(HttpServletRequest request, HttpServletResponse response)</code>，该方法就相当于我们JSP中<code>service()</code>方法。</li>\n<li>service方法中声明了如下几个局部变量：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PageContext pageContext = null;</span><br><span class=\"line\">HttpSession session = null;</span><br><span class=\"line\">ServletContext application = null;</span><br><span class=\"line\">ServletConfig config = null;</span><br><span class=\"line\">JspWriter out = null;</span><br><span class=\"line\">Object page = this;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这几个对象在方法下边进行了赋值操作，再加上参数中的request和response，以及出异常的时候还有一个exception。这些是我们JSP中的九大隐含对象，后边我们还要在讲解。这些对象除了exception比较特殊外，其他都可以直接在JSP中直接使用。</li>\n<li>注意观察该方法，是如何将JSP中的代码转换为Java代码的：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Html代码：out.write(&quot;&lt;!DOCTYPE html&gt;\\r\\n&quot;);</span><br><span class=\"line\">    JSP中的HTML代码会变成字符串通过out.write()方法输出。</span><br><span class=\"line\">&lt;%%&gt;中的代码：System.out.println(&quot;Hello World&quot;); //脚本片段生成的代码。</span><br><span class=\"line\">    脚本片段中的代码会直接复制到对应的位置。</span><br><span class=\"line\">&lt;%=x%&gt;中的代码：out.print(x );</span><br><span class=\"line\">    表达式中的变量，会变成out.print()的参数输出到页面中。</span><br><span class=\"line\">&lt;%! %&gt;中的代码：private int a = 0; //JSP声明生成的代码</span><br><span class=\"line\">    声明中的代码，会被原封不动的写到类中。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>理解了JSP的运行原理对我们理解JSP是非常重要的，也就是说在我们编写JSP代码的时候，在脑海里应该可以想象出编译好的servlet的样子。</li>\n</ul>\n<h2 id=\"2-4-JSP生命周期\"><a href=\"#2-4-JSP生命周期\" class=\"headerlink\" title=\"2.4 JSP生命周期\"></a>2.4 JSP生命周期</h2><h2 id=\"2-5-JSP隐含对象\"><a href=\"#2-5-JSP隐含对象\" class=\"headerlink\" title=\"2.5 JSP隐含对象\"></a>2.5 JSP隐含对象</h2><ul>\n<li>隐含对象指在JSP中无需创建可以直接使用的对象，包括：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out（JspWriter）：相当于response.getWriter()获取的对象，用于在页面中显示信息。</span><br><span class=\"line\">config（ServletConfig）：对应Servlet中的ServletConfig对象。</span><br><span class=\"line\">page（Object）：对应当前Servlet对象，实际上就是this。</span><br><span class=\"line\">pageContext（PageContext）：当前页面的上下文，也是一个域对象。</span><br><span class=\"line\">exception（Throwable）：错误页面中异常对象</span><br><span class=\"line\">request（HttpServletRequest）：HttpServletRequest对象</span><br><span class=\"line\">response（HttpServletResponse）：HttpServletResponse对象</span><br><span class=\"line\">application（ServletContext）：ServletContext对象</span><br><span class=\"line\">session（HttpSession）：HttpSession对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-1-域对象\"><a href=\"#2-5-1-域对象\" class=\"headerlink\" title=\"2.5.1 域对象\"></a>2.5.1 域对象</h3><ul>\n<li>在JavaWeb中总共有四个域，页面、请求、会话和整个应用。域对象主要作用就是在这四个域中传递数据的。</li>\n<li>每个域对象的内部实际上都有一个map用来存储数据，数据以键值对的结构存放，key是String类型的，value使用Object类型。</li>\n<li>我们可以在一个域对象中放入数据。然后，在当前域中的其他JSP页面或Servlet中获取该数据。以达到一个共享数据的目的。</li>\n<li>在JSP中可以获得全部四个域对象，而Servlet中只能获取三个域对象request、session、application。</li>\n<li>四个域对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageContext</span><br><span class=\"line\">1.\t类型：PageContext</span><br><span class=\"line\">2.\t范围：当前JSP页面</span><br><span class=\"line\">3.\t注意：该对象只能在JSP中获取，Servlet中没有</span><br><span class=\"line\">Request</span><br><span class=\"line\">1.\t类型：HttpServletRequest</span><br><span class=\"line\">2.\t范围：当前请求</span><br><span class=\"line\">Session</span><br><span class=\"line\">1.\t类型：HttpSession</span><br><span class=\"line\">2.\t范围：当前会话</span><br><span class=\"line\">Application</span><br><span class=\"line\">1.\t类型：ServletContext</span><br><span class=\"line\">2.\t范围：当前应用</span><br></pre></td></tr></table></figure>\n<ul>\n<li>域对象都有三个操作数据的主要方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setAttribute(String name, Object o);</span><br><span class=\"line\">1.\t在当前域中放入数据</span><br><span class=\"line\">public Object getAttribute(String name)</span><br><span class=\"line\">2.\t根据名字获取当前域中的数据</span><br><span class=\"line\">public void removeAttribute(String name);</span><br><span class=\"line\">3.\t根据名字删除当前域中的数据</span><br></pre></td></tr></table></figure>\n<ul>\n<li>四个范围<ul>\n<li>页面：页面范围内的数据，只能在当前页面中获取，一旦转到其他页面当前域中的数据便失效，不能获取。</li>\n<li>请求：请求范围内的数据，和页面范围类似，它表示的是一次请求范围。区分一次请求主要是看是不是同一个request。比如：转发是表示一个请求，重定向是多个请求。</li>\n<li>会话：会话比请求更高一级。简单来说，就是打开浏览器到关闭浏览器，这一个完整的上网过程叫做一个会话。只要没有关闭浏览器或设置session失效，就可以在域中获取到Session中的数据。</li>\n<li>应用：应用是最高级的域对象，他代表整个WEB应用，在这个域对象中设置的数据在所有的域中都能获取。</li>\n</ul>\n</li>\n<li>PageContext<ul>\n<li>PageContext和其他域对象还不太一样，还有一些特有的功能。</li>\n<li>PageContext是整个页面的上下文，可以获取页面相关的内容。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.\t作为页面域对象。</span><br><span class=\"line\">2.\t可以获取指定域中的数据。</span><br><span class=\"line\">\tgetAttribute(String name, int scope)</span><br><span class=\"line\">3.\t可以向指定域中设置数据。</span><br><span class=\"line\">\tsetAttribute(String name, Object value, int scope)</span><br><span class=\"line\">\t上述两个方法中int scope是域类型的常量值，PageContext为每个域对象设置了一个整形常量分别为：</span><br><span class=\"line\">    \tPageContext.PAGE_SCOPE 值为 1</span><br><span class=\"line\">    \tPageContext.REQUEST_SCOPE 值为 2</span><br><span class=\"line\">    \tPageContext.SESSION_SCOPE 值为 3</span><br><span class=\"line\">    \tPageContext.APPLICATION_SCOPE 值为 4</span><br><span class=\"line\">4.\t全域查找</span><br><span class=\"line\">\tObject findAttribute(String name)</span><br><span class=\"line\">5.\t可以获取其他隐含对象。</span><br><span class=\"line\">\tHttpSession getSession()</span><br><span class=\"line\">\tObject getPage()</span><br><span class=\"line\">\tServletRequest getRequest()</span><br><span class=\"line\">\tServletResponse getResponse()</span><br><span class=\"line\">\tException getException()</span><br><span class=\"line\">\tServletConfig getServletConfig()</span><br><span class=\"line\">\tServletContext getServletContext()</span><br><span class=\"line\">\tJspWriter getOut()</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-2-其他隐含对象\"><a href=\"#2-5-2-其他隐含对象\" class=\"headerlink\" title=\"2.5.2 其他隐含对象\"></a>2.5.2 其他隐含对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">out（JspWriter）</span><br><span class=\"line\">\t赋值：out = pageContext.getWriter();</span><br><span class=\"line\">\t作用：向页面中输出内容。</span><br><span class=\"line\">\t本质：JSP的字符输出流。</span><br><span class=\"line\">config（ServletConfig）：对应Servlet中的ServletConfig对象。</span><br><span class=\"line\">\t赋值：config = pageContext.getServletConfig();</span><br><span class=\"line\">\t作用：获取配置信息。</span><br><span class=\"line\">\t本质：ServletConfig对象。</span><br><span class=\"line\">page（Object）：对应当前Servlet对象，实际上就是this。</span><br><span class=\"line\">\t赋值：Object page = this;</span><br><span class=\"line\">\t本质：当前Servlet对象的引用。</span><br><span class=\"line\">exception（Throwable）：错误页面中异常对象</span><br><span class=\"line\">\t赋值：Throwable exception = </span><br><span class=\"line\">\t\torg.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);</span><br><span class=\"line\">\t作用：获取异常信息。</span><br><span class=\"line\">\t本质：Throwable对象。</span><br><span class=\"line\">response（HttpServletResponse）：HttpServletResponse对象</span><br><span class=\"line\">\t赋值：service()方法的参数。</span><br><span class=\"line\">\t作用：同Servlet中的response。</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6-JSP指令\"><a href=\"#2-6-JSP指令\" class=\"headerlink\" title=\"2.6 JSP指令\"></a>2.6 JSP指令</h2><ul>\n<li>JSP指令用来设置与整个jsp页面相关的属性，它并不直接产生任何可见的输出,而只是告诉引擎如何处理其余JSP页面。</li>\n<li>指令格式：&lt;%@指令名 属性名1=”属性值1” 属性名2=”属性值2”  %&gt;</li>\n<li>JSP中有三种指令page、include、taglib。</li>\n</ul>\n<h3 id=\"2-6-1-page指令\"><a href=\"#2-6-1-page指令\" class=\"headerlink\" title=\"2.6.1 page指令\"></a>2.6.1 page指令</h3><p>ν    page指令是我们最常用的指令，属性非常多。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import 导包</span><br><span class=\"line\">isThreadSafe 是否单线程模式</span><br><span class=\"line\">contentType 响应的文件类型</span><br><span class=\"line\">isELIgnored 是否忽略EL表达式</span><br><span class=\"line\">isErrorPage 是否是一个错误页面</span><br><span class=\"line\">errorPage 发生错误后转发的页面</span><br><span class=\"line\">language JSP使用的语言，目前只有java</span><br><span class=\"line\">extends 继承父类</span><br><span class=\"line\">session 页面中是否具有session对象</span><br><span class=\"line\">buffer 定义out对象如何处理缓存</span><br><span class=\"line\">autoFlush 缓存是否自动刷新</span><br><span class=\"line\">info 定义转换后放到页面中的串</span><br><span class=\"line\">pageEncoding 定义JSP页面的字符编码</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-6-2-include指令\"><a href=\"#2-6-2-include指令\" class=\"headerlink\" title=\"2.6.2 include指令\"></a>2.6.2 include指令</h3><ul>\n<li>include是静态包含指令，主要是用于在当前页面中引入其他页面。</li>\n<li>用法：<code>&lt;%@ include file=”页面地址”%&gt;</code></li>\n<li>例如，有如下两个页面<ul>\n<li>index.jsp</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">\tpageEncoding=&quot;UTF-8&quot; errorPage=&quot;error.jsp&quot;%&gt;</span><br><span class=\"line\">&lt;%@ include file=&quot;in.html&quot; %&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>-</p>\n<pre><code>- in.html\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;Hello I&apos;m in.html Page&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><ul>\n<li>这种写法就相当于在index.jsp中的include标签的位置，将in.html的代码复制一遍</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class=\"line\">\tpageEncoding=&quot;UTF-8&quot; errorPage=&quot;error.jsp&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;Hello I&apos;m in.html Page&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>-</p>\n<pre><code>- 也就是说include的所引入页面的代码会在JSP对应的Servlet文件中生成\n</code></pre><h3 id=\"2-6-3-taglib指令\"><a href=\"#2-6-3-taglib指令\" class=\"headerlink\" title=\"2.6.3 taglib指令\"></a>2.6.3 taglib指令</h3><ul>\n<li>定义JSP可以使用的标签库，这部分我们目前还用不到，等到JSTL时我们在详细讲解</li>\n</ul>\n<h2 id=\"2-7-JSP动作标签\"><a href=\"#2-7-JSP动作标签\" class=\"headerlink\" title=\"2.7 JSP动作标签\"></a>2.7 JSP动作标签</h2><ul>\n<li>JSP动作标签与HTML标签不同，HTML标签由浏览器来解析，而JSP动作标签需要服务器（Tomcat）来运行。</li>\n<li>常用的JSP动作标签。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:forward&gt;:</span><br><span class=\"line\">\t作用：在页面中用于转发操作</span><br><span class=\"line\">\t实例：</span><br><span class=\"line\">        &lt;jsp:forward page=&quot;target.jsp&quot;&gt;&lt;/jsp:forward&gt;</span><br><span class=\"line\">\t子标签：</span><br><span class=\"line\">\t    &lt;jsp:param value=&quot;paramValue&quot; name=&quot;paramName&quot;/&gt;</span><br><span class=\"line\">    作用：在转发时设置请求参数，通过request.getParameter()在目标页面获取请求参数。</span><br><span class=\"line\">\t实例：</span><br><span class=\"line\">    &lt;jsp:forward page=&quot;target.jsp&quot;&gt;</span><br><span class=\"line\">\t    &lt;jsp:param value=&quot;paramValue&quot; name=&quot;paramName&quot;/&gt;</span><br><span class=\"line\">    &lt;/jsp:forward&gt;</span><br><span class=\"line\">&lt;jsp:include&gt;:</span><br><span class=\"line\">\t作用：动态包含，将其他页面包含到当前页面中。</span><br><span class=\"line\">\t实例：</span><br><span class=\"line\">        &lt;jsp:include page=&quot;target.jsp&quot;&gt;&lt;/jsp:include&gt;</span><br><span class=\"line\">\t原理：当使用动态包含时，Tomcat会在生成的Servlet中加入如下代码：</span><br><span class=\"line\"></span><br><span class=\"line\">org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, &quot;target.jsp&quot;, out, false);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>与静态包含的区别：<ul>\n<li>静态包含使用include指令，动态包含使用<a href=\"jsp:inclued\" target=\"_blank\" rel=\"noopener\">jsp:inclued</a>标签</li>\n<li>静态包含会直接将目标页面复制到生成的Servlet中，动态包含是在生成的servlet中使用include()方法来引入目标页面。</li>\n<li>当目标页面发生改变时，静态包含不能体现，动态包含可以体现</li>\n</ul>\n</li>\n</ul>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"07 web-Servlet概述","url":"http://yoursite.com/2017/10/30/26 web-Servlet概述/","content":"<h1 id=\"1-Why？我们为什么需要Servlet？\"><a href=\"#1-Why？我们为什么需要Servlet？\" class=\"headerlink\" title=\"1    Why？我们为什么需要Servlet？\"></a>1    Why？我们为什么需要Servlet？</h1><h2 id=\"1-1-Web应用基本运行模式\"><a href=\"#1-1-Web应用基本运行模式\" class=\"headerlink\" title=\"1.1    Web应用基本运行模式\"></a>1.1    Web应用基本运行模式</h2><p>①生活中的例子</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606110357.png\" alt></p>\n<p>②Web应用运行模式</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606110604.png\" alt></p>\n<h2 id=\"1-2-通过网页驱动服务器端的Java程序。在网页上显示Java程序返回的数据。\"><a href=\"#1-2-通过网页驱动服务器端的Java程序。在网页上显示Java程序返回的数据。\" class=\"headerlink\" title=\"1.2    通过网页驱动服务器端的Java程序。在网页上显示Java程序返回的数据。\"></a>1.2    通过网页驱动服务器端的Java程序。在网页上显示Java程序返回的数据。</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606110525.png\" alt></p>\n<h1 id=\"2-What？什么是Servlet？\"><a href=\"#2-What？什么是Servlet？\" class=\"headerlink\" title=\"2    What？什么是Servlet？\"></a>2    What？什么是Servlet？</h1><p>●如果把Web应用比作一个餐厅，Servlet就是餐厅中的服务员——负责接待顾客、上菜、结账。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606110646.png\" alt></p>\n<p>●从广义上来讲，Servlet规范是Sun公司制定的一套技术标准，包含与Web应用相关的一系列接口，是Web应用实现方式的宏观解决方案。而具体的Servlet容器负责提供标准的实现。<br>●从狭义上来讲，Servlet指的是javax.servlet.Servlet接口及其子接口，也可以指实现了Servlet接口的实现类。<br>●Servlet作为服务器端的一个组件，它的本意是“服务器端的小程序”。Servlet的实例对象由Servlet容器负责创建；Servlet的方法由容器在特定情况下调用；Servlet容器会在Web应用卸载时销毁Servlet对象的实例。  </p>\n<h1 id=\"3-How？如何使用Servlet？\"><a href=\"#3-How？如何使用Servlet？\" class=\"headerlink\" title=\"3    How？如何使用Servlet？\"></a>3    How？如何使用Servlet？</h1><h2 id=\"3-1-操作步骤\"><a href=\"#3-1-操作步骤\" class=\"headerlink\" title=\"3.1    操作步骤\"></a>3.1    操作步骤</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①搭建Web开发环境  </span><br><span class=\"line\">②创建动态Web工程  </span><br><span class=\"line\">③创建javax.servlet.Servlet接口的实现类：com.atguigu.servlet.MyFirstServlet  </span><br><span class=\"line\">④在service(ServletRequest, ServletResponse)方法中编写如下代码，输出响应信息：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">\tpublic void service(ServletRequest req, ServletResponse res)</span><br><span class=\"line\">\t\t\tthrows ServletException, IOException &#123;</span><br><span class=\"line\">\t\t//1.编写输出语句，证明当前方法被调用</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Servlet worked...&quot;);</span><br><span class=\"line\">\t\t//2.通过PrintWriter对象向浏览器端发送响应信息</span><br><span class=\"line\">\t\tPrintWriter writer = res.getWriter();</span><br><span class=\"line\">\t\twriter.write(&quot;Servlet response&quot;);</span><br><span class=\"line\">\t\twriter.close();</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>⑤在web.xml配置文件中注册MyFirstServlet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 声明一个Servlet --&gt;</span><br><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">\t&lt;!-- 为Servlet指定一个名称，以便于引用 --&gt;</span><br><span class=\"line\">\t&lt;servlet-name&gt;MyFirstServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t&lt;!-- 注册Servlet实现类的全类名 --&gt;</span><br><span class=\"line\">\t&lt;servlet-class&gt;com.atguigu.servlet.MyFirstServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 建立一个从虚拟路径到Servlet之间的映射关系 --&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">\t&lt;!-- 引用Servlet名称 --&gt;</span><br><span class=\"line\">\t&lt;servlet-name&gt;MyFirstServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">\t&lt;!-- 映射到Servlet的虚拟路径：“/MyFirstServlet” --&gt;</span><br><span class=\"line\">\t&lt;url-pattern&gt;/MyFirstServlet&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>⑥在WebContent目录下创建index.html<br>⑦在index.html中加入超链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;MyFirstServlet&quot;&gt;To Servlet&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<p>⑧点击超链接测试Servlet</p>\n<h2 id=\"3-2-运行分析\"><a href=\"#3-2-运行分析\" class=\"headerlink\" title=\"3.2    运行分析\"></a>3.2    运行分析</h2><ul>\n<li>index.html</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606110954.png\" alt>    </p>\n<ul>\n<li>web.xml</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111017.png\" alt></p>\n<h1 id=\"4-Servlet技术体系（了解）\"><a href=\"#4-Servlet技术体系（了解）\" class=\"headerlink\" title=\"4    Servlet技术体系（了解）\"></a>4    Servlet技术体系（了解）</h1><h2 id=\"4-1-Servlet\"><a href=\"#4-1-Servlet\" class=\"headerlink\" title=\"4.1    Servlet\"></a>4.1    Servlet</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111053.png\" alt></p>\n<p>①Servlet接口</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111115.png\" alt></p>\n<p>②GenericServlet抽象类</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111136.png\" alt></p>\n<p>●对Servlet功能进行了封装和完善，将service(ServletRequest req, ServletResponse res)保留为抽象方法，让使用者仅关心业务实现即可。  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111225.png\" alt></p>\n<p>③HttpServlet抽象类</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111248.png\" alt></p>\n<p>●对GenericServlet进行了进一步的封装和扩展，更贴近HTTP协议下的应用程序编写，在service(ServletRequest req, ServletResponse res)方法中，根据不同HTTP请求类型调用专门的方法进行处理。<br>●今后在实际使用中继承HttpServlet抽象类创建自己的Servlet实现类即可。重写doGet(HttpServletRequest req, HttpServletResponse resp)和doPost(HttpServletRequest req, HttpServletResponse resp)方法实现请求处理，不再需要重写service(ServletRequest req, ServletResponse res)方法了。  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111327.png\" alt></p>\n<h2 id=\"4-2-ServletConfig接口\"><a href=\"#4-2-ServletConfig接口\" class=\"headerlink\" title=\"4.2    ServletConfig接口\"></a>4.2    ServletConfig接口</h2><p>封装了Servlet配置信息</p>\n<h2 id=\"4-3-ServletContext接口\"><a href=\"#4-3-ServletContext接口\" class=\"headerlink\" title=\"4.3    ServletContext接口\"></a>4.3    ServletContext接口</h2><p>封装了当前Web应用上下文信息</p>\n<h2 id=\"4-4-HttpServletRequest接口\"><a href=\"#4-4-HttpServletRequest接口\" class=\"headerlink\" title=\"4.4    HttpServletRequest接口\"></a>4.4    HttpServletRequest接口</h2><p>封装了HTTP请求信息，ServletRequest的子接口</p>\n<h2 id=\"4-5-HttpServletResponse接口\"><a href=\"#4-5-HttpServletResponse接口\" class=\"headerlink\" title=\"4.5    HttpServletResponse接口\"></a>4.5    HttpServletResponse接口</h2><p>封装了HTTP响应信息，ServletResponse的子接口</p>\n<h1 id=\"5-Servlet生命周期\"><a href=\"#5-Servlet生命周期\" class=\"headerlink\" title=\"5    Servlet生命周期\"></a>5    Servlet生命周期</h1><p>5.1    应用程序中的对象不仅在空间上有层次结构的关系，在时间上也会因为处于程序运行过程中的不同阶段而表现出不同状态和不同行为——这就是对象的生命周期。<br>5.2    Servlet对象是Servlet容器创建的，生命周期方法都是由容器调用的。这一点和我们之前所编写的代码有很大不同。在今后的学习中我们会看到，越来越多的对象交给容器或框架来创建，越来越多的方法由容器或框架来调用，开发人员要尽可能多的将精力放在业务逻辑的实现上。  </p>\n<h2 id=\"5-3-Servlet生命周期的主要过程\"><a href=\"#5-3-Servlet生命周期的主要过程\" class=\"headerlink\" title=\"5.3    Servlet生命周期的主要过程\"></a>5.3    Servlet生命周期的主要过程</h2><h3 id=\"①Servlet对象的创建\"><a href=\"#①Servlet对象的创建\" class=\"headerlink\" title=\"①Servlet对象的创建\"></a>①Servlet对象的创建</h3><p>默认情况下，Servlet容器第一次收到HTTP请求时创建对应Servlet对象。容器之所以能做到这一点是由于我们在注册Servlet时提供了全类名，容器使用反射技术创建了Servlet的对象。</p>\n<h3 id=\"②Servlet对象初始化\"><a href=\"#②Servlet对象初始化\" class=\"headerlink\" title=\"②Servlet对象初始化\"></a>②Servlet对象初始化</h3><p>●Servlet容器创建Servlet对象之后，会调用init(ServletConfig config)方法，对其进行初始化。在javax.servlet.Servlet接口中，public void init(ServletConfig config)方法要求容器将ServletConfig的实例对象传入，这也是我们获取ServletConfig的实例对象的根本方法。  </p>\n<h3 id=\"③处理请求\"><a href=\"#③处理请求\" class=\"headerlink\" title=\"③处理请求\"></a>③处理请求</h3><p>●在javax.servlet.Servlet接口中，定义了service(ServletRequest req, ServletResponse res)方法处理HTTP请求，同时要求容器将ServletRequest对象和ServletResponse对象传入。</p>\n<h3 id=\"④Servlet对象销毁\"><a href=\"#④Servlet对象销毁\" class=\"headerlink\" title=\"④Servlet对象销毁\"></a>④Servlet对象销毁</h3><p>●服务器重启或服务器停止执行时会销毁Servlet对象，而销毁之前为了执行一些诸如释放缓存、关闭连接、保存数据等操作，所以设计了public void destroy()方法。</p>\n<h1 id=\"6-ServletConfig接口\"><a href=\"#6-ServletConfig接口\" class=\"headerlink\" title=\"6    ServletConfig接口\"></a>6    ServletConfig接口</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111546.png\" alt></p>\n<p>6.1    ServletConfig接口封装了Servlet配置信息，这一点从接口的名称上就能够看出来。但同时，代表当前Web应用的ServletContext对象也封装到了ServletConfig对象中，使ServletConfig对象成为了获取ServletContext对象的一座桥梁。  </p>\n<h2 id=\"6-2-ServletConfig对象的主要功能\"><a href=\"#6-2-ServletConfig对象的主要功能\" class=\"headerlink\" title=\"6.2    ServletConfig对象的主要功能\"></a>6.2    ServletConfig对象的主要功能</h2><p>①获取Servlet名称<br>②获取Servlet初始化参数<br>③获取ServletContext对象  </p>\n<h1 id=\"7-ServletContext接口\"><a href=\"#7-ServletContext接口\" class=\"headerlink\" title=\"7    ServletContext接口\"></a>7    ServletContext接口</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111633.png\" alt></p>\n<p>7.1    Web容器在启动时，它会为每个Web应用程序都创建一个对应的ServletContext对象，它代表当前Web应用——作用很像餐厅的经理。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606111650.png\" alt></p>\n<p>7.2    由于一个Web应用程序中的所有Servlet都共享同一个ServletContext对象，所以ServletContext对象也被称为 application 对象（Web应用程序对象）。<br>7.3    在应用程序中能够获取运行环境或容器信息的对象通常称之为“上下文对象”。<br>7.4    ServletContext对象的主要功能<br>①获取WEB应用程序的初始化参数<br>●设置Web应用初始化参数的方式是在web.xml的根标签下加入如下代码  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Web应用初始化参数 --&gt;</span><br><span class=\"line\">\t&lt;context-param&gt;</span><br><span class=\"line\">\t\t&lt;param-name&gt;ParamName&lt;/param-name&gt;</span><br><span class=\"line\">\t\t&lt;param-value&gt;ParamValue&lt;/param-value&gt;</span><br><span class=\"line\">\t&lt;/context-param&gt;</span><br></pre></td></tr></table></figure>\n<p>●获取Web应用初始化参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t\t//1.获取ServletContext对象</span><br><span class=\"line\">\t\tServletContext context = this.getServletContext();</span><br><span class=\"line\">\t\t//2.获取Web应用初始化参数</span><br><span class=\"line\">\t\tString paramValue = context.getInitParameter(&quot;ParamName&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;paramValue=&quot;+paramValue);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>②获取虚拟路径所映射的本地路径<br>●虚拟路径：浏览器访问Web应用中资源时所使用的路径。<br>●本地路径：资源在文件系统中的实际保存路径。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t\t//1.获取ServletContext对象</span><br><span class=\"line\">\t\tServletContext context = this.getServletContext();</span><br><span class=\"line\">\t\t//2.获取index.html的本地路径</span><br><span class=\"line\">\t\t//index.html的虚拟路径是“/index.html”,其中“/”表示当前Web应用的根目录，</span><br><span class=\"line\">\t\t//即WebContent目录</span><br><span class=\"line\">\t\tString realPath = context.getRealPath(&quot;/index.html&quot;);</span><br><span class=\"line\">\t\t//realPath=D:\\DevWorkSpace\\MyWorkSpace\\.metadata\\.plugins\\</span><br><span class=\"line\">\t\t//org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\MyServlet\\index.html</span><br><span class=\"line\">\t\tSystem.out.println(&quot;realPath=&quot;+realPath);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>③application域范围的属性</p>\n<h1 id=\"8-HttpServletRequest接口\"><a href=\"#8-HttpServletRequest接口\" class=\"headerlink\" title=\"8    HttpServletRequest接口\"></a>8    HttpServletRequest接口</h1><p>①该接口是ServletRequest接口的子接口，封装了HTTP请求的相关信息，由Servlet容器创建其实现类对象并传入service(ServletRequest req, ServletResponse res)方法中。以下我们所说的HttpServletRequest对象指的是容器提供的HttpServletRequest实现类对象。<br>②HttpServletRequest对象的主要功能有<br>●获取请求参数。<br>●在请求域中保存数据。<br>●将请求转发给另外一个URL地址，参见[请求的转发与重定向]。<br>●获取项目虚拟路径。  </p>\n<h1 id=\"9-HttpServletResponse接口\"><a href=\"#9-HttpServletResponse接口\" class=\"headerlink\" title=\"9    HttpServletResponse接口\"></a>9    HttpServletResponse接口</h1><p>①该接口是ServletResponse接口的子接口，封装了HTTP响应的相关信息，由Servlet容器创建其实现类对象并传入service(ServletRequest req, ServletResponse res)方法中。以下我们所说的HttpServletResponse对象指的是容器提供的HttpServletResponse实现类对象。<br>②主要功能<br>●使用PrintWriter对象向浏览器输出数据<br>●实现请求重定向，参见[请求的转发与重定向]。  </p>\n<h1 id=\"10-请求的转发与重定向\"><a href=\"#10-请求的转发与重定向\" class=\"headerlink\" title=\"10    请求的转发与重定向\"></a>10    请求的转发与重定向</h1><p>10.1    请求的转发与重定向是Servlet控制页面跳转的主要方法，在Web应用中使用非常广泛。  </p>\n<h2 id=\"10-2-请求的转发\"><a href=\"#10-2-请求的转发\" class=\"headerlink\" title=\"10.2    请求的转发\"></a>10.2    请求的转发</h2><p>①Servlet接收到浏览器端请求后，进行一定的处理，先不进行响应，而是在服务器端内部“转发”给其他Servlet程序继续处理。在这种情况下浏览器端只发出了一次请求，浏览器地址栏不会发生变化，用户也感知不到请求被转发了。<br>②转发请求的Servlet和目标Servlet共享同一个request对象。<br>③实现转发的API  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void doGet(HttpServletRequest request,</span><br><span class=\"line\">\t\t\tHttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t\t//1.使用RequestDispatcher对象封装目标资源的虚拟路径</span><br><span class=\"line\">\t\tRequestDispatcher dispatcher = request</span><br><span class=\"line\">\t\t\t\t.getRequestDispatcher(&quot;/index.html&quot;);</span><br><span class=\"line\">\t\t//2.调用RequestDispatcher对象的forward()方法“前往”目标资源</span><br><span class=\"line\">\t\t//[注意：传入的参数必须是传递给当前Servlet的service方法的</span><br><span class=\"line\">\t\t//那两个ServletRequest和ServletResponse对象]</span><br><span class=\"line\">\t\tdispatcher.forward(request, response);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-3-请求的重定向\"><a href=\"#10-3-请求的重定向\" class=\"headerlink\" title=\"10.3    请求的重定向\"></a>10.3    请求的重定向</h2><p>①Servlet接收到浏览器端请求并处理完成后，给浏览器端一个特殊的响应，这个特殊的响应要求浏览器去请求一个新的资源，整个过程中浏览器端会发出两次请求，且浏览器地址栏会改变为新资源的地址。<br>②重定向的情况下，原Servlet和目标资源之间就不能共享请求域数据了。<br>③实现重定向的API  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void doGet(HttpServletRequest request,</span><br><span class=\"line\">\t\t\tHttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t\t//1.调用HttpServletResponse对象的sendRedirect()方法</span><br><span class=\"line\">\t\t//2.传入的参数是目标资源的虚拟路径</span><br><span class=\"line\">\t\tresponse.sendRedirect(&quot;index.html&quot;);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-4-对比请求的转发和重定向\"><a href=\"#10-4-对比请求的转发和重定向\" class=\"headerlink\" title=\"10.4    对比请求的转发和重定向\"></a>10.4    对比请求的转发和重定向</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606113122.png\" alt></p>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"06 web-HTTP协议","url":"http://yoursite.com/2017/10/27/25 web-HTTP协议/","content":"<h1 id=\"1-HTTP协议简介\"><a href=\"#1-HTTP协议简介\" class=\"headerlink\" title=\"1.    HTTP协议简介\"></a>1.    HTTP协议简介</h1><ul>\n<li>HTTP 超文本传输协议 (HTTP-Hypertext transfer protocol)，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。它是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</li>\n<li>客户端与服务端通信时传输的内容我们称之为报文。</li>\n<li>HTTP就是一个通信规则，这个规则规定了客户端发送给服务器的报文格式，也规定了服务器发送给客户端的报文格式。实际我们要学习的就是这两种报文。客户端发送给服务器的称为”请求报文“，服务器发送给客户端的称为”响应报文“。</li>\n</ul>\n<h1 id=\"2-HTTP协议的发展历程\"><a href=\"#2-HTTP协议的发展历程\" class=\"headerlink\" title=\"2.    HTTP协议的发展历程\"></a>2.    HTTP协议的发展历程</h1><ul>\n<li>超文本传输协议的前身是世外桃源(Xanadu)项目，超文本的概念是泰德˙纳尔森(Ted Nelson)在1960年代提出的。进入哈佛大学后，纳尔森一直致力于超文本协议和该项目的研究，但他从未公开发表过资料。1989年，蒂姆˙伯纳斯˙李(Tim Berners Lee)在CERN(欧洲原子核研究委员会 = European Organization for Nuclear Research)担任软件咨询师的时候，开发了一套程序，奠定了万维网(WWW = World Wide Web)的基础。1990年12月，超文本在CERN首次上线。1991年夏天，继Telnet等协议之后，超文本转移协议成为互联网诸多协议的一分子。</li>\n<li>当时，Telnet协议解决了一台计算机和另外一台计算机之间一对一的控制型通信的要求。邮件协议解决了一个发件人向少量人员发送信息的通信要求。文件传输协议解决一台计算机从另外一台计算机批量获取文件的通信要求，但是它不具备一边获取文件一边显示文件或对文件进行某种处理的功能。新闻传输协议解决了一对多新闻广播的通信要求。而超文本要解决的通信要求是：在一台计算机上获取并显示存放在多台计算机里的文本、数据、图片和其他类型的文件；它包含两大部分：超文本转移协议和超文本标记语言(HTML)。HTTP、HTML以及浏览器的诞生给互联网的普及带来了飞跃。</li>\n</ul>\n<h1 id=\"3-HTTP协议的会话方式\"><a href=\"#3-HTTP协议的会话方式\" class=\"headerlink\" title=\"3.    HTTP协议的会话方式\"></a>3.    HTTP协议的会话方式</h1><ul>\n<li>浏览器与服务器之间的通信过程要经历四个步骤</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606103412.png\" alt></p>\n<ul>\n<li>浏览器与WEB服务器的连接过程是短暂的，每次连接只处理一个请求和响应。对每一个页面的访问，浏览器与WEB服务器都要建立一次单独的连接。</li>\n<li>浏览器到WEB服务器之间的所有通讯都是完全独立分开的请求和响应对。<h1 id=\"4-HTTP1-0和HTTP1-1的区别\"><a href=\"#4-HTTP1-0和HTTP1-1的区别\" class=\"headerlink\" title=\"4.    HTTP1.0和HTTP1.1的区别\"></a>4.    HTTP1.0和HTTP1.1的区别</h1></li>\n<li>在HTTP1.0版本中，浏览器请求一个带有图片的网页，会由于下载图片而与服务器之间开启一个新的连接；但在HTTP1.1版本中，允许浏览器在拿到当前请求对应的全部资源后再断开连接，提高了效率。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606103540.png\" alt></p>\n<h1 id=\"5-HttpWatch\"><a href=\"#5-HttpWatch\" class=\"headerlink\" title=\"5.    HttpWatch\"></a>5.    HttpWatch</h1><h2 id=\"5-1-安装\"><a href=\"#5-1-安装\" class=\"headerlink\" title=\"5.1 安装\"></a>5.1 安装</h2><ul>\n<li>由于IE8以下的IE浏览器没有提供监听HTTP的功能，所以如果要使用IE8以下的浏览器查看HTTP请求的内容需要安装一个工具HttpWatch。</li>\n<li>Firefox和chrome都有内置的开发者工具，可以直接查看Http请求。</li>\n<li>HttpWatch的使用非常简单，直接安装，然后一直下一步，直到安装完成。</li>\n</ul>\n<h2 id=\"5-2-使用\"><a href=\"#5-2-使用\" class=\"headerlink\" title=\"5.2 使用\"></a>5.2 使用</h2><ul>\n<li>安装完成后，打开IE浏览器，工具下拉列表可以看到HttpWatch Professional选项</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606103649.png\" alt></p>\n<ul>\n<li>打开后点击Record按钮开始监听Http请求。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606103715.png\" alt></p>\n<h1 id=\"6-报文\"><a href=\"#6-报文\" class=\"headerlink\" title=\"6.    报文\"></a>6.    报文</h1><h2 id=\"6-1-报文格式\"><a href=\"#6-1-报文格式\" class=\"headerlink\" title=\"6.1 报文格式\"></a>6.1 报文格式</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606103741.png\" alt></p>\n<h2 id=\"6-2-请求报文\"><a href=\"#6-2-请求报文\" class=\"headerlink\" title=\"6.2 请求报文\"></a>6.2 请求报文</h2><h3 id=\"6-2-1-报文格式\"><a href=\"#6-2-1-报文格式\" class=\"headerlink\" title=\"6.2.1 报文格式\"></a>6.2.1 报文格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求首行（请求行）；</span><br><span class=\"line\">请求头信息（请求头）；</span><br><span class=\"line\">空行；</span><br><span class=\"line\">请求体；</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-2-GET请求\"><a href=\"#6-2-2-GET请求\" class=\"headerlink\" title=\"6.2.2 GET请求\"></a>6.2.2 GET请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /Hello/index.jsp HTTP/1.1</span><br><span class=\"line\">Accept: */*</span><br><span class=\"line\">Accept-Language: zh-CN</span><br><span class=\"line\">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Host: localhost:8080</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Cookie: JSESSIONID=C55836CDA892D9124C03CF8FE8311B15</span><br></pre></td></tr></table></figure>\n<ul>\n<li>GET /Hello/index.jsp HTTP/1.1：GET请求，请求服务器路径为Hello/index.jsp，协议为1.1；</li>\n<li>Host:localhost：请求的主机名为localhost；</li>\n<li>User-Agent: Mozilla/4.0 (compatible; MSIE 8.0…：与浏览器和OS相关的信息。有些网站会显示用户的系统版本和浏览器版本信息，这都是通过获取User-Agent头信息而来的；</li>\n<li>Accept: <em>/</em>：告诉服务器，当前客户端可以接收的文档类型， <em>/</em>，就表示什么都可以接收；</li>\n<li>Accept-Language: zh-CN：当前客户端支持的语言，可以在浏览器的工具选项中找到语言相关信息；</li>\n<li>Accept-Encoding: gzip, deflate：支持的压缩格式。数据在网络上传递时，可能服务器会把数据压缩后再发送；</li>\n<li>Connection: keep-alive：客户端支持的链接方式，保持一段时间链接，默认为3000ms；</li>\n<li>Cookie: JSESSIONID=369766FDF6220F7803433C0B2DE36D98：因为不是第一次访问这个地址，所以会在请求中把上一次服务器响应中发送过来的Cookie在请求中一并发送过去。</li>\n</ul>\n<h3 id=\"6-2-3-POST请求\"><a href=\"#6-2-3-POST请求\" class=\"headerlink\" title=\"6.2.3 POST请求\"></a>6.2.3 POST请求</h3><ul>\n<li>POST请求要求将form标签的method的属性设置为post</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190606104102.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /Hello/target.html HTTP/1.1</span><br><span class=\"line\">Accept: application/x-ms-application, image/jpeg, application/xaml+xml, image/gif, image/pjpeg, application/x-ms-xbap, */*</span><br><span class=\"line\">Referer: http://localhost:8080/Hello/</span><br><span class=\"line\">Accept-Language: zh-CN</span><br><span class=\"line\">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Host: localhost:8080</span><br><span class=\"line\">Content-Length: 14</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Cookie: JSESSIONID=774DA38C1B78AE288610D77621590345</span><br><span class=\"line\"></span><br><span class=\"line\">username=admin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>POST请求有请求体，而GET请求没有请求体。</li>\n<li>Referer: <a href=\"http://localhost:8080/hello/index.jsp：请求来自哪个页面，例如你在百度上点击链接到了这里，那么Referer:http://www.baidu.com；如果你是在浏览器的地址栏中直接输入的地址，那么就没有Referer这个请求头了；\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello/index.jsp：请求来自哪个页面，例如你在百度上点击链接到了这里，那么Referer:http://www.baidu.com；如果你是在浏览器的地址栏中直接输入的地址，那么就没有Referer这个请求头了；</a></li>\n<li>Content-Type: application/x-www-form-urlencoded：表单的数据类型，说明会使用url格式编码数据；url编码的数据都是以“%”为前缀，后面跟随两位的16进制，例如“传智”这两个字使用UTF-8的url编码用为“%E4%BC%A0%E6%99%BA”；</li>\n<li>Content-Length:13：请求体的长度，这里表示13个字节。</li>\n<li>keyword=hello：请求体内容！hello是在表单中输入的数据，keyword是表单字段的名字。</li>\n</ul>\n<h2 id=\"6-3-响应报文\"><a href=\"#6-3-响应报文\" class=\"headerlink\" title=\"6.3 响应报文\"></a>6.3 响应报文</h2><h3 id=\"6-3-1-报文格式\"><a href=\"#6-3-1-报文格式\" class=\"headerlink\" title=\"6.3.1 报文格式\"></a>6.3.1 报文格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">响应首行（响应行）；</span><br><span class=\"line\">响应头信息（响应头）；</span><br><span class=\"line\">空行；</span><br><span class=\"line\">响应体；</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: Apache-Coyote/1.1</span><br><span class=\"line\">Content-Type: text/html;charset=UTF-8</span><br><span class=\"line\">Content-Length: 274</span><br><span class=\"line\">Date: Tue, 07 Apr 2015 10:08:26 GMT</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;Hello&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>HTTP/1.1 200 OK：响应协议为HTTP1.1，状态码为200，表示请求成功；</li>\n<li>Server: Apache-Coyote/1.1：服务器的版本信息；</li>\n<li>Content-Type: text/html;charset=UTF-8：响应体使用的编码为UTF-8；</li>\n<li>Content-Length: 274：响应体为274字节；</li>\n<li>Date: Tue, 07 Apr 2015 10:08:26 GMT：响应的时间，这可能会有8小时的时区差；</li>\n</ul>\n<h3 id=\"6-3-2-响应码\"><a href=\"#6-3-2-响应码\" class=\"headerlink\" title=\"6.3.2 响应码\"></a>6.3.2 响应码</h3><p>响应码对浏览器来说很重要，它告诉浏览器响应的结果；</p>\n<ul>\n<li>200：请求成功，浏览器会把响应体内容（通常是html）显示在浏览器中；</li>\n<li>404：请求的资源没有找到，说明客户端错误的请求了不存在的资源；</li>\n<li>500：请求资源找到了，但服务器内部出现了错误；</li>\n<li>302：重定向，当响应码为302时，表示服务器要求浏览器重新再发一个请求，服务器会发送一个响应头Location，它指定了新请求的URL地址；</li>\n</ul>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"05 web-环境搭建及Tomcat安装、配置、启动.md","url":"http://yoursite.com/2017/10/20/24 web-环境搭建及Tomcat安装、配置、启动.md/","content":"<h1 id=\"1-Web服务器\"><a href=\"#1-Web服务器\" class=\"headerlink\" title=\"1.Web服务器\"></a>1.Web服务器</h1><ul>\n<li>Web服务器主要用来接收客户端发送的请求和响应客户端请求。</li>\n<li>常见的JavaWeb服务器：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tomcat（Apache）：当前应用最广的JavaWeb服务器；</span><br><span class=\"line\">JBoss（Redhat红帽）：支持JavaEE，应用比较广EJB容器 –&gt; SSH轻量级的框架代替</span><br><span class=\"line\">GlassFish（Orcale）：Oracle开发JavaWeb服务器，应用不是很广；</span><br><span class=\"line\">Resin（Caucho）：支持JavaEE，应用越来越广；</span><br><span class=\"line\">Weblogic（Orcale）：要钱的！支持JavaEE，适合大型项目；</span><br><span class=\"line\">Websphere（IBM）：要钱的！支持JavaEE，适合大型项目；</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-Tomcat服务器\"><a href=\"#2-Tomcat服务器\" class=\"headerlink\" title=\"2.Tomcat服务器\"></a>2.Tomcat服务器</h1><h2 id=\"2-1-Tomcat简介\"><a href=\"#2-1-Tomcat简介\" class=\"headerlink\" title=\"2.1 Tomcat简介\"></a>2.1 Tomcat简介</h2><ul>\n<li>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。目前最新版本是9.0。我们要用的是7.0。</li>\n</ul>\n<h2 id=\"2-2-Tomcat安装、配置、启动\"><a href=\"#2-2-Tomcat安装、配置、启动\" class=\"headerlink\" title=\"2.2 Tomcat安装、配置、启动\"></a>2.2 Tomcat安装、配置、启动</h2><p>①解压apache-tomcat-6.0.44-windows-x64.zip到非中文无空格目录中</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173314.png\" alt></p>\n<ul>\n<li>bin：该目录下存放的是二进制可执行文件，如果是安装版，那么这个目录下会有两个exe文件：tomcat6.exe、tomcat6w.exe，前者是在控制台下启动Tomcat，后者是弹出GUI窗口启动Tomcat；如果是解压版，那么会有startup.bat和shutdown.bat文件，startup.bat用来启动Tomcat，但需要先配置JAVA_HOME环境变量才能启动，shutdown.bat用来停止Tomcat；</li>\n<li>conf：这是一个非常非常重要的目录，这个目录下有四个最为重要的文件：<ul>\n<li>server.xml：配置整个服务器信息。例如修改端口号</li>\n<li>tomcat-users.xml：存储tomcat用户的文件，这里保存的是tomcat的用户名及密码，以及用户的角色信息。可以按着该文件中的注释信息添加tomcat用户，然后就可以在Tomcat主页中进入Tomcat Manager页面了；</li>\n<li>web.xml：部署描述符文件，这个文件中注册了很多MIME类型，即文档类型。这些MIME类型是客户端与服务器之间说明文档类型的，如用户请求一个html网页，那么服务器还会告诉客户端浏览器响应的文档是text/html类型的，这就是一个MIME类型。客户端浏览器通过这个MIME类型就知道如何处理它了。当然是在浏览器中显示这个html文件了。但如果服务器响应的是一个exe文件，那么浏览器就不可能显示它，而是应该弹出下载窗口才对。MIME就是用来说明文档的内容是什么类型的！</li>\n<li>context.xml：对所有应用的统一配置，通常我们不会去配置它。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>lib：Tomcat的类库，里面是一大堆jar文件。如果需要添加Tomcat依赖的jar文件，可以把它放到这个目录中，当然也可以把应用依赖的jar文件放到这个目录中，这个目录中的jar所有项目都可以共享之，但这样你的应用放到其他Tomcat下时就不能再共享这个目录下的jar包了，所以建议只把Tomcat需要的jar包放到这个目录下；</li>\n<li>logs：这个目录中都是日志文件，记录了Tomcat启动和关闭的信息，如果启动Tomcat时有错误，那么异常也会记录在日志文件中。</li>\n<li>temp：存放Tomcat的临时文件，这个目录下的东西可以在停止Tomcat后删除！</li>\n<li>webapps：存放web项目的目录，其中每个文件夹都是一个项目；如果这个目录下已经存在了目录，那么都是tomcat自带的项目。其中ROOT是一个特殊的项目，在地址栏中没有给出项目目录时，对应的就是ROOT项目。<a href=\"http://localhost:8080/examples，进入示例项目。其中examples就是项目名，即文件夹的名字。\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/examples，进入示例项目。其中examples就是项目名，即文件夹的名字。</a></li>\n<li>work：运行时生成的文件，最终运行的文件都在这里。通过webapps中的项目生成的！可以把这个目录下的内容删除，再次运行时会生再次生成work目录。当客户端用户访问一个JSP文件时，Tomcat会通过JSP生成Java文件，然后再编译Java文件生成class文件，生成的java和class文件都会存放到这个目录下。</li>\n<li>LICENSE：许可证。</li>\n<li>NOTICE：说明文件。</li>\n</ul>\n<p>②如果双击startup.bat后窗口一闪而过，请查看JAVA_HOME是否配置正确</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173446.png\" alt><br>③新建环境变量CATALINA_HOME=解压目录</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173512.png\" alt></p>\n<p>④在Path环境变量中加入Tomcat解压目录\\bin目录</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173550.png\" alt></p>\n<p>⑤在命令行中运行catalina run或者 startup启动Tomcat服务器，在浏览器地址栏访问如下地址进行测试<br>    <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173611.png\" alt></p>\n<p>⑥如果启动失败，提示端口号被占用，则将默认的8080端口修改为其他未使用的值，例如10086等。<br>    打开：解压目录\\conf\\server.xml，找到第一个Connector标签，修改port属性</p>\n<h2 id=\"2-3在Eclipse中创建Tomcat镜像\"><a href=\"#2-3在Eclipse中创建Tomcat镜像\" class=\"headerlink\" title=\"2.3在Eclipse中创建Tomcat镜像\"></a>2.3在Eclipse中创建Tomcat镜像</h2><p>①在Servers视窗里点击超链接或在空白处右键→New<br><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173659.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173719.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173753.png\" alt></p>\n<p>②创建动态Web工程进行测试</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605173811.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]在WebContent目录下创建index.jsp，加入如下代码</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;%@page import=&quot;java.util.Date&quot;%&gt;</span><br><span class=\"line\">\t&lt;%=new Date() %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[2]在index.jsp上点右键：Run as→Run on Server查看运行结果</span><br></pre></td></tr></table></figure>\n<p>③说明：关联Tomcat镜像时，Eclipse会从本地Tomcat中复制信息及文件，之后二者的配置信息就没有关系了，其中任何一个的配置信息发生变化都不会自动同步到另外一个。</p>\n","categories":["JavaWeb"],"tags":["JavaWeb概述","开发环境配置"]},{"title":"04 web-XML概述","url":"http://yoursite.com/2017/10/14/23 web-XML概述/","content":"<h1 id=\"XML简介\"><a href=\"#XML简介\" class=\"headerlink\" title=\"XML简介\"></a>XML简介</h1><p>•XML–可扩展标记语言<br>    eXtensible Markup Language<br>•由W3C组织发布，目前推荐遵守的是W3C组织于2000年发布的XML1.0规范<br>•XML的使命，就是以一个统一的格式，组织有关系的数据，为不同平台下的应用程序服务<br>•XML用来传输和存储数据，HTML用来显示数据<br>•XML没有预定义标签，均为自定义标签<br>•XML用途<br>•XML–可扩展标记语言<br>    eXtensible Markup Language<br>•由W3C组织发布，目前推荐遵守的是W3C组织于2000年发布的XML1.0规范<br>•XML的使命，就是以一个统一的格式，组织有关系的数据，为不同平台下的应用程序服务<br>•XML用来传输和存储数据，HTML用来显示数据<br>•XML没有预定义标签，均为自定义标签 </p>\n<h1 id=\"XML基本语法\"><a href=\"#XML基本语法\" class=\"headerlink\" title=\"XML基本语法\"></a>XML基本语法</h1><p>①XML声明要么不写，要写就写在第一行，并且前面没有任何其他字符<br>②只能有一个根标签<br>③标签必须正确结束<br>④标签不能交叉嵌套<br>⑤严格区分大小写<br>⑥属性必须有值，且必须加引号<br>⑦标签不能以数字开头<br>⑧注释不能嵌套  </p>\n<h1 id=\"XML文档组成\"><a href=\"#XML文档组成\" class=\"headerlink\" title=\"XML文档组成\"></a>XML文档组成</h1><ul>\n<li>XML声明</li>\n</ul>\n<p>•version属性指定XML版本，固定值是1.0<br>•encoding指定的字符集，是告诉解析器使用什么字符集进行解码，而编码是由文本编辑器决定的</p>\n<ul>\n<li>CDATA区<br>•当XML文档中需要写一些程序代码、SQL语句或其他不希望XML解析器进行解析的内容时，就可以写在CDATA区中<br>•XML解析器会将CDATA区中的内容原封不动的输出<br>•CDATA区的定义格式：&lt;![CDATA[…]]&gt;</li>\n</ul>\n<h1 id=\"XML解析\"><a href=\"#XML解析\" class=\"headerlink\" title=\"XML解析\"></a>XML解析</h1><p>•XML解析是指通过解析器读取XML文档，解释语法，并将文档转化成对象<br>•对XML的一切操作都是由解析开始的，所以解析非常重要。<br>•Java 平台同时提供了 DOM（Document Object Model）和 SAX（Simple API for XML）。  </p>\n<h2 id=\"XML解析技术体系\"><a href=\"#XML解析技术体系\" class=\"headerlink\" title=\"XML解析技术体系\"></a>XML解析技术体系</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605165437.png\" alt></p>\n<h1 id=\"DOM和SAX对比\"><a href=\"#DOM和SAX对比\" class=\"headerlink\" title=\"DOM和SAX对比\"></a>DOM和SAX对比</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605165528.png\" alt><br> DOM SAX</p>\n<h1 id=\"dom4j\"><a href=\"#dom4j\" class=\"headerlink\" title=\"dom4j\"></a>dom4j</h1><p>•dom4j是一个开源XML解析包<br>•dom4j是一个非常优秀的Java XML API，具有性能优异、功能强大和极易使用的特点。现在很多软件都采用dom4j，例如Hibernate。<br>•使用dom4j开发，需导入dom4j相应的jar包dom4j-1.6.1.jar</p>\n<h2 id=\"Dom4j解析关键步骤\"><a href=\"#Dom4j解析关键步骤\" class=\"headerlink\" title=\"Dom4j解析关键步骤\"></a>Dom4j解析关键步骤</h2><p>•解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.创建解析器对象</span><br><span class=\"line\">SAXReader saxReader = new SAXReader();</span><br><span class=\"line\">//2.解析xml文件获取document对象</span><br><span class=\"line\">Document document = saxReader.read(&quot;students.xml&quot;);</span><br><span class=\"line\">//3.得到根元素</span><br><span class=\"line\">Element root = document.getRootElement();</span><br><span class=\"line\">•修改</span><br><span class=\"line\">//添加一个新的student节点</span><br><span class=\"line\">Element newEle = rootElement.addElement(&quot;student&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h2 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg\"></a>eg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        //创建解析器</span><br><span class=\"line\">    \tSAXReader reader = new SAXReader();</span><br><span class=\"line\">    \t//将.xml文件解析为document对象</span><br><span class=\"line\">\t\tDocument document = reader.read(&quot;students.xml&quot;);</span><br><span class=\"line\">\t\t//通过Document对象获取跟元素</span><br><span class=\"line\">\t\tElement rootElement = document.getRootElement();</span><br><span class=\"line\">\t\t//通过跟元素，遍历子元素</span><br><span class=\"line\">\t\tList&lt;Element&gt; elements = rootElement.elements();</span><br><span class=\"line\">\t\tfor (Element element : elements) &#123;</span><br><span class=\"line\">\t\t\t//获取元素的属性值</span><br><span class=\"line\">\t\t\tString id = element.attributeValue(&quot;id&quot;);</span><br><span class=\"line\">\t\t\t//获取子元素的文本值</span><br><span class=\"line\">\t\t\tString name = element.elementText(&quot;name&quot;);</span><br><span class=\"line\">\t\t\tString age = element.elementText(&quot;age&quot;);</span><br><span class=\"line\">\t\t\tStudent stu = new Student(id, name, age);</span><br><span class=\"line\">\t\t\tSystem.out.println(stu);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125; catch (DocumentException e) &#123;</span><br><span class=\"line\">\t\t\t// TODO Auto-generated catch block</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Xpath查询\"><a href=\"#Xpath查询\" class=\"headerlink\" title=\"Xpath查询\"></a>Xpath查询</h1><p>•XPath 是在 XML 文档中查找信息的语言<br>•XPath通过元素和属性进行查找，简化了Dom4j查找节点的过程，是W3C组织发布的标准。<br>•使用XPath必须导入jaxen-1.1-beta-6.jar包<br>•具体语法见 XPathTutorial(菜鸟必备)<br>•两个重要方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.selectSingleNode(&quot;/students/student[@id=&apos;1&apos;]&quot;)</span><br><span class=\"line\">document.selectNodes(&quot;/students/student&quot;)</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"03 web-jQuery基础","url":"http://yoursite.com/2017/10/10/22 jQuery基础/","content":"<h1 id=\"学习路线\"><a href=\"#学习路线\" class=\"headerlink\" title=\"学习路线\"></a>学习路线</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605155605.png\" alt></p>\n<h1 id=\"1-jQuery简介\"><a href=\"#1-jQuery简介\" class=\"headerlink\" title=\"1. jQuery简介\"></a>1. jQuery简介</h1><ul>\n<li>为了简化 JavaScript 的开发, 一些 JavsScript 库诞生了. JavaScript库封装了很多预定义的对象和实用函数。能帮助使用者建立有高难度交互的页面, 并且兼容各大浏览器</li>\n<li>当前流行的 JavaScript 库有</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605155508.png\" alt></p>\n<ul>\n<li>jQuery是继prototype之后又一个优秀的Javascript框架。其宗旨是——WRITE LESS,DO MORE。优势如下:<ul>\n<li>轻量级(压缩后只有几十k)</li>\n<li><strong>强大的选择器</strong></li>\n<li><strong>出色的 DOM 操作的封装</strong></li>\n<li><strong>可靠的事件处理机制</strong></li>\n<li>完善的 Ajax</li>\n<li>出色的浏览器兼容性</li>\n<li><strong>隐式迭代：对集合对象做相同操作时不需要逐个进行遍历，jQuery自动进行遍历</strong><br>文档说明很全<br>可扩展插件</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-jQuery快速入门\"><a href=\"#2-jQuery快速入门\" class=\"headerlink\" title=\"2. jQuery快速入门\"></a>2. jQuery快速入门</h1><h2 id=\"2-1-将jQuery的库文件加入应用\"><a href=\"#2-1-将jQuery的库文件加入应用\" class=\"headerlink\" title=\"2.1. 将jQuery的库文件加入应用\"></a>2.1. 将jQuery的库文件加入应用</h2><ul>\n<li>在开发测试时, 用的是未压缩的版本: jquery-1.7.2.js</li>\n<li>在上线项目中, 会使用压缩后的版本: jquery-1.7.2.min.js</li>\n</ul>\n<h2 id=\"2-2-HelloWorld\"><a href=\"#2-2-HelloWorld\" class=\"headerlink\" title=\"2.2. HelloWorld\"></a>2.2. HelloWorld</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 导入jQuery库--&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;/&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t//调用jQuery库定义的函数</span><br><span class=\"line\">\t$(function()&#123;</span><br><span class=\"line\">\t\t$(&quot;button&quot;).click(function()&#123;</span><br><span class=\"line\">\t\t\talert(&quot;Hello&quot;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-Jquery语法详解\"><a href=\"#3-Jquery语法详解\" class=\"headerlink\" title=\"3. Jquery语法详解\"></a>3. Jquery语法详解</h1><h2 id=\"3-1-jQuery源码初分析\"><a href=\"#3-1-jQuery源码初分析\" class=\"headerlink\" title=\"3.1. jQuery源码初分析\"></a>3.1. jQuery源码初分析</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function( window, undefined ) &#123;\t//16行</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar jQuery = (function() &#123;\t//22行</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tvar jQuery = function( selector, context ) &#123;</span><br><span class=\"line\">\t\t\t// The jQuery object is actually just the init constructor &apos;enhanced&apos;</span><br><span class=\"line\">\t\t\treturn new jQuery.fn.init( selector, context, rootjQuery );</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tjQuery.fn = jQuery.prototype = &#123;\t//97行</span><br><span class=\"line\">\t\t\tconstructor: jQuery,</span><br><span class=\"line\">\t\t\tinit: function( selector, context, rootjQuery ) &#123;</span><br><span class=\"line\">\t\t\t\t//...</span><br><span class=\"line\">\t\t\t&#125;\t//207行</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;;\t//319行</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t//...</span><br><span class=\"line\">\t\treturn jQuery;\t//981行</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;)();\t//983行</span><br><span class=\"line\">\t</span><br><span class=\"line\">// Expose jQuery to the global object</span><br><span class=\"line\">window.jQuery = window.$ = jQuery;\t//9384行</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;)( window );\t//9404行</span><br></pre></td></tr></table></figure>\n<p>说明: </p>\n<ul>\n<li>自执行函数</li>\n<li>给window添加了两个等同的函数: jQuery()/$()</li>\n<li>执行$()后,返回的是一个jQuery库包装的对象, 一般称之为:jQuery对象</li>\n</ul>\n<h2 id=\"3-2-核心\"><a href=\"#3-2-核心\" class=\"headerlink\" title=\"3.2. 核心\"></a>3.2. 核心</h2><h3 id=\"1-jQuery核心函数\"><a href=\"#1-jQuery核心函数\" class=\"headerlink\" title=\"1).  jQuery核心函数: $()\"></a>1).  jQuery核心函数: $()</h3><ul>\n<li>jQuery库中为window对象定义了一个$函数(方法)  jQuery()</li>\n<li>$函数会根据参数数据类型的不同做不同的工作, 返回一个jQuery封装的伪数组的对象</li>\n</ul>\n<h4 id=\"1-1-callback\"><a href=\"#1-1-callback\" class=\"headerlink\" title=\"1.1). $(callback)\"></a>1.1). $(callback)</h4><ul>\n<li>传入一个function参数, 作为回调函数</li>\n<li>在DOM文档载入完成后, 回调函数自动执行</li>\n<li>这个函数的作用如同$(document).ready(callback)一样</li>\n<li>它与window.onload是有区别的</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605160044.png\" alt></p>\n<ul>\n<li>源码聚焦</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605160103.png\" alt></p>\n<h4 id=\"1-2-selector\"><a href=\"#1-2-selector\" class=\"headerlink\" title=\"1.2). $(selector)\"></a>1.2). $(selector)</h4><ul>\n<li>接收一个CSS选择器格式的字符串参数</li>\n<li>根据此字符串在document中去匹配一组元素, 并封装成jQuery对象返回</li>\n</ul>\n<p>源码聚焦</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605160138.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605160158.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605160250.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605160403.png\" alt></p>\n<h4 id=\"1-3-domEle\"><a href=\"#1-3-domEle\" class=\"headerlink\" title=\"1.3). $(domEle)\"></a>1.3). $(domEle)</h4><ul>\n<li>接收一个DOM对象类型的参数</li>\n<li>返回包含这个dom对象的jQuery对象<ul>\n<li>[注意：如果声明一个变量指向jQuery对象，那么这个变量习惯上要以$开头。这就是jQuery对象的命名规范。]</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>jQuery对象只能调用jQuery封装的方法</li>\n<li>DOM对象只能调用DOM中所定义的方法</li>\n</ul>\n<p>源码聚焦</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605160552.png\" alt></p>\n<ul>\n<li>DOM对象和jQuery对象的互相转换</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①DOM对象转jQuery对象</span><br><span class=\"line\">使用jQuery核心函数包装DOM对象：$(btnEle)</span><br><span class=\"line\">②jQuery对象转DOM对象</span><br><span class=\"line\">\t[1]使用数组下标：$btn[0]</span><br><span class=\"line\">\t[2]使用get(index)方法：$btn.get(0)</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-4-htmlString\"><a href=\"#1-4-htmlString\" class=\"headerlink\" title=\"1.4). $(htmlString)\"></a>1.4). $(htmlString)</h4><ul>\n<li>接收一个标签字符串参数</li>\n<li>创建对应的标签对象, 并包装成jQuery对象</li>\n<li>如: $(“<div><p>Hello</p></div>“)</li>\n</ul>\n<h3 id=\"2-jQuery对象访问\"><a href=\"#2-jQuery对象访问\" class=\"headerlink\" title=\"2).  jQuery对象访问\"></a>2).  jQuery对象访问</h3><h4 id=\"2-1-each-callback\"><a href=\"#2-1-each-callback\" class=\"headerlink\" title=\"2.1).each(callback)\"></a>2.1).each(callback)</h4><ul>\n<li>callback函数:  function (index, domEle)  </li>\n<li>遍历jQuery对象中包含的所有DOM对象, 每拿到一个dom对象都会调用指定的回调函数, 并将下标和dom对象传入</li>\n</ul>\n<h4 id=\"2-2-text\"><a href=\"#2-2-text\" class=\"headerlink\" title=\"2.2).text()\"></a>2.2).text()</h4><ul>\n<li>text() 得到元素节点对象的文本内容。</li>\n<li>text(str) 设置元素的文本内容</li>\n</ul>\n<h4 id=\"2-3-attr\"><a href=\"#2-3-attr\" class=\"headerlink\" title=\"2.3).attr()\"></a>2.3).attr()</h4><ul>\n<li>attr(属性名) 返回“属性名”对应的属性值</li>\n<li>attr(属性名,属性值) 将“属性名”对应的属性设置为“属性值”</li>\n</ul>\n<h4 id=\"2-4-val\"><a href=\"#2-4-val\" class=\"headerlink\" title=\"2.4).val()\"></a>2.4).val()</h4><ul>\n<li>val() 读取value属性</li>\n<li>val(value值) 设置value属性</li>\n<li>val([选项值1,选项值2,…,选项值n]) 设置单选框、多选框或下拉列表被选中的值</li>\n</ul>\n<h2 id=\"3-3-选择器-同css\"><a href=\"#3-3-选择器-同css\" class=\"headerlink\" title=\"3.3. 选择器(同css)\"></a>3.3. 选择器(同css)</h2><ul>\n<li>jQuery最牛的地方就是其强大的选择器, 使用其选择器基本可以快速轻松的找到页面的任意节点</li>\n<li>jquery的选择器分类<ul>\n<li>基本选择器</li>\n<li>层次选择器</li>\n<li>过滤选择器</li>\n<li>基本</li>\n<li>内容</li>\n<li>可见</li>\n<li>属性</li>\n<li>子元素</li>\n<li>表单</li>\n<li>表单属性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-基本选择器\"><a href=\"#1-基本选择器\" class=\"headerlink\" title=\"1). 基本选择器\"></a>1). 基本选择器</h3><ul>\n<li>基本选择器是jquery中最简单，也是最常用的选择器</li>\n<li>它通过标签名,id属性,class属性来查找匹配的DOM元素</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1)\tid选择器    </span><br><span class=\"line\">用法:$(‘#id’)</span><br><span class=\"line\">返回值：根据id属性匹配一个标签, 封装成jQuery对象</span><br><span class=\"line\"></span><br><span class=\"line\">1.2)\t标签选择器</span><br><span class=\"line\">用法:  $(‘tagName’) </span><br><span class=\"line\">返回值：根据标签名匹配的一个或多个标签, 封装成jQuery对象</span><br><span class=\"line\"></span><br><span class=\"line\">1.3)\tclass选择器</span><br><span class=\"line\">用法:  $(‘.class’) </span><br><span class=\"line\">返回值：根据class属性值匹配一个或多个标签, 封装成jQuery对象</span><br><span class=\"line\"></span><br><span class=\"line\">1.4)\t*选择器</span><br><span class=\"line\">用法:  $(*)  </span><br><span class=\"line\">返回值: 匹配所有标签, 封装成jQuery对象</span><br><span class=\"line\"></span><br><span class=\"line\">1.5)\tselector1,selector2,…</span><br><span class=\"line\">用法:  $(”div,span,.myClass”)    </span><br><span class=\"line\">返回值: 所有匹配选择器的标签, 封装成jQuery对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-层次选择器\"><a href=\"#2-层次选择器\" class=\"headerlink\" title=\"2). 层次选择器\"></a>2). 层次选择器</h3><ul>\n<li>如果想通过DOM元素之间的层次关系来获取特定元素。例如子元素、兄弟元素等。则需要通过层次选择器。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1). ancestor descendant</span><br><span class=\"line\">用法:$(”form input”)</span><br><span class=\"line\">说明:在给定的祖先元素下匹配所有后代元素</span><br><span class=\"line\">2.2)\tparent &gt; child</span><br><span class=\"line\">用法: $(”form &gt; input”) </span><br><span class=\"line\">说明: 在指定父元素下匹配所有子元素.注意:要区分好后代元素与子元素</span><br><span class=\"line\">2.3)\tprev + next</span><br><span class=\"line\">用法: $(”label + input”) </span><br><span class=\"line\">说明: 匹配所有紧接在prev元素后的next元素</span><br><span class=\"line\">2.4)\tprev ~ siblings</span><br><span class=\"line\">用法: $(”form ~ input”) </span><br><span class=\"line\">说明: 匹配prev元素之后的所有 siblings元素, 不包含该元素在内,</span><br><span class=\"line\">    并且siblings匹配的是和prev同辈的元素,其后辈元素不被匹配.</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-基本过滤选择器\"><a href=\"#3-基本过滤选择器\" class=\"headerlink\" title=\"3). 基本过滤选择器\"></a>3). 基本过滤选择器</h3><ul>\n<li>过滤选择器主要是通过特定的过滤规则来筛选出所需的DOM元素, 该选择器都以 “:”开头</li>\n<li>按照不同的过滤规则, 过滤选择器可以分为基本过滤, 内容过滤, 可见性过滤, 属性过滤, 子元素过滤, 表单过滤和表单属性过滤选择器.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.1). :first</span><br><span class=\"line\">用法: $(”tr:first”) ;   </span><br><span class=\"line\">说明: 匹配找到的第一个元素</span><br><span class=\"line\"></span><br><span class=\"line\">3.2). :last</span><br><span class=\"line\">用法: $(”tr:last”)  </span><br><span class=\"line\">说明: 匹配找到的最后一个元素.与 :first 相对应</span><br><span class=\"line\"></span><br><span class=\"line\">3.3). :not(selector)</span><br><span class=\"line\">用法: $(”input:not(:checked)”)</span><br><span class=\"line\">说明: 去除所有与给定选择器匹配的元素.有点类似于”非”,</span><br><span class=\"line\">    意思是没有被选中的input(当input的type=”checkbox”).</span><br><span class=\"line\"></span><br><span class=\"line\">3.4). :even</span><br><span class=\"line\">用法: $(”tr:even”)   </span><br><span class=\"line\">说明: 匹配所有索引值为偶数的元素，从0开始计数.js的数组都是从0开始计数的.</span><br><span class=\"line\"></span><br><span class=\"line\">3.5). :odd</span><br><span class=\"line\">用法: $(”tr:odd”) </span><br><span class=\"line\">说明: 匹配所有索引值为奇数的元素,和:even对应,从 0 开始计数.</span><br><span class=\"line\"></span><br><span class=\"line\">3.6). :eq(index)</span><br><span class=\"line\">用法: $(”tr:eq(0)”)   </span><br><span class=\"line\">说明: 匹配一个给定索引值的元素.eq(0)就是获取第一个tr元素.</span><br><span class=\"line\">    括号里面的是索引值,不是元素排列数.</span><br><span class=\"line\"></span><br><span class=\"line\">3.7). :gt(index)</span><br><span class=\"line\">用法: $(”tr:gt(0)”)  </span><br><span class=\"line\">说明: 匹配所有大于给定索引值的元素.</span><br><span class=\"line\"></span><br><span class=\"line\">3.8). :lt(index)</span><br><span class=\"line\">用法: $(”tr:lt(2)”)    </span><br><span class=\"line\">说明: 匹配所有小于给定索引值的元素.</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-内容过滤选择器\"><a href=\"#4-内容过滤选择器\" class=\"headerlink\" title=\"4). 内容过滤选择器\"></a>4). 内容过滤选择器</h3><ul>\n<li>内容过滤选择器的过滤规则主要体现在它所包含的子元素和文本内容上</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.1).  :contains(text)</span><br><span class=\"line\">用法: $(”div:contains(’John’)”)  </span><br><span class=\"line\">说明: 匹配包含给定文本的元素.这个选择器比较有用，当我们要选择的不是dom标签元素时,</span><br><span class=\"line\">    它就派上了用场了,它的作用是查找被标签”围”起来的文本内容是否符合指定的内容的.</span><br><span class=\"line\"></span><br><span class=\"line\">4.2).  :empty</span><br><span class=\"line\">用法: $(”td:empty”) </span><br><span class=\"line\">说明: 匹配所有不包含子元素或者文本的空元素</span><br><span class=\"line\"></span><br><span class=\"line\">4.3).  :has(selector)</span><br><span class=\"line\">用法: $(”div:has(p)”).addClass(”test”)</span><br><span class=\"line\">说明: 匹配含有选择器所匹配的元素的元素.这个解释需要好好琢磨,但是一旦看了使用的例子就完全清楚了:</span><br><span class=\"line\">给所有包含p元素的div标签加上class=”test”.</span><br><span class=\"line\"></span><br><span class=\"line\">4.4). :parent</span><br><span class=\"line\">用法: $(”td:parent”) </span><br><span class=\"line\">说明: 匹配含有子元素或者文本的元素.注意:这里是”:parent”,</span><br><span class=\"line\">    可不是”.parent”哦!感觉与上面讲的”:empty”形成反义词.</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-可见过滤选择器\"><a href=\"#5-可见过滤选择器\" class=\"headerlink\" title=\"5). 可见过滤选择器\"></a>5). 可见过滤选择器</h3><ul>\n<li>根据元素的可见和不可见状态来选择相应的元素</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.1).  :hidden</span><br><span class=\"line\">用法: $(”tr:hidden”) </span><br><span class=\"line\">说明: 匹配所有的不可见元素，input 元素的 type 属性为 “hidden” 的话也会被匹配到.</span><br><span class=\"line\">    意思是css中display:none和input type=”hidden”的都会被匹配到.</span><br><span class=\"line\">    同样,要在脑海中彻底分清楚冒号”:”, 点号”.”和逗号”,”的区别. </span><br><span class=\"line\"></span><br><span class=\"line\">5.2).  :visible</span><br><span class=\"line\">用法: $(”tr:visible”)  </span><br><span class=\"line\">说明: 匹配所有的可见元素.</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-属性过滤选择器\"><a href=\"#6-属性过滤选择器\" class=\"headerlink\" title=\"6). 属性过滤选择器\"></a>6). 属性过滤选择器</h3><ul>\n<li>属性过滤选择器的过滤规则是通过元素的属性来获取相应的元素</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.1). [attribute]</span><br><span class=\"line\">用法: $(”div[id]“) </span><br><span class=\"line\">说明: 匹配包含给定属性的元素. 例子中是选取了所有带id属性的div标签.</span><br><span class=\"line\"></span><br><span class=\"line\">6.2). [attribute=value]</span><br><span class=\"line\">用法: $(”input[name=&apos;newsletter&apos;]“).attr(”checked”, true)</span><br><span class=\"line\">说明: 匹配给定的属性是某个特定值的元素.例子中选取了所有name属性是newsletter的 input 元素.</span><br><span class=\"line\"></span><br><span class=\"line\">6.3). [attribute!=value]</span><br><span class=\"line\">用法: $(”input[name!=&apos;newsletter&apos;]“).attr(”checked”, true)。   </span><br><span class=\"line\">说明：匹配所有不含有指定的属性，或者属性不等于特定值的元素.此选择器等价于:not([attr=value]),</span><br><span class=\"line\">    要匹配含有特定属性但不等于特定值的元素,请使用[attr]:not([attr=value]).</span><br><span class=\"line\">    之前看到的 :not 派上了用场.</span><br><span class=\"line\"></span><br><span class=\"line\">6.4). [attribute^=value]</span><br><span class=\"line\">用法: $(”input[name^=‘news’]“)</span><br><span class=\"line\">说明: 匹配给定的属性是以某些值开始的元素.</span><br><span class=\"line\"></span><br><span class=\"line\">6.5). [attribute$=value]</span><br><span class=\"line\">用法: $(”input[name$=‘letter’]“)</span><br><span class=\"line\">说明: 匹配给定的属性是以某些值结尾的元素.</span><br><span class=\"line\"></span><br><span class=\"line\">6.6). [attribute*=value]</span><br><span class=\"line\">用法: $(”input[name*=‘man’]“)</span><br><span class=\"line\">说明: 匹配给定的属性是以包含某些值的元素.</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-子元素过滤选择器\"><a href=\"#7-子元素过滤选择器\" class=\"headerlink\" title=\"7). 子元素过滤选择器\"></a>7). 子元素过滤选择器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.1). :nth-child(index/even/odd/equation)</span><br><span class=\"line\">用法: $(”ul li:nth-child(2)”) </span><br><span class=\"line\">说明: 匹配其父元素下的第N个子或奇偶元素.这个选择器和之前说的基础过滤(Basic Filters)中的 </span><br><span class=\"line\">    eq() 有些类似,不同的地方就是前者是从0开始,后者是从1开始.</span><br><span class=\"line\"></span><br><span class=\"line\">7.2). :first-child</span><br><span class=\"line\">用法: $(”ul li:first-child”) </span><br><span class=\"line\">说明: 匹配第一个子元素.’:first’ 只匹配一个元素,而此选择符将为每个父元素匹配一个子元素.</span><br><span class=\"line\">    这里需要特别的记忆一下区别.</span><br><span class=\"line\"></span><br><span class=\"line\">7.3). :last-child</span><br><span class=\"line\">用法: $(”ul li:last-child”)</span><br><span class=\"line\">说明: 匹配最后一个子元素.’:last’只匹配一个元素,而此选择符将为每个父元素匹配一个子元素.</span><br><span class=\"line\"></span><br><span class=\"line\">7.4). : only-child</span><br><span class=\"line\">用法: $(”ul li:only-child”)</span><br><span class=\"line\">说明: 如果某个元素是父元素中唯一的子元素,那将会被匹配.如果父元素中含有其他元素,</span><br><span class=\"line\">    那将不会被匹配.意思就是:只有一个子元素的才会被匹配!</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-表单选择器\"><a href=\"#8-表单选择器\" class=\"headerlink\" title=\"8). 表单选择器\"></a>8). 表单选择器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8.1). :input</span><br><span class=\"line\">用法: $(”:input”)  </span><br><span class=\"line\">说明:匹配所有 text, textarea, select 和 button 元素 </span><br><span class=\"line\"></span><br><span class=\"line\">8.2). :text</span><br><span class=\"line\">用法: $(”:text”) </span><br><span class=\"line\">说明: 匹配所有的单行文本框.</span><br><span class=\"line\"></span><br><span class=\"line\">8.3). :password</span><br><span class=\"line\">用法: $(”:password”) </span><br><span class=\"line\">说明: 匹配所有密码框.</span><br><span class=\"line\"></span><br><span class=\"line\">8.4). :radio</span><br><span class=\"line\">用法: $(”:radio”) </span><br><span class=\"line\">说明: 匹配所有单选按钮.</span><br><span class=\"line\"></span><br><span class=\"line\">8.5). :checkbox</span><br><span class=\"line\">用法: $(”:checkbox”) </span><br><span class=\"line\">说明: 匹配所有复选框</span><br><span class=\"line\"></span><br><span class=\"line\">8.6). :submit</span><br><span class=\"line\">用法: $(”:submit”) </span><br><span class=\"line\">说明: 匹配所有提交按钮</span><br><span class=\"line\"></span><br><span class=\"line\">8.7). :image</span><br><span class=\"line\">用法: $(”:image”) </span><br><span class=\"line\">说明: 匹配所有图像域.</span><br><span class=\"line\"></span><br><span class=\"line\">8.8). :reset</span><br><span class=\"line\">用法: $(”:reset”) </span><br><span class=\"line\">说明: 匹配所有重置按钮.</span><br><span class=\"line\"></span><br><span class=\"line\">8.9). :button</span><br><span class=\"line\">用法: $(”:button”) </span><br><span class=\"line\">说明: 匹配所有按钮.这个包括直接写的元素button.</span><br><span class=\"line\"></span><br><span class=\"line\">8.10). :file</span><br><span class=\"line\">用法: $(”:file”) </span><br><span class=\"line\">说明: 匹配所有文件域.</span><br><span class=\"line\"></span><br><span class=\"line\">8.11). :hidden</span><br><span class=\"line\">用法: $(”input:hidden”) </span><br><span class=\"line\">说明: 匹配所有不可见元素，或者type为hidden的元素.这个选择器就不仅限于表单了,</span><br><span class=\"line\">除了匹配input中的hidden外,那些style为hidden的也会被匹配.</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-表单对象属性过滤选择器\"><a href=\"#9-表单对象属性过滤选择器\" class=\"headerlink\" title=\"9). 表单对象属性过滤选择器\"></a>9). 表单对象属性过滤选择器</h3><ul>\n<li>此选择器主要对所选择的表单元素进行过滤</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9.1). :enabled</span><br><span class=\"line\">用法: $(”input:enabled”)</span><br><span class=\"line\">说明: 匹配所有可用元素.意思是查找所有input中不带有disabled=”disabled”的input.</span><br><span class=\"line\">    不为disabled,当然就为enabled啦.</span><br><span class=\"line\"></span><br><span class=\"line\">9.2). :disabled</span><br><span class=\"line\">用法: $(”input:disabled”)</span><br><span class=\"line\">说明: 匹配所有不可用元素.与上面的那个是相对应的. </span><br><span class=\"line\"></span><br><span class=\"line\">9.3). :checked</span><br><span class=\"line\">用法: $(”input:checked”)</span><br><span class=\"line\">说明: 匹配所有被选中的元素(复选框、单选框等，不包括select中的option).</span><br><span class=\"line\"></span><br><span class=\"line\">9.4). :selected</span><br><span class=\"line\">用法: $(”select option:selected”)</span><br><span class=\"line\">说明: 匹配所有选中的option元素.</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-文档处理-CRUD\"><a href=\"#3-4-文档处理-CRUD\" class=\"headerlink\" title=\"3.4.    文档处理(CRUD)\"></a>3.4.    文档处理(CRUD)</h2><h3 id=\"1-内部插入节点\"><a href=\"#1-内部插入节点\" class=\"headerlink\" title=\"1). 内部插入节点\"></a>1). 内部插入节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1). append(content) </span><br><span class=\"line\">    向每个匹配的元素的内部的结尾处追加内容</span><br><span class=\"line\"></span><br><span class=\"line\">1.2). appendTo(content) </span><br><span class=\"line\">    把所有匹配的元素追加到另一个指定的元素集合中</span><br><span class=\"line\"></span><br><span class=\"line\">1.3). prepend(content)</span><br><span class=\"line\">    向每个匹配的元素的内部的开始处插入内容</span><br><span class=\"line\"></span><br><span class=\"line\">1.4). prependTo(content) </span><br><span class=\"line\">    将每个匹配的元素插入到指定的元素内部的开始处</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-外部插入节点\"><a href=\"#2-外部插入节点\" class=\"headerlink\" title=\"2). 外部插入节点\"></a>2). 外部插入节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1). after(content) :</span><br><span class=\"line\">     在每个匹配的元素之后插入内容 </span><br><span class=\"line\"></span><br><span class=\"line\">2.2). before(content)</span><br><span class=\"line\">     在每个匹配的元素之前插入内容 </span><br><span class=\"line\"></span><br><span class=\"line\">2.3). insertAfter(content)</span><br><span class=\"line\">     把所有匹配的元素插入到另一个、指定的元素集合的后面 </span><br><span class=\"line\"></span><br><span class=\"line\">2.4). insertBefore(content) </span><br><span class=\"line\">     把所有匹配的元素插入到另一个、指定的元素集合的前面</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-查找节点\"><a href=\"#3-查找节点\" class=\"headerlink\" title=\"3).查找节点\"></a>3).查找节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.1). 使用jQuery选择器查询</span><br><span class=\"line\">     $(selector) </span><br><span class=\"line\">     得到一个包含所有匹配的dom节点对象的jQuery对象</span><br><span class=\"line\"></span><br><span class=\"line\">3.2). 查询jQuery对象内部数据</span><br><span class=\"line\">    $object.find(selector)</span><br><span class=\"line\">    在Jquery对象中根据selector查找其中匹配的后代节点</span><br><span class=\"line\"></span><br><span class=\"line\">3.3). 遍历jQuery对象包含的数据</span><br><span class=\"line\">    $(selector1).each(function(index, itemDom)&#123; &#125;)</span><br><span class=\"line\">     遍历jQuery对象所包含的所有节点, 每取一个dom节点对象都去调用设置的回调函数,</span><br><span class=\"line\">     并将取出的节点在数组中的下标和节点对象传入函数</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-创建节点\"><a href=\"#4-创建节点\" class=\"headerlink\" title=\"4).创建节点\"></a>4).创建节点</h3><ul>\n<li>$(htmlString).</li>\n<li>动态创建的新元素节点不会被自动添加到文档中, 需要使用其他方法将其插入到文档中; </li>\n<li>当创建单个元素时, 需注意闭合标签和使用标准的 XHTML 格式. 例如</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个&lt;p&gt;元素, 可以使用 $(“&lt;p/&gt;”) 或 $(“&lt;p&gt;&lt;/p&gt;”),</span><br><span class=\"line\">但不能使用 $(“&lt;p&gt;”) 或 $(“&lt;/P&gt;”)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建文本节点就是在创建元素节点时直接把文本内容写出来; 创建属性节点也是在创建元素节点时一起创建</li>\n</ul>\n<h3 id=\"5-删除节点\"><a href=\"#5-删除节点\" class=\"headerlink\" title=\"5). 删除节点\"></a>5). 删除节点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.1). empty():</span><br><span class=\"line\"> \t删除匹配的元素集合中所有的子节点(不包括本身)。</span><br><span class=\"line\"></span><br><span class=\"line\">5.2). remove(): </span><br><span class=\"line\">  \t删除匹配的元素及其子元素(包括本身)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-属性操作\"><a href=\"#6-属性操作\" class=\"headerlink\" title=\"6). 属性操作\"></a>6). 属性操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.1). attr(name ,[value])</span><br><span class=\"line\"> \t根据属性名获取属性值或者设置一个属性</span><br><span class=\"line\"></span><br><span class=\"line\">6.2).  removeAttr(name)</span><br><span class=\"line\"> \t根据属性名删除对应的属性</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-HTML代码-值\"><a href=\"#7-HTML代码-值\" class=\"headerlink\" title=\"7). HTML代码/值\"></a>7). HTML代码/值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.1). html([val])</span><br><span class=\"line\"> \t得到元素的内容或者设置元素的内容</span><br><span class=\"line\"></span><br><span class=\"line\">7.2). val([value])</span><br><span class=\"line\"> \t获得匹配元素的当前值或者设置其值</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-CSS\"><a href=\"#8-CSS\" class=\"headerlink\" title=\"8) CSS\"></a>8) CSS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8.1). addClass(className)</span><br><span class=\"line\"> \t添加class属性</span><br><span class=\"line\"></span><br><span class=\"line\">8.2). removeClass()</span><br><span class=\"line\"> \t移除class属性</span><br><span class=\"line\"></span><br><span class=\"line\">8.3). css(name,[value])</span><br><span class=\"line\">   \t查看某个样式属性, 或设置某个样式属性</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-事件\"><a href=\"#3-5-事件\" class=\"headerlink\" title=\"3.5.    事件\"></a>3.5.    事件</h2><h3 id=\"1-常用的事件\"><a href=\"#1-常用的事件\" class=\"headerlink\" title=\"1)    常用的事件\"></a>1)    常用的事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1). ready(fn)</span><br><span class=\"line\"> \t当DOM载入就绪可以查询及操纵时绑定一个要执行的函数</span><br><span class=\"line\"> \t它与window.onload是有区别的</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://note.youdao.com/yws/res/8509/D3F766EB738F48099517319C8880017D\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1.2). click([fn]) </span><br><span class=\"line\"> \t触发每一个匹配元素的click事件</span><br><span class=\"line\"></span><br><span class=\"line\">1.3). blur([fn]) </span><br><span class=\"line\"> \t触发每一个匹配元素的blur事件</span><br><span class=\"line\"></span><br><span class=\"line\">1.4). change([fn]) </span><br><span class=\"line\"> \t触发每一个匹配元素的change事件</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-绑定与解绑事件\"><a href=\"#2-绑定与解绑事件\" class=\"headerlink\" title=\"2)    绑定与解绑事件\"></a>2)    绑定与解绑事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1). bind(type, fn)</span><br><span class=\"line\"> \t为每个匹配元素的特定事件绑定事件处理函数。</span><br><span class=\"line\"></span><br><span class=\"line\">2.2).  unbind(type)</span><br><span class=\"line\"> \tbind()的反向操作，从每一个匹配的元素中删除绑定的事件</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-事件切换\"><a href=\"#3-事件切换\" class=\"headerlink\" title=\"3)    事件切换\"></a>3)    事件切换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.1). hover(over,out)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。</li>\n</ul>\n<h3 id=\"4-事件冒泡\"><a href=\"#4-事件冒泡\" class=\"headerlink\" title=\"4)    事件冒泡\"></a>4)    事件冒泡</h3><ul>\n<li>描述: 事件会按照 DOM     <ul>\n<li>层次结构像水泡一样不断向上只止顶端</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>解决: 在事件处理函数中返回 false, 会对事件停止冒泡</li>\n</ul>\n<h2 id=\"3-6-效果\"><a href=\"#3-6-效果\" class=\"headerlink\" title=\"3.6.    效果\"></a>3.6.    效果</h2><h3 id=\"1-基本\"><a href=\"#1-基本\" class=\"headerlink\" title=\"1)    基本\"></a>1)    基本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1)\tshow()</span><br><span class=\"line\">\t显示当前标签</span><br><span class=\"line\">1.2)\thide()</span><br><span class=\"line\">\t隐藏当前标签</span><br><span class=\"line\">1.3)\ttoggle()</span><br><span class=\"line\">\t切换当前标签的可见性</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-滑动\"><a href=\"#2-滑动\" class=\"headerlink\" title=\"2)    滑动\"></a>2)    滑动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.1). slideDown()</span><br><span class=\"line\">\t这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式显示出来</span><br><span class=\"line\">2.2). slideUp()</span><br><span class=\"line\">\t这个动画效果只调整元素的高度，可以使匹配的元素以“滑动”的方式隐藏起来</span><br><span class=\"line\">2.3). slideToggle()</span><br><span class=\"line\">\t通过高度变化来切换所有匹配元素的可见性</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-淡入淡出\"><a href=\"#3-淡入淡出\" class=\"headerlink\" title=\"3)    淡入淡出\"></a>3)    淡入淡出</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.1). fadeIn()</span><br><span class=\"line\">\t通过不透明度的变化来实现所有匹配元素的淡入效果</span><br><span class=\"line\">3.2). fadeOut()</span><br><span class=\"line\">\t通过不透明度的变化来实现所有匹配元素的淡出效果</span><br><span class=\"line\">3.3). fadeToggle()</span><br><span class=\"line\">\t通过不透明度的变化来开关所有匹配元素的淡入和淡出效果</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"02 web-JavaScript","url":"http://yoursite.com/2017/10/06/21 JavaScript /","content":"<h1 id=\"1-JavaScript简介\"><a href=\"#1-JavaScript简介\" class=\"headerlink\" title=\"1    JavaScript简介\"></a>1    JavaScript简介</h1><h2 id=\"1-1-起源\"><a href=\"#1-1-起源\" class=\"headerlink\" title=\"1.1    起源\"></a>1.1    起源</h2><blockquote>\n<p>在1995年时，由Netscape公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。Netscape在最初将其脚本语言命名为LiveScript，因为Netscape与Sun合作，网景公司管理层希望它外观看起来像Java，因此取名为JavaScript。</p>\n</blockquote>\n<h2 id=\"1-2-特性\"><a href=\"#1-2-特性\" class=\"headerlink\" title=\"1.2    特性\"></a>1.2    特性</h2><p> ①脚本语言。JavaScript是一种解释型的脚本语言,C、C++、Java等语言先编译后执行,而JavaScript是在程序的运行过程中逐行进行解释。<br> ②基于对象。JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也    能使用现有的对象。<br> ③简单。JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做出严格的要求,是基于Java基本语句和控制的脚本语言。<br> ④动态性。JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务    器就可以对用户的输入做出响应。<br> ⑤跨平台性。JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用,前提是机器上的浏览器支持JavaScript脚本语言,目前JavaScript已被大多数的浏览器所支持。  </p>\n<h1 id=\"2-JavaScript基本语法\"><a href=\"#2-JavaScript基本语法\" class=\"headerlink\" title=\"2    JavaScript基本语法\"></a>2    JavaScript基本语法</h1><h2 id=\"2-1-编写位置\"><a href=\"#2-1-编写位置\" class=\"headerlink\" title=\"2.1    编写位置\"></a>2.1    编写位置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">① 编写到HTML中&lt;script&gt;标签中。</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">②写在外部的.js文件中。然后通过script标签引入。</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-变量\"><a href=\"#2-2-变量\" class=\"headerlink\" title=\"2.2    变量\"></a>2.2    变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①变量的声明</span><br><span class=\"line\">[1]变量声明时不需要指定类型，可以为其赋值任何类型的数据。</span><br><span class=\"line\">[2]JavaScript严格区分大小写，Num和num是完全不同的两个变量。</span><br><span class=\"line\">②变量的使用：变量在使用过程中可以接受不同类型的值。</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-函数\"><a href=\"#2-3-函数\" class=\"headerlink\" title=\"2.3    函数\"></a>2.3    函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①函数声明</span><br><span class=\"line\">[1]使用function关键字</span><br><span class=\"line\">[2]不需要指定形参类型</span><br><span class=\"line\">[3]不需要指定返回值</span><br><span class=\"line\">function sum(n, m) &#123;</span><br><span class=\"line\">\treturn n + m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">②函数调用</span><br><span class=\"line\">\t调用JavaScript函数时系统不检查传入参数的个数和类型。</span><br><span class=\"line\">③函数也是对象</span><br><span class=\"line\">在JavaScript中，函数也作为一种数据类型存在，而且是引用数据类型，函数名就是指向其内存空间地址的引用。</span><br><span class=\"line\">var a = function() &#123;</span><br><span class=\"line\">\treturn 2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var b = a;</span><br><span class=\"line\">a.fname = &quot;tom&quot;;</span><br><span class=\"line\">alert(b.fname); //结果为tom</span><br><span class=\"line\">④函数的执行</span><br><span class=\"line\">   函数名 + ( )。</span><br><span class=\"line\">var a = function() &#123;</span><br><span class=\"line\">\treturn 2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">alert(a());//结果为2</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-对象\"><a href=\"#2-4-对象\" class=\"headerlink\" title=\"2.4    对象\"></a>2.4    对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①对象的创建</span><br><span class=\"line\">    第一种，使用new Object()创建</span><br><span class=\"line\">        var obj = new Object();</span><br><span class=\"line\">    第二种，使用&#123;&#125;创建</span><br><span class=\"line\">        var obj = &#123;&#125;;</span><br><span class=\"line\">②为对象添加属性</span><br><span class=\"line\">\t 第一种，通过 对象.属性名 = “属性值” 添加</span><br><span class=\"line\">        obj.name = &quot;zhangsan&quot;;</span><br><span class=\"line\">        obj.age = 12;</span><br><span class=\"line\">        obj.sum = function(a,b)&#123;</span><br><span class=\"line\">        return a+b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t 第二种，使用&#123;&#125;创建对象时，直接向对象中添加属性</span><br><span class=\"line\">        var obj = &#123;&quot;name&quot; : &quot;zhangsan&quot;,</span><br><span class=\"line\">\t\t\t        &quot;age&quot; : 21,</span><br><span class=\"line\">\t\t\t        &quot;sum&quot; : function(a,b)&#123; return a+b;&#125;</span><br><span class=\"line\">\t\t\t        &#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-this关键字\"><a href=\"#2-5-this关键字\" class=\"headerlink\" title=\"2.5    this关键字\"></a>2.5    this关键字</h2><p>在JavaScript函数中，this关键字指向的是调用当前函数的对象。    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   var obj01 = &#123;</span><br><span class=\"line\">\tname : &quot;obj01 name&quot;,</span><br><span class=\"line\">\tgetName : showName</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var obj02 = &#123;</span><br><span class=\"line\">\tname : &quot;obj02 name&quot;,</span><br><span class=\"line\">\tgetName : showName</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function showName() &#123;</span><br><span class=\"line\">\talert(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj01.getName();//结果为 obj01 name</span><br><span class=\"line\">obj02.getName();//结果为 obj02 name</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-JavaScript事件驱动\"><a href=\"#3-JavaScript事件驱动\" class=\"headerlink\" title=\"3    JavaScript事件驱动\"></a>3    JavaScript事件驱动</h1><h2 id=\"3-1-事件\"><a href=\"#3-1-事件\" class=\"headerlink\" title=\"3.1    事件\"></a>3.1    事件</h2><p>①用户事件：用户操作，例如单击、鼠标移入、鼠标移出等。<br>②系统事件：由系统触发的事件，例如文档加载完成。</p>\n<h2 id=\"3-2-自定义事件响应函数\"><a href=\"#3-2-自定义事件响应函数\" class=\"headerlink\" title=\"3.2    自定义事件响应函数\"></a>3.2    自定义事件响应函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①从文档对象模型中获取控件对象[借助DOM API实现]</span><br><span class=\"line\">②声明一个事件响应函数</span><br><span class=\"line\">③将事件响应函数的引用赋值给控件对象的事件属性</span><br><span class=\"line\">  例如：window.onload = function()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-取消控件默认行为\"><a href=\"#3-3-取消控件默认行为\" class=\"headerlink\" title=\"3.3    取消控件默认行为\"></a>3.3    取消控件默认行为</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①默认行为</span><br><span class=\"line\">\t[1]超链接跳转页面</span><br><span class=\"line\">\t[2]submit按钮提交表单</span><br><span class=\"line\">②取消方式：return false</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-JavaScript嵌入方式\"><a href=\"#4-JavaScript嵌入方式\" class=\"headerlink\" title=\"4    JavaScript嵌入方式\"></a>4    JavaScript嵌入方式</h1><h2 id=\"4-1-浏览器加载顺序\"><a href=\"#4-1-浏览器加载顺序\" class=\"headerlink\" title=\"4.1    浏览器加载顺序\"></a>4.1    浏览器加载顺序</h2><p>①按从上到下的顺序加载<br>②遇到script标签先执行脚本程序，执行完成后再继续加载  </p>\n<h2 id=\"4-2-嵌入HTML标签的事件属性中\"><a href=\"#4-2-嵌入HTML标签的事件属性中\" class=\"headerlink\" title=\"4.2    嵌入HTML标签的事件属性中\"></a>4.2    嵌入HTML标签的事件属性中</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=&quot;alert(&apos;hello&apos;);&quot;&gt;点我&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<p>结构与行为耦合，不推荐使用</p>\n<h2 id=\"4-3-嵌入head标签内\"><a href=\"#4-3-嵌入head标签内\" class=\"headerlink\" title=\"4.3    嵌入head标签内\"></a>4.3    嵌入head标签内</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tvar btnEle = document.getElementById(&quot;btn&quot;);</span><br><span class=\"line\">\tbtnEle.onclick = function() &#123;</span><br><span class=\"line\">\t\talert(&quot;hello&quot;);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>无法获取body标签中的节点</p>\n<h2 id=\"4-4-嵌入body标签后面\"><a href=\"#4-4-嵌入body标签后面\" class=\"headerlink\" title=\"4.4    嵌入body标签后面\"></a>4.4    嵌入body标签后面</h2><pre><code>可以获取节点，但是不符合常规习惯\n</code></pre><h2 id=\"4-5-window对象\"><a href=\"#4-5-window对象\" class=\"headerlink\" title=\"4.5    window对象\"></a>4.5    window对象</h2><p>代表当前浏览器窗口</p>\n<h2 id=\"4-6-onload事件\"><a href=\"#4-6-onload事件\" class=\"headerlink\" title=\"4.6    onload事件\"></a>4.6    onload事件</h2><pre><code>将整个文档加载完成后触发\n</code></pre><h2 id=\"4-7-使用window-onload完美解决问题\"><a href=\"#4-7-使用window-onload完美解决问题\" class=\"headerlink\" title=\"4.7    使用window.onload完美解决问题\"></a>4.7    使用window.onload完美解决问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\twindow.onload = function() &#123;</span><br><span class=\"line\">\t\tvar btnEle = document.getElementById(&quot;btn&quot;);</span><br><span class=\"line\">\t\tbtnEle.onclick = function() &#123;</span><br><span class=\"line\">\t\t\talert(&quot;hello&quot;);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;button id=&quot;btn&quot;&gt;点我&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-DOM\"><a href=\"#5-DOM\" class=\"headerlink\" title=\"5    DOM\"></a>5    DOM</h1><h2 id=\"5-1-DOM标准\"><a href=\"#5-1-DOM标准\" class=\"headerlink\" title=\"5.1    DOM标准\"></a>5.1    DOM标准</h2><p>Document Object Model：文档对象模型 定义了访问和处理 HTML 文档的标准方         法。是W3C国际组织制定的统一标准，在很多计算机语言中都有不同实现如C#、PHP、    Java、Ruby、perl、python等</p>\n<h2 id=\"5-2-document对象\"><a href=\"#5-2-document对象\" class=\"headerlink\" title=\"5.2    document对象\"></a>5.2    document对象</h2><p>window对象的一个属性，代表当前HTML文档，包含了整个文档的树形结构。获    取document对象的本质方法是：window.document，而“window.”可以省略。<br>5.3    DOM树</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605154557.png\" alt> </p>\n<ul>\n<li>父元素：直接包含当前元素的元素就是当前元素的父元素</li>\n<li>子元素：当前元素直接包含的元素就是当前元素的子元素</li>\n<li>祖先元素：直接或间接包含当前元素的所有元素都是当前元素的祖先元素</li>\n<li>后代元素：当前元素直接或间接包含的元素就是当前元素的后代元素</li>\n<li>兄弟元素：有相同父元素的元素是兄弟元素</li>\n</ul>\n<h2 id=\"5-4-节点-Node\"><a href=\"#5-4-节点-Node\" class=\"headerlink\" title=\"5.4    节点(Node)\"></a>5.4    节点(Node)</h2><h3 id=\"5-4-1-HTML文档中的每个成分都是一个节点，HTML文档是由DOM节点构成的集合。\"><a href=\"#5-4-1-HTML文档中的每个成分都是一个节点，HTML文档是由DOM节点构成的集合。\" class=\"headerlink\" title=\"5.4.1    HTML文档中的每个成分都是一个节点，HTML文档是由DOM节点构成的集合。\"></a>5.4.1    HTML文档中的每个成分都是一个节点，HTML文档是由DOM节点构成的集合。</h3><h3 id=\"5-4-2-节点的分类\"><a href=\"#5-4-2-节点的分类\" class=\"headerlink\" title=\"5.4.2    节点的分类\"></a>5.4.2    节点的分类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①文档节点(Document)：</span><br><span class=\"line\">    DOM标准将整个HTML文档的相关信息封装后得到的对象。  </span><br><span class=\"line\">②元素节点(Element)：</span><br><span class=\"line\">    DOM标准将HTML标签的相关信息封装后得到的对象。  </span><br><span class=\"line\">③属性节点(Attribute)：</span><br><span class=\"line\">    DOM标准将HTML标签属性的相关信息封装后得到的对象。  </span><br><span class=\"line\">④文本节点(Text)：</span><br><span class=\"line\">    DOM标准将HTML文本的相关信息封装后得到的对象。</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-4-3-节点的属性\"><a href=\"#5-4-3-节点的属性\" class=\"headerlink\" title=\"5.4.3    节点的属性\"></a>5.4.3    节点的属性</h3><p>①    nodeName: 代表当前节点的名字，只读属性。如果给定节点是一个文本节点，nodeName 属性将返回内容为 #text 的字符串。<br>②    nodeType：返回一个整数, 这个数值代表着给定节点的类型，只读属性。  1 – 元素节点    2 – 属性节点    3 – 文本节点<br>③    nodeValue：返回给定节点的当前值(字符串)，可读写的属性。<br>1)    元素节点, 返回值是 null<br>2)    属性节点: 返回值是这个属性的值<br>3)    文本节点: 返回值是这个文本节点的内容  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605154746.png\" alt></p>\n<p>5.5    DOM查询API<br>①元素查询</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605154847.png\" alt></p>\n<p>②属性操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]读取属性值</span><br><span class=\"line\">    元素对象.属性名</span><br><span class=\"line\">[2]修改属性值</span><br><span class=\"line\">    元素对象.属性名=新的属性值</span><br></pre></td></tr></table></figure>\n<p>③文本操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]读取文本值：element.firstChild.nodeValue</span><br><span class=\"line\">[2]修改文本值：element.firstChild.nodeValue=新文本值</span><br></pre></td></tr></table></figure>\n<p>5.6    DOM增删改API</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">API                                         功能</span><br><span class=\"line\">document.createElement(“标签名”)    创建元素节点并返回，但不会自动添加到文档中</span><br><span class=\"line\">document.createTextNode(“文本值”)   创建文本节点并返回，但不会自动添加到文档中</span><br><span class=\"line\"></span><br><span class=\"line\">element.appendChild(ele)                    将ele添加到element所有子节点后面</span><br><span class=\"line\">parentEle.insertBefore(newEle,targetEle)    将newEle插入到targetEle前面</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">parentEle.replaceChild(newEle, oldEle)     用新节点替换原有的旧子节点</span><br><span class=\"line\">parentEle.removeChild(childNode)            删除指定的子节点</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">element.innerHTML                       读写HTML代码</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"01 web-HTML基础","url":"http://yoursite.com/2017/10/01/20 HTML基础/","content":"<h1 id=\"网页的组成\"><a href=\"#网页的组成\" class=\"headerlink\" title=\"网页的组成\"></a>网页的组成</h1><p>•结构(HTML)<br>HTML是网页内容的载体。内容就是网页制作者放在页面上想要让用户浏览的信息，可以包含文字、图片、视频等。<br>•表现(CSS)SS)<br>•CSS样式是表现。就像网页的外衣。比如，标题字体、颜色变化，或为标题加入背景图片、边框等。所有这些用来改变内容外观的东西称之为表现。<br>•行为, JavaScript, JQuery<br>JavaScript是用来实现网页上的特效效果。如：鼠标滑过弹出下拉菜单。或鼠标滑过表格的背景颜色改变。还有购物网站中图片的轮换。可以这么理解，有动画的，有交互的一般都是用JavaScript来实现的.  </p>\n<h2 id=\"HTML简介\"><a href=\"#HTML简介\" class=\"headerlink\" title=\"HTML简介\"></a>HTML简介</h2><ul>\n<li>HTML 是用来描述网页的一种语言。</li>\n<li>HTML 指的是超文本标记语言 (Hyper Text Markup Language)</li>\n<li>【超文本】就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素</li>\n<li>HTML 不是一种编程语言，而是一种标记语言 (markup language)</li>\n<li>标记语言是一套标记标签 (markup tag)</li>\n<li>HTML 使用标记标签来描述网页</li>\n</ul>\n<h2 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605151610.png\" alt></p>\n<h2 id=\"html文件的结构\"><a href=\"#html文件的结构\" class=\"headerlink\" title=\"html文件的结构\"></a>html文件的结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.&lt;html&gt;&lt;/html&gt;为HTML页面中的根标签，</span><br><span class=\"line\">    所有的HTML网页中的标签都在&lt;html&gt;&lt;/html&gt;中。  </span><br><span class=\"line\">2.&lt;head&gt;标签用于定义文档的头部，它是所有头部元素的容器。</span><br><span class=\"line\">    头部元素有&lt;title&gt;、&lt;script&gt;、 &lt;style&gt;、&lt;link&gt;、 &lt;meta&gt;等标签。  </span><br><span class=\"line\">3.在&lt;body&gt;和&lt;/body&gt;标签之间的内容是网页的主要内容，</span><br><span class=\"line\">    如&lt;h1&gt;、&lt;p&gt;、&lt;a&gt;、&lt;img&gt;等网页内容标签，在这里的标签中的内容会在浏览器中显示出来。</span><br></pre></td></tr></table></figure>\n<h2 id=\"标签的语法\"><a href=\"#标签的语法\" class=\"headerlink\" title=\"标签的语法\"></a>标签的语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.标签由英文尖括号 &lt; 和 &gt; 括起来,如：&lt;html&gt;</span><br><span class=\"line\">2.html中的标签一般都是成对出现的,分开始标签和结束标签。结束标签比开始标签多一个 / ,</span><br><span class=\"line\">    &lt;title&gt;..&lt;/title&gt;;还有一些是自结束标签，如：&lt;br/&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">3.标签不区分大小写</span><br><span class=\"line\">\t&lt;div&gt;i am div&lt;/div&gt;</span><br><span class=\"line\">\t&lt;DIV&gt;I AM DIV&lt;/DIV&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">4.标签与标签之间是可以嵌套的，但先后顺序必须保持一致，</span><br><span class=\"line\">    如：&lt;div&gt;里嵌套&lt;p&gt;，那么&lt;/p&gt;必须放在&lt;/div&gt;的前面。</span><br><span class=\"line\">    注意：HTML有一定的容错能力。</span><br><span class=\"line\">\t&lt;div&gt;div&lt;h2&gt;h2&lt;/div&gt;&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">5.标签必须正确关闭\t\t</span><br><span class=\"line\">\t&lt;div&gt;i am div&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">6.属性必须有值，且属性值必须加引号 --&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;divId&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">7.注释是不可以嵌套的,如：&lt;!-- &lt;!-- 注释部分 --&gt; --&gt;</span><br><span class=\"line\">\t&lt;!-- 注释1&lt;!-- 注释2 --&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">8..HTML标签不区分大小写,&lt;h1&gt;和&lt;H1&gt;是一样的,但建议小写。</span><br></pre></td></tr></table></figure>\n<h1 id=\"HTML的常用标签\"><a href=\"#HTML的常用标签\" class=\"headerlink\" title=\"HTML的常用标签\"></a>HTML的常用标签</h1><h2 id=\"1-标题标签\"><a href=\"#1-标题标签\" class=\"headerlink\" title=\"1.标题标签\"></a>1.标题标签</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法:h1-h6</span><br><span class=\"line\">            &lt;h1&gt;h1&lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;h2&gt;h2&lt;/h2&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;h3&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;h4&gt;h4&lt;/h4&gt;</span><br><span class=\"line\">\t\t&lt;h5&gt;h5&lt;/h5&gt;</span><br><span class=\"line\">\t\t&lt;h6&gt;h6&lt;/h6&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-div标签\"><a href=\"#2-div标签\" class=\"headerlink\" title=\"2.div标签\"></a>2.div标签</h2><pre><code>语法：div  \n作用：无实际意义，布局。  \n</code></pre><p>相当于一个容器,可以把一些独立的逻辑部分(如网页中独立的栏目版块)划分出来,如下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605152114.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;上&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;中&lt;/div&gt;</span><br><span class=\"line\">\t\t&lt;div&gt;下&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-段落标签\"><a href=\"#3-段落标签\" class=\"headerlink\" title=\"3.段落标签\"></a>3.段落标签</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    语法：p</span><br><span class=\"line\">\t特点：换两行</span><br><span class=\"line\">\tbr:换行标签</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;p&gt;&amp;emsp;&amp;emsp;段落标签&lt;/p&gt;</span><br><span class=\"line\">\taaa&lt;br&gt;</span><br><span class=\"line\">\tbbb</span><br><span class=\"line\">\tccc</span><br><span class=\"line\">\t&lt;br&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-转义字符\"><a href=\"#4-转义字符\" class=\"headerlink\" title=\"4.转义字符\"></a>4.转义字符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：&amp;;</span><br><span class=\"line\">\t常用转义字符</span><br><span class=\"line\">\t\t空格：&amp;nbsp;  &amp;emsp;</span><br><span class=\"line\">\t\t大于号:&amp;gt;</span><br><span class=\"line\">\t\t小于号:&amp;lt;</span><br><span class=\"line\">\t\t版权号码:&amp;copy;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-无序列表-amp-有序列表\"><a href=\"#5-无序列表-amp-有序列表\" class=\"headerlink\" title=\"5.无序列表&amp;有序列表\"></a>5.无序列表&amp;有序列表</h2><h3 id=\"无序列表语法：unorder-list-ul\"><a href=\"#无序列表语法：unorder-list-ul\" class=\"headerlink\" title=\"无序列表语法：unorder list:ul\"></a>无序列表语法：unorder list:ul</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;列表项&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&lt;ul type=&quot;square&quot;&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;aaa&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;bbb&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;ccc&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"有序列表语法：order-list-ul\"><a href=\"#有序列表语法：order-list-ul\" class=\"headerlink\" title=\"有序列表语法：order list:ul\"></a>有序列表语法：order list:ul</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        &lt;ol&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;列表项&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ol&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&lt;ol type=&quot;i&quot;&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;aaa&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;bbb&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;ccc&lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>\n<p>#3 图片标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img alt=&quot;&quot; src=&quot;&quot; title=&quot;&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用img标签插入图片\"><a href=\"#使用img标签插入图片\" class=\"headerlink\" title=\"使用img标签插入图片\"></a>使用img标签插入图片</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src:图片路径</span><br><span class=\"line\">alt:图片路径有误时的提示文本</span><br><span class=\"line\">title:鼠标悬停时的提示文本</span><br></pre></td></tr></table></figure>\n<h2 id=\"路径问题：\"><a href=\"#路径问题：\" class=\"headerlink\" title=\"路径问题：\"></a>路径问题：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 目标b文件与当前a文件是否在同一包下</span><br><span class=\"line\">\t 同包下:直接获取目标b文件</span><br><span class=\"line\">     不在同包:先查询目标文件的父包，再找目标文件。</span><br><span class=\"line\">2. 使用../返回上一级\t</span><br><span class=\"line\">&lt;img alt=&quot;picture&quot; src=&quot;img/wm.jpg&quot; title=&quot;a&quot; &gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接:\"></a>超链接:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;&quot; target=&quot;&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">\t使用a标签实现超链接功能</span><br><span class=\"line\">\t\thref:链接的目标路径</span><br><span class=\"line\">\t\ttarget:以何种方式打开</span><br><span class=\"line\">\t\t\t值为”_self”时在向当前窗口(默认)打开新的网页</span><br><span class=\"line\">      \t\t\t值为”_blank”时在新的窗口打开</span><br><span class=\"line\">&lt;a href=&quot;pages/target.html&quot; target=&quot;_self&quot;&gt;跳转到目标页面！&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"了解-一些强调标签：\"><a href=\"#了解-一些强调标签：\" class=\"headerlink\" title=\"(了解)一些强调标签：\"></a>(了解)一些强调标签：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ü &lt;strong&gt;和&lt;em&gt;标签</span><br><span class=\"line\">         两者在强调的语气上有区别: &lt;em&gt; 表示强调，&lt;strong&gt; 表示更强烈的强调。并且在浏览器中&lt;em&gt; 默认用 斜体 表示，&lt;strong&gt; 用 粗体 表示。</span><br><span class=\"line\">ü&lt;span&gt;标签</span><br><span class=\"line\">         &lt;span&gt;标签是没有语义的，它的作用就是为了设置单独的样式用的。有了它就可以对某段文字里的几个字单独设置样式了。</span><br></pre></td></tr></table></figure>\n<h1 id=\"HTML中表格的创建\"><a href=\"#HTML中表格的创建\" class=\"headerlink\" title=\"HTML中表格的创建\"></a>HTML中表格的创建</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用table制作表格</span><br><span class=\"line\">\t* 使用tr制作表格中的行</span><br><span class=\"line\">\t\t* 使用td|th制作表格中的单元格</span><br><span class=\"line\">\t* border=&quot;边框&quot;</span><br><span class=\"line\">\t* 跨行跨列</span><br><span class=\"line\">\t\t* 跨行：rowspan</span><br><span class=\"line\">\t\t* 跨列：colspan</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605152805.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">\t&lt;th&gt;姓名&lt;/th&gt;</span><br><span class=\"line\">\t&lt;th&gt;阵营&lt;/th&gt;</span><br><span class=\"line\">\t&lt;th&gt;职业&lt;/th&gt;</span><br><span class=\"line\">\t&lt;th&gt;武器&lt;/th&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">\t&lt;td&gt;刘备&lt;/td&gt;</span><br><span class=\"line\">\t&lt;td&gt;蜀&lt;/td&gt;</span><br><span class=\"line\">\t&lt;td&gt;蜀汉集团董事长&lt;/td&gt;</span><br><span class=\"line\">\t&lt;td&gt;双股剑&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>生活中的表单</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605152913.png\" alt></p>\n<p>使用form标签制作表单</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* action=&quot;表单提交的目标地址&quot;</span><br><span class=\"line\">* method:get|post</span><br><span class=\"line\">* input属性</span><br><span class=\"line\">\ttype:表单项的类型</span><br><span class=\"line\">\tname:表单项的名称（必选，提交数据使用name属性）</span><br><span class=\"line\">\tvalue:表单项的值</span><br><span class=\"line\">\tchecked:表单项的默认选中状态</span><br></pre></td></tr></table></figure>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><ul>\n<li>input</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">•表单标签：&lt;form action=&quot;&quot;&gt;..&lt;/form&gt;</span><br><span class=\"line\">•文本输入框：&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;</span><br><span class=\"line\">•密码输入框：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt;</span><br><span class=\"line\">•单选框： &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;提交的值&quot;/&gt;</span><br><span class=\"line\">•多选框：</span><br><span class=\"line\"> &lt;input type=&quot;checkbox&quot; name=&quot;&quot; value=&quot;提交的值&quot; checked=&quot;checked&quot;/&gt;</span><br><span class=\"line\">•下拉列表：</span><br><span class=\"line\">         &lt;select name=&quot;&quot;&gt;</span><br><span class=\"line\">            &lt;option value=&quot;&quot;&gt;没有value属性时提交的值&lt;/option&gt;</span><br><span class=\"line\">         &lt;/select&gt;</span><br><span class=\"line\">•重置按钮：&lt;input type=&quot;reset&quot;&gt;</span><br><span class=\"line\">•提交按钮：&lt;input type=&quot;submit&quot; value=&quot;修改的按钮的值&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;success.html&quot;&gt;</span><br><span class=\"line\">\t\t用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class=\"line\">\t\t密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t性别：&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;man&quot; checked=&quot;checked&quot;/&gt;男</span><br><span class=\"line\">\t\t  \t&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;woman&quot;/&gt;女&lt;br/&gt;&lt;br/&gt;</span><br><span class=\"line\">\t\t  \t</span><br><span class=\"line\">\t\t 爱好：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;basketball&quot; checked=&quot;checked&quot;/&gt;篮球</span><br><span class=\"line\">\t\t  \t&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;football&quot;/&gt;足球</span><br><span class=\"line\">\t\t  \t&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;volleyball&quot;/&gt;排球</span><br><span class=\"line\">\t\t  \t&lt;br/&gt;&lt;br/&gt;</span><br><span class=\"line\">\t\t  \t</span><br><span class=\"line\">\t喜欢的明星：&lt;select name=&quot;star&quot;&gt;</span><br><span class=\"line\">\t            &lt;option value=&quot;fbb&quot;&gt;范冰冰&lt;/option&gt;</span><br><span class=\"line\">\t            &lt;option value=&quot;zy&quot;&gt;杨颖&lt;/option&gt;</span><br><span class=\"line\">\t            &lt;option value=&quot;zzy&quot;&gt;章子怡&lt;/option&gt;</span><br><span class=\"line\">\t         &lt;/select&gt;</span><br><span class=\"line\">\t         </span><br><span class=\"line\">\t         &lt;br/&gt;</span><br><span class=\"line\">\t         &lt;br/&gt;</span><br><span class=\"line\">\t\t&lt;input type=&quot;reset&quot;&gt;</span><br><span class=\"line\">\t\t&lt;input type=&quot;submit&quot;&gt;</span><br><span class=\"line\">\t&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"_css\"></a>_css</h1><h2 id=\"CSS简介\"><a href=\"#CSS简介\" class=\"headerlink\" title=\"CSS简介\"></a>CSS简介</h2><pre><code>CSS全称为“层叠样式表 (Cascading Style Sheets)”，它主要是用于定义HTML内容在浏览器内的显示样式，如文字大小、颜色、字体等。\n</code></pre><h2 id=\"CSS代码语法\"><a href=\"#CSS代码语法\" class=\"headerlink\" title=\"CSS代码语法\"></a>CSS代码语法</h2><p>1.CSS样式由选择符(选择器)和声明组成，而声明又由属性和值组成，如下所示：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 语法：选择器&#123;属性:属性值;属性2:属性值2;&#125;</span><br><span class=\"line\">  \t   当有多条声明时, 中间用英文分号&quot;;&quot;分隔</span><br></pre></td></tr></table></figure>\n<p>2.CSS的样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①写在标签的style属性中：&lt;p style=“font-size: 30px”&gt;字体大小用px表示&lt;/p&gt;</span><br><span class=\"line\">②写在style标签中(style标签一般写在head标签与title标签之间)：</span><br><span class=\"line\">          </span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;CSS基本语法&lt;/title&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">    p&#123;</span><br><span class=\"line\">        color:red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;!-- </span><br><span class=\"line\">    css:cascading style sheets</span><br><span class=\"line\">        * 语法：选择器&#123;属性:属性值;属性2:属性值2;&#125;</span><br><span class=\"line\">        * 选择器</span><br><span class=\"line\">            标签选择器:h2  p</span><br><span class=\"line\">            类选择器</span><br><span class=\"line\">                定义: .类名&#123;&#125;</span><br><span class=\"line\">                调用: class=&quot;类名&quot;</span><br><span class=\"line\">            ID选择器</span><br><span class=\"line\">                定义: #ID名&#123;&#125;</span><br><span class=\"line\">                调用: id=&quot;ID名&quot;</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;p&gt;师傅领进门，修行在个人&lt;/p&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  ③引入外部CSS文件：</span><br><span class=\"line\">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择器的分类\"><a href=\"#选择器的分类\" class=\"headerlink\" title=\"选择器的分类\"></a>选择器的分类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①标签选择器：</span><br><span class=\"line\">②类选择器：.class属性值&#123;..&#125;</span><br><span class=\"line\">定义: .类名&#123;&#125;</span><br><span class=\"line\">调用: class=&quot;类名&quot;</span><br><span class=\"line\">  ③ID选择器：#id属性值&#123;..&#125;</span><br><span class=\"line\">定义: #ID名&#123;&#125;</span><br><span class=\"line\">调用: id=&quot;ID名&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;CSS选择器&lt;/title&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">    h2&#123;</span><br><span class=\"line\">        color:#ff0000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .cb&#123;</span><br><span class=\"line\">        color:rgb(0,255,255);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #cy&#123;</span><br><span class=\"line\">        color:yellow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h2&gt;冬夜读书示子聿&lt;/h2&gt;</span><br><span class=\"line\">    &lt;p class=&quot;cb&quot;&gt;宋代•陆游&lt;/p&gt;</span><br><span class=\"line\">    &lt;p class=&quot;cb&quot;&gt;古人学问无遗力&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;少壮工夫老始成&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;纸上得来终觉浅&lt;/p&gt;</span><br><span class=\"line\">    &lt;p id=&quot;cy&quot;&gt;绝知此事要躬行&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS中注释语句\"><a href=\"#CSS中注释语句\" class=\"headerlink\" title=\"CSS中注释语句\"></a>CSS中注释语句</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用/*注释语句*/标明。</span><br></pre></td></tr></table></figure>\n<h2 id=\"CSS中的颜色\"><a href=\"#CSS中的颜色\" class=\"headerlink\" title=\"CSS中的颜色\"></a>CSS中的颜色</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSS中的颜色用RGB颜色：</span><br><span class=\"line\">红色(red)、绿色(green)、蓝色(blue)——光学三原色表示。</span><br><span class=\"line\"></span><br><span class=\"line\">RGB中每种颜色都用两位十六进制数表示，0表示没有光，</span><br><span class=\"line\">F表示最强的光，并按红、绿、蓝的顺序排列，前面再加上#号。</span><br><span class=\"line\"></span><br><span class=\"line\">例如：#000000黑色；#FFFFFF 白色；#FF0000红色；</span><br><span class=\"line\">   #00FF00绿色；#0000FF蓝色等等。</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb"],"tags":["JavaWeb概述"]},{"title":"3. SQL-JDBC","url":"http://yoursite.com/2017/09/25/19. SQL-JDBC/","content":"<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><p>在Java中，数据库存取技术可分为如下几类：</p>\n<ul>\n<li>JDBC直接访问数据库</li>\n<li>JDO技术（Java Data Object）</li>\n<li>第三方O/R工具，如Hibernate, Mybatis 等</li>\n</ul>\n<p>JDBC是java访问数据库的基石，JDO, Hibernate等只是更好的封装了JDBC。</p>\n<h2 id=\"1、什么是JDBC\"><a href=\"#1、什么是JDBC\" class=\"headerlink\" title=\"1、什么是JDBC\"></a>1、什么是JDBC</h2><ul>\n<li>JDBC(Java Database Connectivity)是一个独立于特定数据库管理系统（DBMS）、通用的SQL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标准Java类库，使用这个类库可以以一种标准的方法、方便地访问数据库资源</li>\n<li>JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。</li>\n<li>JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li>\n<li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605115232.png\" alt></p>\n<p>现在：</p>\n<p><img src=\"http://note.youdao.com/yws/res/8061/23E2E85D304744C494F1D83F1FE4483B\" alt=\"image\"></p>\n<p>结论：  </p>\n<ul>\n<li>JDBC是SUN公司提供一套用于数据库操作的接口API，Java程序员只需要面向这套接口编程即可。</li>\n<li>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。</li>\n</ul>\n<h2 id=\"2、JDBC-API\"><a href=\"#2、JDBC-API\" class=\"headerlink\" title=\"2、JDBC API\"></a>2、JDBC API</h2><p>JDBC API是一系列的接口，它统一和规范了应用程序与数据库的连接、执行SQL语句，并到得到返回结果等各类操作。声明在java.sql与javax.sql包中。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605115353.png\" alt></p>\n<h2 id=\"3、JDBC程序编写步骤\"><a href=\"#3、JDBC程序编写步骤\" class=\"headerlink\" title=\"3、JDBC程序编写步骤\"></a>3、JDBC程序编写步骤</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605115428.png\" alt></p>\n<h1 id=\"二、获取数据库连接\"><a href=\"#二、获取数据库连接\" class=\"headerlink\" title=\"二、获取数据库连接\"></a>二、获取数据库连接</h1><h3 id=\"（一）引入JDBC驱动程序\"><a href=\"#（一）引入JDBC驱动程序\" class=\"headerlink\" title=\"（一）引入JDBC驱动程序\"></a>（一）引入JDBC驱动程序</h3><p>驱动程序由数据库提供商提供下载。 MySQL的驱动下载地址：<a href=\"http://dev.mysql.com/downloads/\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/</a><br>如何在Java Project项目应用中添加数据库驱动jar：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605115616.png\" alt></p>\n<p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605115718.png\" alt></p>\n<h2 id=\"（二）加载并注册驱动\"><a href=\"#（二）加载并注册驱动\" class=\"headerlink\" title=\"（二）加载并注册驱动\"></a>（二）加载并注册驱动</h2><p>加载并注册驱动：</p>\n<ul>\n<li>加载驱动，把驱动类加载到内存</li>\n<li>注册驱动，把驱动类的对象交给DriverManager管理，用于后面创建连接等使用。</li>\n</ul>\n<h3 id=\"1、Class-forName\"><a href=\"#1、Class-forName\" class=\"headerlink\" title=\"1、Class.forName()\"></a>1、Class.forName()</h3><p>因为 Driver 接口的驱动程序类都包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例，所以可以换一种方式来加载驱动。（即只要想办法让驱动类的这段静态代码块执行即可注册驱动类，而要让这段静态代码块执行，只要让该类被类加载器加载即可）</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605115834.png\" alt></p>\n<p>调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过反射，加载与注册驱动类，解耦合（不直接依赖）</span><br><span class=\"line\">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、服务提供者框架\"><a href=\"#2、服务提供者框架\" class=\"headerlink\" title=\"2、服务提供者框架\"></a>2、服务提供者框架</h3><p>（例如：JDBC的驱动程序）自动注册（有版本要求）<br>符合JDBC 4.0规范的驱动程序包含了一个文件META-INF/services/java.sql.Driver，在这个文件中提供了JDBC驱动实现的类名。例如：mysql-connector-java-5.1.40-bin.jar文件中就可以找到java.sql.Driver文件，用文本编辑器打开文件就可以看到：com.mysql.jdbc.Driver类。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605115935.png\" alt></p>\n<p>JVM的服务提供者框架在启动应用时就会注册服务，例如：MySQL的JDBC驱动就会被注册，而原代码中的Class.forName(“com.mysql.jdbc.Driver”)仍然可以存在，但是不会起作用。<br>但是注意mysql-connector-java-5.0.8-bin.jar版本的jar中没有，如下</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605120032.png\" alt></p>\n<h2 id=\"（三）获取数据库链接\"><a href=\"#（三）获取数据库链接\" class=\"headerlink\" title=\"（三）获取数据库链接\"></a>（三）获取数据库链接</h2><p>可以通过 DriverManager 类建立到数据库的连接Connection：<br>DriverManager 试图从已注册的 JDBC 驱动程序集中选择一个适当的驱动程序。</p>\n<ul>\n<li>public static Connection getConnection(String url) </li>\n<li>public static Connection getConnection(String url,String user, String password)</li>\n<li>public static Connection getConnection(String url,Properties info)其中Properties info通常至少应该包括 “user” 和 “password” 属性</li>\n</ul>\n<p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。JDBC URL的标准由三部分组成，各部分间用冒号分隔。<br>jdbc:&lt;子协议&gt;:&lt;子名称&gt;  </p>\n<ul>\n<li>协议：JDBC URL中的协议总是jdbc </li>\n<li>子协议：子协议用于标识一个数据库驱动程序</li>\n<li>子名称：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了定位数据库提供足够的信息   </li>\n</ul>\n<p>例如：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605120219.png\" alt></p>\n<ul>\n<li>MySQL的连接URL编写方式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</span><br><span class=\"line\">jdbc:mysql://localhost:3306/testdb</span><br><span class=\"line\">jdbc:mysql://localhost:3306/testdb?useUnicode=true&amp;characterEncoding=utf8</span><br><span class=\"line\">（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</span><br><span class=\"line\"></span><br><span class=\"line\">jdbc:mysql://localhost:3306/testdb?user=root&amp;password=123456</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Oracle9i:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</span><br><span class=\"line\">jdbc:oracle:thin:@localhost:1521:testdb</span><br><span class=\"line\">SQLServer</span><br><span class=\"line\">jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</span><br><span class=\"line\">jdbc:sqlserver://localhost:1433:DatabaseName=testdb</span><br><span class=\"line\">\t//1、加载与注册驱动</span><br><span class=\"line\">\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//2、获取数据库连接</span><br><span class=\"line\">\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\tConnection conn = DriverManager.getConnection(url, &quot;root&quot;, &quot;root&quot;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"（四）操作或访问数据库\"><a href=\"#（四）操作或访问数据库\" class=\"headerlink\" title=\"（四）操作或访问数据库\"></a>（四）操作或访问数据库</h2><ul>\n<li>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。</li>\n<li>其实一个数据库连接就是一个Socket连接。</li>\n<li>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </span><br><span class=\"line\">    PrepatedStatement：SQL 语句被预编译并存储在此对象中，</span><br><span class=\"line\">                                 然后可以使用此对象多次高效地执行该语句。</span><br><span class=\"line\">        CallableStatement：用于执行 SQL 存储过程</span><br></pre></td></tr></table></figure>\n<h3 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><p>通过调用 Connection 对象的 createStatement() 方法创建该对象<br>该对象用于执行静态的 SQL 语句，并且返回执行结果<br>Statement 接口中定义了下列方法用于执行 SQL 语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int excuteUpdate(String sql)：执行更新操作INSERT、UPDATE、DELETE</span><br><span class=\"line\">ResultSet excuteQuery(String sql)：执行查询操作SELECT</span><br></pre></td></tr></table></figure>\n<h3 id=\"ResultSet\"><a href=\"#ResultSet\" class=\"headerlink\" title=\"ResultSet\"></a>ResultSet</h3><ul>\n<li>通过调用 Statement 对象的 excuteQuery() 方法创建该对象</li>\n<li>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商实现</li>\n<li>ResultSet 对象维护了一个指向当前数据行的游标，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行</li>\n<li>ResultSet 接口的常用方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean next()</span><br><span class=\"line\">getXxx(String columnLabel)：columnLabel使用 SQL AS 子句指定的列标签。</span><br><span class=\"line\">                            如果未指定 SQL AS 子句，则标签是列名称</span><br><span class=\"line\">getXxx(int index) :索引从1开始</span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605141430.png\" alt></p>\n<h2 id=\"（五）释放资源\"><a href=\"#（五）释放资源\" class=\"headerlink\" title=\"（五）释放资源\"></a>（五）释放资源</h2><p>Connection、Statement、ResultSet都是应用程序和数据库服务器的连接资源，使用后一定要关闭，可以在finally中关闭<br>演示未关闭后果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.conn;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestConnectionClose &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">\t\t//1、加载与注册驱动</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//2、获取数据库连接</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//my.ini中max_connections=10</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; 15; i++) &#123;</span><br><span class=\"line\">\t\t\tConnection conn = DriverManager.getConnection(url,&quot;root&quot;, &quot;123456&quot;);</span><br><span class=\"line\">\t\t\tSystem.out.println(conn);</span><br><span class=\"line\">\t\t\t//没有关闭，资源一直没有释放</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"（六）增、删、改、查示例代码\"><a href=\"#（六）增、删、改、查示例代码\" class=\"headerlink\" title=\"（六）增、删、改、查示例代码\"></a>（六）增、删、改、查示例代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.statement;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * 网络编程：tcp</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 服务器端：</span><br><span class=\"line\"> * 1、ServerSocket server = new ServerSocket(3306);</span><br><span class=\"line\"> * 2、Socket socket = server.accept();</span><br><span class=\"line\"> * 3、InputStream input = socket.getInputStream();//接收sql，客户端传过来的</span><br><span class=\"line\"> * 4、在服务器执行sql</span><br><span class=\"line\"> * 5、把结果给客户端</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 客户端：</span><br><span class=\"line\"> * 1、Socket socket = new Socket(服务器的IP地址，3306);</span><br><span class=\"line\"> * 2、传sql</span><br><span class=\"line\"> * 3、OutputStream out = socket.getOutputStream();</span><br><span class=\"line\"> * 4、out.write(sql);</span><br><span class=\"line\"> * 5、接收结果</span><br><span class=\"line\"> * 6、断开连接  out.close();socket.close();</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestStatement &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testAdd()throws Exception&#123;\t</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStatement st = conn.createStatement();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">             String sql = &quot;INSERT INTO t_department(dname,description) VALUES(&apos;财务部&apos;,&apos;负责发钱工作&apos;)&quot;;</span><br><span class=\"line\">\t\tint len = st.executeUpdate(sql);//把insert,update,delete都用这个方法</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(len&gt;0)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;添加成功&quot;);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;添加失败&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testUpdate()throws Exception&#123;</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStatement st = conn.createStatement();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        String sql = &quot;UPDATE t_department SET description = &apos;负责发工资、社保、公积金工作&apos; WHERE dname =&apos;财务部&apos;&quot;;</span><br><span class=\"line\">\t\tint len = st.executeUpdate(sql);//把insert,update,delete都用这个方法</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(len&gt;0)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;修改成功&quot;);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;修改失败&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testDelete()throws Exception&#123;</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStatement st = conn.createStatement();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString sql = &quot;DELETE FROM t_department WHERE did =6&quot;;</span><br><span class=\"line\">\t\tint len = st.executeUpdate(sql);//把insert,update,delete都用这个方法</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(len&gt;0)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;删除成功&quot;);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;删除失败&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testSelect()throws Exception&#123;</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStatement st = conn.createStatement();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        String sql = &quot;SELECT * FROM t_department&quot;;</span><br><span class=\"line\">\t\tResultSet rs = st.executeQuery(sql);//select语句用query方法</span><br><span class=\"line\">\t\twhile(rs.next())&#123;//是否有下一行</span><br><span class=\"line\">\t\t\t//取这一行的单元格</span><br><span class=\"line\">\t\t\tint id = rs.getInt(1);</span><br><span class=\"line\">\t\t\tString name = rs.getString(2);</span><br><span class=\"line\">\t\t\tString desc = rs.getString(3);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(id+&quot;\\t&quot; + name + &quot;\\t&quot; + desc);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\trs.close();</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testSelect2()throws Exception&#123;</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStatement st = conn.createStatement();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString sql = &quot;SELECT did,dname FROM t_department&quot;;</span><br><span class=\"line\">\t\tResultSet rs = st.executeQuery(sql);//select语句用query方法</span><br><span class=\"line\">\t\twhile(rs.next())&#123;//是否有下一行</span><br><span class=\"line\">\t\t\t//取这一行的单元格</span><br><span class=\"line\">\t\t\tint id = rs.getInt(&quot;did&quot;);</span><br><span class=\"line\">\t\t\tString name = rs.getString(&quot;dname&quot;);</span><br><span class=\"line\">\t\t\tSystem.out.println(id+&quot;\\t&quot; + name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\trs.close();</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、PreparedStatement\"><a href=\"#四、PreparedStatement\" class=\"headerlink\" title=\"四、PreparedStatement\"></a>四、PreparedStatement</h1><h2 id=\"1、Statement的不足\"><a href=\"#1、Statement的不足\" class=\"headerlink\" title=\"1、Statement的不足\"></a>1、Statement的不足</h2><h3 id=\"（1）SQL拼接\"><a href=\"#（1）SQL拼接\" class=\"headerlink\" title=\"（1）SQL拼接\"></a>（1）SQL拼接</h3><h3 id=\"（2）SQL注入\"><a href=\"#（2）SQL注入\" class=\"headerlink\" title=\"（2）SQL注入\"></a>（2）SQL注入</h3><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令，从而利用系统的 SQL 引擎完成恶意行为的做法。对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement 取代 Statement 就可以了。</p>\n<h3 id=\"（3）处理Blob类型的数据\"><a href=\"#（3）处理Blob类型的数据\" class=\"headerlink\" title=\"（3）处理Blob类型的数据\"></a>（3）处理Blob类型的数据</h3><ul>\n<li>BLOB (binary large object)，二进制大对象，BLOB常常是数据库中用来存储二进制文件的字段类型。</li>\n<li>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</li>\n<li>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605141849.png\" alt></p>\n<p>实际使用中根据需要存入的数据大小定义不同的BLOB类型。<br>需要注意的是：如果存储的文件过大，数据库的性能会下降。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `username` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL,</span><br><span class=\"line\">  `head_picture` mediumblob,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.statement;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.Statement;</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * Statement：</span><br><span class=\"line\"> * 1、SQL拼接</span><br><span class=\"line\"> * 2、SQL注入</span><br><span class=\"line\"> * 3、处理不了Blob类型的数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestStatementProblem &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void add() throws Exception&#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入姓名：&quot;);</span><br><span class=\"line\">\t\tString name = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入领导编号：&quot;);</span><br><span class=\"line\">\t\tint mid = input.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入部门编号：&quot;);</span><br><span class=\"line\">\t\tint did = input.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//1、连接数据库</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/1221db&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//2、创建Statement对象</span><br><span class=\"line\">\t\tStatement st = conn.createStatement();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//3、编写sql</span><br><span class=\"line\">\t\tString sql = &quot;INSERT INTO emp (ename,`mid`,did) VALUES(&apos;&quot; + name+&quot;&apos;,&quot; + mid + &quot;,&quot; + did + &quot;)&quot;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//4、执行sql</span><br><span class=\"line\">\t\tint update = st.executeUpdate(sql);</span><br><span class=\"line\">\t\tSystem.out.println(update&gt;0?&quot;添加成功&quot;:&quot;添加失败&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//5、释放资源</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void select()throws Exception&#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入姓名：&quot;);</span><br><span class=\"line\">\t\tString name = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//1、连接数据库</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/1221db&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//2、写sql</span><br><span class=\"line\">\t\t//孙红雷  &apos; or &apos;1&apos; = &apos;1</span><br><span class=\"line\">\t\tString sql = &quot;SELECT eid,ename,tel,gender,salary FROM t_employee WHERE ename = &apos;&quot; + name + &quot;&apos;&quot;;</span><br><span class=\"line\">\t\tSystem.out.println(sql);</span><br><span class=\"line\">//\t\tSELECT eid,ename,tel,gender,salary FROM t_employee WHERE ename = &apos;孙红雷  &apos; or &apos;1&apos; = &apos;1&apos;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//3、用Statement执行</span><br><span class=\"line\">\t\tStatement st = conn.createStatement();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//4、执行查询sql</span><br><span class=\"line\">\t\tResultSet rs = st.executeQuery(sql);</span><br><span class=\"line\">\t\twhile(rs.next())&#123;</span><br><span class=\"line\">\t\t\tint id = rs.getInt(1);</span><br><span class=\"line\">\t\t\tString ename = rs.getString(2);</span><br><span class=\"line\">\t\t\tString tel = rs.getString(3);</span><br><span class=\"line\">\t\t\tString gender =rs.getString(4);</span><br><span class=\"line\">\t\t\tdouble salary = rs.getDouble(5);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(id+&quot;\\t&quot; + ename + &quot;\\t&quot; + tel + &quot;\\t&quot; + gender + &quot;\\t&quot; +salary);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//5、释放资源</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">\tpublic void testAddBlob()&#123;</span><br><span class=\"line\">\t\tString sql = &quot;INSERT INTO `user` (username,`password`,photo)VALUES(&apos;chai&apos;,&apos;123&apos;,没法在String中处理Blob类型的数据);&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、PreparedStatement概述\"><a href=\"#2、PreparedStatement概述\" class=\"headerlink\" title=\"2、PreparedStatement概述\"></a>2、PreparedStatement概述</h2><p>可以通过调用 Connection 对象的 preparedStatement(String sql) 方法获取 PreparedStatement 对象<br>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</p>\n<ul>\n<li>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</li>\n<li>ResultSet executeQuery()执行查询，并返回该查询生成的 ResultSet 对象。</li>\n<li>int executeUpdate()：执行更新，包括增、删、该 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.preparedstatement;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * PreparedStatement：是Statement子接口</span><br><span class=\"line\"> * 1、SQL不需要拼接</span><br><span class=\"line\"> * 2、SQL不会出现注入</span><br><span class=\"line\"> * 3、可以处理Blob类型的数据</span><br><span class=\"line\"> * tinyblob：255字节以内</span><br><span class=\"line\"> * blob：65K以内</span><br><span class=\"line\"> * mediumblob:16M以内</span><br><span class=\"line\"> * longblob：4G以内</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 如果还是报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数：</span><br><span class=\"line\"> * max_allowed_packet=16M</span><br><span class=\"line\"> * 注意：修改了my.ini文件，一定要重新启动服务</span><br><span class=\"line\"> * </span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestPreparedStatement &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void add() throws Exception &#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入姓名：&quot;);</span><br><span class=\"line\">\t\tString name = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入手机号码：&quot;);</span><br><span class=\"line\">\t\tString tel = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入性别：&quot;);</span><br><span class=\"line\">\t\tString gender = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入薪资：&quot;);</span><br><span class=\"line\">\t\tdouble salary = input.nextDouble();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入部门编号：&quot;);</span><br><span class=\"line\">\t\tint did = input.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//1、连接数据库</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//2、编写带？的SQL</span><br><span class=\"line\">\t\tString sql = &quot;INSERT INTO t_employee (ename,tel,gender,salary,did) VALUES(?,?,?,?,?)&quot;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 3、准备一个PreparedStatement：预编译sql</span><br><span class=\"line\">\t\tPreparedStatement pst = conn.prepareStatement(sql);// 对带？的sql进行预编译</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 4、把?用具体的值进行代替</span><br><span class=\"line\">\t\tpst.setString(1, name);</span><br><span class=\"line\">\t\tpst.setString(2, tel);</span><br><span class=\"line\">\t\tpst.setString(3, gender);</span><br><span class=\"line\">\t\tpst.setDouble(4, salary);</span><br><span class=\"line\">\t\tpst.setInt(5, did);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 5、执行sql</span><br><span class=\"line\">\t\tint len = pst.executeUpdate();</span><br><span class=\"line\">\t\tSystem.out.println(len&gt;0?&quot;添加成功&quot;:&quot;添加失败&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 6、释放资源</span><br><span class=\"line\">\t\tpst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void select() throws Exception &#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入姓名：&quot;);</span><br><span class=\"line\">\t\tString name = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//1、连接数据库</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//2、编写带?的sql</span><br><span class=\"line\">\t\t//孙红雷  &apos; or &apos;1&apos; = &apos;1</span><br><span class=\"line\">\t\tString sql = &quot;SELECT eid,ename,tel,gender,salary FROM t_employee WHERE ename = ?&quot;;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t// 3、把带？的sql语句进行预编译</span><br><span class=\"line\">\t\tPreparedStatement pst = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 4、把？用具体的变量的赋值</span><br><span class=\"line\">\t\tpst.setString(1, name);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 5、执行sql</span><br><span class=\"line\">\t\tResultSet rs = pst.executeQuery();</span><br><span class=\"line\">\t\twhile (rs.next()) &#123;</span><br><span class=\"line\">\t\t\tint id = rs.getInt(&quot;eid&quot;);</span><br><span class=\"line\">\t\t\tString ename = rs.getString(&quot;ename&quot;);</span><br><span class=\"line\">\t\t\tString tel = rs.getString(&quot;tel&quot;);</span><br><span class=\"line\">\t\t\tString gender = rs.getString(&quot;gender&quot;);</span><br><span class=\"line\">\t\t\tdouble salary = rs.getDouble(&quot;salary&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSystem.out.println(id + &quot;\\t&quot; + ename + &quot;\\t&quot; + tel + &quot;\\t&quot; + gender + &quot;\\t&quot; + salary);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 6、释放资源</span><br><span class=\"line\">\t\trs.close();</span><br><span class=\"line\">\t\tpst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void addBlob() throws Exception &#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入用户名：&quot;);</span><br><span class=\"line\">\t\tString username = input.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入密码：&quot;);</span><br><span class=\"line\">\t\tString pwd = input.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(&quot;请指定照片的路径：&quot;);</span><br><span class=\"line\">\t\tString photoPath = input.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//1、连接数据库</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//2、 INSERT INTO `user` VALUES(NULL,用户名,密码,照片)</span><br><span class=\"line\">\t\tString sql = &quot;INSERT INTO `user` (username,`password`,head_picture)VALUES(?,?,?)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 3、准备一个PreparedStatement：预编译sql</span><br><span class=\"line\">\t\tPreparedStatement pst = conn.prepareStatement(sql);// 对带？的sql进行预编译</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 4、对？进行设置</span><br><span class=\"line\">\t\tpst.setString(1, username);</span><br><span class=\"line\">\t\tpst.setString(2, pwd);</span><br><span class=\"line\">\t\tpst.setBlob(3, new FileInputStream(photoPath));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 5、执行sql</span><br><span class=\"line\">\t\tint len = pst.executeUpdate();</span><br><span class=\"line\">\t\tSystem.out.println(len &gt; 0 ? &quot;添加成功&quot; : &quot;添加失败&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 6、释放资源</span><br><span class=\"line\">\t\tpst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、PreparedStatement-vs-Statement\"><a href=\"#3、PreparedStatement-vs-Statement\" class=\"headerlink\" title=\"3、PreparedStatement vs Statement\"></a>3、PreparedStatement vs Statement</h2><ul>\n<li>代码的可读性和可维护性. Statement的sql拼接是个难题。</li>\n<li>PreparedStatement 可以防止 SQL 注入 </li>\n<li>PreparedStatement 可以处理Blob类型的数据</li>\n<li>PreparedStatement 能最大可能提高性能：（Oracle和PostgreSQL8是这样，但是对于MySQL不一定比Statement高）<ul>\n<li>DBServer会对预编译语句提供性能优化。因为预编译语句有可能被重复调用，所以语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4、JDBC-取得数据库自动生成的主键\"><a href=\"#4、JDBC-取得数据库自动生成的主键\" class=\"headerlink\" title=\"4、JDBC 取得数据库自动生成的主键\"></a>4、JDBC 取得数据库自动生成的主键</h2><h3 id=\"获取自增长的键值：\"><a href=\"#获取自增长的键值：\" class=\"headerlink\" title=\"获取自增长的键值：\"></a>获取自增长的键值：</h3><h4 id=\"（1）在创建PreparedStatement对象时\"><a href=\"#（1）在创建PreparedStatement对象时\" class=\"headerlink\" title=\"（1）在创建PreparedStatement对象时\"></a>（1）在创建PreparedStatement对象时</h4><p>原来：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement pst = conn.preparedStatement(sql);</span><br></pre></td></tr></table></figure>\n<p>现在：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement pst = conn.prepareStatement(orderInsert,Statement.RETURN_GENERATED_KEYS);</span><br></pre></td></tr></table></figure>\n<h4 id=\"（2）原来执行更新\"><a href=\"#（2）原来执行更新\" class=\"headerlink\" title=\"（2）原来执行更新\"></a>（2）原来执行更新</h4><p>原来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int len = pst.executeUpdate();</span><br></pre></td></tr></table></figure>\n<p> 现在：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int len = pst.executeUpdate();\t</span><br><span class=\"line\">ResultSet rs = pst.getGeneratedKeys();</span><br><span class=\"line\">if(rs.next())&#123;</span><br><span class=\"line\">\t Object key = rs.getObject(第几列);//获取自增长的键值</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.preparedstatement;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.ResultSet;</span><br><span class=\"line\">import java.sql.Statement;</span><br><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestGenerateKey &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入姓名：&quot;);</span><br><span class=\"line\">\t\tString name = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入手机号码：&quot;);</span><br><span class=\"line\">\t\tString tel = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入性别：&quot;);</span><br><span class=\"line\">\t\tString gender = input.nextLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入薪资：&quot;);</span><br><span class=\"line\">\t\tdouble salary = input.nextDouble();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;请输入部门编号：&quot;);</span><br><span class=\"line\">\t\tint did = input.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//1、连接数据库</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//2、编写带？的SQL</span><br><span class=\"line\">\t\tString sql = &quot;INSERT INTO t_employee (ename,tel,gender,salary,did) VALUES(?,?,?,?,?)&quot;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 3、准备一个PreparedStatement：预编译sql</span><br><span class=\"line\">//\t\t执行添加语句，如果需要获取自增长的键值，那么在此处要告知mysql服务器，在创建PreparedStatement对象时，增加一个参数</span><br><span class=\"line\">\t\t//autoGeneratedKeys - 指示是否应该返回自动生成的键的标志，它是 Statement.RETURN_GENERATED_KEYS 或 Statement.NO_GENERATED_KEYS 之一</span><br><span class=\"line\">\t\tPreparedStatement pst = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 4、把?用具体的值进行代替</span><br><span class=\"line\">\t\tpst.setString(1, name);</span><br><span class=\"line\">\t\tpst.setString(2, tel);</span><br><span class=\"line\">\t\tpst.setString(3, gender);</span><br><span class=\"line\">\t\tpst.setDouble(4, salary);</span><br><span class=\"line\">\t\tpst.setInt(5, did);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 5、执行sql</span><br><span class=\"line\">\t\tint len = pst.executeUpdate();</span><br><span class=\"line\">\t\tSystem.out.println(len&gt;0?&quot;添加成功&quot;:&quot;添加失败&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tResultSet rs = pst.getGeneratedKeys();</span><br><span class=\"line\">\t\tif(rs.next())&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;新员工编号是：&quot; + rs.getObject(1));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// 6、释放资源</span><br><span class=\"line\">\t\tpst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、批处理\"><a href=\"#5、批处理\" class=\"headerlink\" title=\"5、批处理\"></a>5、批处理</h2><p>当需要成批插入或者更新记录时。可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率。<br>JDBC的批量处理语句包括下面两个方法：</p>\n<ul>\n<li>addBatch()：添加需要批量处理的SQL语句或参数</li>\n<li>executeBatch()：执行批量处理语句；</li>\n</ul>\n<p>通常我们会遇到两种批量执行SQL语句的情况：</p>\n<ul>\n<li>多条SQL语句的批量处理；</li>\n<li>一个SQL语句的批量传参；</li>\n</ul>\n<p>注意：<br><strong>JDBC连接MySQL时，如果要使用批处理功能，请再url中加参数?rewriteBatchedStatements=true<br>PreparedStatement作批处理插入时使用values（使用value没有效果）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.preparedstatement;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestBatch &#123;</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void noBatch()throws Exception&#123;</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        String sql = &quot;INSERT INTO t_department(dname,description) VALUES(?,?)&quot;;</span><br><span class=\"line\">        PreparedStatement st = conn.prepareStatement(sql);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i=0; i&lt;1000; i++)&#123;</span><br><span class=\"line\">        \tst.setString(1, &quot;测试部门&quot; + i);</span><br><span class=\"line\">        \tst.setString(2, &quot;测试部门描述&quot;  + i);</span><br><span class=\"line\">        \t</span><br><span class=\"line\">        \tst.executeUpdate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void useBatch()throws Exception&#123;</span><br><span class=\"line\">\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString url = &quot;jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&quot;;</span><br><span class=\"line\">\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        String sql = &quot;INSERT INTO t_department(dname,description) VALUES(?,?)&quot;;</span><br><span class=\"line\">        PreparedStatement st = conn.prepareStatement(sql);</span><br><span class=\"line\">        </span><br><span class=\"line\">        for(int i=0; i&lt;1000; i++)&#123;</span><br><span class=\"line\">        \tst.setString(1, &quot;测试部门&quot; + i);</span><br><span class=\"line\">        \tst.setString(2, &quot;测试部门描述&quot;  + i);</span><br><span class=\"line\">        \t</span><br><span class=\"line\">        \tst.addBatch();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        st.executeBatch();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tst.close();</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、事务\"><a href=\"#6、事务\" class=\"headerlink\" title=\"6、事务\"></a>6、事务</h2><p>JDBC程序中当一个连接对象被创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。<br>JDBC程序中为了让多个 SQL 语句作为一个事务执行：（重点）  </p>\n<ul>\n<li>调用 Connection 对象的 setAutoCommit(false); 以取消自动提交事务</li>\n<li>在所有的 SQL 语句都成功执行后，调用 commit(); 方法提交事务</li>\n<li>在其中某个操作失败或出现异常时，调用 rollback(); 方法回滚事务</li>\n<li>若此时 Connection 没有被关闭, 则需要恢复其自动提交状态 setAutoCommit(true);</li>\n</ul>\n<p>注意：<br><strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.DriverManager;</span><br><span class=\"line\">import java.sql.PreparedStatement;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestTransaction &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)&#123;</span><br><span class=\"line\">\t\tConnection conn = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t//1、连接数据库</span><br><span class=\"line\">\t\t\tClass.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tString url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class=\"line\">\t\t\tString user = &quot;root&quot;;</span><br><span class=\"line\">\t\t\tString password = &quot;123456&quot;;</span><br><span class=\"line\">\t\t\tconn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t\t//设置手动提交</span><br><span class=\"line\">\t\t\tconn.setAutoCommit(false);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tString sql1 = &quot;update t_department set description = ? where did = ?&quot;;</span><br><span class=\"line\">\t\t\tPreparedStatement pst1 = conn.prepareStatement(sql1);</span><br><span class=\"line\">\t\t\tpst1.setObject(1, &quot;挣大钱的&quot;);</span><br><span class=\"line\">\t\t\tpst1.setObject(2, 4);</span><br><span class=\"line\">\t\t\tint len1 = pst1.executeUpdate();</span><br><span class=\"line\">\t\t\tSystem.out.println(len1&gt;0?&quot;更新部门信息成功&quot;:&quot;更新部门信息失败&quot;);</span><br><span class=\"line\">\t\t\tpst1.close();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tString sql2 = &quot;update t_employee set salary = salary + ? where did = ?&quot;;</span><br><span class=\"line\">\t\t\tPreparedStatement pst2 = conn.prepareStatement(sql2);</span><br><span class=\"line\">\t\t\tpst2.setObject(1, 20000);</span><br><span class=\"line\">\t\t\tpst2.setObject(2, 4);</span><br><span class=\"line\">\t\t\tint len2 = pst2.executeUpdate();</span><br><span class=\"line\">\t\t\tSystem.out.println(len2&gt;0?&quot;更新部门信息成功&quot;:&quot;更新部门信息失败&quot;);</span><br><span class=\"line\">\t\t\tpst2.close();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tconn.commit();</span><br><span class=\"line\">\t\t&#125;catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif(conn!=null)&#123;</span><br><span class=\"line\">\t\t\t\t\tconn.rollback();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e1) &#123;</span><br><span class=\"line\">\t\t\t\te1.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; finally&#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif(conn!=null)&#123;</span><br><span class=\"line\">\t\t\t\t\t//恢复自动提交</span><br><span class=\"line\">\t\t\t\t\tconn.setAutoCommit(true);</span><br><span class=\"line\">\t\t\t\t\t//释放连接</span><br><span class=\"line\">\t\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、数据库连接池\"><a href=\"#五、数据库连接池\" class=\"headerlink\" title=\"五、数据库连接池\"></a>五、数据库连接池</h1><h2 id=\"1、数据库连接池\"><a href=\"#1、数据库连接池\" class=\"headerlink\" title=\"1、数据库连接池\"></a>1、数据库连接池</h2><h3 id=\"（1）数据库连接池的必要性\"><a href=\"#（1）数据库连接池的必要性\" class=\"headerlink\" title=\"（1）数据库连接池的必要性\"></a>（1）数据库连接池的必要性</h3><p>不使用数据库连接池存在的问题:  </p>\n<ul>\n<li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证IP地址，用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用</strong>.若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li>\n<li>对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。</li>\n<li>这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li>\n</ul>\n<p>为解决传统开发中的数据库连接问题，可以采用<strong>数据库连接池技术（connection pool）</strong>。</p>\n<ul>\n<li>数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。数据库连接池负责分配、管理和释放数据库连接，<strong>它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605142920.png\" alt></p>\n<p>数据库连接池技术的优点：  </p>\n<ul>\n<li>资源重用：<ul>\n<li>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>更快的系统反应速度<ul>\n<li>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>新的资源分配手段<ul>\n<li>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>统一的连接管理，避免数据库连接泄露<ul>\n<li>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（2）多种开源的数据库连接池\"><a href=\"#（2）多种开源的数据库连接池\" class=\"headerlink\" title=\"（2）多种开源的数据库连接池\"></a>（2）多种开源的数据库连接池</h3><p>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：</p>\n<ul>\n<li>DBCP 是Apache提供的数据库连接池，速度相对c3p0较快，但因自身存在BUG，Hibernate3已不再提供支持</li>\n<li>C3P0 是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以</li>\n<li>Proxool 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较c3p0差一点</li>\n<li>BoneCP 是一个开源组织提供的数据库连接池，速度快</li>\n<li>Druid 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不知道是否有BoneCP快</li>\n</ul>\n<p>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池<br>注意：  </p>\n<ul>\n<li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li>\n<li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li>\n</ul>\n<h3 id=\"（3）Druid（德鲁伊）数据源\"><a href=\"#（3）Druid（德鲁伊）数据源\" class=\"headerlink\" title=\"（3）Druid（德鲁伊）数据源\"></a>（3）Druid（德鲁伊）数据源</h3><p> Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，据说是目前最好的连接池。  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605143309.png\" alt>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.druid;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestDruid &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tProperties pro = new Properties();</span><br><span class=\"line\">\t\tpro.load(TestDruid.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));</span><br><span class=\"line\">\t\tDataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class=\"line\">\t\tConnection conn = ds.getConnection();</span><br><span class=\"line\">\t\tSystem.out.println(conn);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true</span><br><span class=\"line\">username=root</span><br><span class=\"line\">password=123456</span><br><span class=\"line\">driverClassName=com.mysql.jdbc.Driver</span><br><span class=\"line\">initialSize=10</span><br><span class=\"line\">maxActive=20</span><br><span class=\"line\">maxWait=1000</span><br><span class=\"line\">filters=wall</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605143757.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605143854.png\" alt></p>\n<h2 id=\"2、ThreadLocal\"><a href=\"#2、ThreadLocal\" class=\"headerlink\" title=\"2、ThreadLocal\"></a>2、ThreadLocal</h2><ul>\n<li>JDK 1.2的版本中就提供java.lang.ThreadLocal，ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。使用这个工具类可以很简洁地编写出优美的多线程程序。</li>\n<li>ThreadLocal用于保存某个线程共享变量，原因是在Java中，每一个线程中都有一个ThreadLocalMap&lt;ThreadLocal, Object&gt;，其key就是一个ThreadLocal，而Object即为该线程的共享变量。而这个map是通过ThreadLocal的set和get方法操作的。对于同一个static ThreadLocal，不同线程只能从中get，set，remove自己的变量，而不会影响其他线程的变量。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、ThreadLocal.get: 获取ThreadLocal中当前线程共享变量的值。</span><br><span class=\"line\">2、ThreadLocal.set: 设置ThreadLocal中当前线程共享变量的值。</span><br><span class=\"line\">3、ThreadLocal.remove: 移除ThreadLocal中当前线程共享变量的值。</span><br><span class=\"line\">4、ThreadLocal.initialValue:</span><br><span class=\"line\">ThreadLocal没有被当前线程赋值时或当前线程刚调remove方法后调用get方法，返回此方法值。</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、封装JDBCTools\"><a href=\"#3、封装JDBCTools\" class=\"headerlink\" title=\"3、封装JDBCTools\"></a>3、封装JDBCTools</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * 获取连接或释放连接的工具类</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class JDBCTools &#123;</span><br><span class=\"line\">\t// 1、数据源,即连接池</span><br><span class=\"line\">\tprivate static DataSource dataSource;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 2、ThreadLocal对象</span><br><span class=\"line\">\tprivate static ThreadLocal&lt;Connection&gt; threadLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t//1、读取druip.properties文件</span><br><span class=\"line\">\t\t\tProperties pro = new Properties();</span><br><span class=\"line\">\t\t\tpro.load(JDBCTools.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t//2、连接连接池</span><br><span class=\"line\">\t\t\tdataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t//3、创建线程池</span><br><span class=\"line\">\t\t\tthreadLocal = new ThreadLocal&lt;&gt;();</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取连接的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t * @throws SQLException</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static Connection getConnection() &#123;</span><br><span class=\"line\">\t\t// 从当前线程中获取连接</span><br><span class=\"line\">\t\tConnection connection = threadLocal.get();</span><br><span class=\"line\">\t\tif (connection == null) &#123;</span><br><span class=\"line\">\t\t\t// 从连接池中获取一个连接</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tconnection = dataSource.getConnection();</span><br><span class=\"line\">\t\t\t\t// 将连接与当前线程绑定</span><br><span class=\"line\">\t\t\t\tthreadLocal.set(connection);</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn connection;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 释放连接的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param connection</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void releaseConnection() &#123;</span><br><span class=\"line\">\t\t// 获取当前线程中的连接</span><br><span class=\"line\">\t\tConnection connection = threadLocal.get();</span><br><span class=\"line\">\t\tif (connection != null) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tconnection.close();</span><br><span class=\"line\">\t\t\t\t// 将已经关闭的连接从当前线程中移除</span><br><span class=\"line\">\t\t\t\tthreadLocal.remove();</span><br><span class=\"line\">\t\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"六、Apache—DBUtils简介\"><a href=\"#六、Apache—DBUtils简介\" class=\"headerlink\" title=\"六、Apache—DBUtils简介\"></a>六、Apache—DBUtils简介</h1><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605144149.png\" alt></p>\n<h2 id=\"1、DbUtils类\"><a href=\"#1、DbUtils类\" class=\"headerlink\" title=\"1、DbUtils类\"></a>1、DbUtils类</h2><p>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：</p>\n<ul>\n<li>public static void close(…) throws java.sql.SQLException：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li>\n<li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li>\n<li>public static void commitAndClose(Connection conn)throws SQLException 用来提交连接的事务，然后关闭连接</li>\n<li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接的事务，然后关闭连接，并且在关闭连接时不抛出SQL异常。</li>\n<li>public static void rollback(Connection conn)throws SQLException允许conn为null，因为方法内部做了判断</li>\n<li>public static void rollbackAndClose(Connection conn)throws SQLException</li>\n<li>rollbackAndCloseQuietly(Connection)</li>\n<li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li>\n</ul>\n<h2 id=\"2、QueryRunner类\"><a href=\"#2、QueryRunner类\" class=\"headerlink\" title=\"2、QueryRunner类\"></a>2、QueryRunner类</h2><p>该类封装了SQL的执行，是线程安全的。</p>\n<ul>\n<li>可以实现增、删、改、查、批处理、</li>\n<li>考虑了事务处理需要共用Connection。</li>\n<li>该类最主要的就是简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</li>\n</ul>\n<p>QueryRunner类提供了两个构造方法：  </p>\n<ul>\n<li>QueryRunner()：默认的构造方法</li>\n<li>QueryRunner(DataSource ds)：需要一个 javax.sql.DataSource 来作参数的构造方法。</li>\n</ul>\n<h3 id=\"（1）更新\"><a href=\"#（1）更新\" class=\"headerlink\" title=\"（1）更新\"></a>（1）更新</h3><ul>\n<li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li>\n<li>……</li>\n</ul>\n<h3 id=\"（2）插入\"><a href=\"#（2）插入\" class=\"headerlink\" title=\"（2）插入\"></a>（2）插入</h3><ul>\n<li>public <t> T insert(Connection conn,String sql,ResultSetHandler<t> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</t></t></li>\n<li>….</li>\n</ul>\n<h3 id=\"（3）批处理\"><a href=\"#（3）批处理\" class=\"headerlink\" title=\"（3）批处理\"></a>（3）批处理</h3><ul>\n<li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li>\n<li>public <t> T insertBatch(Connection conn,String sql,ResultSetHandler<t> rsh,Object[][] params)throws SQLException：只支持INSERT语句</t></t></li>\n<li>…..</li>\n</ul>\n<h3 id=\"（4）使用QueryRunner类实现查询\"><a href=\"#（4）使用QueryRunner类实现查询\" class=\"headerlink\" title=\"（4）使用QueryRunner类实现查询\"></a>（4）使用QueryRunner类实现查询</h3><ul>\n<li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li>\n<li>……    </li>\n</ul>\n<h2 id=\"3、ResultSetHandler接口\"><a href=\"#3、ResultSetHandler接口\" class=\"headerlink\" title=\"3、ResultSetHandler接口\"></a>3、ResultSetHandler接口</h2><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet  rs)该方法的返回值将作为QueryRunner类的query()方法的返回值。<br>该接口有如下实现类可以使用：  </p>\n<ul>\n<li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li>\n<li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li>\n<li>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li>\n<li>BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li>\n<li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li>\n<li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li>\n<li>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li>\n<li>MapListHandler：将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li>\n</ul>\n<h2 id=\"4、表与JavaBean\"><a href=\"#4、表与JavaBean\" class=\"headerlink\" title=\"4、表与JavaBean\"></a>4、表与JavaBean</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605144702.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605144730.png\" alt></p>\n<h2 id=\"5、示例代码\"><a href=\"#5、示例代码\" class=\"headerlink\" title=\"5、示例代码\"></a>5、示例代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.apache.dbutils;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.dbutils.QueryRunner;</span><br><span class=\"line\">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class=\"line\">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class=\"line\">import org.apache.commons.dbutils.handlers.MapListHandler;</span><br><span class=\"line\">import org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.bean.Book;</span><br><span class=\"line\">import com.atguigu.util.JDBCTools;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestDBUtils &#123;</span><br><span class=\"line\">\tQueryRunner qr = new QueryRunner();</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testUpdate() throws Exception &#123;</span><br><span class=\"line\">\t\tBook book = new Book(0, &quot;红楼梦&quot;, &quot;曹雪芹&quot;, 88.8, 0, 200, null);</span><br><span class=\"line\">\t\t// 写sql语句</span><br><span class=\"line\">\t\tString sql = &quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;;</span><br><span class=\"line\">\t\tqr.update(JDBCTools.getConnection(), sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(),</span><br><span class=\"line\">\t\t\t\tbook.getStock(), book.getImgPath());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testInsert() throws Exception &#123;</span><br><span class=\"line\">\t\tBook book = new Book(0, &quot;红楼梦&quot;, &quot;曹雪芹&quot;, 88.8, 0, 200, null);</span><br><span class=\"line\">\t\t// 写sql语句</span><br><span class=\"line\">\t\tString sql = &quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;;</span><br><span class=\"line\">\t\tLong id = qr.insert(JDBCTools.getConnection(), sql, new ScalarHandler&lt;Long&gt;(), book.getTitle(),</span><br><span class=\"line\">\t\t\t\tbook.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getImgPath());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;新书编号：&quot; + id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testBatch() throws Exception &#123;</span><br><span class=\"line\">\t\tObject[][] params = new Object[2][3];</span><br><span class=\"line\">\t\tparams[0][0] = 1;</span><br><span class=\"line\">\t\tparams[0][1] = 1;</span><br><span class=\"line\">\t\tparams[0][2] = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tparams[1][0] = 1;</span><br><span class=\"line\">\t\tparams[1][1] = 1;</span><br><span class=\"line\">\t\tparams[1][2] = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString sql = &quot;update books set sales = sales + ? , stock = stock - ? where id = ?&quot;;</span><br><span class=\"line\">\t\tqr.batch(JDBCTools.getConnection(), sql, params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testGetBean() throws Exception &#123;</span><br><span class=\"line\">\t\t// 写sql语句</span><br><span class=\"line\">\t\t// 当JavaBean的属性名与字段名不一致时，可以通过指定别名告知属性名</span><br><span class=\"line\">\t\tString sql = &quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;;</span><br><span class=\"line\">\t\tBook b = qr.query(JDBCTools.getConnection(), sql, new BeanHandler&lt;Book&gt;(Book.class), 2);</span><br><span class=\"line\">\t\tSystem.out.println(b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testGetBeanList() throws Exception &#123;</span><br><span class=\"line\">\t\t// 写sql语句</span><br><span class=\"line\">\t\t// 当JavaBean的属性名与字段名不一致时，可以通过指定别名告知属性名</span><br><span class=\"line\">\t\tString sql = &quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? &quot;;</span><br><span class=\"line\">\t\tList&lt;Book&gt; list = qr.query(JDBCTools.getConnection(), sql, new BeanListHandler&lt;Book&gt;(Book.class), 10, 20);</span><br><span class=\"line\">\t\tfor (Book b : list) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testGetSingleValue() throws Exception &#123;</span><br><span class=\"line\">\t\t// 获取数据库中图书的总记录数</span><br><span class=\"line\">\t\tString sql = &quot;select count(*) from books&quot;;</span><br><span class=\"line\">\t\tLong count = qr.query(JDBCTools.getConnection(), sql,  new ScalarHandler&lt;Long&gt;());</span><br><span class=\"line\">\t\tSystem.out.println(count);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testGetMap() throws Exception &#123;</span><br><span class=\"line\">\t\tString sql = &quot;SELECT user_id userId,COUNT(*) FROM `orders` GROUP BY user_id&quot;;</span><br><span class=\"line\">\t\tList&lt;Map&lt;String, Object&gt;&gt; list = qr.query(JDBCTools.getConnection(), sql, new MapListHandler());</span><br><span class=\"line\">\t\tfor (Map&lt;String, Object&gt; map : list) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(map);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.bean;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Book &#123;</span><br><span class=\"line\">\tprivate Integer id;</span><br><span class=\"line\">\tprivate String title;</span><br><span class=\"line\">\tprivate String author;</span><br><span class=\"line\">\tprivate Double price;</span><br><span class=\"line\">\tprivate Integer sales;</span><br><span class=\"line\">\tprivate Integer stock;</span><br><span class=\"line\">\tprivate String imgPath =&quot;static/img/default.jpg&quot;;</span><br><span class=\"line\">\tpublic Book(Integer id, String title, String author, Double price, Integer sales, Integer stock, String imgPath) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t\tthis.title = title;</span><br><span class=\"line\">\t\tthis.author = author;</span><br><span class=\"line\">\t\tthis.price = price;</span><br><span class=\"line\">\t\tthis.sales = sales;</span><br><span class=\"line\">\t\tthis.stock = stock;</span><br><span class=\"line\">\t\tif(imgPath != null)&#123;</span><br><span class=\"line\">\t\t\tthis.imgPath = imgPath;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Book() &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer getId() &#123;</span><br><span class=\"line\">\t\treturn id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setId(Integer id) &#123;</span><br><span class=\"line\">\t\tthis.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getTitle() &#123;</span><br><span class=\"line\">\t\treturn title;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setTitle(String title) &#123;</span><br><span class=\"line\">\t\tthis.title = title;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getAuthor() &#123;</span><br><span class=\"line\">\t\treturn author;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setAuthor(String author) &#123;</span><br><span class=\"line\">\t\tthis.author = author;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Double getPrice() &#123;</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setPrice(Double price) &#123;</span><br><span class=\"line\">\t\tthis.price = price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer getSales() &#123;</span><br><span class=\"line\">\t\treturn sales;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setSales(Integer sales) &#123;</span><br><span class=\"line\">\t\tthis.sales = sales;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Integer getStock() &#123;</span><br><span class=\"line\">\t\treturn stock;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setStock(Integer stock) &#123;</span><br><span class=\"line\">\t\tthis.stock = stock;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getImgPath() &#123;</span><br><span class=\"line\">\t\treturn imgPath;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setImgPath(String imgPath) &#123;</span><br><span class=\"line\">\t\tthis.imgPath = imgPath;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;Book [id=&quot; + id + &quot;, title=&quot; + title + &quot;, author=&quot; + author + &quot;, price=&quot; + price + &quot;, sales=&quot; + sales</span><br><span class=\"line\">\t\t\t\t+ &quot;, stock=&quot; + stock + &quot;, imgPath=&quot; + imgPath + &quot;]&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"七、DAO和增删改查通用方法\"><a href=\"#七、DAO和增删改查通用方法\" class=\"headerlink\" title=\"七、DAO和增删改查通用方法\"></a>七、DAO和增删改查通用方法</h1><p>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息<br>作用：为了实现功能的模块化，更有利于代码的维护和升级。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605150226.png\" alt></p>\n<h2 id=\"1、DAO接口\"><a href=\"#1、DAO接口\" class=\"headerlink\" title=\"1、DAO接口\"></a>1、DAO接口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.bean.User;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserDAO &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 根据用户名和密码获取数据库中的记录</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param user</span><br><span class=\"line\">\t * @return User：用户名和密码正确 null：用户名或密码不正确</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic User getUser(User user);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 根据用户名获取数据库中的记录</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param user</span><br><span class=\"line\">\t * @return true：用户名已存在， false：用户名可用</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic boolean checkUserName(User user);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 将用户保存到数据库</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param user</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void saveUser(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.bean.Book;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface BookDAO &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取所有图书的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic List&lt;Book&gt; getBooks();</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 添加图书的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param book</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void addBook(Book book);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 根据图书的id删除图书的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param bookId</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void deleteBookById(String bookId);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 根据图书的id获取图书信息</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param bookId</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic Book getBookById(String bookId);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 更新图书信息的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param book</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void updateBook(Book book);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 批量更新图书的库存和销量</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param params</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void batchUpdateSalesAndStock(Object[][] params);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.bean.Order;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface OrderDAO &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 保存订单的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param order</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void saveOrder(Order order);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取所用订单的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic List&lt;Order&gt; getOrders();</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取我的订单的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param userId</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic List&lt;Order&gt; getMyOrders(int userId);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 更新订单的状态的方法，例如已发货、确认收货等</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param orderId</span><br><span class=\"line\">\t * @param state</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void updateOrderState(String orderId, int state);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.bean.OrderItem;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface OrderItemDAO &#123;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 根据订单号获取对应的订单项</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param orderId</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic List&lt;OrderItem&gt; getOrderItemsByOrderId(String orderId);</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 批量插入订单项的方法</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param params</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void batchInsertOrderItems(Object[][] params);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、BasicDAOImpl\"><a href=\"#2、BasicDAOImpl\" class=\"headerlink\" title=\"2、BasicDAOImpl\"></a>2、BasicDAOImpl</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.sql.Connection;</span><br><span class=\"line\">import java.sql.SQLException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.commons.dbutils.QueryRunner;</span><br><span class=\"line\">import org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class=\"line\">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class=\"line\">import org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.util.JDBCTools;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class BasicDAOImpl &#123;</span><br><span class=\"line\">\tprivate QueryRunner queryRunner = new QueryRunner();</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 通用的增删改操作</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param sql</span><br><span class=\"line\">\t * @param params</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic int update(String sql, Object... params) &#123;</span><br><span class=\"line\">\t\t// 获取连接</span><br><span class=\"line\">\t\tConnection connection = JDBCTools.getConnection();</span><br><span class=\"line\">\t\tint count = 0;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tcount = queryRunner.update(connection, sql, params);</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t//将编译时异常转换为运行时异常向上抛</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取一个对象</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param sql</span><br><span class=\"line\">\t * @param params</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;T&gt; T getBean(Class&lt;T&gt; type,String sql, Object... params) &#123;</span><br><span class=\"line\">\t\t// 获取连接</span><br><span class=\"line\">\t\tConnection connection = JDBCTools.getConnection();</span><br><span class=\"line\">\t\tT t = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tt = queryRunner.query(connection, sql, new BeanHandler&lt;T&gt;(type), params);</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t//将编译时异常转换为运行时异常向上抛</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取所有对象</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param sql</span><br><span class=\"line\">\t * @param params</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic &lt;T&gt; List&lt;T&gt; getBeanList(Class&lt;T&gt; type,String sql, Object... params) &#123;</span><br><span class=\"line\">\t\t// 获取连接</span><br><span class=\"line\">\t\tConnection connection = JDBCTools.getConnection();</span><br><span class=\"line\">\t\tList&lt;T&gt; list = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tlist = queryRunner.query(connection, sql, new BeanListHandler&lt;T&gt;(type), params);</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t//将编译时异常转换为运行时异常向上抛</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(e);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\treturn list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 获取一个单一值的方法，专门用来执行像select count(*)... 这样的sql语句</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param sql</span><br><span class=\"line\">\t * @param params</span><br><span class=\"line\">\t * @return</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic Object getSingleValue(String sql, Object... params) &#123;</span><br><span class=\"line\">\t\t// 获取连接</span><br><span class=\"line\">\t\tConnection connection = JDBCTools.getConnection();</span><br><span class=\"line\">\t\tObject value = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tvalue = queryRunner.query(connection, sql, new ScalarHandler(), params);</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t//将编译时异常转换为运行时异常向上抛</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 进行批处理的方法</span><br><span class=\"line\">\t * 关于二维数组Object[][] params</span><br><span class=\"line\">\t * \t\t二维数组的第一维是sql语句要执行的次数</span><br><span class=\"line\">\t * \t\t二维数组的第二维就是每条sql语句中要填充的占位符</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * @param sql</span><br><span class=\"line\">\t * @param params</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic void batchUpdate(String sql , Object[][] params)&#123;</span><br><span class=\"line\">\t\t//获取连接</span><br><span class=\"line\">\t\tConnection connection = JDBCTools.getConnection();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tqueryRunner.batch(connection ,sql, params);</span><br><span class=\"line\">\t\t&#125; catch (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t//将编译时异常转换为运行时异常向上抛</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、DAO实现类\"><a href=\"#3、DAO实现类\" class=\"headerlink\" title=\"3、DAO实现类\"></a>3、DAO实现类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.dao.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.bean.User;</span><br><span class=\"line\">import com.dao.UserDAO;</span><br><span class=\"line\"></span><br><span class=\"line\">public class UserDAOImpl extends BasicDAOImpl implements UserDAO&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic User getUser(User user) &#123;</span><br><span class=\"line\">\t\t// 写查询数据库的sql语句</span><br><span class=\"line\">\t\tString sql = &quot;select id , username , password , email from users where username = ? and password = ?&quot;;</span><br><span class=\"line\">\t\t// 调用BaseDao中的getBean方法</span><br><span class=\"line\">\t\tUser bean = getBean(User.class, sql, user.getUsername(), user.getPassword());</span><br><span class=\"line\">\t\treturn bean;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean checkUserName(User user) &#123;</span><br><span class=\"line\">\t\t// 写查询数据库的sql语句</span><br><span class=\"line\">\t\tString sql = &quot;select id , username , password , email from users where username = ?&quot;;</span><br><span class=\"line\">\t\t// 调用BaseDao中的getBean方法</span><br><span class=\"line\">\t\tUser bean = getBean(User.class, sql, user.getUsername());</span><br><span class=\"line\">\t\treturn bean!=null;//不为空，说明已存在，返回true，如果bEan是空的，没找到，bean!=null返回false，说明不存在</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void saveUser(User user) &#123;</span><br><span class=\"line\">\t\t//写添加数据到数据库的sql语句</span><br><span class=\"line\">\t\tString sql = &quot;insert into users(username,password,email) values(?,?,?)&quot;;</span><br><span class=\"line\">\t\t//调用BaseDao中通用的增删改的方法</span><br><span class=\"line\">\t\tupdate(sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb基础"],"tags":["Java SQL&JDBC"]},{"title":"2. SQL笔记语法(增删改查)","url":"http://yoursite.com/2017/09/19/18. SQL概述(增删改查)/","content":"<h1 id=\"阶段1：常用指令\"><a href=\"#阶段1：常用指令\" class=\"headerlink\" title=\"阶段1：常用指令\"></a>阶段1：常用指令</h1><ul>\n<li><p>sql(structure query language)：结构化查询语言  </p>\n</li>\n<li><p>作用：和关系型数据库(dbms)交互的一种方式  </p>\n</li>\n</ul>\n<h2 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ddl(data definition language)：数据定义语言；操作数据库对象(库、表、列..)</span><br><span class=\"line\"></span><br><span class=\"line\">dml(data manipulation language)：数据操作语言；操作数据表中的内容</span><br><span class=\"line\">\t\t\t\t 使用的crud操作</span><br><span class=\"line\">\t\t\t\t create：创建</span><br><span class=\"line\">\t\t\t\t read：查阅</span><br><span class=\"line\">\t\t\t\t update：修改</span><br><span class=\"line\">\t\t\t\t delete：删除</span><br><span class=\"line\"></span><br><span class=\"line\">dcl(data control language)：数据控制语言；定义访问权限以及安全级别</span><br><span class=\"line\">\t\t\t    使用其中的两个指令配合事务处理：</span><br><span class=\"line\">\t\t\t\tcommit：提交</span><br><span class=\"line\">\t\t\t\trollback：回滚</span><br><span class=\"line\"></span><br><span class=\"line\">dql(data query language)：数据查询语言；使用select操作的一些语句</span><br></pre></td></tr></table></figure>\n<h2 id=\"sql好处：\"><a href=\"#sql好处：\" class=\"headerlink\" title=\"sql好处：\"></a>sql好处：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.易学，语法简单</span><br><span class=\"line\">2.将类似java实现的一些操作简化</span><br></pre></td></tr></table></figure>\n<p>sql的注释：</p>\n<p>分类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单行注释：</span><br><span class=\"line\"></span><br><span class=\"line\">方式一：-- 注释内容</span><br><span class=\"line\">方式二：#注释内容</span><br><span class=\"line\"></span><br><span class=\"line\">多行注释：/* ... */</span><br><span class=\"line\"></span><br><span class=\"line\">#切换数据库(db)</span><br><span class=\"line\">USE test;</span><br><span class=\"line\"></span><br><span class=\"line\">#显示当前服务器下所有的数据库</span><br><span class=\"line\">SHOW DATABASES;</span><br><span class=\"line\"></span><br><span class=\"line\">#显示当前库下的所有数据表(tables)</span><br><span class=\"line\">SHOW TABLES FROM test;</span><br><span class=\"line\"></span><br><span class=\"line\">#简化写法</span><br><span class=\"line\">SHOW TABLES;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 显示当前服务器的版本信息，用户信息</span><br><span class=\"line\">/*</span><br><span class=\"line\">sql语句中函数的使用：</span><br><span class=\"line\">调用方式：</span><br><span class=\"line\">\t函数名(参数列表)</span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">sql中的函数一定有返回值，和java有区别的</span><br><span class=\"line\">*/</span><br><span class=\"line\">SELECT VERSION(),USER();</span><br></pre></td></tr></table></figure>\n<p>#进阶1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">基础查询</span><br><span class=\"line\"></span><br><span class=\"line\">语法：</span><br><span class=\"line\">select 查询列表 【from 表名】;</span><br><span class=\"line\"></span><br><span class=\"line\">查询列表涉及的内容如下：</span><br><span class=\"line\">\t常量、表达式、函数、字段(单个、多个)以及上述的组合形式</span><br><span class=\"line\">\t</span><br><span class=\"line\">涉及到的函数：</span><br><span class=\"line\">database()、user()、version()、ifnull()、concat()、\t</span><br><span class=\"line\">*/</span><br><span class=\"line\">#切库 --&gt; myemployees</span><br><span class=\"line\">USE myemployees;</span><br><span class=\"line\"></span><br><span class=\"line\">#常量：</span><br><span class=\"line\">SELECT 100;</span><br><span class=\"line\">SELECT &apos;jerry&apos;;</span><br><span class=\"line\"> ，</span><br><span class=\"line\">#表达式：</span><br><span class=\"line\">/*</span><br></pre></td></tr></table></figure>\n<p>sql中的+号运算：只做加法运算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果+号两遍表达式的数据都为数值型，那么直接做加法运算；  </span><br><span class=\"line\">如果+号两遍表达式的数据存在字符型，先尝试将字符型数据隐式转换为数值型数据，  </span><br><span class=\"line\">\t如果转换成功，直接加法运算；  </span><br><span class=\"line\">\t如果转换失败，使用0参与加法运算；</span><br></pre></td></tr></table></figure>\n<p>结论：如果运算过程中有null值参与，结果一定为null                   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/</span><br><span class=\"line\">SELECT 500+299;</span><br><span class=\"line\">SELECT &apos;300&apos;+200;</span><br><span class=\"line\">SELECT &apos;abc&apos;+&apos;def&apos;;</span><br><span class=\"line\">SELECT &apos;abc&apos;+10;</span><br><span class=\"line\">SELECT NULL + 100;</span><br><span class=\"line\"></span><br><span class=\"line\">#取余操作的符号和被余数有关</span><br><span class=\"line\">SELECT 10%(-3);</span><br><span class=\"line\"></span><br><span class=\"line\">#需求：查询员工的年薪</span><br><span class=\"line\">SELECT salary*12 FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#单个字段</span><br><span class=\"line\">SELECT last_name FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">#多个字段</span><br><span class=\"line\">-- 部分字段</span><br><span class=\"line\">-- 需求：查询员工的编号、名字、薪资和部门编号</span><br><span class=\"line\">SELECT employee_id,last_name,salary,department_id</span><br><span class=\"line\">FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- 全部字段</span><br><span class=\"line\">-- 需求：查询员工信息</span><br><span class=\"line\">-- 方式一：</span><br><span class=\"line\">-- 着重号</span><br><span class=\"line\">SELECT </span><br><span class=\"line\">  `employee_id`,</span><br><span class=\"line\">  `first_name`,</span><br><span class=\"line\">  `last_name`,</span><br><span class=\"line\">  `email`,</span><br><span class=\"line\">  `phone_number`,</span><br><span class=\"line\">  `job_id`,</span><br><span class=\"line\">  `salary`,</span><br><span class=\"line\">  `commission_pct`,</span><br><span class=\"line\">  `manager_id`,</span><br><span class=\"line\">  `department_id`,</span><br><span class=\"line\">  `hiredate` </span><br><span class=\"line\">FROM</span><br><span class=\"line\">  employees ;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">-- 方式二：*</span><br><span class=\"line\">SELECT * FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">#函数</span><br><span class=\"line\">SELECT USER(),VERSION(),DATABASE();</span><br><span class=\"line\"></span><br><span class=\"line\">#【综合案例】：涉及存在函数、单个字段、表达式...</span><br><span class=\"line\">SELECT USER(),last_name,12*salary</span><br><span class=\"line\">FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">别名：起一个新的名字</span><br><span class=\"line\">位置：列、表</span><br><span class=\"line\"></span><br><span class=\"line\">语法：</span><br><span class=\"line\">1、AS 别名</span><br><span class=\"line\">2、&apos;&apos;或者&quot;&quot;\t如果存在特殊符号需要使用引号</span><br><span class=\"line\">*/</span><br><span class=\"line\">#【优化综合案例】：使用别名</span><br><span class=\"line\">SELECT USER(),last_name,12*salary AS year_sal</span><br><span class=\"line\">FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT USER(),last_name,12*salary &quot;Year_Sal&quot;</span><br><span class=\"line\">FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT USER(),last_name,12*salary 年薪</span><br><span class=\"line\">FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT USER(),last_name,12*salary &quot;Year Sal&quot;</span><br><span class=\"line\">FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">模拟场景：</span><br><span class=\"line\">错误现象：如何解决？</span><br><span class=\"line\"></span><br><span class=\"line\">ifnull(expr1,expr2)：</span><br><span class=\"line\">\t如果expr1不为null，就拿其本身参与运算</span><br><span class=\"line\">\t如果expr1为null，就使用expr2参与运算</span><br><span class=\"line\">*/</span><br><span class=\"line\">SELECT USER(),last_name,commission_pct,12*salary*(1+IFNULL(commission_pct,0)) &quot;Year Sal&quot;</span><br><span class=\"line\">FROM employees;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">模拟场景：</span><br><span class=\"line\">\tXXX的年薪是XXX</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">concat(...)：拼接\t类似于java中的+号\t</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\">SELECT CONCAT(last_name,&apos;的年薪是&apos;,12*salary*(1+IFNULL(commission_pct,0))) details</span><br><span class=\"line\">FROM employees;</span><br></pre></td></tr></table></figure>\n<h1 id=\"进阶2：条件查询\"><a href=\"#进阶2：条件查询\" class=\"headerlink\" title=\"进阶2：条件查询\"></a>进阶2：条件查询</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">语法：</span><br><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表名</span><br><span class=\"line\">where 条件</span><br><span class=\"line\"></span><br><span class=\"line\">条件：</span><br><span class=\"line\"></span><br><span class=\"line\">关系表达式：</span><br><span class=\"line\">运算符：&gt; &gt;= &lt; &lt;= = != &lt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">逻辑表达式：</span><br><span class=\"line\">运算符：and(与，并且) or(或，或者) not(非，取反)</span><br><span class=\"line\"></span><br><span class=\"line\">其它运算符：</span><br><span class=\"line\">1、模糊查询：like</span><br><span class=\"line\">2、between A and B：在[A,B]之间</span><br><span class=\"line\">3、in(...)：只要满足条件都返回</span><br><span class=\"line\">4、is null：</span><br><span class=\"line\"></span><br><span class=\"line\">总结：</span><br><span class=\"line\">where紧随from</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">#演示关系运算符的使用</span><br><span class=\"line\">-- 案例1：查询工资&gt;10000的员工信息</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE salary &gt; 10000;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 案例2：查询 job_id不是&apos;IT_PROG&apos;的员工姓名、job_id、salary </span><br><span class=\"line\">SELECT last_name,job_id,salary</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE job_id &lt;&gt; &apos;IT_PROG&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT last_name,job_id,salary</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE job_id != &apos;IT_PROG&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT last_name,job_id,salary</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE NOT(job_id = &apos;IT_PROG&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">#演示逻辑运算符的使用</span><br><span class=\"line\">-- 案例3：查询工资&gt;10000并且小于20000的员工姓名、工资、年薪</span><br><span class=\"line\">SELECT last_name,salary,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE salary &gt; 10000 AND salary &lt; 20000;</span><br><span class=\"line\">-- 案例4：查询部门编号不在90到120之间的并且 工资&gt;11000的员工信息</span><br><span class=\"line\">SELECT last_name,department_id,salary FROM employees</span><br><span class=\"line\">WHERE NOT(department_id &gt;= 90 AND department_id &lt;= 120) AND salary &gt; 11000;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">模糊查询的使用：</span><br><span class=\"line\">配合通配符使用：</span><br><span class=\"line\">_：匹配任意单个字符</span><br><span class=\"line\">%：匹配0或者任意多个字符</span><br><span class=\"line\">*/</span><br><span class=\"line\">#案例1：查询员工信息表中姓名第一个字符为e的员工信息</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE last_name LIKE &apos;e%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">#案例2：查询员工信息表中姓名第二个字符为e，第五个字符为a的员工信息</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE last_name LIKE &apos;_e__a%&apos;;</span><br><span class=\"line\">#案例3：查询姓名中最后第二个字符为s的员工信息</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE last_name LIKE &apos;%s_&apos;;</span><br><span class=\"line\">#案例4：查询姓名中第二个字符为_的员工信息</span><br><span class=\"line\">#方式一：使用\\实现转义</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE last_name LIKE &apos;_\\_%&apos;;</span><br><span class=\"line\">#方式二：使用escape关键字实现</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE last_name LIKE &apos;_#_%&apos; ESCAPE &apos;#&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">between...and...的使用：</span><br><span class=\"line\">作用：判断是否在某一个区间范围内(含头含尾闭区间)\t返回布尔值</span><br><span class=\"line\">将 and操作简化</span><br><span class=\"line\">*/</span><br><span class=\"line\">#查询年薪在100000到200000的员工年薪和姓名</span><br><span class=\"line\">SELECT last_name,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE salary*12*(1+IFNULL(commission_pct,0)) BETWEEN 100000 AND 200000;</span><br><span class=\"line\">#案例2：查询年薪在100740到187200的员工年薪和姓名</span><br><span class=\"line\">SELECT last_name,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE salary*12*(1+IFNULL(commission_pct,0)) BETWEEN 100740 AND 187200;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT salary FROM employees</span><br><span class=\"line\">WHERE salary &gt;= 8000 AND salary &lt;= 14000;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT salary FROM employees</span><br><span class=\"line\">WHERE salary BETWEEN 8000 AND 14000;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">in(...)的使用：</span><br><span class=\"line\"></span><br><span class=\"line\">特点：</span><br><span class=\"line\">可以简化or的使用，</span><br><span class=\"line\">记住：</span><br><span class=\"line\">1、如果内容不匹配页不会报错，只是不返回任何内容</span><br><span class=\"line\">2、会自动将字符类型转换为数值型(如果需要)</span><br><span class=\"line\">*/</span><br><span class=\"line\">-- 案例1：查询在80、90、100号部门工作的员工信息</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE department_id = 80 OR department_id = 90 OR department_id = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE department_id IN(80,90,100);</span><br><span class=\"line\">-- where department_id in(80,90,&apos;100&apos;,null);</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM departments;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 案例2：查询工种编号是IT_PROG或是ST_CLERK或是AD_VP的员工信息</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE job_id IN(&apos;IT_PROG&apos;,&apos;ST_CLERK&apos;,&apos;AD_VP&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">not的使用：</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\">#案例1：查询哪些员工没有奖金</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE commission_pct IS NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">#案例2：查询哪些员工有奖金</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE commission_pct IS NOT NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE NOT commission_pct IS NULL;</span><br></pre></td></tr></table></figure>\n<h1 id=\"进阶3：\"><a href=\"#进阶3：\" class=\"headerlink\" title=\"进阶3：\"></a>进阶3：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">排序查询：</span><br><span class=\"line\"></span><br><span class=\"line\">语法：</span><br><span class=\"line\">select 查询列表 --②</span><br><span class=\"line\">from 表名\t--①</span><br><span class=\"line\">where 条件\t--③</span><br><span class=\"line\">order by 排序列表 asc|desc --④</span><br><span class=\"line\"></span><br><span class=\"line\">排序列表：</span><br><span class=\"line\">单个字段、多个字段、函数、别名、表达式</span><br><span class=\"line\"></span><br><span class=\"line\">注意：</span><br><span class=\"line\">1、asc可以省略，默认升序排列</span><br><span class=\"line\">`666`</span><br><span class=\"line\">总结：</span><br><span class=\"line\">order by子句出现在最后位置，除了limit...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\">#单个字段：</span><br><span class=\"line\">-- 案例1：按工资从低到高排序</span><br><span class=\"line\">SELECT last_name,salary</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">ORDER BY salary ASC;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT last_name,salary</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">ORDER BY salary;</span><br><span class=\"line\">-- 案例2：按工资从高到低排序</span><br><span class=\"line\">SELECT last_name,salary</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">ORDER BY salary DESC;</span><br><span class=\"line\"></span><br><span class=\"line\">#多个字段：</span><br><span class=\"line\">-- 案例：部门编号&gt;50的按工资从高到低排序，如果一样，再按frist_name升序</span><br><span class=\"line\">SELECT * FROM employees</span><br><span class=\"line\">WHERE department_id &gt; 50</span><br><span class=\"line\">ORDER BY salary DESC,first_name ASC;</span><br><span class=\"line\"></span><br><span class=\"line\">#按表达式排序</span><br><span class=\"line\">-- 案例：将姓名中包含e字符的年薪和姓名显示出来，并且按年薪进行降序</span><br><span class=\"line\">SELECT last_name,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE last_name LIKE &apos;%e%&apos;</span><br><span class=\"line\">ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;</span><br><span class=\"line\"></span><br><span class=\"line\">#按别名排序</span><br><span class=\"line\">-- 案例：将姓名中包含e字符的年薪和姓名显示出来，并且按年薪进行降序</span><br><span class=\"line\">SELECT last_name,salary*12*(1+IFNULL(commission_pct,0)) 年薪</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE last_name LIKE &apos;%e%&apos;</span><br><span class=\"line\">ORDER BY 年薪 DESC;</span><br><span class=\"line\"></span><br><span class=\"line\">#按函数排序</span><br><span class=\"line\">-- 案例：显示所有有奖金的员工姓名、奖金、姓名的长度，按姓名的长度从低到高排序</span><br><span class=\"line\">-- length()函数的使用</span><br><span class=\"line\">SELECT last_Name,commission_pct,LENGTH(last_name) 长度</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE commission_pct IS NOT NULL</span><br><span class=\"line\">ORDER BY LENGTH(last_name);</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT last_Name,commission_pct,LENGTH(last_name) 长度</span><br><span class=\"line\">FROM employees</span><br><span class=\"line\">WHERE commission_pct IS NOT NULL</span><br><span class=\"line\">ORDER BY 长度;</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb基础"],"tags":["Java SQL&JDBC"]},{"title":"1. MYSQL数据库5.5安装(win7)及使用","url":"http://yoursite.com/2017/09/14/17. MYSQL数据库5.5安装(win7)及使用17.9.4/","content":"<p>MySql数据库</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>随便打开一个Web网站，比如淘宝：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604232623.png\" alt></p>\n<p>为什么学习MySQL数据库？</p>\n<p> <img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604232703.png\" alt></p>\n<ul>\n<li><p>MySQL广占IT市场，比如淘宝、网易、百度、新浪、facebook等大部分互联网公司，都在使用mysql软件，而且在网络游戏领域，大部分的后台数据库都在使用mysql，如劲舞团、魔兽世界，还有更厉害的，中国电网、中国移动中很多项目也在使用我们的mysql。</p>\n</li>\n<li><p>如果我们把mysql学好学精了，还愁没工作吗？我们甚至可以去任何IT行业公司，这不像小众 的产品，你哪怕学透了，也不一定有多少人要你。</p>\n</li>\n</ul>\n<h1 id=\"第1章-数据库概述\"><a href=\"#第1章-数据库概述\" class=\"headerlink\" title=\"第1章 数据库概述\"></a>第1章 数据库概述</h1><h2 id=\"1-1-什么是数据库\"><a href=\"#1-1-什么是数据库\" class=\"headerlink\" title=\"1.1 什么是数据库\"></a>1.1 什么是数据库</h2><ul>\n<li>数据库是持久化数据的一种介质，可以理解成用来存储和管理数据的仓库！</li>\n<li>持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。持久化的大多数时候是将内存中的数据存储在数据库中，当然也可以存储在磁盘文件、XML数据文件中。</li>\n</ul>\n<h2 id=\"1-2为什么要用数据库\"><a href=\"#1-2为什么要用数据库\" class=\"headerlink\" title=\"1.2为什么要用数据库\"></a>1.2为什么要用数据库</h2><ul>\n<li>保存数据 的容器：数组、集合、文件  </li>\n<li>保存到文件：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604232913.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605093234.png\" alt></p>\n<ul>\n<li>可将数据持久化到硬盘</li>\n<li>可存储大量数据</li>\n<li>方便检索</li>\n<li>保证数据的一致性、完整性</li>\n<li>安全，可共享</li>\n<li>通过组合分析，可以产生新数据</li>\n</ul>\n<h2 id=\"1-3常见数据库产品\"><a href=\"#1-3常见数据库产品\" class=\"headerlink\" title=\"1.3常见数据库产品\"></a>1.3常见数据库产品</h2><ul>\n<li>Oracle：甲骨文</li>\n<li>DB2：IBM；</li>\n<li>SQL Server：微软；</li>\n<li>MySQL：甲骨文；</li>\n</ul>\n<h2 id=\"1-4数据库相关概念\"><a href=\"#1-4数据库相关概念\" class=\"headerlink\" title=\"1.4数据库相关概念\"></a>1.4数据库相关概念</h2><ul>\n<li><p>DB<br>数据库（ database ）：存储数据的“仓库”。它保存了一系列有组织的数据。</p>\n</li>\n<li><p>DBMS<br>数据库管理系统（ Database Management System ）。数据库是通过 DBMS 创<br>建和操作的容器</p>\n</li>\n<li><p>SQL<br>结构化查询语言（ Structure Query Language ）：专门用来与数据库通信的语<br>言。  </p>\n</li>\n</ul>\n<p>三者的关系：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605093502.png\" alt></p>\n<h2 id=\"1-5数据库存储数据的特点\"><a href=\"#1-5数据库存储数据的特点\" class=\"headerlink\" title=\"1.5数据库存储数据的特点\"></a>1.5数据库存储数据的特点</h2><p>1、将数据放到表中，表再放到库中<br>2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。<br>表名具有唯一性。<br>3、表具有一些特性，这些特性定义了数据在表中如何存储，<br>类似java中 “类”的设计。<br>4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，<br>每一列类似java 中的”属性”<br>5、表中的数据是按行存储的，每一行类似于java中的“对象”。  </p>\n<h1 id=\"第2章-MySQL数据库的介绍\"><a href=\"#第2章-MySQL数据库的介绍\" class=\"headerlink\" title=\"第2章 MySQL数据库的介绍\"></a>第2章 MySQL数据库的介绍</h1><h2 id=\"2-1-MySQL产品的介绍\"><a href=\"#2-1-MySQL产品的介绍\" class=\"headerlink\" title=\"2.1 MySQL产品的介绍\"></a>2.1 MySQL产品的介绍</h2><blockquote>\n<p>MySQL是一种开放源代码的关系型数据库管理系统，开发者为瑞典MySQL AB公司。在2008年1月16号被Sun公司收购。而2009年,SUN又被Oracle收购.目前 MySQL被广泛地应用在Internet上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库（Facebook, Twitter, YouTube）。</p>\n</blockquote>\n<h2 id=\"2-2-MySQL产品的优点\"><a href=\"#2-2-MySQL产品的优点\" class=\"headerlink\" title=\"2.2 MySQL产品的优点\"></a>2.2 MySQL产品的优点</h2><ul>\n<li>成本低：开放源代码，一般可以免费试用 </li>\n<li>性能高：执行很快 </li>\n<li>简单：很容易安装和使用 </li>\n</ul>\n<h2 id=\"2-2-MySQL服务端的安装和卸载\"><a href=\"#2-2-MySQL服务端的安装和卸载\" class=\"headerlink\" title=\"2.2 MySQL服务端的安装和卸载\"></a>2.2 MySQL服务端的安装和卸载</h2><p>DBMS分为两类： </p>\n<ul>\n<li>基于共享文件系统的DBMS （Access ） </li>\n<li>基于客户机——服务器的DBMS<br>（MySQL、Oracle、SqlServer） </li>\n</ul>\n<p>注：查看数据库的安装和卸载文档</p>\n<h3 id=\"1、win7MYSQL卸载\"><a href=\"#1、win7MYSQL卸载\" class=\"headerlink\" title=\"1、win7MYSQL卸载\"></a>1、win7MYSQL卸载</h3><h4 id=\"1）软件的卸载\"><a href=\"#1）软件的卸载\" class=\"headerlink\" title=\"1）软件的卸载\"></a>1）软件的卸载</h4><p>方式一：通过控制面板  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605093953.png\" alt></p>\n<p>方式二：通过电脑管家等软件卸载  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094036.png\" alt></p>\n<p>方式三：通过安装包中提供的卸载功能卸载  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094122.png\" alt></p>\n<h4 id=\"2）清理残余文件\"><a href=\"#2）清理残余文件\" class=\"headerlink\" title=\"2）清理残余文件\"></a>2）清理残余文件</h4><p>如果再次安装不成功，可以卸载后对残余文件进行清理后再安装<br>a）清除安装残余文件  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094245.png\" alt></p>\n<p>b）清除数据残余文件<br>请在卸载前做好数据备份  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094317.png\" alt></p>\n<p>c）清理注册表</p>\n<p>如果前两步做了，再次安装还是失败，那么可以清理注册表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Eventlog\\Application\\MySQL服务 目录删除</span><br><span class=\"line\">2：HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\MySQL服务 目录删除</span><br><span class=\"line\">3：HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\Services\\Eventlog\\Application\\MySQL服务 目录删除</span><br><span class=\"line\">4：HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\Services\\MySQL服务 目录删除</span><br><span class=\"line\">5：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application\\MySQL服务目录删除</span><br><span class=\"line\">6：HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\MySQL服务删除</span><br></pre></td></tr></table></figure></p>\n<p>注册表中的ControlSet001,ControlSet002,不一定是001和002,可能是ControlSet005、006之类</p>\n<h3 id=\"2、win7-MYSQL5-5-安装\"><a href=\"#2、win7-MYSQL5-5-安装\" class=\"headerlink\" title=\"2、win7 MYSQL5.5 安装\"></a>2、win7 MYSQL5.5 安装</h3><h4 id=\"（1）准备安装\"><a href=\"#（1）准备安装\" class=\"headerlink\" title=\"（1）准备安装\"></a>（1）准备安装</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094526.png\" alt></p>\n<h4 id=\"（2）欢迎安装\"><a href=\"#（2）欢迎安装\" class=\"headerlink\" title=\"（2）欢迎安装\"></a>（2）欢迎安装</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094623.png\" alt></p>\n<h4 id=\"（3）准许协议\"><a href=\"#（3）准许协议\" class=\"headerlink\" title=\"（3）准许协议\"></a>（3）准许协议</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094646.png\" alt></p>\n<h4 id=\"（4）选择安装模式\"><a href=\"#（4）选择安装模式\" class=\"headerlink\" title=\"（4）选择安装模式\"></a>（4）选择安装模式</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094719.png\" alt></p>\n<ul>\n<li>Typical：表示一般常用的组件都会被安装，默认情况下安装到”C:\\Program Files\\MySQL\\MySQL Server 5.5\\”下。</li>\n<li>Complete：表示会安装所有的组件。此套件会占用比较大的磁盘空间。</li>\n<li>Custom：表示用户可以选择要安装的组件，可以更改默认按照的路径。这种按照类型最灵活，适用于高级用户。</li>\n</ul>\n<h4 id=\"（5）选择安装组件及安装路径\"><a href=\"#（5）选择安装组件及安装路径\" class=\"headerlink\" title=\"（5）选择安装组件及安装路径\"></a>（5）选择安装组件及安装路径</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605094830.png\" alt></p>\n<p>这里可以选择安装哪些部分，主要是这里可以设置两个路径：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySQL Server的应用软件的安装路径，默认在</span><br><span class=\"line\">    “C:\\Program Files\\MySQL\\MySQL Server 5.5\\”</span><br><span class=\"line\">Server data files的数据存储的目录路径，默认在</span><br><span class=\"line\">    “C:\\ProgramData\\MySQL\\MySQL Server 5.5\\”</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095026.png\" alt></p>\n<h4 id=\"（6）开始安装\"><a href=\"#（6）开始安装\" class=\"headerlink\" title=\"（6）开始安装\"></a>（6）开始安装</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095109.png\" alt></p>\n<p>安装进度</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095142.png\" alt></p>\n<p>系统会显示MySQL Enterprise版（企业版）的一些功能介绍界面，可以单击“Next”继续。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095217.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095310.png\" alt></p>\n<h4 id=\"（7）安装完成\"><a href=\"#（7）安装完成\" class=\"headerlink\" title=\"（7）安装完成\"></a>（7）安装完成</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095331.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单击“Finish”按钮完成安装过程。</span><br><span class=\"line\">如果想马上配置数据库连接，</span><br><span class=\"line\">选择“Launch the MySQL Instance Configuration Wizard”复选框。</span><br><span class=\"line\">如果现在没有配置，以后想要配置或重新配置都可以在“MySQL Server”的安装目录的bin目录下</span><br><span class=\"line\">（例如：D:\\ProgramFiles\\MySQL5.5\\MySQL Server</span><br><span class=\"line\"> 5.5\\bin）找到“MySQLInstanceConfig.exe”打开“MySQL Instance Configuration Wizard”向导。</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、MySQL的配置\"><a href=\"#3、MySQL的配置\" class=\"headerlink\" title=\"3、MySQL的配置\"></a>3、MySQL的配置</h3><h4 id=\"（1）准备开始\"><a href=\"#（1）准备开始\" class=\"headerlink\" title=\"（1）准备开始\"></a>（1）准备开始</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095522.png\" alt></p>\n<h4 id=\"（2）选择配置类型\"><a href=\"#（2）选择配置类型\" class=\"headerlink\" title=\"（2）选择配置类型\"></a>（2）选择配置类型</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095606.png\" alt></p>\n<p>选择配置方式，“Detailed Configuration（手动精确配置）”、“Standard Configuration（标准配置）”，我们选择“Detailed Configuration”，方便熟悉配置过程。  </p>\n<h4 id=\"（3）选择MySQL的应用模式\"><a href=\"#（3）选择MySQL的应用模式\" class=\"headerlink\" title=\"（3）选择MySQL的应用模式\"></a>（3）选择MySQL的应用模式</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095652.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Develop Machine（开发机），使用最小数量的内存</span><br><span class=\"line\">Server Machine（服务器），使用中等大小的内存</span><br><span class=\"line\">Dedicated MySQL Server Machine（专用服务器），使用当前可用的最大内存。</span><br></pre></td></tr></table></figure>\n<h4 id=\"（4）选择数据库用途选择界面\"><a href=\"#（4）选择数据库用途选择界面\" class=\"headerlink\" title=\"（4）选择数据库用途选择界面\"></a>（4）选择数据库用途选择界面</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095746.png\" alt></p>\n<p>选择mysql数据库的大致用途：</p>\n<ul>\n<li>“Multifunctional Database（通用多功能型，好）”：此选项对事务性存储引擎（InnoDB）和非事务性（MyISAM）存储引擎的存取速度都很快。</li>\n<li>“Transactional Database Only（服务器类型，专注于事务处理，一般）”：此选项主要优化了事务性存储引擎（InnoDB），但是非事务性（MyISAM）存储引擎也能用。</li>\n<li>“Non-Transactional Database Only（非事务处理型，较简单）主要做一些监控、记数用，对MyISAM数据类型的支持仅限于non-transactional，注意事务性存储引擎（InnoDB）不能用。</li>\n</ul>\n<h4 id=\"（5）配置InnoDB数据文件目录\"><a href=\"#（5）配置InnoDB数据文件目录\" class=\"headerlink\" title=\"（5）配置InnoDB数据文件目录\"></a>（5）配置InnoDB数据文件目录</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095842.png\" alt></p>\n<p>InnoDB的数据文件会在数据库第一次启动的时候创建，默认会创建在MySQL的安装目录下。用户可以根据实际的空间状况进行路径的选择。  </p>\n<h4 id=\"（6）并发连接设置\"><a href=\"#（6）并发连接设置\" class=\"headerlink\" title=\"（6）并发连接设置\"></a>（6）并发连接设置</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605095951.png\" alt></p>\n<p>选择您的网站的一般mysql 访问量，同时连接的数目，“Decision Support(DSS)/OLAP（决策支持系统，20个左右）”、“Online Transaction Processing(OLTP)（在线事务系统，500个左右）”、“Manual Setting（手动设置，自己输一个数）”  </p>\n<h4 id=\"（7）网络选项设置\"><a href=\"#（7）网络选项设置\" class=\"headerlink\" title=\"（7）网络选项设置\"></a>（7）网络选项设置</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605100049.png\" alt></p>\n<ul>\n<li>是否启用TCP/IP连接，设定端口，如果不启用，就只能在自己的机器上访问mysql 数据库了，我这里启用，把前面的勾打上，Port Number：3306，还有一个关于防火墙的设置“Add firewall exception ……”需要选中，将MYSQL服务的监听端口加为windows防火墙例外，避免防火墙阻断。</li>\n<li>在这个页面上，您还可以选择“启用标准模式”（Enable Strict Mode），这样MySQL就不会允许细小的语法错误。尽量使用标准模式，因为它可以降低有害数据进入数据库的可能性。  </li>\n</ul>\n<h4 id=\"（8）选择字符集\"><a href=\"#（8）选择字符集\" class=\"headerlink\" title=\"（8）选择字符集\"></a>（8）选择字符集</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605100129.png\" alt></p>\n<ul>\n<li>注意：<ul>\n<li>如果要用原来数据库的数据，最好能确定原来数据库用的是什么编码，如果这里设置的编码和原来数据库数据的编码不一致，在使用的时候可能会出现乱码。</li>\n<li>这个比较重要，就是对mysql默认数据库语言编码进行设置，第一个是西文编码，第二个是多字节的通用utf8编码，第三个，手工选择字符集。</li>\n</ul>\n</li>\n<li>提示：<ul>\n<li>如果安装时选择了字符集和“utf8”，通过命令行客户端来操作数据库时，有时候会出现乱码，</li>\n<li>这是因为“命令行客户端”默认是GBK字符集，因此客户端与服务器端就出现了不一致的情况，会出现乱码。</li>\n<li>可以在客户端执行：<br><code>mysql&gt; set names gbk;</code>  </li>\n<li>可以通过以下命令查看：<br><code>mysql&gt; show variables like &#39;character_set_%&#39;;</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605100326.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605100345.png\" alt></p>\n<p>对于客户端和服务器的交互操作，MySQL提供了3个不同的参数：<br>character_set_client、character_set_connection、character_set_results，<br>分别代表客户端、连接和返回结果的字符集。<br>通常情况下，这3个字符集应该是相同的，才能确保用户写入的数据可以正确的读出和写入。<br>“set names xxx;”命令可以同时修改这3个参数的值，但是需要每次连接都重新设置。  </p>\n<h4 id=\"（9）安全选择\"><a href=\"#（9）安全选择\" class=\"headerlink\" title=\"（9）安全选择\"></a>（9）安全选择</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605100519.png\" alt></p>\n<p>选择是否将mysql 安装为windows服务，还可以指定Service Name（服务标识名称，例如我这里取名为“MySQL5.5”），是否将mysql的bin目录加入到Windows PATH环境变量中（加入后，就可以直接使用bin下的命令）”，我这里全部打上了勾。</p>\n<h4 id=\"（10）设置密码\"><a href=\"#（10）设置密码\" class=\"headerlink\" title=\"（10）设置密码\"></a>（10）设置密码</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605101625.png\" alt></p>\n<ul>\n<li><p>这一步询问是否要修改默认root 用户（超级管理）的密码（默认为空），“New root password”如果要修改，就在此填入新密码，“Confirm（再输一遍）”内再填一次，防止输错。（如果是重装，并且之前已经设置了密码，在这里更改密码可能会出错，请留空，并将“Modify Security Settings”前面的勾去掉，安装配置完成后另行修改密码）</p>\n</li>\n<li><p>“Enable root access from remotemachines（是否允许root 用户在其它的机器或使用IP地址登陆，如果要安全，就不要勾上，如果要方便，就勾上它）”。如果没有勾选，默认只支持localhost和127.0.0.1连接。</p>\n</li>\n<li><p>最后“Create An Anonymous Account（新建一个匿名用户，匿名用户可以连接数据库，不能操作数据，包括查询，如果要有操作数据的权限需要单独分配）”，一般就不用勾了</p>\n<h4 id=\"（11）准备执行界面\"><a href=\"#（11）准备执行界面\" class=\"headerlink\" title=\"（11）准备执行界面\"></a>（11）准备执行界面</h4></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605101704.png\" alt></p>\n<h4 id=\"（12）完成\"><a href=\"#（12）完成\" class=\"headerlink\" title=\"（12）完成\"></a>（12）完成</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605101733.png\" alt></p>\n<h2 id=\"2-3-MySQL的安装目录\"><a href=\"#2-3-MySQL的安装目录\" class=\"headerlink\" title=\"2.3 MySQL的安装目录\"></a>2.3 MySQL的安装目录</h2><ul>\n<li>bin目录中都是可执行文件；</li>\n<li>my.ini文件是MySQL的配置文件；</li>\n<li>MySQL的数据存储目录为data</li>\n<li>data目录通常在C:\\Documents and Settings\\All Users\\Application Data\\MySQL\\MySQL Server 5.1\\data位置。</li>\n<li>在data下的每个目录都代表一个数据库。</li>\n</ul>\n<h2 id=\"2-4-MySQL环境变量的配置\"><a href=\"#2-4-MySQL环境变量的配置\" class=\"headerlink\" title=\"2.4 MySQL环境变量的配置\"></a>2.4 MySQL环境变量的配置</h2><p>将C:\\Program Files (x86)\\MySQL\\MySQL Server 5.5\\bin;添加到path中</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605101847.png\" alt></p>\n<h1 id=\"第3章-MySQL的使用\"><a href=\"#第3章-MySQL的使用\" class=\"headerlink\" title=\"第3章 MySQL的使用\"></a>第3章 MySQL的使用</h1><h2 id=\"1、启动和停止服务\"><a href=\"#1、启动和停止服务\" class=\"headerlink\" title=\"1、启动和停止服务\"></a>1、启动和停止服务</h2><p>MySQL软件的服务器端必须先启动，客户端才可以连接和使用使用数据库。</p>\n<h3 id=\"启动服务的方式：\"><a href=\"#启动服务的方式：\" class=\"headerlink\" title=\"启动服务的方式：\"></a>启动服务的方式：</h3><ul>\n<li>方式一：图形化方式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“我的电脑/计算机”--&gt;右键--&gt;“管理”--&gt;“服务”--&gt;启动和关闭MySQL</span><br><span class=\"line\">“开始菜单”--&gt;“控制面板”--&gt;“管理工具”--&gt;“服务”--&gt;启动和关闭MySQL</span><br><span class=\"line\">“任务管理器”--&gt;“服务”--&gt;启动和关闭MySQL</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605102748.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605102802.png\" alt></p>\n<ul>\n<li>方式二：命令行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net  start  MySQL服务名</span><br><span class=\"line\">net  stop  MySQL服务名</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、客户端登录\"><a href=\"#2、客户端登录\" class=\"headerlink\" title=\"2、客户端登录\"></a>2、客户端登录</h2><h3 id=\"方式一：MySQL自带客户端\"><a href=\"#方式一：MySQL自带客户端\" class=\"headerlink\" title=\"方式一：MySQL自带客户端\"></a>方式一：MySQL自带客户端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“开始菜单”--&gt;MySQL--&gt;MySQL Server 5.5 --&gt; MySQL 5.5 Command Line Client</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605102904.png\" alt></p>\n<p>仅限于root用户</p>\n<h3 id=\"方式二：命令行\"><a href=\"#方式二：命令行\" class=\"headerlink\" title=\"方式二：命令行\"></a>方式二：命令行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 主机名 -P 端口号 -u 用户名 -p密码</span><br><span class=\"line\">例如：mysql -h localhost -P 3306 -u root -proot</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）-p与密码之间不能有空格，其他参数名与参数值之间可以有空格也可以没有空格</span><br><span class=\"line\">\t\tmysql -hlocalhost -P3306 -uroot -proot</span><br><span class=\"line\">（2）密码建议在一行输入</span><br><span class=\"line\">\t\tmysql -h localhost -P 3306 -u root -p</span><br><span class=\"line\">\t\tEnter password:****</span><br><span class=\"line\">（3）如果是连本机：-hlocalhost就可以省略，如果端口号没有修改：-P3306也可以省略</span><br><span class=\"line\">\t\t简写成：mysql -u root -p</span><br><span class=\"line\">\t\t\t    Enter password:****</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103022.png\" alt></p>\n<p>连接成功后，有关于MySQL Server服务版本的信息，还有第几次连接的id标识。<br>也可以在命令行通过以下方式获取MySQL Server服务版本的信息</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103054.png\" alt></p>\n<p>或登录后，通过以下方式查看当前版本信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103116.png\" alt></p>\n<h3 id=\"方式三：可视化工具\"><a href=\"#方式三：可视化工具\" class=\"headerlink\" title=\"方式三：可视化工具\"></a>方式三：可视化工具</h3><p>例如：Navicat Preminum，SQLyogEnt等工具<br>还有其他工具：mysqlfront,phpMyAdmin</p>\n<h4 id=\"（1）Navicat-Preminum\"><a href=\"#（1）Navicat-Preminum\" class=\"headerlink\" title=\"（1）Navicat Preminum\"></a>（1）Navicat Preminum</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103151.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103232.png\" alt></p>\n<h4 id=\"（2）SQLyog-江湖人称小海豚\"><a href=\"#（2）SQLyog-江湖人称小海豚\" class=\"headerlink\" title=\"（2）SQLyog(江湖人称小海豚)\"></a>（2）SQLyog(江湖人称小海豚)</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103343.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103416.png\" alt></p>\n<h2 id=\"3、MySQL的基本命令\"><a href=\"#3、MySQL的基本命令\" class=\"headerlink\" title=\"3、MySQL的基本命令\"></a>3、MySQL的基本命令</h2><h3 id=\"启动和关闭mysql服务\"><a href=\"#启动和关闭mysql服务\" class=\"headerlink\" title=\"启动和关闭mysql服务\"></a>启动和关闭mysql服务</h3><p>方式一：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：net start mysql；  </span><br><span class=\"line\">关闭：net stop mysql；</span><br></pre></td></tr></table></figure>\n<p>方式二：<br><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103526.png\" alt></p>\n<p>在启动mysql服务后，打开windows任务管理器，会有一个名为mysqld.exe的进程运行，所以mysqld.exe才是MySQL服务器程序。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103603.png\" alt></p>\n<p>客户端登录退出mysql<br>在启动MySQL服务器后，我们需要使用管理员用户登录MySQL服务器，然后来对服务器进行操作。登录MySQL需要使用MySQL的客户端程序：mysql.exe  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录：mysql -u root -p root -h localhost；</span><br><span class=\"line\">\t-u：后面的root是用户名，这里使用的是超级管理员root；</span><br><span class=\"line\">\t-p：后面的root是密码，这是在安装MySQL时就已经指定的密码；</span><br><span class=\"line\">\t-h：后面给出的localhost是服务器主机名，它是可以省略的，例如：mysql -u root -p root；</span><br><span class=\"line\">退出：quit或exit；</span><br></pre></td></tr></table></figure>\n<p>在登录成功后，打开windows任务管理器，会有一个名为mysql.exe的进程运行，所以mysql.exe是客户端程序。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605103707.png\" alt></p>\n<h1 id=\"第4章-SQL语句\"><a href=\"#第4章-SQL语句\" class=\"headerlink\" title=\"第4章 SQL语句\"></a>第4章 SQL语句</h1><h2 id=\"4-1-SQL概述\"><a href=\"#4-1-SQL概述\" class=\"headerlink\" title=\"4.1 SQL概述\"></a>4.1 SQL概述</h2><h3 id=\"1-什么是SQL\"><a href=\"#1-什么是SQL\" class=\"headerlink\" title=\"1. 什么是SQL\"></a>1. 什么是SQL</h3><p>SQL（Structured Query Language）是“结构化查询语言”，它是对关系型数据库的操作语言。它可以应用到所有关系型数据库中，例如：MySQL、Oracle、SQL Server等。SQL标准有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1986年，ANSI X3.135-1986，ISO/IEC 9075:1986，SQL-86</span><br><span class=\"line\">1989年，ANSI X3.135-1989，ISO/IEC 9075:1989，SQL-89</span><br><span class=\"line\">1992年，ANSI X3.135-1992，ISO/IEC 9075:1992，SQL-92（SQL2）</span><br><span class=\"line\">1999年，ISO/IEC 9075:1999，SQL:1999（SQL3）</span><br><span class=\"line\">2003年，ISO/IEC 9075:2003，SQL:2003</span><br><span class=\"line\">2008年，ISO/IEC 9075:2008，SQL:2008</span><br><span class=\"line\">2011年，ISO/IEC 9075:2011，SQL:2011</span><br><span class=\"line\">2016年，ISO/IEC 9075:2016，SQL:2016</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这些标准就与JDK的版本一样，在新的版本中总要有一些语法的变化。不同时期的数据库对不同标准做了实现。</li>\n<li>虽然SQL可以用在所有关系型数据库中，但很多数据库还都有标准之后的一些语法，我们可以称之为“方言”。例如MySQL中的LIMIT语句就是MySQL独有的方言，其它数据库都不支持！当然，Oracle或SQL Server都有自己的方言。</li>\n</ul>\n<h3 id=\"2-SQL语法要求\"><a href=\"#2-SQL语法要求\" class=\"headerlink\" title=\"2. SQL语法要求\"></a>2. SQL语法要求</h3><ul>\n<li>不区分大小写，建议关键字大写，表名和列名小写</li>\n<li>每句命令的结尾使用分号</li>\n<li>每句命令，根据需要可以换行，但关键字或表名、列名不可以拆开</li>\n<li>可以用空格和缩进来来增强语句的可读性；</li>\n</ul>\n<h3 id=\"3-注释\"><a href=\"#3-注释\" class=\"headerlink\" title=\"3. 注释\"></a>3. 注释</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单行注释：-- 注释文字</span><br><span class=\"line\">单行注释：#注释文字</span><br><span class=\"line\">多行注释：/*注释文字*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-分类\"><a href=\"#4-2-分类\" class=\"headerlink\" title=\"4.2 分类\"></a>4.2 分类</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DDL（Data Definition Language）：</span><br><span class=\"line\">    数据定义语言，用来定义数据库对象：库、表、列等；</span><br><span class=\"line\">DML（Data Manipulation Language）：</span><br><span class=\"line\">    数据操作语言，用来定义数据库记录（数据）；</span><br><span class=\"line\">DCL（Data Control Language）：</span><br><span class=\"line\">    数据控制语言，用来定义访问权限和安全级别；</span><br><span class=\"line\">DQL（Data Query Language）：</span><br><span class=\"line\">    数据查询语言，用来查询记录（数据）。</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-DDL\"><a href=\"#4-3-DDL\" class=\"headerlink\" title=\"4.3 DDL\"></a>4.3 DDL</h2><h3 id=\"1-基本操作\"><a href=\"#1-基本操作\" class=\"headerlink\" title=\"1.基本操作\"></a>1.基本操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看所有数据库名称：SHOW DATABASES；　</span><br><span class=\"line\">切换数据库：USE mydb1，切换到mydb1数据库；</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-操作数据库\"><a href=\"#2-操作数据库\" class=\"headerlink\" title=\"2.操作数据库\"></a>2.操作数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建数据库：CREATE DATABASE [IF NOT EXISTS] mydb1；</span><br></pre></td></tr></table></figure>\n<p>创建数据库，例如：CREATE DATABASE mydb1，创建一个名为mydb1的数据库。如果这个数据已经存在，那么会报错。例如CREATE DATABASE IF NOT EXISTS mydb1，在名为mydb1的数据库不存在时创建该库，这样可以避免报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除数据库：DROP DATABASE [IF EXISTS] mydb1；</span><br></pre></td></tr></table></figure>\n<p>删除数据库，例如：DROP DATABASE mydb1，删除名为mydb1的数据库。如果这个数据库不存在，那么会报错。DROP DATABASE IF EXISTS mydb1，就算mydb1不存在，也不会的报错。</p>\n<h3 id=\"3-数据类型\"><a href=\"#3-数据类型\" class=\"headerlink\" title=\"3.数据类型\"></a>3.数据类型</h3><p>MySQL与Java一样，也有数据类型。MySQL中数据类型主要应用在列上。</p>\n<p>常用类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int：整型</span><br><span class=\"line\">double：浮点型，例如double(5,2)表示最多5位，其中必须有2位小数，即最大值为999.99；</span><br><span class=\"line\">decimal：浮点型，在表示钱方面使用该类型，因为不会出现精度缺失问题；</span><br><span class=\"line\">char：固定长度字符串类型；char(4) 范围是0-255</span><br><span class=\"line\">varchar：可变长度字符串类型；</span><br><span class=\"line\">text：字符串类型；</span><br><span class=\"line\">blob：字节类型；//jpg mp3 avi</span><br><span class=\"line\">date：日期类型，格式为：yyyy-MM-dd；</span><br><span class=\"line\">time：时间类型，格式为：hh:mm:ss</span><br><span class=\"line\">timestamp：时间戳类型；日期+时间 yyyyMMdd hhmmss</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-操作表\"><a href=\"#4-操作表\" class=\"headerlink\" title=\"4.操作表\"></a>4.操作表</h3><ul>\n<li>创建表：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">  字段名 字段类型 【字段约束】,</span><br><span class=\"line\">  字段名 字段类型 【字段约束】,</span><br><span class=\"line\">  ......</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE stus(</span><br><span class=\"line\">\tsid\t    CHAR(6),</span><br><span class=\"line\">\tsname\tVARCHAR(20),</span><br><span class=\"line\">\tage\t\tINT,</span><br><span class=\"line\">\tgender\tVARCHAR(10) </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>再例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE emps(</span><br><span class=\"line\">\teid\t\tCHAR(6),</span><br><span class=\"line\">\tename\tVARCHAR(50),</span><br><span class=\"line\">\tage\t\tINT,</span><br><span class=\"line\">\tgender\tVARCHAR(6),</span><br><span class=\"line\">\tbirthday\tDATE,</span><br><span class=\"line\">\thiredate\tDATE,</span><br><span class=\"line\">\tsalary\tDECIMAL(7,2),</span><br><span class=\"line\">\tresume\tVARCHAR(1000)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>MYSQL基础语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看当前数据库中所有表名称：SHOW TABLES；　</span><br><span class=\"line\">查看指定表的创建语句：SHOW CREATE TABLE  emps;</span><br><span class=\"line\">查看表结构：DESC emps;</span><br><span class=\"line\">删除表：DROP TABLE emps</span><br><span class=\"line\">修改表结构:</span><br><span class=\"line\">a)\t修改之添加列：给stus表添加classname列：</span><br><span class=\"line\">ALTER TABLE stu ADD (classname varchar(100));</span><br><span class=\"line\">b)\t修改之修改列类型：修改stu表的gender列类型为CHAR(2)：</span><br><span class=\"line\">ALTER TABLE stus MODIFY gender CHAR(2);</span><br><span class=\"line\">c)\t修改之修改列名：修改stu表的gender列名为sex：</span><br><span class=\"line\">ALTER TABLE stus change gender sex CHAR(2);</span><br><span class=\"line\">d)\t修改之删除列：删除stsu表的classname列：</span><br><span class=\"line\">ALTER TABLE stus DROP classname;</span><br><span class=\"line\">e)\t修改之修改表名称：修改stu表名称为student：</span><br><span class=\"line\">ALTER TABLE stus RENAME TO student;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-DML\"><a href=\"#4-4-DML\" class=\"headerlink\" title=\"4.4 DML\"></a>4.4 DML</h2><h3 id=\"1-插入数据\"><a href=\"#1-插入数据\" class=\"headerlink\" title=\"1.插入数据\"></a>1.插入数据</h3><ul>\n<li>语法1：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名(列名1,列名2, …) VALUES(值1, 值2)</span><br></pre></td></tr></table></figure>\n<p>例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO stus(sid, sname,age,gender) VALUES(&apos;s_1001&apos;, &apos;zhangSan&apos;, 23, &apos;male&apos;);</span><br><span class=\"line\">INSERT INTO stus(sid, sname) VALUES(&apos;s_1001&apos;, &apos;zhangSan&apos;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>语法2：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 VALUES(值1,值2,…)</span><br></pre></td></tr></table></figure>\n<p>因为没有指定要插入的列，表示按创建表时列的顺序插入所有列的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO stus VALUES(&apos;s_1002&apos;, &apos;liSi&apos;, 32, &apos;female&apos;);</span><br></pre></td></tr></table></figure>\n<p>注意：所有字符串数据必须使用单引号</p>\n<h3 id=\"2-修改数据\"><a href=\"#2-修改数据\" class=\"headerlink\" title=\"2.修改数据\"></a>2.修改数据</h3><h4 id=\"单表修改语法：\"><a href=\"#单表修改语法：\" class=\"headerlink\" title=\"单表修改语法：\"></a>单表修改语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE 表名 SET 列名1=值1, … 列名n=值n [WHERE 条件]</span><br><span class=\"line\">UPDATE stus SET sname=’zhangSanSan’, age=’32’, gender=’female’ WHERE sid=’s_1001’;</span><br><span class=\"line\">UPDATE stus SET sname=’liSi’, age=’20’ WHERE age&gt;50 AND gender=’male’;</span><br><span class=\"line\">UPDATE stus SET sname=’wangWu’, age=’30’ WHERE age&gt;60 OR gender=’female’;</span><br><span class=\"line\">UPDATE stus SET gender=’female’ WHERE gender IS NULL</span><br><span class=\"line\">UPDATE stus SET age=age+1 WHERE sname=’zhaoLiu’;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多表修改语法：\"><a href=\"#多表修改语法：\" class=\"headerlink\" title=\"多表修改语法：\"></a>多表修改语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE 表1 【inner】 john 表2 on 表 SET 列名1= 新值1,列名2 =新值2 【where 筛选条件】</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-删除数据\"><a href=\"#3-删除数据\" class=\"headerlink\" title=\"3.删除数据\"></a>3.删除数据</h3><h4 id=\"单表删除语法：\"><a href=\"#单表删除语法：\" class=\"headerlink\" title=\"单表删除语法：\"></a>单表删除语法：</h4><p>①语法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM 表名 [WHERE 条件]</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE FROM stus WHERE sid=’s_1001’003B</span><br><span class=\"line\">DELETE FROM stus WHERE sname=’chenQi’ OR age &gt; 30;</span><br><span class=\"line\">DELETE FROM stus;</span><br></pre></td></tr></table></figure>\n<p>②语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE 表名</span><br><span class=\"line\"></span><br><span class=\"line\">TRUNCATE TABLE stus;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>虽然TRUNCATE和DELETE都可以删除表的所有记录，但有原理不同。DELETE的效率没有TRUNCATE高！<br>TRUNCATE其实属性DDL语句，因为它是先DROP TABLE，再CREATE TABLE。而且TRUNCATE删除的记录是无法回滚的，但DELETE删除的记录是可以回滚的.</li>\n</ul>\n<h2 id=\"4-5-DQL\"><a href=\"#4-5-DQL\" class=\"headerlink\" title=\"4.5 DQL\"></a>4.5 DQL</h2><p>DQL就是数据查询语言，数据库执行DQL语句不会对数据进行改变，而是让数据库发送结果集给客户端。<br>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT </span><br><span class=\"line\">selection_list /*要查询的列名称*/</span><br><span class=\"line\">FROM </span><br><span class=\"line\">table_list /*要查询的表名称*/</span><br><span class=\"line\">WHERE </span><br><span class=\"line\">condition /*行条件*/</span><br><span class=\"line\">GROUP BY </span><br><span class=\"line\">grouping_columns /*对结果分组*/</span><br><span class=\"line\">HAVING </span><br><span class=\"line\">condition /*分组后的行条件*/</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">sorting_columns /*对结果分组*/</span><br><span class=\"line\">LIMIT </span><br><span class=\"line\">offset_start, row_count /*结果限定*/</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-基础查询\"><a href=\"#1-基础查询\" class=\"headerlink\" title=\"1.基础查询\"></a>1.基础查询</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.1　查询常量</span><br><span class=\"line\">1.2　查询表达式</span><br><span class=\"line\">1.3  查询函数(方法)</span><br><span class=\"line\">1.4  查询单个字段</span><br><span class=\"line\">1.5  查询多个字段</span><br><span class=\"line\">1.6  查询所有字段(两种方式)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-条件查询\"><a href=\"#2-条件查询\" class=\"headerlink\" title=\"2.条件查询\"></a>2.条件查询</h3><p>介绍<br>条件查询就是在查询时给出WHERE子句，在WHERE子句中可以使用如下运算符及关键字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=、!=、&lt;&gt;、&lt;、&lt;=、&gt;、&gt;=；</span><br><span class=\"line\">AND、OR、NOT</span><br><span class=\"line\">λBETWEEN…AND、IN(set)、IS NULL</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-模糊查询\"><a href=\"#3-模糊查询\" class=\"headerlink\" title=\"3.模糊查询\"></a>3.模糊查询</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Like</span><br><span class=\"line\">like一般搭配通配符使用。</span><br><span class=\"line\">常见的通配符：</span><br><span class=\"line\">%：任意0个或多个字符</span><br><span class=\"line\">_：任意单个字符</span><br></pre></td></tr></table></figure>\n<p>当想查询姓名中包含a字母的员工时就需要使用模糊查询了。模糊查询需要使用关键字LIKE。  </p>\n<ul>\n<li>方式一：直接通过\\进行转义</li>\n<li>方式二：通过escape关键字指定转义字符</li>\n</ul>\n<ul>\n<li>between and  </li>\n</ul>\n<p>特点：<br>①用于筛选某个字段或表达式是否在指定的区间范围<br>②等价于 使用逻辑表达式的效果，只是语法上更加简单<br>③两个区间值不能调换顺序  </p>\n<ul>\n<li>两个区间值包含</li>\n</ul>\n<blockquote>\n<p>=左区间 and &lt;=右区间</p>\n</blockquote>\n<h3 id=\"4-字段控制查询\"><a href=\"#4-字段控制查询\" class=\"headerlink\" title=\"4.字段控制查询\"></a>4.字段控制查询</h3><h4 id=\"去除重复记录\"><a href=\"#去除重复记录\" class=\"headerlink\" title=\"去除重复记录\"></a>去除重复记录</h4><p>去除重复记录（两行或两行以上记录中系列的上的数据都相同），例如emp表中sal字段就存在相同的记录。当只查询emp表的sal字段时，那么会出现重复记录，那么想去除重复记录，需要使用DISTINCT：</p>\n<h4 id=\"查看雇员的月薪与薪资之和-IFNULL函数\"><a href=\"#查看雇员的月薪与薪资之和-IFNULL函数\" class=\"headerlink\" title=\"查看雇员的月薪与薪资之和(IFNULL函数)\"></a>查看雇员的月薪与薪资之和(IFNULL函数)</h4><ul>\n<li>因为salary和commission_pct两列的类型都是数值类型，所以可以做加运算。如果salary或commission_pct中有一个字段不是数值类型，那么会出错。</li>\n<li>Commission_pct列有很多记录的值为NULL，因为任何东西与NULL相加结果还是NULL，所以结算结果可能会出现NULL。下面使用了把NULL转换成数值0的函数IFNULL：</li>\n</ul>\n<h4 id=\"给列名添加别名\"><a href=\"#给列名添加别名\" class=\"headerlink\" title=\"给列名添加别名\"></a>给列名添加别名</h4><p>方式一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 列名 as 别名 from 表名;</span><br></pre></td></tr></table></figure>\n<p>方式二：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 列名 别名  from 表名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-排序-order-by\"><a href=\"#5-排序-order-by\" class=\"headerlink\" title=\"5.排序 order by\"></a>5.排序 order by</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）按单个字段进行升序 ★</span><br><span class=\"line\">案例1：按工资从低到高排序</span><br><span class=\"line\">案例2：按工资从低到高排序</span><br><span class=\"line\">2）.按多个字段排序</span><br><span class=\"line\">案例1：部门编号&gt;50的按工资从高到低排序，如果一样，再按frist_name升序</span><br><span class=\"line\">3）.按表达式排序</span><br><span class=\"line\">案例：将姓名中包含e字符的年薪和姓名显示出来，并且按年薪进行降序</span><br><span class=\"line\">4）.按别名排序</span><br><span class=\"line\">案例：将姓名中包含e字符的年薪和姓名显示出来，并且按年薪进行降序</span><br><span class=\"line\">5）.按函数排序</span><br><span class=\"line\">案例：显示所有有奖金的员工姓名、奖金、姓名的长度，按姓名的长度从低到高排序</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-常见函数\"><a href=\"#6-常见函数\" class=\"headerlink\" title=\"6.常见函数\"></a>6.常见函数</h3><p>MySQL数据库提供了很多函数包括：</p>\n<ul>\n<li>数学函数；</li>\n<li>字符串函数；</li>\n<li>日期和时间函数；</li>\n<li>条件判断函数；流程控制函数；</li>\n<li>系统信息函数；</li>\n<li>加密函数；</li>\n<li>格式化函数；</li>\n</ul>\n<h4 id=\"1）、数学函数\"><a href=\"#1）、数学函数\" class=\"headerlink\" title=\"1）、数学函数\"></a>1）、数学函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABS（x）        返回x的绝对值   </span><br><span class=\"line\">CEIL（x）       返回大于x的最小整数值  </span><br><span class=\"line\">FLOOR（x）      返回大于x的最大整数值</span><br><span class=\"line\">MOD(x,y)        返回x/y的模</span><br><span class=\"line\">RAND(x)         返回0~1的随机值</span><br><span class=\"line\">ROUND(x,y)      返回参数x的四舍五入的有y位的小数的值</span><br><span class=\"line\">TRUNCATE(x,y)   返回数字x截断为y位小数的结果</span><br><span class=\"line\">SQRT(x)         返回x的平方根</span><br><span class=\"line\">POW(x,y)        返回x的y次方</span><br></pre></td></tr></table></figure>\n<h4 id=\"2）、字符串函数\"><a href=\"#2）、字符串函数\" class=\"headerlink\" title=\"2）、字符串函数\"></a>2）、字符串函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONCAT(S1,S2,......,Sn)</span><br><span class=\"line\">    连接S1,S2,......,Sn为一个字符串</span><br><span class=\"line\"></span><br><span class=\"line\">CHAR_LENGTH(s)</span><br><span class=\"line\">    返回字符串s的字符数</span><br><span class=\"line\">    </span><br><span class=\"line\">LENGTH(s)</span><br><span class=\"line\">    返回字符串s的字节数，和字符集有关</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT(str, index , len, instr)</span><br><span class=\"line\">    将字符串str从第index位置开始，len个字符长的子串替换为字符串instr</span><br><span class=\"line\">    </span><br><span class=\"line\">UPPER(s) 或 UCASE(s)</span><br><span class=\"line\">    将字符串s的所有字母转成大写字母</span><br><span class=\"line\">    </span><br><span class=\"line\">LOWER(s)  或LCASE(s)</span><br><span class=\"line\">    将字符串s的所有字母转成小写字母</span><br><span class=\"line\">    </span><br><span class=\"line\">LPAD(str, len, pad)</span><br><span class=\"line\">    用字符串pad对str最左边进行填充，直到str的长度为len个字符</span><br><span class=\"line\">    </span><br><span class=\"line\">RPAD(str ,len, pad)</span><br><span class=\"line\">    用字符串pad对str最右边进行填充，直到str的长度为len个字符</span><br><span class=\"line\">    </span><br><span class=\"line\">TRIM(s)</span><br><span class=\"line\">    去掉字符串s开始与结尾的空格</span><br><span class=\"line\">    </span><br><span class=\"line\">REPLACE（str, a, b）</span><br><span class=\"line\">    用字符串b替换字符串str中所有出现的字符串a</span><br><span class=\"line\">    </span><br><span class=\"line\">SUBSTR(s,index,len)</span><br><span class=\"line\">返回从字符串s的index位置其len个字符</span><br></pre></td></tr></table></figure>\n<h4 id=\"3）、日期时间函数\"><a href=\"#3）、日期时间函数\" class=\"headerlink\" title=\"3）、日期时间函数\"></a>3）、日期时间函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CURDATE() 或 CURRENT_DATE()     返回当前日期</span><br><span class=\"line\">CURTIME() 或 CURRENT_TIME()     返回当前时间</span><br><span class=\"line\">NOW()</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------------------------------</span><br><span class=\"line\">SYSDATE()               返回当前系统日期时间</span><br><span class=\"line\">CURRENT_TIMESTAMP()</span><br><span class=\"line\">LOCALTIME()</span><br><span class=\"line\">LOCALTIMESTAMP()</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------------------------------</span><br><span class=\"line\">YEAR(date)              返回具体的时间值</span><br><span class=\"line\">MONTH(date)</span><br><span class=\"line\">DAY(date)</span><br><span class=\"line\">HOUR(time)</span><br><span class=\"line\">MINUTE(time)</span><br><span class=\"line\">SECOND(time)</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------------------------------</span><br><span class=\"line\">WEEK(date)              返回一年中的第几周</span><br><span class=\"line\">WEEKOFYEAR(date)</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------------------------------</span><br><span class=\"line\">DAYOFWEEK()</span><br><span class=\"line\">    返回周几，注意：周日是1，周一是2，。。。周六是7</span><br><span class=\"line\"></span><br><span class=\"line\">WEEKDAY(date)</span><br><span class=\"line\">    返回周几，注意，周1是0，周2是1，。。。周日是6</span><br><span class=\"line\"></span><br><span class=\"line\">DAYNAME(date)</span><br><span class=\"line\">    返回星期：MONDAY,TUESDAY.....SUNDAY</span><br><span class=\"line\"></span><br><span class=\"line\">MONTHNAME(date)</span><br><span class=\"line\">    返回月份：January，。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">DATEDIFF(date1,date2)</span><br><span class=\"line\">    返回date1 - date2的日期间隔</span><br><span class=\"line\">    </span><br><span class=\"line\">TIMEDIFF(time1, time2)</span><br><span class=\"line\">    返回time1 - time2的时间间隔</span><br><span class=\"line\"></span><br><span class=\"line\">DATE_ADD(datetime, INTERVALE  expr  type)</span><br><span class=\"line\">    返回与给定日期时间相差INTERVAL时间段的日期时间</span><br><span class=\"line\"></span><br><span class=\"line\">DATE_FORMAT(datetime ,fmt)</span><br><span class=\"line\">    按照字符串fmt格式化日期datetime值</span><br><span class=\"line\"></span><br><span class=\"line\">STR_TO_DATE(str, fmt)</span><br><span class=\"line\">    按照字符串fmt对str进行解析，解析为一个日期</span><br></pre></td></tr></table></figure>\n<p>（1）DATE_ADD(datetime,INTERVAL  expr  type)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DATE_ADD(NOW(), INTERVAL 1 YEAR);</span><br><span class=\"line\">SELECT DATE_ADD(NOW(), INTERVAL -1 YEAR);             #可以是负数</span><br><span class=\"line\">SELECT DATE_ADD(NOW(), INTERVAL &apos;1_1&apos; YEAR_MONTH);    #需要单引号</span><br><span class=\"line\">-------------------------------------</span><br><span class=\"line\">表达式类型      YEAR_MONTH</span><br><span class=\"line\">YEAR            DAY_HOUR</span><br><span class=\"line\">MONTH           DAY_MINUTE</span><br><span class=\"line\">DAY             DAY_SECOND</span><br><span class=\"line\">HOUR            HOUR_MINUTE</span><br><span class=\"line\">MINUTE          HOUR_SECOND</span><br><span class=\"line\">SECOND          MINUTE_SECOND</span><br></pre></td></tr></table></figure>\n<p>（2）DATE_FORMAT(datetime ,fmt)和STR_TO_DATE(str, fmt)</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605112616.png\" alt></p>\n<h4 id=\"4）、流程函数\"><a href=\"#4）、流程函数\" class=\"headerlink\" title=\"4）、流程函数\"></a>4）、流程函数</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605112741.png\" alt></p>\n<h3 id=\"7-聚合函数\"><a href=\"#7-聚合函数\" class=\"headerlink\" title=\"7.聚合函数\"></a>7.聚合函数</h3><h4 id=\"聚合函数是用来做纵向运算的函数：\"><a href=\"#聚合函数是用来做纵向运算的函数：\" class=\"headerlink\" title=\"聚合函数是用来做纵向运算的函数：\"></a>聚合函数是用来做纵向运算的函数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COUNT()：统计指定列不为NULL的记录行数；</span><br><span class=\"line\">MAX()：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class=\"line\">MIN()：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</span><br><span class=\"line\">SUM()：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；</span><br><span class=\"line\">AVG()：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；</span><br></pre></td></tr></table></figure>\n<h4 id=\"COUNT\"><a href=\"#COUNT\" class=\"headerlink\" title=\"COUNT\"></a>COUNT</h4><ul>\n<li>当需要纵向统计时可以使用COUNT()。<ul>\n<li>查询employees表中记录数：</li>\n<li>查询employees表中有奖金的人数：</li>\n</ul>\n</li>\n</ul>\n<p>注意，因为count()函数中给出的是commission_pct列，那么只统计comm列非NULL的行数。</p>\n<p>当需要纵向求和时使用sum()函数。</p>\n<h4 id=\"MAX和MIN\"><a href=\"#MAX和MIN\" class=\"headerlink\" title=\"MAX和MIN\"></a>MAX和MIN</h4><pre><code>- 查询最高工资和最低工资：\n</code></pre><h3 id=\"8-分组查询\"><a href=\"#8-分组查询\" class=\"headerlink\" title=\"8.分组查询\"></a>8.分组查询</h3><h4 id=\"8-1-group-by\"><a href=\"#8-1-group-by\" class=\"headerlink\" title=\"8.1 group by\"></a>8.1 group by</h4><p>当需要分组查询时需要使用GROUP BY子句，例如查询每个部门的平均工资，这说明要使用部分来分组。</p>\n<h4 id=\"8-2-having\"><a href=\"#8-2-having\" class=\"headerlink\" title=\"8.2 having\"></a>8.2 having</h4><h3 id=\"9-连接查询\"><a href=\"#9-连接查询\" class=\"headerlink\" title=\"9.连接查询\"></a>9.连接查询</h3><p>概念：  </p>\n<ul>\n<li>连接查询就是求出多个表的乘积，例如t1连接t2，那么查询出的结果就是t1*t2。</li>\n<li>连接查询会产生笛卡尔积，假设集合A={a,b}，集合B={0,1,2}，则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。可以扩展到多个集合的情况。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605113223.png\" alt></p>\n<ul>\n<li>那么多表查询产生这样的结果并不是我们想要的，那么怎么去除重复的，不想要的记录呢，当然是通过条件过滤。通常要查询的多个表之间都存在关联关系，那么就通过关联关系去除笛卡尔积。</li>\n<li>你能想像到emp和dept表连接查询的结果么？employees一共107行记录，departments表一共27行记录，那么连接后查询出的结果是2889行记录。</li>\n<li>Sql语句：SELECT * FROM employees,departments;</li>\n<li>查询结果：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605113341.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605113358.png\" alt></p>\n<p>也就你只是想在查询employees表的同时，把每个员工的所在部门信息显示出来，那么就需要使用主外键来去除无用信息了。<br>Sql语句：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM employees e,deptartments d WHERE e.department_id=d.deptartment_id ;</span><br></pre></td></tr></table></figure>\n<p>查询结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605113619.png\" alt></p>\n<p>上面查询结果会把两张表的所有列都查询出来，也许你不需要那么多列，这时就可以指定要查询的列了。<br>Sql语句：<br>SELECT employee_id,last_name,salary,commission_pct,department_name<br>FROM employees,deptartments<br>WHERE employees.department_id = departments.department_id;<br>查询结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190605113439.png\" alt></p>\n<p>给表指定别名的写法：<br>SELECT employee_id,last_name,salary,commission_pct,department_name<br>FROM employees e,deptartments d<br>WHERE e.department_id = d.department_id;</p>\n<h4 id=\"9-1-内连接\"><a href=\"#9-1-内连接\" class=\"headerlink\" title=\"9.1　内连接\"></a>9.1　内连接</h4><p>上面的连接语句就是内连接，但它不是SQL标准中的查询方式，可以理解为方言！SQL标准的内连接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM employees e INNER JOIN departments d </span><br><span class=\"line\">ON e.department_id=d.department_id;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>inner可以省略、on是连接条件</li>\n<li>内连接的特点：查询结果必须满足条件。</li>\n</ul>\n<h4 id=\"9-2-外连接（左连接、右连接）\"><a href=\"#9-2-外连接（左连接、右连接）\" class=\"headerlink\" title=\"9.2　外连接（左连接、右连接）\"></a>9.2　外连接（左连接、右连接）</h4><p>外连接的特点：查询出的结果存在不满足条件的可能。</p>\n<ul>\n<li>左连接：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM employees e LEFT OUTER JOIN departments d </span><br><span class=\"line\">ON e.department_id=d.department_id;</span><br></pre></td></tr></table></figure>\n<p>注意：OUTER可以省略<br>左连接是先查询出左表（即以左表为主），然后查询右表，右表中满足条件的显示出来，不满足条件的显示NULL。</p>\n<ul>\n<li>右连接<br>右连接就是先把右表中所有记录都查询出来，然后左表满足条件的显示，不满足显示NULL。例如在departments表中的120~270部门并不存在员工，但在右连接中，如果departments表为右表，那么还是会查出120~270部门的信息，但相应的员工信息为NULL。<br>代码如下：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM employees e </span><br><span class=\"line\">RIGHT OUTER JOIN departments d </span><br><span class=\"line\">ON e.department_id=d.department_id;</span><br></pre></td></tr></table></figure>\n<p>9.3　自连接（不太常用）</p>\n<p>#案例：查询员工的姓名和工资以及领导姓名和工资</p>\n<p>SELECT e.last_name,e.salary,m.last_name,m.salary<br>FROM employees e<br>JOIN employees m<br>ON e.<code>manager_id</code> = m.<code>employee_id</code>; </p>\n<h3 id=\"10-子查询\"><a href=\"#10-子查询\" class=\"headerlink\" title=\"10.子查询\"></a>10.子查询</h3><p>概念：</p>\n<ul>\n<li>出现在其他语句的内部的select语句，称为子查询或内查询</li>\n<li>里面嵌套其他select语句的查询语句，称为主查询或外查询</li>\n</ul>\n<p>分类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单行子查询</span><br><span class=\"line\">\t特点：子查询的结果集只有一行一列</span><br><span class=\"line\">多行子查询</span><br><span class=\"line\">\t特点：子查询的结果集有多行一列</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、子查询语句需要放在小括号内，提高代码的阅读性  </span><br><span class=\"line\">2、子查询先于主查询执行，一般来讲，主查询会用到子查询的结果  </span><br><span class=\"line\">3、如果子查询放在条件中，一般来讲，子查询需要放在条件的右侧  </span><br><span class=\"line\">\t示例：where job_id&gt;(子查询)  </span><br><span class=\"line\">\t不能写成：where (子查询)&lt;job_id  </span><br><span class=\"line\">4、 单行子查询对应的使用单行操作符：&gt; &lt; &gt;= &lt;= = &lt;&gt;    </span><br><span class=\"line\">    多行子查询对应的使用多行操作符:in 、any 、all 、not in</span><br><span class=\"line\">    </span><br><span class=\"line\">LIMIT用来限定查询结果的起始行，以及总行数。</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-分页查询\"><a href=\"#11-分页查询\" class=\"headerlink\" title=\"11.分页查询\"></a>11.分页查询</h3><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表</span><br><span class=\"line\">【where 条件】</span><br><span class=\"line\">limit 【起始条目索引,】查询的条目数;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第5章完整性约束\"><a href=\"#第5章完整性约束\" class=\"headerlink\" title=\"第5章完整性约束\"></a>第5章完整性约束</h1><p>　　完整性约束是为了表的数据的正确性！如果数据不正确，那么一开始就不能添加到表中。</p>\n<h2 id=\"5-1主键\"><a href=\"#5-1主键\" class=\"headerlink\" title=\"5.1主键\"></a>5.1主键</h2><p>当某一列添加了主键约束后，那么这一列的数据就不能重复出现。这样每行记录中其主键列的值就是这一行的唯一标识。例如学生的学号可以用来做唯一标识，而学生的姓名是不能做唯一标识的，因为学习有可能同名。<br>主键列的值不能为NULL，也不能重复！<br>　指定主键约束使用PRIMARY KEY关键字</p>\n<ul>\n<li>创建表：定义列时指定主键：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE stu(</span><br><span class=\"line\">\t\tsid\t    CHAR(6) PRIMARY KEY,</span><br><span class=\"line\">\t\tsname\tVARCHAR(20),</span><br><span class=\"line\">\t\tage\t\tINT,</span><br><span class=\"line\">\t\tgender\tVARCHAR(10) </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建表：定义列之后独立指定主键：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE stu(</span><br><span class=\"line\">\t\tsid\t    CHAR(6),</span><br><span class=\"line\">\t\tsname\tVARCHAR(20),</span><br><span class=\"line\">\t\tage\t\tINT,</span><br><span class=\"line\">\t\tgender\tVARCHAR(10),</span><br><span class=\"line\">\t\tPRIMARY KEY(sid)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改表时指定主键：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE stu ADD PRIMARY KEY(sid);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除主键（只是删除主键约束，而不会删除主键列）：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE stu DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-2主键自增长\"><a href=\"#5-2主键自增长\" class=\"headerlink\" title=\"5.2主键自增长\"></a>5.2主键自增长</h2><p>MySQL提供了主键自动增长的功能！这样用户就不用再为是否有主键是否重复而烦恼了。当主键设置为自动增长后，在没有给出主键值时，主键的值会自动生成，而且是最大主键值+1，也就不会出现重复主键的可能了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 创建表时设置主键自增长（主键必须是整型才可以自增长）：</span><br><span class=\"line\">CREATE TABLE stu(</span><br><span class=\"line\">\t\tsid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class=\"line\">\t\tsname\tVARCHAR(20),</span><br><span class=\"line\">\t\tage\t\tINT,</span><br><span class=\"line\">\t\tgender\tVARCHAR(10)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">- 修改表时设置主键自增长：</span><br><span class=\"line\">ALTER TABLE stu CHANGE sid sid INT AUTO_INCREMENT;</span><br><span class=\"line\"></span><br><span class=\"line\">- 修改表时删除主键自增长：</span><br><span class=\"line\">ALTER TABLE stu CHANGE sid sid INT;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3非空\"><a href=\"#5-3非空\" class=\"headerlink\" title=\"5.3非空\"></a>5.3非空</h2><p>指定非空约束的列不能没有值，也就是说在插入记录时，对添加了非空约束的列一定要给值；在修改记录时，不能把非空列的值设置为NULL。</p>\n<ul>\n<li>指定非空约束：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE stu(</span><br><span class=\"line\">\t\tsid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class=\"line\">\t\tsname VARCHAR(10) NOT NULL,</span><br><span class=\"line\">\t\tage\t\tINT,</span><br><span class=\"line\">\t\tgender\tVARCHAR(10)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>当为sname字段指定为非空后，在向stu表中插入记录时，必须给sname字段指定值，否则会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO stu(sid) VALUES(1);</span><br></pre></td></tr></table></figure>\n<p>插入的记录中sname没有指定值，所以会报错！</p>\n<h2 id=\"5-4唯一\"><a href=\"#5-4唯一\" class=\"headerlink\" title=\"5.4唯一\"></a>5.4唯一</h2><p>还可以为字段指定唯一约束！当为字段指定唯一约束后，那么字段的值必须是唯一的。这一点与主键相似！例如给stu表的sname字段指定唯一约束：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE tab_ab(</span><br><span class=\"line\">\tsid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class=\"line\">\tsname VARCHAR(10) UNIQUE</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">　　INSERT INTO sname(sid, sname) VALUES(1001, &apos;zs&apos;);</span><br><span class=\"line\">INSERT INTO sname(sid, sname) VALUES(1002, &apos;zs&apos;);</span><br></pre></td></tr></table></figure>\n<p>　　当两次插入相同的名字时，MySQL会报错！</p>\n<h2 id=\"5-5外键\"><a href=\"#5-5外键\" class=\"headerlink\" title=\"5.5外键\"></a>5.5外键</h2><p>主外键是构成表与表关联的唯一途径！<br>外键是另一张表的主键！例如员工表与部门表之间就存在关联关系，其中员工表中的部门编号字段就是外键，是相对部门表的外键。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 创建dept表，指定deptno为主键列：</span><br><span class=\"line\">CREATE TABLE dept(</span><br><span class=\"line\">\tdeptno\t\tINT PRIMARY KEY,</span><br><span class=\"line\">\tdname\t\tvarchar(14),</span><br><span class=\"line\">\tloc\t\tvarchar(13)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">- 创建t_section表，指定sid为主键列，</span><br><span class=\"line\">    u_id为相对t_user表的uid列的外键：</span><br><span class=\"line\">CREATE TABLE emp(</span><br><span class=\"line\">\tempno\t\tINT,</span><br><span class=\"line\">\tename\t\tVARCHAR(50),</span><br><span class=\"line\">\tjob\t\tVARCHAR(50),</span><br><span class=\"line\">\tmgr\t\tINT,</span><br><span class=\"line\">\thiredate\tDATE,</span><br><span class=\"line\">\tsal\t\tDECIMAL(7,2),</span><br><span class=\"line\">\tcomm\t\tdecimal(7,2),</span><br><span class=\"line\">\tdeptno\t\tINT,</span><br><span class=\"line\">\tCONSTRAINT fk_e_d FOREIGN KEY(deptno) REFERENCES dept(deptno)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h1 id=\"第6章-事务\"><a href=\"#第6章-事务\" class=\"headerlink\" title=\"第6章 事务\"></a>第6章 事务</h1><pre><code>事务属于TCL控制语言（Transaction Control Language ）。\n</code></pre><h2 id=\"6-1事务概述\"><a href=\"#6-1事务概述\" class=\"headerlink\" title=\"6.1事务概述\"></a>6.1事务概述</h2><ul>\n<li>什么是事务？为什么要用事务？<ul>\n<li>一个事务是由一条或者多条sql语句构成，这一条或者多条sql语句要么全部执行成功，要么全部执行失败！</li>\n<li>默认情况下，每条单独的sql语句就是一个单独的事务！</li>\n</ul>\n</li>\n</ul>\n<p>举例：<br>银行转账！张三转10000块到李四的账户，这其实需要两条SQL语句：</p>\n<ul>\n<li>给张三的账户减去10000元；</li>\n<li>给李四的账户加上10000元。</li>\n</ul>\n<blockquote>\n<ul>\n<li>如果在第一条SQL语句执行成功后，在执行第二条SQL语句之前，程序被中断了（可能是抛出了某个异常，也可能是其他什么原因），那么李四的账户没有加上10000元，而张三却减去了10000元。这肯定是不行的！</li>\n<li>你现在可能已经知道什么是事务了吧！事务中的多个操作，要么完全成功，要么完全失败！不可能存在成功一半的情况！也就是说给张三的账户减去10000元如果成功了，那么给李四的账户加上10000元的操作也必须是成功的；否则给张三减去10000元，以及给李四加上10000元都是失败的！</li>\n</ul>\n</blockquote>\n<h2 id=\"6-2事务的四大特性（ACID）\"><a href=\"#6-2事务的四大特性（ACID）\" class=\"headerlink\" title=\"6.2事务的四大特性（ACID）\"></a>6.2事务的四大特性（ACID）</h2><ul>\n<li>原子性（Atomicity）：事务中所有操作是不可再分割的原子单位。事务中所有操作要么全部执行成功，要么全部执行失败。</li>\n<li>一致性（Consistency）：事务执行后，数据库状态与其它业务规则保持一致。如转账业务，无论事务执行成功与否，参与转账的两个账号余额之和应该是不变的。</li>\n<li>隔离性（Isolation）：隔离性是指在并发操作中，不同事务之间应该隔离开来，使每个并发中的事务不会相互干扰。</li>\n<li>持久性（Durability）：一旦事务提交成功，事务中所有的数据操作都必须被持久化到数据库中，即使提交事务后，数据库马上崩溃，在数据库重启时，也必须能保证通过某种机制恢复数据。</li>\n</ul>\n<h2 id=\"6-3-MySql中的事务\"><a href=\"#6-3-MySql中的事务\" class=\"headerlink\" title=\"6.3 MySql中的事务\"></a>6.3 MySql中的事务</h2><p>在默认情况下，MySQL每执行一条SQL语句，都是一个单独的事务。如果需要在一个事务中包含多条SQL语句，那么需要开启事务和结束事务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启事务：start transaction；</span><br><span class=\"line\">结束事务：commit或rollback。</span><br></pre></td></tr></table></figure>\n<p>在执行SQL语句之前，先执行strat transaction，这就开启了一个事务（事务的起点），然后可以去执行多条SQL语句，最后要结束事务，commit表示提交，即事务中的多条SQL语句所做出的影响会持久化到数据库中。或者rollback，表示回滚，即回滚到事务的起点，之前做的所有操作都被撤消了！<br>演示事务  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建事务要用到的表</span><br><span class=\"line\">CREATE TABLE account(</span><br><span class=\"line\">\tid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class=\"line\">\tNAME VARCHAR(30),</span><br><span class=\"line\">\tbalance NUMERIC(10.2)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO account(NAME,balance) VALUES(&apos;fanbingbing&apos;, 100000);</span><br><span class=\"line\">INSERT INTO account(NAME,balance) VALUES(&apos;lichen&apos;, 100000);</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM account;</span><br></pre></td></tr></table></figure>\n<p>演示事务执行失败<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例一：回滚 事务执行失败！</span><br><span class=\"line\">START TRANSACTION;</span><br><span class=\"line\">UPDATE account SET balance=balance-10000 WHERE id=1;</span><br><span class=\"line\">UPDATE account SET balance=balance+10000 WHERE id=2;</span><br><span class=\"line\">ROLLBACK;</span><br><span class=\"line\">案例二：退出mysql客户端 事务执行失败！</span><br><span class=\"line\">START TRANSACTION;</span><br><span class=\"line\">UPDATE account SET balance=balance-10000 WHERE id=1;</span><br><span class=\"line\">UPDATE account SET balance=balance+10000 WHERE id=2;</span><br></pre></td></tr></table></figure></p>\n<p>演示事务执行成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">START TRANSACTION;</span><br><span class=\"line\">UPDATE account SET balance=balance-10000 WHERE id=1;</span><br><span class=\"line\">UPDATE account SET balance=balance+10000 WHERE id=2;</span><br><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n","categories":["JavaWeb"],"tags":["开发环境配置","Java SQL&JDBC"]},{"title":"16. JavaSE-网络编程","url":"http://yoursite.com/2017/02/26/16. JavaSE-网络编程/","content":"<h1 id=\"16-1-网络编程概述\"><a href=\"#16-1-网络编程概述\" class=\"headerlink\" title=\"16.1 网络编程概述\"></a>16.1 网络编程概述</h1><h2 id=\"16-1-1-网络编程概述\"><a href=\"#16-1-1-网络编程概述\" class=\"headerlink\" title=\"16.1.1 网络编程概述\"></a>16.1.1 网络编程概述</h2><p>•    Java是 Internet   上的语言，它从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络应用程序。<br>•    Java提供的网络类库，可以实现无痛的网络连接，联网的底层细节被隐藏在 Java 的本机安装系统里，由 JVM 进行控制。并且 Java   实现了一个跨平台的网络库，程序员面对的是一个统一的网络编程环境。  </p>\n<h2 id=\"16-1-2-网络基础\"><a href=\"#16-1-2-网络基础\" class=\"headerlink\" title=\"16.1.2 网络基础\"></a>16.1.2 网络基础</h2><ul>\n<li>计算机网络：  <ul>\n<li>把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>网络编程的目的：  <ul>\n<li>直接或间接地通过网络协议与其它计算机进行通讯。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>网络编程中有两个主要的问题：<ul>\n<li>如何准确地定位网络上一台或多台主机</li>\n<li>找到主机后如何可靠高效地进行数据传输</li>\n</ul>\n</li>\n</ul>\n<p>地球村</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162248.png\" alt></p>\n<h1 id=\"16-2-网络通信要素\"><a href=\"#16-2-网络通信要素\" class=\"headerlink\" title=\"16.2 网络通信要素\"></a>16.2 网络通信要素</h1><p>如何实现网络中的主机互相通信：</p>\n<ul>\n<li>通信双方地址 </li>\n<li>一定的规则（有两套参考模型）<ul>\n<li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广</li>\n<li>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162351.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162435.png\" alt></p>\n<h1 id=\"16-3-InetAddress类\"><a href=\"#16-3-InetAddress类\" class=\"headerlink\" title=\"16.3 InetAddress类\"></a>16.3 InetAddress类</h1><h2 id=\"16-3-1通讯要素1：IP-和-端口号\"><a href=\"#16-3-1通讯要素1：IP-和-端口号\" class=\"headerlink\" title=\"16.3.1通讯要素1：IP 和 端口号\"></a>16.3.1通讯要素1：IP 和 端口号</h2><p>IP 地址：InetAddress</p>\n<ul>\n<li>唯一的标识 Internet 上的计算机</li>\n<li>本地回环地址(hostAddress)：127.0.0.1      主机名(hostName)：localhost</li>\n<li>不易记忆</li>\n<li>端口号标识正在计算机上运行的进程（程序）<ul>\n<li>不同的进程有不同的端口号</li>\n<li>被规定为一个 16 位的整数 0~65535。其中，0~1023被预先定义的服务通信占用（如http占用端口80，Tomcat占用端口8080，MySql占用端口3306,Oracle占用端口1521等）。除非我们需要访问这些特定服务，否则，就应该使用 1024~65535 这些端口中的某一个进行通信，以免发生端口冲突。 </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>端口号与IP地址的组合得出一个网络套接字：Socket。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162542.png\" alt></p>\n<h2 id=\"16-3-2-InetAddress类\"><a href=\"#16-3-2-InetAddress类\" class=\"headerlink\" title=\"16.3.2 InetAddress类\"></a>16.3.2 InetAddress类</h2><ul>\n<li>Internet上的主机有两种方式表示地址：<ul>\n<li>域名(hostName)：<a href=\"http://www.soc.pub\" target=\"_blank\" rel=\"noopener\">www.soc.pub</a></li>\n<li>IP 地址(hostAddress)：202.108.35.210</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p>\n</li>\n<li><p>InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址：<a href=\"http://www.atguigu.com\" target=\"_blank\" rel=\"noopener\">www.atguigu.com</a> 和 202.108.35.210。</p>\n</li>\n<li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器（DNS）负责将域名转化成IP地址，这样才能和主机建立连接。 ——-域名解析</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162706.png\" alt></p>\n<ul>\n<li>InetAddress类没有提供公共的构造器，而是提供了如下两个静态方法来获取InetAddress实例</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162827.png\" alt></p>\n<ul>\n<li>InetAddress提供了如下几个常用的方法</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603162859.png\" alt></p>\n<h2 id=\"16-3-2-InetAddress类代码实例\"><a href=\"#16-3-2-InetAddress类代码实例\" class=\"headerlink\" title=\"16.3.2 InetAddress类代码实例\"></a>16.3.2 InetAddress类代码实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InetAddress address = InetAddress.getByName(&quot;www.atguigu.com&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(address);</span><br><span class=\"line\">\t\t//获取InetAddress 对象所含的域名</span><br><span class=\"line\">\t\tSystem.out.println(address.getHostName());</span><br><span class=\"line\">\t\t//获取InetAddress 对象所含的IP地址</span><br><span class=\"line\">\t\tSystem.out.println(address.getHostAddress());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//获取本机的域名和IP地址</span><br><span class=\"line\">\t\tInetAddress address2 = InetAddress.getLocalHost();</span><br><span class=\"line\">\t\tSystem.out.println(address2);</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-4-TCP网络通信\"><a href=\"#16-4-TCP网络通信\" class=\"headerlink\" title=\"16.4 TCP网络通信\"></a>16.4 TCP网络通信</h1><h2 id=\"16-4-1-通讯要素2：网络通信协议\"><a href=\"#16-4-1-通讯要素2：网络通信协议\" class=\"headerlink\" title=\"16.4.1 通讯要素2：网络通信协议\"></a>16.4.1 通讯要素2：网络通信协议</h2><p>网络通信协议  </p>\n<ul>\n<li>计算机网络中实现通信必须有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。</li>\n</ul>\n<p>通信协议分层的思想</p>\n<ul>\n<li>由于结点之间联系很复杂，在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。</li>\n</ul>\n<h2 id=\"16-4-2-TCP-IP协议簇\"><a href=\"#16-4-2-TCP-IP协议簇\" class=\"headerlink\" title=\"16.4.2 TCP/IP协议簇\"></a>16.4.2 TCP/IP协议簇</h2><ul>\n<li>传输层协议中有两个非常重要的协议：<ul>\n<li>传输控制协议TCP(Transmission Control Protocol)</li>\n<li>用户数据报协议UDP(User Datagram Protocol)。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>TCP/IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li>\n<li>IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。</li>\n<li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。</li>\n</ul>\n<h2 id=\"16-4-3-TCP-和-UDP\"><a href=\"#16-4-3-TCP-和-UDP\" class=\"headerlink\" title=\"16.4.3 TCP 和 UDP\"></a>16.4.3 TCP 和 UDP</h2><p>TCP协议：</p>\n<ul>\n<li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li>\n<li>传输前，采用“三次握手”方式，是可靠的</li>\n<li>TCP协议进行通信的两个应用进程：客户端、服务端</li>\n<li>在连接中可进行大数据量的传输</li>\n<li>传输完毕，需释放已建立的连接，效率低</li>\n</ul>\n<p>UDP协议：</p>\n<ul>\n<li>将数据、源、目的封装成数据包，不需要建立连接</li>\n<li>每个数据报的大小限制在64K内</li>\n<li>因无需连接，故是不可靠的</li>\n<li>发送数据结束时无需释放资源，速度快</li>\n</ul>\n<h2 id=\"16-4-4-Socket\"><a href=\"#16-4-4-Socket\" class=\"headerlink\" title=\"16.4.4 Socket\"></a>16.4.4 Socket</h2><ul>\n<li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。</li>\n<li>通信的两端都要有Socket，是两台机器间通信的端点</li>\n<li>网络通信其实就是Socket间的通信。</li>\n<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li>\n<li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</li>\n</ul>\n<h2 id=\"16-4-5-基于Socket的TCP编程\"><a href=\"#16-4-5-基于Socket的TCP编程\" class=\"headerlink\" title=\"16.4.5 基于Socket的TCP编程\"></a>16.4.5 基于Socket的TCP编程</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603163320.png\" alt></p>\n<h2 id=\"16-4-6-Socket类的常用方法\"><a href=\"#16-4-6-Socket类的常用方法\" class=\"headerlink\" title=\"16.4.6 Socket类的常用方法\"></a>16.4.6 Socket类的常用方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603163339.png\" alt></p>\n<h2 id=\"16-4-7-ServerSocket类的常用方法\"><a href=\"#16-4-7-ServerSocket类的常用方法\" class=\"headerlink\" title=\"16.4.7 ServerSocket类的常用方法\"></a>16.4.7 ServerSocket类的常用方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603163401.png\" alt></p>\n<h2 id=\"16-4-8-基于Socket的TCP编程\"><a href=\"#16-4-8-基于Socket的TCP编程\" class=\"headerlink\" title=\"16.4.8 基于Socket的TCP编程\"></a>16.4.8 基于Socket的TCP编程</h2><p>客户端Socket的工作过程包含以下四个基本的步骤：</p>\n<ul>\n<li>创建 Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li>\n<li>打开连接到 Socket 的输入/出流： 使用 getInputStream()方法获得输入流，使用 getOutputStream()方法获得输出流，进行数据传输</li>\n<li>按照一定的协议对 Socket  进行读/写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li>\n<li>关闭 Socket：断开客户端到服务器的连接，释放线路 </li>\n</ul>\n<h2 id=\"4-8-1-客户端创建Socket对象\"><a href=\"#4-8-1-客户端创建Socket对象\" class=\"headerlink\" title=\"4.8.1 客户端创建Socket对象\"></a>4.8.1 客户端创建Socket对象</h2><p>客户端程序可以使用Socket类创建对象，创建的同时会自动向服务器方发起连接。Socket的构造方法是：</p>\n<ul>\n<li>Socket(String host,int port)throws UnknownHostException,IOException：向服务器(域名是host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。</li>\n<li>Socket(InetAddress address,int port)throws IOException：根据InetAddress对象所表示的IP地址以及端口号port发起连接。</li>\n</ul>\n<p>客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Socket s = new Socket(“192.168.40.165”,9999);</span><br><span class=\"line\">OutputStream out = s.getOutputStream();</span><br><span class=\"line\">out.write(“hello”.getBytes());</span><br><span class=\"line\">s.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-8-2服务器程序的工作过程包含以下四个基本的步骤：\"><a href=\"#4-8-2服务器程序的工作过程包含以下四个基本的步骤：\" class=\"headerlink\" title=\"4.8.2服务器程序的工作过程包含以下四个基本的步骤：\"></a>4.8.2服务器程序的工作过程包含以下四个基本的步骤：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用 ServerSocket(int port) ：</span><br><span class=\"line\">    创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</span><br><span class=\"line\"></span><br><span class=\"line\">调用 accept()：</span><br><span class=\"line\">    监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</span><br><span class=\"line\"></span><br><span class=\"line\">调用 该Socket类对象的 getOutputStream() 和 getInputStream ()：</span><br><span class=\"line\">    获取输出流和输入流，开始网络数据的发送和接收。</span><br><span class=\"line\"></span><br><span class=\"line\">关闭ServerSocket和Socket对象：</span><br><span class=\"line\">    客户端访问结束，关闭通信套接字。</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-8-3服务器建立-ServerSocket-对象\"><a href=\"#4-8-3服务器建立-ServerSocket-对象\" class=\"headerlink\" title=\"4.8.3服务器建立 ServerSocket 对象\"></a>4.8.3服务器建立 ServerSocket 对象</h2><ul>\n<li>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，服务器必须事先建立一个等待客户请求建立套接字连接的ServerSocket对象。</li>\n<li>所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerSocket ss = new ServerSocket(9999);</span><br><span class=\"line\">Socket s = ss.accept ();</span><br><span class=\"line\">InputStream in = s.getInputStream();</span><br><span class=\"line\">byte[] buf = new byte[1024];</span><br><span class=\"line\">int num = in.read(buf);</span><br><span class=\"line\">String str = new String(buf,0,num);</span><br><span class=\"line\">System.out.println(s.getInetAddress().toString()+”:”+str);</span><br><span class=\"line\">s.close();</span><br><span class=\"line\">ss.close();</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-5-UDP网络通信\"><a href=\"#16-5-UDP网络通信\" class=\"headerlink\" title=\"16.5 UDP网络通信\"></a>16.5 UDP网络通信</h1><h2 id=\"16-5-1-UDP网络通信\"><a href=\"#16-5-1-UDP网络通信\" class=\"headerlink\" title=\"16.5.1 UDP网络通信\"></a>16.5.1 UDP网络通信</h2><ul>\n<li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li>\n<li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li>\n<li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</li>\n<li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</li>\n</ul>\n<h2 id=\"16-5-2-流程\"><a href=\"#16-5-2-流程\" class=\"headerlink\" title=\"16.5.2 流程\"></a>16.5.2 流程</h2><p>流  程：</p>\n<ol>\n<li>DatagramSocket与DatagramPacket  </li>\n<li>建立发送端，接收端  </li>\n<li>建立数据包  </li>\n<li>调用Socket的发送、接收方法  </li>\n<li>关闭Socket  </li>\n</ol>\n<ul>\n<li>发送端与接收端是两个独立的运行程序</li>\n</ul>\n<h2 id=\"16-5-3-发送端\"><a href=\"#16-5-3-发送端\" class=\"headerlink\" title=\"16.5.3 发送端\"></a>16.5.3 发送端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DatagramSocket ds = new DatagramSocket();</span><br><span class=\"line\">byte[] by = “hello,atguigu.com”.getBytes();</span><br><span class=\"line\">DatagramPacket dp = new DatagramPacket(by,0,by.length,</span><br><span class=\"line\">InetAddress.getByName(“127.0.0.1”),10000);</span><br><span class=\"line\">ds.send(dp);</span><br><span class=\"line\">ds.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-5-4-接收端\"><a href=\"#16-5-4-接收端\" class=\"headerlink\" title=\"16.5.4 接收端\"></a>16.5.4 接收端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在接收端，要指定监听的端口。</span><br><span class=\"line\">DatagramSocket ds = new DatagramSocket(10000);</span><br><span class=\"line\">byte[] by = new byte[1024];</span><br><span class=\"line\">DatagramPacket dp = new DatagramPacket(by,by.length);</span><br><span class=\"line\">ds.receive(dp);</span><br><span class=\"line\">String str = new String(dp.getData(),0,dp.getLength());</span><br><span class=\"line\">System.out.println(str+&quot;--&quot;+dp.getAddress());</span><br><span class=\"line\">ds.close();</span><br></pre></td></tr></table></figure>\n<h1 id=\"16-6-URL编程\"><a href=\"#16-6-URL编程\" class=\"headerlink\" title=\"16.6 URL编程\"></a>16.6 URL编程</h1><h2 id=\"16-6-1-简介\"><a href=\"#16-6-1-简介\" class=\"headerlink\" title=\"16.6.1 简介\"></a>16.6.1 简介</h2><ul>\n<li>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址。通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。 </li>\n<li>URL的基本结构由5部分组成：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;</span><br><span class=\"line\">例如: http://192.168.1.100:8080/helloworld/index.jsp</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public URL (String spec)：</span><br><span class=\"line\">通过一个表示URL地址的字符串可以构造一个URL对象。</span><br><span class=\"line\">例如：URL url = new URL (&quot;http://www. atguigu.com/&quot;); </span><br><span class=\"line\"></span><br><span class=\"line\">public URL(URL context, String spec)：</span><br><span class=\"line\">通过基 URL 和相对 URL 构造一个 URL 对象。</span><br><span class=\"line\">例如：URL downloadUrl = new URL(url, “download.html&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">public URL(String protocol, String host, String file); </span><br><span class=\"line\">例如：new URL(&quot;http&quot;, &quot;www.atguigu.com&quot;, “download. html&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">public URL(String protocol, String host, int port, String file); </span><br><span class=\"line\">例如: URL gamelan = new URL(&quot;http&quot;, &quot;www.atguigu.com&quot;, 80, “download.html&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>类URL的构造方法都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</li>\n<li>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String getProtocol(  )        获取该URL的协议名</span><br><span class=\"line\">public String getHost(  )            获取该URL的主机名</span><br><span class=\"line\">public String getPort(  )            获取该URL的端口号</span><br><span class=\"line\">public String getPath(  )            获取该URL的文件路径</span><br><span class=\"line\">public String getFile(  )             获取该URL的文件名</span><br><span class=\"line\">public String getQuery(   )          获取该URL的查询名</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-6-2-代码\"><a href=\"#16-6-2-代码\" class=\"headerlink\" title=\"16.6.2 代码\"></a>16.6.2 代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL url = new URL(&quot;http://localhost:8080/examples/myTest.txt&quot;);</span><br><span class=\"line\">System.out.println(&quot;getProtocol() :&quot;+url.getProtocol());</span><br><span class=\"line\">System.out.println(&quot;getHost() :&quot;+url.getHost());</span><br><span class=\"line\">System.out.println(&quot;getPort() :&quot;+url.getPort());</span><br><span class=\"line\">System.out.println(&quot;getPath() :&quot;+url.getPath());</span><br><span class=\"line\">System.out.println(&quot;getFile() :&quot;+url.getFile());</span><br><span class=\"line\">System.out.println(&quot;getQuery() :&quot;+url.getQuery());</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-6-3-针对HTTP协议的URLConnection类\"><a href=\"#16-6-3-针对HTTP协议的URLConnection类\" class=\"headerlink\" title=\"16.6.3 针对HTTP协议的URLConnection类\"></a>16.6.3 针对HTTP协议的URLConnection类</h2><ul>\n<li>URL的方法 openStream()：能从网络上读取数据</li>\n<li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。</li>\n<li>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection 对象。如果连接过程失败，将产生IOException. </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL netchinaren = new URL (&quot;http://www.atguigu.com/index.shtml&quot;); </span><br><span class=\"line\">URLConnectonn u = netchinaren.openConnection( );</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object getContent( ) throws IOException</span><br><span class=\"line\">public int getContentLength( )</span><br><span class=\"line\">public String getContentType( )</span><br><span class=\"line\">public long getDate( )</span><br><span class=\"line\">public long getLastModified( )</span><br><span class=\"line\">public InputStream getInputStream( )throws IOException</span><br><span class=\"line\">public OutputSteram getOutputStream( )throws IOException</span><br></pre></td></tr></table></figure>\n<h2 id=\"16-6-4-小结\"><a href=\"#16-6-4-小结\" class=\"headerlink\" title=\"16.6.4 小结\"></a>16.6.4 小结</h2><ul>\n<li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li>\n<li>客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实现面向连接的会话。</li>\n<li>Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP 地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li>\n<li>类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li>\n<li>类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示 Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * T代表JavaBean类型</span><br><span class=\"line\"> * P代表主键类型</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface DAO&lt;T,P&gt;&#123;</span><br><span class=\"line\">\tboolean add(T t);</span><br><span class=\"line\">\tboolean deleteById(P id);</span><br><span class=\"line\">\tboolean update(T t);</span><br><span class=\"line\">\tT findById(P id);</span><br><span class=\"line\">\tList&lt;T&gt; getAll();</span><br><span class=\"line\">\tint getCount();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserDAOImpl implements DAO&lt;User,String&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean add(User t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean deleteById(String id) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean update(User t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic User findById(String id) &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;User&gt; getAll() &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int getCount() &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GoodsDAOImpl implements DAO&lt;Goods,Integer&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean add(Goods t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean deleteById(Integer id) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean update(Goods t) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Goods findById(Integer id) &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic List&lt;Goods&gt; getAll() &#123;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int getCount() &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class User&#123;</span><br><span class=\"line\">\tprivate String username;</span><br><span class=\"line\">\tprivate String password;</span><br><span class=\"line\">\tpublic String getUsername() &#123;</span><br><span class=\"line\">\t\treturn username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setUsername(String username) &#123;</span><br><span class=\"line\">\t\tthis.username = username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getPassword() &#123;</span><br><span class=\"line\">\t\treturn password;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setPassword(String password) &#123;</span><br><span class=\"line\">\t\tthis.password = password;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Goods&#123;</span><br><span class=\"line\">\tprivate int gid;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tpublic int getGid() &#123;</span><br><span class=\"line\">\t\treturn gid;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setGid(int gid) &#123;</span><br><span class=\"line\">\t\tthis.gid = gid;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、编写程序，在main方法中接收5个参数整数字符串；  </p>\n<ul>\n<li>创建TreeSet类型的集合（使用泛型），将5个字符串以整数形式添加到集合中；<br>增强型for循环遍历该集合，打印所有元素，并将所有元素之和打印出来。</li>\n</ul>\n<p>6、编写代码，存储丈夫与妻子，Map&lt;丈夫,妻子&gt;，并遍历输出</p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"15. JavaSE-多线程","url":"http://yoursite.com/2017/02/19/15. JavaSE-多线程/","content":"<h1 id=\"15-1-程序、进程、线程的概念\"><a href=\"#15-1-程序、进程、线程的概念\" class=\"headerlink\" title=\"15.1 程序、进程、线程的概念\"></a>15.1 程序、进程、线程的概念</h1><ul>\n<li>程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</li>\n<li><p>进程(process)是程序的一次执行过程，或是正在运行的一个程序。动态过程：有它自身的产生、存在和消亡的过程。</p>\n<ul>\n<li>如：运行中的QQ，运行中的MP3播放器</li>\n<li>程序是静态的，进程是动态的</li>\n</ul>\n</li>\n<li><p>线程(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p>\n<ul>\n<li>若一个程序可同一时间执行多个线程，就是支持多线程的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-1-1-进程与多线程\"><a href=\"#15-1-1-进程与多线程\" class=\"headerlink\" title=\"15.1.1 进程与多线程\"></a>15.1.1 进程与多线程</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154431.png\" alt></p>\n<h2 id=\"15-1-2-何时需要多线程\"><a href=\"#15-1-2-何时需要多线程\" class=\"headerlink\" title=\"15.1.2 何时需要多线程\"></a>15.1.2 何时需要多线程</h2><ul>\n<li>程序需要同时执行两个或多个任务。</li>\n<li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</li>\n<li>需要一些后台运行的程序时。</li>\n</ul>\n<h1 id=\"15-2-Java中多线程的创建和使用\"><a href=\"#15-2-Java中多线程的创建和使用\" class=\"headerlink\" title=\"15.2 Java中多线程的创建和使用\"></a>15.2 Java中多线程的创建和使用</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Sample &#123;</span><br><span class=\"line\">\tpublic void method1(String str)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void method2(String str)&#123;</span><br><span class=\"line\">\t\tmethod1(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSample  s = new Sample();</span><br><span class=\"line\">\t\ts.method2(&quot;hello!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-2-1-多线程的创建和启动\"><a href=\"#15-2-1-多线程的创建和启动\" class=\"headerlink\" title=\"15.2.1 多线程的创建和启动\"></a>15.2.1 多线程的创建和启动</h2><ul>\n<li>Java语言的JVM允许程序运行多个线程，它通过java.lang.Thread类来实现。</li>\n<li>Thread类的特性<ul>\n<li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为线程体</li>\n<li>通过该Thread对象的start()方法来调用这个线程</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"15-2-2-子线程的创建和启动过程\"><a href=\"#15-2-2-子线程的创建和启动过程\" class=\"headerlink\" title=\"15.2.2 子线程的创建和启动过程\"></a>15.2.2 子线程的创建和启动过程</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154639.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154701.png\" alt></p>\n<h2 id=\"15-2-3-Thread类\"><a href=\"#15-2-3-Thread类\" class=\"headerlink\" title=\"15.2.3 Thread类\"></a>15.2.3 Thread类</h2><ul>\n<li>构造方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread()：创建新的Thread对象</span><br><span class=\"line\">Thread(String threadname)：创建线程并指定线程实例名</span><br><span class=\"line\">Thread(Runnable target)：指定创建线程的目标对象，它实现了Runnable接口中的run方法</span><br><span class=\"line\">Thread(Runnable target, String name)：创建新的Thread对象</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建线程的两种方式\"><a href=\"#创建线程的两种方式\" class=\"headerlink\" title=\"创建线程的两种方式\"></a>创建线程的两种方式</h3><h4 id=\"一-继承Thread类\"><a href=\"#一-继承Thread类\" class=\"headerlink\" title=\"一 继承Thread类\"></a>一 继承Thread类</h4><p> 1)  定义子类继承Thread类。<br> 2)  子类中重写Thread类中的run方法。<br> 3)  创建Thread子类对象，即创建了线程对象。<br> 4)  调用线程对象start方法：启动线程，调用run方法  </p>\n<h4 id=\"二-实现Runnable接口\"><a href=\"#二-实现Runnable接口\" class=\"headerlink\" title=\"二 实现Runnable接口\"></a>二 实现Runnable接口</h4><p>1）定义子类，实现Runnable接口。<br>2）子类中重写Runnable接口中的run方法。<br>3）通过Thread类含参构造器创建线程对象。<br>4）将Runnable接口的子类对象作为实际参数传递给Thread类的构造方法中。<br>5）调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。  </p>\n<h2 id=\"15-2-4-继承方式和实现方式的联系与区别\"><a href=\"#15-2-4-继承方式和实现方式的联系与区别\" class=\"headerlink\" title=\"15.2.4 继承方式和实现方式的联系与区别\"></a>15.2.4 继承方式和实现方式的联系与区别</h2><p>【区别】  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）继承Thread:       线程代码存放Thread子类run方法中。</span><br><span class=\"line\">2）实现Runnable：线程代码存在接口的子类的run方法</span><br></pre></td></tr></table></figure>\n<p>。<br>【实现方法的好处】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）避免了单继承的局限性</span><br><span class=\"line\">2）多个线程可以共享同一个接口子类的对象，非常适合多个相同线程来处理同一份资源。</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-2-6-Thread类的有关方法-1\"><a href=\"#15-2-6-Thread类的有关方法-1\" class=\"headerlink\" title=\"15.2.6 Thread类的有关方法(1)\"></a>15.2.6 Thread类的有关方法(1)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   void start():  启动线程，并执行对象的run()方法</span><br><span class=\"line\">run():  线程在被调度时执行的操作</span><br><span class=\"line\">String getName():  返回线程的名称</span><br><span class=\"line\">void setName(String name):设置该线程名称</span><br><span class=\"line\">static currentThread(): 返回当前线程</span><br></pre></td></tr></table></figure>\n<p>线程的调度</p>\n<ul>\n<li>调度策略<br>时间片</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155028.png\" alt><br>抢占式：高优先级的线程抢占CPU </p>\n<ul>\n<li>Java的调度方法</li>\n</ul>\n<blockquote>\n<ul>\n<li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</li>\n<li>对高优先级，使用优先调度的抢占式策略</li>\n</ul>\n</blockquote>\n<p>线程的优先级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   MAX_PRIORITY（10）;    </span><br><span class=\"line\">MIN _PRIORITY （1）;  </span><br><span class=\"line\">NORM_PRIORITY （5）;</span><br><span class=\"line\">涉及的方法：</span><br><span class=\"line\">getPriority() ：返回线程优先值 </span><br><span class=\"line\">setPriority(int newPriority) ：改变线程的优先级</span><br><span class=\"line\">线程创建时继承父线程的优先级</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-2-7-Thread类的有关方法-2\"><a href=\"#15-2-7-Thread类的有关方法-2\" class=\"headerlink\" title=\"15.2.7 Thread类的有关方法(2)\"></a>15.2.7 Thread类的有关方法(2)</h2><p>static  void  yield()：线程让步</p>\n<blockquote>\n<ul>\n<li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</li>\n<li>若队列中没有同优先级的线程，忽略此方法</li>\n</ul>\n</blockquote>\n<p>join() ：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止   </p>\n<blockquote>\n<ul>\n<li>低优先级的线程也可以获得执行 </li>\n</ul>\n</blockquote>\n<p>static  void  sleep(long millis)：(指定时间:毫秒)</p>\n<blockquote>\n<ul>\n<li>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</li>\n<li>抛出InterruptedException异常</li>\n</ul>\n</blockquote>\n<p>stop(): 强制线程生命期结束<br>boolean isAlive()：返回boolean，判断线程是否还活着</p>\n<h2 id=\"15-2-8-使用多线程的优点\"><a href=\"#15-2-8-使用多线程的优点\" class=\"headerlink\" title=\"15.2.8 使用多线程的优点\"></a>15.2.8 使用多线程的优点</h2><p>背景：只使用单个线程完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？<br>多线程程序的优点：</p>\n<ol>\n<li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。  </li>\n<li>提高计算机系统CPU的利用率  </li>\n<li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改  </li>\n</ol>\n<h1 id=\"15-3-线程的生命周期\"><a href=\"#15-3-线程的生命周期\" class=\"headerlink\" title=\"15.3 线程的生命周期\"></a>15.3 线程的生命周期</h1><p>JDK中用Thread.State枚举表示了线程的几种状态</p>\n<ul>\n<li>要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态：<ul>\n<li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>\n<li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件</li>\n<li>运行：当就绪的线程被调度并获得处理器资源时,便进入运行状态， run()方法定义了线程的操作和功能</li>\n<li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</li>\n<li>死亡：线程完成了它的全部工作或线程被提前强制性地中止   </li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155642.png\" alt></p>\n<h1 id=\"15-4-线程的同步\"><a href=\"#15-4-线程的同步\" class=\"headerlink\" title=\"15.4 线程的同步\"></a>15.4 线程的同步</h1><p>问题的提出</p>\n<ul>\n<li>多个线程执行的不确定性引起执行结果的不稳定</li>\n<li>多个线程对账本的共享，会造成操作的不完整性，会破坏数据。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155722.png\" alt></p>\n<h2 id=\"15-4-1例-题\"><a href=\"#15-4-1例-题\" class=\"headerlink\" title=\"15.4.1例  题\"></a>15.4.1例  题</h2><p>模拟火车站售票程序，开启三个窗口售票。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Ticket implements Runnable &#123;</span><br><span class=\"line\">\tprivate int tick = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run()&#123;</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tif (tick &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;售出车票，tick号为：&quot; + tick--);</span><br><span class=\"line\">\t\t\t&#125; else</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TicketDemo &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tTicket t = new Ticket();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tThread t1 = new Thread(t);</span><br><span class=\"line\">\t\tThread t2 = new Thread(t);</span><br><span class=\"line\">\t\tThread t3 = new Thread(t);</span><br><span class=\"line\">\t\tt1.setName(&quot;t1窗口&quot;);</span><br><span class=\"line\">\t\tt2.setName(&quot;t2窗口&quot;);</span><br><span class=\"line\">\t\tt3.setName(&quot;t3窗口&quot;);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t\tt3.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155810.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603155831.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int tick = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tif (tick &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.sleep(10);</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;售出车票，tick号为：&quot; + tick--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>1）    多线程出现了安全问题<br>2）    问题的原因：<br>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。<br>3）    解决办法<br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。</p>\n<h2 id=\"15-4-2-Synchronized的使用方法\"><a href=\"#15-4-2-Synchronized的使用方法\" class=\"headerlink\" title=\"15.4.2 Synchronized的使用方法\"></a>15.4.2 Synchronized的使用方法</h2><ul>\n<li>Java对于多线程的安全问题提供了专业的解决方式： 同步代码块</li>\n</ul>\n<p>1）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synchronized (对象)&#123;</span><br><span class=\"line\">          // 需要被同步的代码；</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>2）    synchronized还可以放在方法声明中，表示整个方法<br>      为同步方法。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public synchronized void show (String name)&#123; </span><br><span class=\"line\">            ….</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603160032.png\" alt></p>\n<h2 id=\"15-4-3-同步锁-Lock\"><a href=\"#15-4-3-同步锁-Lock\" class=\"headerlink\" title=\"15.4.3 同步锁(Lock)\"></a>15.4.3 同步锁(Lock)</h2><ul>\n<li>从Java 5开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</li>\n<li>Lock是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</li>\n<li>在实现线程安全的控制中，比较常用的是ReentrantLock(可重入锁)，可以显式加锁、释放锁。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\">\tprivate final ReentrantLock lock = new ReenTrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void m() &#123;</span><br><span class=\"line\">\t\tlock.lock();</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// 保证线程安全的代码;</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\tlock.unlock();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-4-4-互斥锁\"><a href=\"#15-4-4-互斥锁\" class=\"headerlink\" title=\"15.4.4 互斥锁\"></a>15.4.4 互斥锁</h2><ul>\n<li>在Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。<ul>\n<li>每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</li>\n<li>关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由一个线程访问。</li>\n<li>同步的局限性：导致程序的执行效率要降低</li>\n<li>同步方法（非静态的）的锁为this。</li>\n<li>同步方法（静态的）的锁为当前类本身。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton &#123;</span><br><span class=\"line\">\tprivate static Singleton instance = null;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate Singleton() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static Singleton getInstance() &#123;</span><br><span class=\"line\">\t\tif (instance == null) &#123;</span><br><span class=\"line\">\t\t\tsynchronized (Singleton.class) &#123;</span><br><span class=\"line\">\t\t\t\tif (instance == null) &#123;</span><br><span class=\"line\">\t\t\t\t\tinstance = new Singleton();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestSingleton &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSingleton s1 = Singleton.getInstance();</span><br><span class=\"line\">\t\tSingleton s2 = Singleton.getInstance();</span><br><span class=\"line\">\t\tSystem.out.println(s1 == s2);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"15-4-6-小结：释放锁的操作\"><a href=\"#15-4-6-小结：释放锁的操作\" class=\"headerlink\" title=\"15.4.6 小结：释放锁的操作\"></a>15.4.6 小结：释放锁的操作</h2><ul>\n<li>当前线程的同步方法、同步代码块执行结束</li>\n<li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行。</li>\n<li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</li>\n<li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁。</li>\n</ul>\n<h2 id=\"15-4-7-线程的死锁问题\"><a href=\"#15-4-7-线程的死锁问题\" class=\"headerlink\" title=\"15.4.7 线程的死锁问题\"></a>15.4.7 线程的死锁问题</h2><ul>\n<li><p>死锁</p>\n<ul>\n<li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li>\n</ul>\n</li>\n<li><p>解决方法</p>\n<ul>\n<li>专门的算法、原则</li>\n<li>尽量减少同步资源的定义</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestDeadLock &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tfinal StringBuffer s1 = new StringBuffer();</span><br><span class=\"line\">\t\tfinal StringBuffer s2 = new StringBuffer();</span><br><span class=\"line\">\t\tnew Thread() &#123;</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tsynchronized (s1) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.append(&quot;A&quot;);</span><br><span class=\"line\">\t\t\t\t\tsynchronized (s2) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ts2.append(&quot;B&quot;);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s1);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s2);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.start();</span><br><span class=\"line\">\t\tnew Thread() &#123;</span><br><span class=\"line\">\t\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\t\tsynchronized (s2) &#123;</span><br><span class=\"line\">\t\t\t\t\ts2.append(&quot;C&quot;);</span><br><span class=\"line\">\t\t\t\t\tsynchronized (s1) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ts1.append(&quot;D&quot;);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s2);</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.print(s1);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-5-线程的通信\"><a href=\"#15-5-线程的通信\" class=\"headerlink\" title=\"15.5 线程的通信\"></a>15.5 线程的通信</h1><ul>\n<li><p>wait() 与 notify() 和 notifyAll()</p>\n<ul>\n<li>wait()：令当前线程挂起并放弃CPU、同步资源，使别的线程可访问并修改共享资源，而当前线程排队等候再次对资源的访问</li>\n<li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</li>\n<li>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待.</li>\n</ul>\n</li>\n<li><p>Java.lang.Object提供的这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报java.lang.IllegalMonitorStateException异常</p>\n</li>\n</ul>\n<h2 id=\"15-5-1-wait-方法\"><a href=\"#15-5-1-wait-方法\" class=\"headerlink\" title=\"15.5.1 wait() 方法\"></a>15.5.1 wait() 方法</h2><ul>\n<li>在当前线程中调用方法：  对象名.wait()</li>\n<li>使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify (或notifyAll) 为止。</li>\n<li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li>\n<li>调用此方法后，当前线程将释放对象监控权  ，然后进入等待</li>\n<li>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</li>\n</ul>\n<h2 id=\"15-5-2-notify-notifyAll\"><a href=\"#15-5-2-notify-notifyAll\" class=\"headerlink\" title=\"15.5.2 notify()/notifyAll()\"></a>15.5.2 notify()/notifyAll()</h2><ul>\n<li>在当前线程中调用方法：  对象名.notify()</li>\n<li>功能：唤醒等待该对象监控权的一个线程。</li>\n<li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li>\n</ul>\n<h2 id=\"15-5-3-例-题\"><a href=\"#15-5-3-例-题\" class=\"headerlink\" title=\"15.5.3 例 题\"></a>15.5.3 例 题</h2><p>使用两个线程打印 1-100. 线程1, 线程2 交替打印</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Communication implements Runnable &#123;</span><br><span class=\"line\">\tint i = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\tsynchronized (this) &#123;</span><br><span class=\"line\">\t\t\t\tnotify();</span><br><span class=\"line\">\t\t\t\tif (i &lt;= 100) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;:&quot; + i++);</span><br><span class=\"line\">\t\t\t\t&#125; else</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\twait();</span><br><span class=\"line\">\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经典例题：生产者/消费者问题</p>\n<ul>\n<li><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p>\n</li>\n<li><p>这里可能出现两个问题：</p>\n<ul>\n<li>生产者比消费者快时，消费者会漏掉一些数据没有取到。</li>\n<li>消费者比生产者快时，消费者会取相同的数据。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestProduct &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tClerk clerk = new Clerk();</span><br><span class=\"line\">\t\tThread productorThread = new Thread(new Productor(clerk));</span><br><span class=\"line\">\t\tThread consumerThread = new Thread(new Consumer(clerk));</span><br><span class=\"line\">\t\tproductorThread.start();</span><br><span class=\"line\">\t\tconsumerThread.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Clerk &#123; // 售货员</span><br><span class=\"line\">\tprivate int product = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic synchronized void addProduct() &#123;</span><br><span class=\"line\">\t\tif (product &gt;= 20) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tproduct++;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;生产者生产了第&quot; + product + &quot;个产品&quot;);</span><br><span class=\"line\">\t\t\tnotifyAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic synchronized void getProduct() &#123;</span><br><span class=\"line\">\t\tif (this.product &lt;= 0) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\twait();</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;消费者取走了第&quot; + product + &quot;个产品&quot;);</span><br><span class=\"line\">\t\t\tproduct--;</span><br><span class=\"line\">\t\t\tnotifyAll();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Productor implements Runnable &#123; // 生产者</span><br><span class=\"line\">\tClerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Productor(Clerk clerk) &#123;</span><br><span class=\"line\">\t\tthis.clerk = clerk;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;生产者开始生产产品&quot;);</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep((int) Math.random() * 1000);</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclerk.addProduct();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Consumer implements Runnable &#123; // 消费者</span><br><span class=\"line\">\tClerk clerk;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Consumer(Clerk clerk) &#123;</span><br><span class=\"line\">\t\tthis.clerk = clerk;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;消费者开始取走产品&quot;);</span><br><span class=\"line\">\t\twhile (true) &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep((int) Math.random() * 1000);</span><br><span class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclerk.getProduct();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>15.5.4 练习1<br>模拟银行取钱的问题<br>1.定义一个Account类<br>1）该Account类封装了账户编号（String）和余额（double）两个属性<br>2）设置相应属性的getter和setter方法<br>3）提供无参和有两个参数的构造器<br>4）系统根据账号判断与用户是否匹配，需提供hashCode()和equals()方法的重写<br>2.提供一个取钱的线程类<br>1）提供了Account类的account属性和double类的取款额的属性<br>2）提供带线程名的构造方法<br>3）run()方法中提供取钱的操作<br>3.在主类中创建线程进行测试。考虑线程安全问题。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Account &#123;</span><br><span class=\"line\">\tprivate String accountId;</span><br><span class=\"line\">\tprivate double balance;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Account() &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Account(String accountId, double balance) &#123;</span><br><span class=\"line\">\t\tthis.accountId = accountId;</span><br><span class=\"line\">\t\tthis.balance = balance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getAccountId() &#123;</span><br><span class=\"line\">\t\treturn accountId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setAccountId(String accountId) &#123;</span><br><span class=\"line\">\t\tthis.accountId = accountId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic double getBalance() &#123;</span><br><span class=\"line\">\t\treturn balance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setBalance(double balance) &#123;</span><br><span class=\"line\">\t\tthis.balance = balance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;Account [accountId=&quot; + accountId + &quot;, balance=&quot; + balance + &quot;]&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int hashCode() &#123;</span><br><span class=\"line\">\t\tfinal int prime = 31;</span><br><span class=\"line\">\t\tint result = 1;</span><br><span class=\"line\">\t\tresult = prime * result + ((accountId == null) ? 0 : accountId.hashCode());</span><br><span class=\"line\">\t\tlong temp;</span><br><span class=\"line\">\t\ttemp = Double.doubleToLongBits(balance);</span><br><span class=\"line\">\t\tresult = prime * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\tif (this == obj)</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\tif (obj == null)</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\tif (getClass() != obj.getClass())</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\tAccount other = (Account) obj;</span><br><span class=\"line\">\t\tif (accountId == null) &#123;</span><br><span class=\"line\">\t\t\tif (other.accountId != null)</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125; else if (!accountId.equals(other.accountId))</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\tif (Double.doubleToLongBits(balance) != Double.doubleToLongBits(other.balance))</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class WithDrawThread extends Thread &#123;</span><br><span class=\"line\">\t\tAccount account;</span><br><span class=\"line\">\t\t// 要取款的额度</span><br><span class=\"line\">\t\tdouble withDraw;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic WithDrawThread(String name, Account account, double amt) &#123;</span><br><span class=\"line\">\t\t\tsuper(name);</span><br><span class=\"line\">\t\t\tthis.account = account;</span><br><span class=\"line\">\t\t\tthis.withDraw = amt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tsynchronized (account) &#123;</span><br><span class=\"line\">\t\t\t\tif (account.getBalance() &gt; withDraw) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;:取款成功，取现的金额为：&quot; + withDraw);</span><br><span class=\"line\">\t\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\t\tThread.sleep(50);</span><br><span class=\"line\">\t\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\taccount.setBalance(account.getBalance() - withDraw);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;取现额度超过账户余额，取款失败&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;现在账户的余额为：&quot; + account.getBalance());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class WithDrawThread extends Thread &#123;</span><br><span class=\"line\">\t\tAccount account;</span><br><span class=\"line\">\t\t// 要取款的额度</span><br><span class=\"line\">\t\tdouble withDraw;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic WithDrawThread(String name, Account account, double amt) &#123;</span><br><span class=\"line\">\t\t\tsuper(name);</span><br><span class=\"line\">\t\t\tthis.account = account;</span><br><span class=\"line\">\t\t\tthis.withDraw = amt;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void run() &#123;</span><br><span class=\"line\">\t\t\tsynchronized (account) &#123;</span><br><span class=\"line\">\t\t\t\tif (account.getBalance() &gt; withDraw) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(Thread.currentThread().getName() + &quot;:取款成功，取现的金额为：&quot; + withDraw);</span><br><span class=\"line\">\t\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t\t\tThread.sleep(50);</span><br><span class=\"line\">\t\t\t\t\t&#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\taccount.setBalance(account.getBalance() - withDraw);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;取现额度超过账户余额，取款失败&quot;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;现在账户的余额为：&quot; + account.getBalance());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;public class TestWithDrawThread &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tAccount account = new Account(&quot;1234567&quot;, 10000);</span><br><span class=\"line\">\t\tThread t1 = new WithDrawThread(&quot;小明&quot;, account, 8000);</span><br><span class=\"line\">\t\tThread t2 = new WithDrawThread(&quot;小明&apos;s wife&quot;, account, 2800);</span><br><span class=\"line\">\t\tt1.start();</span><br><span class=\"line\">\t\tt2.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"15-6-线程池\"><a href=\"#15-6-线程池\" class=\"headerlink\" title=\"15.6 线程池\"></a>15.6 线程池</h1><ul>\n<li>系统启动一个新线程的成本是比较高的，因为它涉及与os交互。这种情况下，系统启动时即创建大量空闲的线程，就可以很好地提高性能，尤其是当程序需要创建大量生存期很短暂的线程时。</li>\n<li>除此之外，使用线程池可以有效地控制系统中并发线程的数量。避免因并发创建的线程过多，导致系统性能下降，JVM崩溃。</li>\n<li>Java 5以前，需要手动创建自己的线程池；Java 5开始，新增了Executors工厂类产生线程池。<br>使用线程池执行线程任务的步骤如下：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.调用Executors 类的静态方法newFixedThreadPool(int nThreads)，</span><br><span class=\"line\">    创建一个可重用的、具有固定线程数的线程池ExecutorService对象  </span><br><span class=\"line\">2.创建Runnable实例，作为线程执行任务  </span><br><span class=\"line\">3.调用ExecutorService对象的submit()提交Runnable实例  </span><br><span class=\"line\">4.调用ExecutorService对象的shutDown()方法关闭线程池。</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"早起一小时，你就赢了","url":"http://yoursite.com/2017/02/18/鸡汤-早起一小时，你就赢了/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609010712.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;有位前辈跟我算过一笔账：如果每天早起一小时，一个月就比别人多了30个小时。这30个小时，你可以看完几本书，可以在一门新技能上初入门槛……人与人的差距就是这样逐渐拉开的。</p>\n<p>&emsp;&emsp;这笔账算得我热血沸腾，二话不说，当即着手去实施。</p>\n<p>&emsp;&emsp;可是这激情来得快褪去得也快，每天早上被闹钟吵醒的电光石火之间，就为自己找了无数的理由和借口开脱：睡眠不足影响一天的效率；学习不差这一会儿，先再补个觉；明天一定把今天欠下的补回来……</p>\n<p>&emsp;&emsp;等心满意足地睡过去后，又陷入懊悔自责中：“真是没用，自己的征途是星辰大海，怎么连早起都做不到。”</p>\n<blockquote>\n<ul>\n<li>有多少人如我一样，无数次地卯足劲儿想要早起，又无数次地折戟沉沙。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;没有目标感，是最大的拦路虎。</p>\n<p>&emsp;&emsp;我曾就早起这件事请教过一位学霸朋友。这位朋友笑着跟我说，可能少了一种非达到不可的渴望。倘若你真想练成人鱼线，倘若你从心底里想变优秀……也许闹钟还没响，你自己就已经自发地从床上跳起来了。</p>\n<p>&emsp;&emsp;我有点明白朋友的意思了。很多人没法早起，是因为还没有明确心中想要的。</p>\n<p>&emsp;&emsp;这是多少人的经历：想早起晨读英语，可好像也没有达到非学不可的地步；想爬起来看书，还没翻几页，又陷入自我怀疑中，看这些书是为了什么。固然看书、背英语都是有利的事情，但如果心中抱着可有可无的念头，自然很难坚持下去。反之，如果自己有一个坚定的目标，即使这目标万里之遥，也必逐之。</p>\n<p>&emsp;&emsp;就好像“为什么唐僧可以取得真经”这样的问题，在我们不约而同地回答说“因为有孙悟空”时，老师却笑着说：“从踏出长安那一刻，他就知道他的目标在西天，矢志不移。这样的人不成功谁成功？”</p>\n<p>&emsp;&emsp;有人年华虚度，空有一身疲倦，不是不够努力，而是在迈向前方时尽是踌躇和茫然。所以在谈自律早起时，不如先想一下为何要早起，先想一下那个想穷其一生都要到达的地方。倘若心中了然，自然就有了早起的动力，有了努力的方向。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;一寸光阴一寸金。当我们把一天时间摊开来看，所谓的二十四小时叫睡觉耗去三分之一，叫工作、学业耗去三分之一，叫吃饭、应酬、琐事再耗去一些。你最后发现，可供自己自由成长的时间所剩无几。</p>\n<p>&emsp;&emsp;曾看到这样一个故事。</p>\n<p>&emsp;&emsp;一大早，徒弟打着哈欠跟师父抱怨：“师父你说，怎么感觉每天蹲桩扎马步没啥用？”师傅反问道：“假如万里之外有你喜欢的姑娘等着你，你可以一口气跑到她跟前吗？”“当然不能，会累死在半路上。”</p>\n<p>&emsp;&emsp;师父说：“这不就对了！每天走一里路的比站在原地不动的走得更前面，每天走十里路的又比只走一里路的更能接近风景。但无论你走几里路，只要在路上，总会到达。最怕的就是搁在原地一动不动，却感叹努力没用。”</p>\n<blockquote>\n<ul>\n<li>日拱一卒无有尽，功不唐捐终入海。没有量的积累又怎能求质变，凡成大事者都是一步一个脚印走出来的。</li>\n</ul>\n</blockquote>\n<p>&emsp;&emsp;看到朋友利用早起那几十分钟看了好些书；看到有人早起晨跑，硬生生减了10斤；耳闻某某持之以恒地早起，啃下了一门外语……我才恍然明白，人生弯道超车往往就是这样完成的。</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>&emsp;&emsp;林旭从我认识他的时候，就保持着早起的习惯。大一早起看书，把开学时列的书单一本一本看完了；大二早起跑步，一开始跑一圈就气喘吁吁，但期末体育考试却拿了满分；大三早起去学日语，最后竟然也入门了。</p>\n<p>&emsp;&emsp;现在他工作了，仍然雷打不动地坚持早起。他对我说：“之所以喜欢早起，一个是早上的时间拉长了，另外一个就是觉得这一天没白过，又赢了别人一步。”</p>\n<p>&emsp;&emsp;大抵就是这样，想要得到更多，总要比别人付出更多。</p>\n<p>&emsp;&emsp;其实，“早起一小时”的本质就是每天坚持腾出一段让自己学习的时间。毕竟没有点滴的酝酿，就无法汇聚江海。</p>\n<p>&emsp;&emsp;有人可能会问：“一直坚持，但如果坚持五年后还没成功呢？”</p>\n<p>&emsp;&emsp;有一个回答让我印象深刻：没事呀，你离你的梦想又缩短了五年。生活中，虽所期不一定能所成，但我们应该明白，每向前挪一步都足以让我们满心欢喜。</p>\n<blockquote>\n<ul>\n<li>人生就是一座山峰，我们都渴望立于山巅一览众山小，但有人年少成名，有人大器晚成，每个人都有自己的人生节奏。</li>\n</ul>\n</blockquote>\n<p>&emsp;&emsp;但无论如何，只要全力以赴，必然希望常在。</p>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"14. JavaSE-Java反射机制","url":"http://yoursite.com/2017/02/16/14. JavaSE-Java反射机制/","content":"<h1 id=\"14-1-Java反射机制概述\"><a href=\"#14-1-Java反射机制概述\" class=\"headerlink\" title=\"14.1 Java反射机制概述\"></a>14.1 Java反射机制概述</h1><ul>\n<li>Java Reflection<br>   Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</li>\n</ul>\n<ul>\n<li><p>Java反射机制提供的功能</p>\n<ul>\n<li>在运行时判断任意一个对象所属的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时判断任意一个类所具有的成员变量和方法</li>\n<li>在运行时调用任意一个对象的成员变量和方法</li>\n<li>生成动态代理</li>\n</ul>\n</li>\n<li><p>反射相关的主要API：</p>\n<ul>\n<li>java.lang.Class:代表一个类</li>\n<li>java.lang.reflect.Method:代表类的方法</li>\n<li>java.lang.reflect.Field:代表类的成员变量</li>\n<li>java.lang.reflect.Constructor:代表类的构造方法</li>\n<li>。。。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"14-2-理解Class类并获取Class的实例\"><a href=\"#14-2-理解Class类并获取Class的实例\" class=\"headerlink\" title=\"14.2 理解Class类并获取Class的实例\"></a>14.2 理解Class类并获取Class的实例</h1><h3 id=\"14-2-1-Class-类\"><a href=\"#14-2-1-Class-类\" class=\"headerlink\" title=\"14.2.1 Class 类\"></a>14.2.1 Class 类</h3><p>在Object类中定义了以下的方法，此方法将被所有子类继承：<br>●  public final Class getClass()<br>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。  </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604003545.png\" alt></p>\n<ul>\n<li>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个类的有关信息。</li>\n<li>Class本身也是一个类</li>\n<li>Class 对象只能由系统建立对象</li>\n<li>一个类在 JVM 中只会有一个Class实例 </li>\n<li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li>\n<li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li>\n<li>通过Class可以完整地得到一个类中的完整结构 </li>\n</ul>\n<h2 id=\"14-2-2-Class类的常用方法\"><a href=\"#14-2-2-Class类的常用方法\" class=\"headerlink\" title=\"14.2.2 Class类的常用方法\"></a>14.2.2 Class类的常用方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151527.png\" alt></p>\n<h2 id=\"14-2-3\"><a href=\"#14-2-3\" class=\"headerlink\" title=\"14.2.3\"></a>14.2.3</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">•\tString str = &quot;test4.Person&quot;;</span><br><span class=\"line\">•\tClass clazz = Class.forName(str);</span><br><span class=\"line\">•\tObject obj = clazz.newInstance();</span><br><span class=\"line\">•\tField field = clazz.getField(&quot;name&quot;);</span><br><span class=\"line\">•\tfield.set(obj, &quot;Peter&quot;);</span><br><span class=\"line\">•\tObject obj2 = field.get(obj);</span><br><span class=\"line\">•\tSystem.out.println(obj2);</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-2-4-实例化Class类对象-四种方法\"><a href=\"#14-2-4-实例化Class类对象-四种方法\" class=\"headerlink\" title=\"14.2.4 实例化Class类对象(四种方法)\"></a>14.2.4 实例化Class类对象(四种方法)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）前提：若已知具体的类，通过类的class属性获取，该方法 </span><br><span class=\"line\">                    最为安全可靠，程序性能最高</span><br><span class=\"line\">       实例：Class clazz = String.class;</span><br><span class=\"line\">2）前提：已知某个类的实例，调用该实例的getClass()方法获</span><br><span class=\"line\">                    取Class对象</span><br><span class=\"line\">       实例：Class clazz = “www.atguigu.com”.getClass();</span><br><span class=\"line\">3）前提：已知一个类的全类名，且该类在类路径下，可通过</span><br><span class=\"line\">       Class类的静态方法forName()获取，可能抛出ClassNotFoundException</span><br><span class=\"line\">       实例：Class clazz = Class.forName(“java.lang.String”);</span><br><span class=\"line\">4）其他方式(不做要求)</span><br><span class=\"line\">ClassLoader cl = this.getClass().getClassLoader();</span><br><span class=\"line\">Class clazz4 = cl.loadClass(“类的全类名”);</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-3-类的加载与ClassLoader的理解\"><a href=\"#14-3-类的加载与ClassLoader的理解\" class=\"headerlink\" title=\"14.3 类的加载与ClassLoader的理解\"></a>14.3 类的加载与ClassLoader的理解</h1><h2 id=\"14-3-1-了解：类的加载过程\"><a href=\"#14-3-1-了解：类的加载过程\" class=\"headerlink\" title=\"14.3.1 了解：类的加载过程\"></a>14.3.1 了解：类的加载过程</h2><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151722.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151758.png\" alt></p>\n<h2 id=\"14-3-2-了解：ClassLoader\"><a href=\"#14-3-2-了解：ClassLoader\" class=\"headerlink\" title=\"14.3.2 了解：ClassLoader\"></a>14.3.2 了解：ClassLoader</h2><p>类加载器是用来把类(class)装载进内存的。JVM 规范定义了两种类型的类加载器：启动类加载器(bootstrap)和用户自定义加载器(user-defined class loader)。 JVM在运行时会产生3个类加载器组成的初始化加载器层次结构 ，如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603151830.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">•\t//1.获取一个系统类加载器</span><br><span class=\"line\">•\tClassLoader classloader = ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//2.获取系统类加载器的父类加载器，即扩展类加载器</span><br><span class=\"line\">•\tclassloader = classloader.getParent();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//3.获取扩展类加载器的父类加载器，即引导类加载器</span><br><span class=\"line\">•\tclassloader = classloader.getParent();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//4.测试当前类由哪个类加载器进行加载</span><br><span class=\"line\">•\tclassloader = </span><br><span class=\"line\">•\tClass.forName(&quot;exer2.ClassloaderDemo&quot;).getClassLoader();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//5.测试JDK提供的Object类由哪个类加载器加载</span><br><span class=\"line\">•\tclassloader = </span><br><span class=\"line\">•\tClass.forName(&quot;java.lang.Object&quot;).getClassLoader();</span><br><span class=\"line\">•\tSystem.out.println(classloader);</span><br><span class=\"line\">•\t//*6.关于类加载器的一个主要方法：</span><br><span class=\"line\">    getResourceAsStream(String str):获取类路径下的指定文件的输入流</span><br><span class=\"line\">•\tInputStream in = null;</span><br><span class=\"line\">•\tin = this.getClass().getClassLoader().getResourceAsStream(&quot;exer2\\\\test.properties&quot;);</span><br><span class=\"line\">•\tSystem.out.println(in);</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-4-创建运行时类的对象\"><a href=\"#14-4-创建运行时类的对象\" class=\"headerlink\" title=\"14.4 创建运行时类的对象\"></a>14.4 创建运行时类的对象</h1><p>[问题] 有了Class对象，能做什么？</p>\n<p>创建类的对象：调用Class对象的newInstance()方法<br>要  求：  </p>\n<p>1）类必须有一个无参数的构造器。<br>2）类的构造器的访问权限需要足够。  </p>\n<p>难道没有无参的构造器就不能创建对象了吗？<br>不是！只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。步骤如下：<br>1）通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器<br>2）向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。<br>3）在Constructor类中存在一个方法:<br>     Public T newInstance(Object … initargs);<br>以上是反射机制用的最多的地方</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.根据全类名获取对应的Class对象</span><br><span class=\"line\">String name = “atguigu.java.Person&quot;;</span><br><span class=\"line\">Class clazz = null;</span><br><span class=\"line\">clazz = Class.forName(name);</span><br><span class=\"line\">//2.调用指定参数结构的构造器，生成Constructor的实例</span><br><span class=\"line\">Constructor con = clazz.getConstructor(String.class,Integer.class);</span><br><span class=\"line\">//3.通过Constructor的实例创建对应类的对象，并初始化类属性</span><br><span class=\"line\">Person p2 = (Person) \tcon.newInstance(&quot;Peter&quot;,20);</span><br><span class=\"line\">System.out.println(p2);</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-5-获取运行时类的完整结构\"><a href=\"#14-5-获取运行时类的完整结构\" class=\"headerlink\" title=\"14.5 获取运行时类的完整结构\"></a>14.5 获取运行时类的完整结构</h1><h2 id=\"14-5-1-通过反射获取运行时类的完整结构\"><a href=\"#14-5-1-通过反射获取运行时类的完整结构\" class=\"headerlink\" title=\"14.5.1 通过反射获取运行时类的完整结构\"></a>14.5.1 通过反射获取运行时类的完整结构</h2><p>Field、Method、Constructor、Superclass、Interface、Annotation</p>\n<ul>\n<li>实现的全部接口</li>\n<li>所继承的父类</li>\n<li>全部的构造器</li>\n<li>全部的方法</li>\n<li>全部的Field</li>\n</ul>\n<h2 id=\"14-5-2-通过反射获取运行时类的完整结构\"><a href=\"#14-5-2-通过反射获取运行时类的完整结构\" class=\"headerlink\" title=\"14.5.2 通过反射获取运行时类的完整结构\"></a>14.5.2 通过反射获取运行时类的完整结构</h2><p>使用反射可以取得：<br>1 实现的全部接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Class&lt;?&gt;[] getInterfaces()     </span><br><span class=\"line\">确定此对象所表示的类或接口实现的接口。</span><br></pre></td></tr></table></figure>\n<p>2 所继承的父类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Class&lt;? Super T&gt; getSuperclass()</span><br><span class=\"line\">返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的 Class。</span><br></pre></td></tr></table></figure>\n<p>3 全部的构造器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Constructor&lt;T&gt;[] getConstructors()</span><br><span class=\"line\">返回此 Class 对象所表示的类的所有public构造方法。</span><br><span class=\"line\">public Constructor&lt;T&gt;[] getDeclaredConstructors()</span><br><span class=\"line\">返回此 Class 对象表示的类声明的所有构造方法。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Constructor类中：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   取得修饰符: public int getModifiers();</span><br><span class=\"line\">取得方法名称: public String getName();</span><br><span class=\"line\">取得参数的类型：public Class&lt;?&gt;[] getParameterTypes();</span><br></pre></td></tr></table></figure>\n<p>4 全部的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public Method[] getDeclaredMethods()</span><br><span class=\"line\">返回此Class对象所表示的类或接口的全部方法</span><br><span class=\"line\">\tpublic Method[] getMethods()  </span><br><span class=\"line\">返回此Class对象所表示的类或接口的public的方法</span><br></pre></td></tr></table></figure>\n<p>Method类中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   public Class&lt;?&gt; getReturnType()取得全部的返回值</span><br><span class=\"line\">public Class&lt;?&gt;[] getParameterTypes()取得全部的参数</span><br><span class=\"line\">public int getModifiers()取得修饰符</span><br><span class=\"line\">public Class&lt;?&gt;[] getExceptionTypes()取得异常信息</span><br></pre></td></tr></table></figure>\n<p>5.全部的Field</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Field[] getFields() </span><br><span class=\"line\">\t返回此Class对象所表示的类或接口的public的Field。</span><br><span class=\"line\">public Field[] getDeclaredFields() </span><br><span class=\"line\">\t返回此Class对象所表示的类或接口的全部Field。</span><br></pre></td></tr></table></figure>\n<p>Field方法中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int getModifiers() </span><br><span class=\"line\">\t以整数形式返回此Field的修饰符</span><br><span class=\"line\">public Class&lt;?&gt; getType()</span><br><span class=\"line\">    得到Field的属性类型</span><br><span class=\"line\">public String getName() </span><br><span class=\"line\">\t返回Field的名称。</span><br></pre></td></tr></table></figure></p>\n<ol start=\"6\">\n<li>Annotation相关</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get Annotation(Class&lt;T&gt; annotationClass) </span><br><span class=\"line\">getDeclaredAnnotations()</span><br></pre></td></tr></table></figure>\n<p>7.泛型相关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取父类泛型类型：Type getGenericSuperclass()</span><br><span class=\"line\">泛型类型：ParameterizedType</span><br><span class=\"line\">获取实际的泛型类型参数数组：getActualTypeArguments()</span><br></pre></td></tr></table></figure>\n<p>8.类所在的包    Package getPackage() </p>\n<p>小 结：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在实际的操作中，取得类的信息的操作代码，并不会经常开发。</span><br><span class=\"line\">2.一定要熟悉java.lang.reflect包的作用，反射机制。</span><br><span class=\"line\">3.如何取得属性、方法、构造器的名称，修饰符等。</span><br></pre></td></tr></table></figure>\n<h1 id=\"14-6-调用运行时类的指定属性、指定方法等\"><a href=\"#14-6-调用运行时类的指定属性、指定方法等\" class=\"headerlink\" title=\"14.6 调用运行时类的指定属性、指定方法等\"></a>14.6 调用运行时类的指定属性、指定方法等</h1><h2 id=\"14-6-1-通过反射调用类中的指定方法、指定属性\"><a href=\"#14-6-1-通过反射调用类中的指定方法、指定属性\" class=\"headerlink\" title=\"14.6.1 通过反射调用类中的指定方法、指定属性\"></a>14.6.1 通过反射调用类中的指定方法、指定属性</h2><p>1.调用指定方法<br>通过反射，调用类中的方法，通过Method类完成。步骤： </p>\n<ul>\n<li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li>\n<li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153110.png\" alt></p>\n<p>2.通过反射调用类中的指定方法、指定属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object obj, Object …  args)</span><br></pre></td></tr></table></figure>\n<p>1）说明：</p>\n<blockquote>\n<p>   1.Object 对应原方法的返回值，若原方法无返回值，此时返回null<br>   2.若原方法若为静态方法，此时形参Object obj可为null<br>   3.若原方法形参列表为空，则Object[] args为null<br>   4.若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</p>\n</blockquote>\n<p>2）调用指定属性  </p>\n<ul>\n<li>在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public Field getField(String name)</span><br><span class=\"line\">返回此Class对象表示的类或接口的指定的public的Field。</span><br><span class=\"line\">    public Field getDeclaredField(String name)</span><br><span class=\"line\">返回此Class对象表示的类或接口的指定的Field。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Field中：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object get(Object obj)</span><br><span class=\"line\">    取得指定对象obj上此Field的属性内容</span><br><span class=\"line\">public void set(Object obj,Object value)</span><br><span class=\"line\">\t设置指定对象obj上此Field的属性内容</span><br></pre></td></tr></table></figure>\n<p>注：在类中属性都设置为private的前提下，在使用set()和get()方法时，首先要使用Field类中的setAccessible(true)方法将需要操作的属性设置为可以被外部访问。</p>\n<ul>\n<li>public void setAccessible(true)访问私有属性时，让这个属性可见。 </li>\n</ul>\n<h1 id=\"14-7-反射的应用：动态代理\"><a href=\"#14-7-反射的应用：动态代理\" class=\"headerlink\" title=\"14.7 反射的应用：动态代理\"></a>14.7 反射的应用：动态代理</h1><h2 id=\"14-7-1-Java动态代理\"><a href=\"#14-7-1-Java动态代理\" class=\"headerlink\" title=\"14.7.1 Java动态代理\"></a>14.7.1 Java动态代理</h2><ul>\n<li>之前为大家讲解过代理机制的操作，属于静态代理，特征是代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。</li>\n<li>最好可以通过一个代理类完成全部的代理功能</li>\n<li>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。</li>\n<li><p>动态代理使用场合:</p>\n<ul>\n<li>调试</li>\n<li>远程方法调用</li>\n</ul>\n</li>\n<li><p>代理设计模式的原理:<br>使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上.</p>\n</li>\n<li><p>Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。</p>\n</li>\n<li>提供用于创建动态代理类和动态代理对象的静态方法<ul>\n<li>static Class&lt;?&gt;   getProxyClass(ClassLoader loader, Class&lt;?&gt;… interfaces)  创建一个动态代理类所对应的Class对象</li>\n<li>static Object   newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)  直接创建一个动态代理对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassLoader : 类加载器</span><br><span class=\"line\">Class&lt;?&gt;[] : 得到全部的接口</span><br><span class=\"line\">InvocationHandler : 得到InvocationHandler接口的子类实例</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-7-2-动态代理步骤\"><a href=\"#14-7-2-动态代理步骤\" class=\"headerlink\" title=\"14.7.2 动态代理步骤\"></a>14.7.2 动态代理步骤</h2><p>1.创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object invoke(Object theProxy, Method method, Object[] params) throws Throwable&#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         Object retval = method.invoke(targetObj, params);</span><br><span class=\"line\">         // Print out the result</span><br><span class=\"line\">           System.out.println(retval);</span><br><span class=\"line\">            return retval;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      catch (Exception exc)&#123;&#125;</span><br><span class=\"line\">Object theProxy : 被代理对象</span><br><span class=\"line\">Method method : 要调用的方法</span><br><span class=\"line\">Object[] params : 方法调用时所需要的参数</span><br></pre></td></tr></table></figure>\n<p>2.创建被代理的类以及接口</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153731.png\" alt></p>\n<p>3.通过Proxy的静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建一个Subject接口代理</span><br><span class=\"line\">   RealSubject target = new RealSubject();</span><br><span class=\"line\">// Create a proxy to wrap the original implementation</span><br><span class=\"line\">            DebugProxy proxy = new DebugProxy(target);</span><br><span class=\"line\"> // Get a reference to the proxy through the Subject interface</span><br><span class=\"line\">          Subject sub = (Subject) Proxy.newProxyInstance(</span><br><span class=\"line\">            Subject.class.getClassLoader(),</span><br><span class=\"line\">            new Class[] &#123; Subject.class &#125;, proxy);</span><br></pre></td></tr></table></figure>\n<p>4.通过 Subject代理调用RealSubject实现类的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String info = sub.say(“Peter&quot;, 24);</span><br><span class=\"line\"> System.out.println(info);</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-7-3-动态代理与AOP（Aspect-Orient-Programming\"><a href=\"#14-7-3-动态代理与AOP（Aspect-Orient-Programming\" class=\"headerlink\" title=\"14.7.3 动态代理与AOP（Aspect Orient Programming)\"></a>14.7.3 动态代理与AOP（Aspect Orient Programming)</h2><p>前面介绍的Proxy和InvocationHandler，很难看出这种动态代理的优势，下面介绍一种更实用的动态代理机制</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153928.png\" alt></p>\n<p>改进后的说明：代码段1、代码段2、代码段3和深色代码段分离开了，但代码段1、2、3又和一个特定的方法A耦合了！最理想的效果是：代码块1、2、3既可以执行方法A，又无须在程序中以硬编码的方式直接调用深色代码的方法</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603153949.png\" alt></p>\n<p>代码演示 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Dog &#123;</span><br><span class=\"line\">\tvoid info();</span><br><span class=\"line\"></span><br><span class=\"line\">\tvoid run();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class HuntingDog implements Dog &#123;</span><br><span class=\"line\">\tpublic void info() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;我是一只猎狗&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void run() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;我奔跑迅速&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DogUtil &#123;</span><br><span class=\"line\">\tpublic void method1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法一=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法二=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DogUtil &#123;</span><br><span class=\"line\">\tpublic void method1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法一=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法二=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DogUtil &#123;</span><br><span class=\"line\">\tpublic void method1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法一=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;=====模拟通用方法二=====&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\">\t// 需要被代理的对象</span><br><span class=\"line\">\tprivate Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTarget(Object target) &#123;</span><br><span class=\"line\">\t\tthis.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 执行动态代理对象的所有方法时，都会被替换成执行如下的invoke方法</span><br><span class=\"line\">\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tDogUtil du = new DogUtil();</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method1。</span><br><span class=\"line\">\t\tdu.method1();</span><br><span class=\"line\">\t\t// 以target作为主调来执行method方法</span><br><span class=\"line\">\t\tObject result = method.invoke(target, args);</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method2。</span><br><span class=\"line\">\t\tdu.method2();</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyInvocationHandler implements InvocationHandler &#123;</span><br><span class=\"line\">\t// 需要被代理的对象</span><br><span class=\"line\">\tprivate Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setTarget(Object target) &#123;</span><br><span class=\"line\">\t\tthis.target = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 执行动态代理对象的所有方法时，都会被替换成执行如下的invoke方法</span><br><span class=\"line\">\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Exception &#123;</span><br><span class=\"line\">\t\tDogUtil du = new DogUtil();</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method1。</span><br><span class=\"line\">\t\tdu.method1();</span><br><span class=\"line\">\t\t// 以target作为主调来执行method方法</span><br><span class=\"line\">\t\tObject result = method.invoke(target, args);</span><br><span class=\"line\">\t\t// 执行DogUtil对象中的method2。</span><br><span class=\"line\">\t\tdu.method2();</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyProxyFactory &#123;</span><br><span class=\"line\">\t// 为指定target生成动态代理对象</span><br><span class=\"line\">\tpublic static Object getProxy(Object target) throws Exception &#123;</span><br><span class=\"line\">\t\t// 创建一个MyInvokationHandler对象</span><br><span class=\"line\">\t\tMyInvokationHandler handler = new MyInvokationHandler();</span><br><span class=\"line\">\t\t// 为MyInvokationHandler设置target对象</span><br><span class=\"line\">\t\thandler.setTarget(target);</span><br><span class=\"line\">\t\t// 创建、并返回一个动态代理对象</span><br><span class=\"line\">\t\treturn Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class MyProxyFactory &#123;</span><br><span class=\"line\">\t// 为指定target生成动态代理对象</span><br><span class=\"line\">\tpublic static Object getProxy(Object target) throws Exception &#123;</span><br><span class=\"line\">\t\t// 创建一个MyInvokationHandler对象</span><br><span class=\"line\">\t\tMyInvokationHandler handler = new MyInvokationHandler();</span><br><span class=\"line\">\t\t// 为MyInvokationHandler设置target对象</span><br><span class=\"line\">\t\thandler.setTarget(target);</span><br><span class=\"line\">\t\t// 创建、并返回一个动态代理对象</span><br><span class=\"line\">\t\treturn Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) </span><br><span class=\"line\">\t\tthrows Exception&#123;</span><br><span class=\"line\">\t\t// 创建一个原始的HuntingDog对象，作为target</span><br><span class=\"line\">\t\tDog target = new HuntingDog();</span><br><span class=\"line\">\t\t// 以指定的target来创建动态代理</span><br><span class=\"line\">\t\tDog dog = (Dog)MyProxyFactory.getProxy(target);</span><br><span class=\"line\">\t\tdog.info();</span><br><span class=\"line\">\t\tdog.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Proxy生成一个动态代理时，往往并不会凭空产生一个动态代理，这样没有太大的意义。通常都是为指定的目标对象生成动态代理</li>\n<li>这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603154040.png\" alt></p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"13. JavaSE-IO流","url":"http://yoursite.com/2017/01/29/13. JavaSE-IO流/","content":"<h1 id=\"13-1-File类的使用\"><a href=\"#13-1-File类的使用\" class=\"headerlink\" title=\"13.1 File类的使用\"></a>13.1 File类的使用</h1><h2 id=\"13-1-1-File类\"><a href=\"#13-1-1-File类\" class=\"headerlink\" title=\"13.1.1 File类\"></a>13.1.1 File类</h2><ul>\n<li>java.io.File类：文件和目录路径名的抽象表示形式，与平台无关</li>\n<li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。</li>\n<li>File对象可以作为参数传递给流的构造器</li>\n</ul>\n<h2 id=\"13-1-2-File类的常见构造器\"><a href=\"#13-1-2-File类的常见构造器\" class=\"headerlink\" title=\"13.1.2 File类的常见构造器\"></a>13.1.2 File类的常见构造器</h2><ul>\n<li>public File(String pathname)<br>以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。</li>\n<li>public File(String parent,String child)<br>以parent为父路径，child为子路径创建File对象。</li>\n<li>File的静态属性String separator存储了当前系统的路径分隔符。</li>\n<li>在UNIX中，此字段为‘/’，在Windows中，为‘\\’</li>\n</ul>\n<h2 id=\"13-1-3-File类常用API\"><a href=\"#13-1-3-File类常用API\" class=\"headerlink\" title=\"13.1.3 File类常用API\"></a>13.1.3 File类常用API</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问文件名：</span><br><span class=\"line\">getName()</span><br><span class=\"line\">getPath()</span><br><span class=\"line\">getAbsoluteFile()</span><br><span class=\"line\">getAbsolutePath()</span><br><span class=\"line\">getParent()</span><br><span class=\"line\">toPath()</span><br><span class=\"line\">renameTo(File newName)</span><br><span class=\"line\"></span><br><span class=\"line\">文件检测</span><br><span class=\"line\">exists()</span><br><span class=\"line\">canWrite()</span><br><span class=\"line\">canRead()</span><br><span class=\"line\">isFile()</span><br><span class=\"line\">isDirectory()</span><br><span class=\"line\"></span><br><span class=\"line\">获取常规文件信息</span><br><span class=\"line\">lastModified()</span><br><span class=\"line\">length()</span><br><span class=\"line\"></span><br><span class=\"line\">文件操作相关</span><br><span class=\"line\">createNewFile()</span><br><span class=\"line\">delete()</span><br><span class=\"line\"></span><br><span class=\"line\">目录操作相关</span><br><span class=\"line\">mkdir()</span><br><span class=\"line\">mkdirs()</span><br><span class=\"line\">delete()</span><br><span class=\"line\">list()</span><br><span class=\"line\">listFiles()</span><br></pre></td></tr></table></figure>\n<p>案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File dir1 = new File(&quot;D:/IOTest/dir1&quot;);</span><br><span class=\"line\">if (!dir1.exists()) &#123;     // 如果D:/IOTest/dir1不存在，就创建为目录</span><br><span class=\"line\">\tdir1.mkdir(); &#125;</span><br><span class=\"line\">// 创建以dir1为父目录,名为&quot;dir2&quot;的File对象</span><br><span class=\"line\">File dir2 = new File(dir1, &quot;dir2&quot;); </span><br><span class=\"line\">if (!dir2.exists()) &#123; // 如果还不存在，就创建为目录</span><br><span class=\"line\">\tdir2.mkdirs(); &#125;</span><br><span class=\"line\">File dir4 = new File(dir1, &quot;dir3/dir4&quot;);</span><br><span class=\"line\">if (!dir4.exists()) &#123;</span><br><span class=\"line\">\tdir4.mkdirs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 创建以dir2为父目录,名为&quot;test.txt&quot;的File对象</span><br><span class=\"line\">File file = new File(dir2, &quot;test.txt&quot;); \t</span><br><span class=\"line\">if (!file.exists()) &#123; // 如果还不存在，就创建为文件</span><br><span class=\"line\">\tfile.createNewFile();&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"13-2-IO流原理及流的分类\"><a href=\"#13-2-IO流原理及流的分类\" class=\"headerlink\" title=\"13.2 IO流原理及流的分类\"></a>13.2 IO流原理及流的分类</h1><h2 id=\"13-2-1-Java-IO流原理\"><a href=\"#13-2-1-Java-IO流原理\" class=\"headerlink\" title=\"13.2.1 Java IO流原理\"></a>13.2.1 Java IO流原理</h2><ul>\n<li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</li>\n<li>Java程序中，对于数据的输入/输出操作以”流(stream)” 的方式进行。java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115552.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115622.png\" alt></p>\n<h2 id=\"13-2-2-流的分类\"><a href=\"#13-2-2-流的分类\" class=\"headerlink\" title=\"13.2.2 流的分类\"></a>13.2.2 流的分类</h2><ul>\n<li>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)  </li>\n<li>按数据流的流向不同分为：输入流，输出流</li>\n<li>按流的角色的不同分为：节点流，处理流</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115659.png\" alt></p>\n<ol>\n<li>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。  </li>\n<li>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115728.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115754.png\" alt></p>\n<h3 id=\"节点流和处理流\"><a href=\"#节点流和处理流\" class=\"headerlink\" title=\"节点流和处理流\"></a>节点流和处理流</h3><p>1.节点流可以从一个特定的数据源读写数据</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603115830.png\" alt></p>\n<ol start=\"2\">\n<li>处理流是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603140827.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603141027.png\" alt></p>\n<p>InputStream &amp; Reader</p>\n<ul>\n<li>InputStream 和 Reader 是所有输入流的基类。</li>\n<li><p>InputStream（典型实现：FileInputStream）</p>\n<ul>\n<li>int read()</li>\n<li>int read(byte[] b)</li>\n<li>int read(byte[] b, int off, int len)</li>\n</ul>\n</li>\n<li><p>Reader（典型实现：FileReader）</p>\n<ul>\n<li>int read()</li>\n<li>int read(char [] c)</li>\n<li>int read(char [] c, int off, int len)</li>\n</ul>\n</li>\n<li><p>程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以应该显式关闭文件 IO 资源。</p>\n</li>\n</ul>\n<h2 id=\"13-2-3-节点流-文件流\"><a href=\"#13-2-3-节点流-文件流\" class=\"headerlink\" title=\"13.2.3 节点流(文件流)\"></a>13.2.3 节点流(文件流)</h2><h3 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h3><p>1 建立一个流对象，将已存在的一个文件加载进流。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader fr = new FileReader(“Test.txt”);</span><br></pre></td></tr></table></figure>\n<p>2 创建一个临时存放数据的数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char[] ch = new char[1024];</span><br></pre></td></tr></table></figure>\n<p>3 调用流对象的读取方法将流中的数据读入到数组中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fr.read(ch);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileReader fr = null;</span><br><span class=\"line\">\ttry&#123;</span><br><span class=\"line\">\t\tfr = new FileReader(&quot;c:\\\\test.txt&quot;);</span><br><span class=\"line\">\t\tchar[] buf = new char[1024];</span><br><span class=\"line\">\t\tint len= 0;</span><br><span class=\"line\">\t\twhile((len=fr.read(buf))!=-1)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(new String(buf ,0,len));&#125;</span><br><span class=\"line\">\t&#125;catch (IOException e)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;read-Exception :&quot;+e.toString());&#125;</span><br><span class=\"line\">\tfinally&#123;</span><br><span class=\"line\">\t\tif(fr!=null)&#123;</span><br><span class=\"line\">\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\tfr.close();</span><br><span class=\"line\">\t\t\t&#125;catch (IOException e)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;close-Exception :&quot;+e.toString());</span><br><span class=\"line\">\t\t\t&#125; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h3><p>1.创建流对象，建立数据存放文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileWriter fw = new FileWriter(“Test.txt”);</span><br></pre></td></tr></table></figure>\n<p>2.调用流对象的写入方法，将数据写入流</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fw.write(“text”);</span><br></pre></td></tr></table></figure>\n<p>3.关闭流资源，并将流中的数据清空到文件中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fw.close();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileWriter fw = null;</span><br><span class=\"line\">\ttry&#123;</span><br><span class=\"line\">\t\tfw = new FileWriter(&quot;Test.txt&quot;);</span><br><span class=\"line\">\t\tfw.write(&quot;text&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (IOException e)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(e.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfinally&#123;</span><br><span class=\"line\">\t\tIf(fw!=null)</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t fw.close();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (IOException e)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.toString());&#125;\t&#125;</span><br></pre></td></tr></table></figure>\n<p>注  意</p>\n<ul>\n<li>定义文件路径时，注意：可以用“/”或者“\\”。</li>\n<li>在写入一个文件时，如果目录下有同名文件将被覆盖。<br>在读取文件时，必须保证该文件已存在，否则出异常</li>\n</ul>\n<h2 id=\"13-2-4-缓冲流\"><a href=\"#13-2-4-缓冲流\" class=\"headerlink\" title=\"13.2.4 缓冲流\"></a>13.2.4 缓冲流</h2><ul>\n<li>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组</li>\n<li><p>根据数据操作单位可以把缓冲流分为：</p>\n<ul>\n<li>BufferedInputStream 和 BufferedOutputStream</li>\n<li>BufferedReader 和 BufferedWriter</li>\n</ul>\n</li>\n<li><p>缓冲流要“套接”在相应的节点流之上，对读写的数据提供了缓冲的功能，提高了读写的效率，同时增加了一些新的方法</p>\n</li>\n<li>对于输出的缓冲流，写出的数据会先在内存中缓存，使用flush()将会使内存中的数据立刻写出</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader br = null;</span><br><span class=\"line\">BufferedWriter bw = null;\t\t</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">//step1:创建缓冲流对象：它是过滤流，是对节点流的包装</span><br><span class=\"line\">br = new  BufferedReader(new FileReader(&quot;d:\\\\IOTest\\\\source.txt&quot;));</span><br><span class=\"line\">bw = new BufferedWriter(new FileWriter(&quot;d:\\\\IOTest\\\\destBF.txt&quot;));</span><br><span class=\"line\">String str = null;</span><br><span class=\"line\">while ((str = br.readLine()) != null) &#123; //一次读取字符文本文件的一行字符</span><br><span class=\"line\">bw.write(str); //一次写入一行字符串</span><br><span class=\"line\">bw.newLine();  //写入行分隔符</span><br><span class=\"line\">bw.flush();  //step2:刷新缓冲区</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">// step3: 关闭IO流对象</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">if (bw != null) &#123;</span><br><span class=\"line\">bw.close();  //关闭过滤流时,会自动关闭它所包装的底层节点流</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">if (br != null) &#123;</span><br><span class=\"line\">br.close();</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">e.printStackTrace();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-5-转换流\"><a href=\"#13-2-5-转换流\" class=\"headerlink\" title=\"13.2.5 转换流\"></a>13.2.5 转换流</h2><h3 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h3><ul>\n<li>转换流提供了在字节流和字符流之间的转换</li>\n<li>Java API提供了两个转换流：<ul>\n<li><code>InputStreamReader和OutputStreamWriter</code></li>\n</ul>\n</li>\n<li>字节流中的数据都是字符时，转成字符流操作更高效。</li>\n</ul>\n<h3 id=\"InputStreamReader\"><a href=\"#InputStreamReader\" class=\"headerlink\" title=\"InputStreamReader`\"></a>InputStreamReader`</h3><ul>\n<li>用于将字节流中读取到的字节按指定字符集解码成字符。需要和InputStream“套接”。</li>\n<li>构造方法<ul>\n<li>public InputStreamReader(InputStream in)</li>\n<li>public InputSreamReader(InputStream in,String charsetName)  </li>\n</ul>\n</li>\n</ul>\n<p>如： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isr = new </span><br><span class=\"line\">    InputStreamReader(System.in,”gb2312”);</span><br></pre></td></tr></table></figure>\n<h3 id=\"OutputStreamWriter\"><a href=\"#OutputStreamWriter\" class=\"headerlink\" title=\"OutputStreamWriter\"></a>OutputStreamWriter</h3><ul>\n<li>用于将要写入到字节流中的字符按指定字符集编码成字节。需要和OutputStream“套接”。</li>\n<li>构造方法<ul>\n<li>public OutputStreamWriter(OutputStream out)</li>\n<li>public OutputSreamWriter(OutputStream out,String charsetName)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603142510.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void testMyInput() throws Exception&#123;</span><br><span class=\"line\">    FileInputStream fis = new FileInputStream(&quot;dbcp.txt&quot;);</span><br><span class=\"line\">    FileOutputStream fos = new FileOutputStream(&quot;dbcp5.txt&quot;);</span><br><span class=\"line\">    InputStreamReader isr = new InputStreamReader(fis,&quot;GBK&quot;);</span><br><span class=\"line\">    OutputStreamWriter osw = new OutputStreamWriter(fos,&quot;GBK&quot;);</span><br><span class=\"line\">    BufferedReader br = new BufferedReader(isr);</span><br><span class=\"line\">    BufferedWriter bw = new BufferedWriter(osw);</span><br><span class=\"line\">    String str = null;</span><br><span class=\"line\">    while((str = br.readLine()) != null)&#123;</span><br><span class=\"line\">        bw.write(str);</span><br><span class=\"line\">        bw.newLine();</span><br><span class=\"line\">        bw.flush();</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">bw.close();  </span><br><span class=\"line\">br.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充：字符编码</p>\n<ul>\n<li>编码表的由来<br>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。这就是编码表。</li>\n<li>常见的编码表</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ASCII：美国标准信息交换码。</span><br><span class=\"line\">\t用一个字节的7位可以表示。</span><br><span class=\"line\"></span><br><span class=\"line\">ISO8859-1：拉丁码表。欧洲码表</span><br><span class=\"line\">\t用一个字节的8位表示。</span><br><span class=\"line\"></span><br><span class=\"line\">GB2312：中国的中文编码表。</span><br><span class=\"line\"></span><br><span class=\"line\">GBK：中国的中文编码表升级，融合了更多的中文文字符号。</span><br><span class=\"line\"></span><br><span class=\"line\">Unicode：国际标准码，融合了多种文字。</span><br><span class=\"line\">\t所有文字都用两个字节来表示,Java语言使用的就是unicode</span><br><span class=\"line\">\tUTF-8：最多用三个字节来表示一个字符</span><br><span class=\"line\">\t</span><br><span class=\"line\">编码：字符串字节数组</span><br><span class=\"line\"></span><br><span class=\"line\">解码：字节数组字符串</span><br><span class=\"line\"></span><br><span class=\"line\">转换流的编码应用</span><br><span class=\"line\">\t可以将字符按指定编码格式存储。</span><br><span class=\"line\">\t可以对文本数据按指定编码格式来解读。</span><br><span class=\"line\">\t指定编码表的动作由构造函数完成。</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-6-标准输入-输出流\"><a href=\"#13-2-6-标准输入-输出流\" class=\"headerlink\" title=\"13.2.6 标准输入/输出流\"></a>13.2.6 标准输入/输出流</h2><h3 id=\"标准输入-输出流\"><a href=\"#标准输入-输出流\" class=\"headerlink\" title=\"标准输入/输出流\"></a>标准输入/输出流</h3><ul>\n<li>System.in和System.out分别代表了系统标准的输入和输出设备</li>\n<li>默认输入设备是键盘，输出设备是显示器</li>\n<li>System.in的类型是InputStream</li>\n<li>System.out的类型是PrintStream，其是OutputStream的子类FilterOutputStream 的子类<br>λ    通过System类的setIn，setOut方法对默认设备进行改变。<ul>\n<li>public static void setIn(InputStream in)</li>\n<li>public static void setOut(PrintStream out)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"例-1\"><a href=\"#例-1\" class=\"headerlink\" title=\"例 1\"></a>例 1</h3><p>从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，直至当输入“e”或者“exit”时，退出程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(&quot;请输入信息(退出输入e或exit):&quot;);</span><br><span class=\"line\">\t\t// 把&quot;标准&quot;输入流(键盘输入)这个字节流包装成字符流,再包装成缓冲流</span><br><span class=\"line\">\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));</span><br><span class=\"line\">\t\tString s = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// 读取用户输入的一行数据 --&gt; 阻塞程序</span><br><span class=\"line\">\t\t\twhile ((s = br.readLine()) != null) &#123;</span><br><span class=\"line\">\t\t\t\tif (s.equalsIgnoreCase(&quot;e&quot;) || s.equalsIgnoreCase(&quot;exit&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;安全退出!!&quot;);</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t// 将读取到的整行字符串转成大写输出</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;--&gt;:&quot; + s.toUpperCase());</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;继续输入信息&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; castch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; finally &#123;</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif (br != null) &#123;</span><br><span class=\"line\">\t\t\t\t\tbr.close(); // 关闭过滤流时,会自动关闭它包装的底层节点流</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-7-打印流\"><a href=\"#13-2-7-打印流\" class=\"headerlink\" title=\"13.2.7 打印流\"></a>13.2.7 打印流</h2><ul>\n<li>实现将基本数据类型的数据格式转化为字符串输出</li>\n<li>打印流：PrintStream和PrintWriter<ul>\n<li>提供了一系列重载的print和println方法，用于多种数据类型的输出</li>\n<li>PrintStream和PrintWriter的输出不会抛出异常</li>\n<li>PrintStream和PrintWriter有自动flush功能</li>\n<li>System.out返回的是PrintStream的实例</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream fos = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tfos = new FileOutputStream(new File(&quot;D:\\\\IO\\\\text.txt&quot;));</span><br><span class=\"line\">\t\t&#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; // 创建打印输出流,设置为自动刷新模式(写入换行符或字节 &apos;\\n&apos; 时都会刷新输出缓冲区)</span><br><span class=\"line\">\t\tPrintStream ps = new PrintStream(fos, true);</span><br><span class=\"line\">\t\tif (ps != null) &#123; // 把标准输出流(控制台输出)改成文件</span><br><span class=\"line\">\t\t\tSystem.setOut(ps);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt;= 255; i++) &#123; // 输出ASCII字符</span><br><span class=\"line\">\t\t\tSystem.out.print((char) i);</span><br><span class=\"line\">\t\t\tif (i % 50 == 0) &#123; // 每50个数据一行</span><br><span class=\"line\">\t\t\t\tSystem.out.println(); // 换行</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tps.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-8-数据流\"><a href=\"#13-2-8-数据流\" class=\"headerlink\" title=\"13.2.8 数据流\"></a>13.2.8 数据流</h2><ul>\n<li>为了方便地操作Java语言的基本数据类型的数据，可以使用数据流。</li>\n<li>数据流有两个类：(用于读取和写出基本数据类型的数据）<ul>\n<li>DataInputStream 和 DataOutputStream</li>\n<li>分别“套接”在 InputStream 和 OutputStream 节点流上</li>\n</ul>\n</li>\n<li>DataInputStream中的方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean readBoolean()\t\tbyte readByte()</span><br><span class=\"line\">     char readChar()\t\t\tfloat readFloat()</span><br><span class=\"line\">     double readDouble()\t\tshort readShort()</span><br><span class=\"line\">     long readLong()\t\t\tint readInt()</span><br><span class=\"line\">     String readUTF()           void readFully(byte[] b)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>DataOutputStream中的方法<br>将上述的方法的read改为相应的write即可。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DataOutputStream dos = null;</span><br><span class=\"line\">\t\ttry &#123; // 创建连接到指定文件的数据输出流对象</span><br><span class=\"line\">\t\t\tdos=newDataOutputStream(new FileOutputStream(&quot;d:\\\\IOTest\\\\destData.dat&quot;));</span><br><span class=\"line\">\t\t\tdos.writeUTF(&quot;ab中国&quot;); // 写UTF字符串</span><br><span class=\"line\">\t\t\tdos.writeBoolean(false); // 写入布尔值</span><br><span class=\"line\">\t\t\tdos.writeLong(1234567890L); // 写入长整数</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;写文件成功!&quot;);</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; finally &#123; // 关闭流对象</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif (dos != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 关闭过滤流时,会自动关闭它包装的底层节点流</span><br><span class=\"line\">\t\t\t\t\tdos.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-9-对象流\"><a href=\"#13-2-9-对象流\" class=\"headerlink\" title=\"13.2.9 对象流\"></a>13.2.9 对象流</h2><h3 id=\"对象流\"><a href=\"#对象流\" class=\"headerlink\" title=\"对象流\"></a>对象流</h3><ul>\n<li><p>ObjectInputStream和OjbectOutputSteam</p>\n<ul>\n<li>用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</li>\n</ul>\n</li>\n<li><p>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制</p>\n</li>\n<li>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制<ul>\n<li>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对象的序列化\"><a href=\"#对象的序列化\" class=\"headerlink\" title=\"对象的序列化\"></a>对象的序列化</h3><ul>\n<li>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</li>\n<li>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原</li>\n<li>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是 JavaEE 平台的基础</li>\n<li><p>如果需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：</p>\n<ul>\n<li>Serializable</li>\n<li>Externalizable</li>\n</ul>\n</li>\n<li><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p>\n<ul>\n<li>private static final long serialVersionUID;</li>\n<li>serialVersionUID用来表明类的不同版本间的兼容性</li>\n<li>如果类没有显示定义这个静态变量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的源代码作了修改，serialVersionUID 可能发生变化。故建议，显示声明</li>\n</ul>\n</li>\n<li><p>显示定义serialVersionUID的用途</p>\n<ul>\n<li>希望类的不同版本对序列化兼容，因此需确保类的不同版本具有相同的serialVersionUID</li>\n<li>不希望类的不同版本对序列化兼容，因此需确保类的不同版本具有不同的serialVersionUID</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用对象流序列化对象\"><a href=\"#使用对象流序列化对象\" class=\"headerlink\" title=\"使用对象流序列化对象\"></a>使用对象流序列化对象</h3><ul>\n<li><p>若某个类实现了 Serializable 接口，该类的对象就是可序列化的：</p>\n<ul>\n<li>创建一个 ObjectOutputStream</li>\n<li>调用 ObjectOutputStream 对象的 writeObject(对象) 方法输出可序列化对象。注意写出一次，操作flush()</li>\n</ul>\n</li>\n<li><p>反序列化</p>\n<ul>\n<li>创建一个 ObjectInputStream</li>\n<li>调用 readObject() 方法读取流中的对象</li>\n</ul>\n</li>\n<li><p>强调：如果某个类的字段不是基本数据类型或 String  类型，而是另一个引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的 Field 的类也不能序列化</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectOutputStream oos = </span><br><span class=\"line\">\t\t\t\tnew ObjectOutputStream(new FileOutputStream(&quot;test3.txt&quot;));</span><br><span class=\"line\">\t\tPerson p = new Person(&quot;韩梅梅&quot;, 18, &quot;中华大街&quot;, new Pet());</span><br><span class=\"line\">\t\toos.writeObject(p);</span><br><span class=\"line\">\t\toos.flush();</span><br><span class=\"line\">\t\toos.close();</span><br><span class=\"line\">\t\t// 反序列化：将磁盘中的对象数据源读出。</span><br><span class=\"line\">\t\tObjectInputStream ois = </span><br><span class=\"line\">\t\t\t\tnew ObjectInputStream(new FileInputStream(&quot;test3.txt&quot;));</span><br><span class=\"line\">\t\tPerson p1 = (Person) ois.readObject();</span><br><span class=\"line\">\t\tSystem.out.println(p1.toString());</span><br><span class=\"line\">\t\tois.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-10-随机存取文件流\"><a href=\"#13-2-10-随机存取文件流\" class=\"headerlink\" title=\"13.2.10 随机存取文件流\"></a>13.2.10 随机存取文件流</h2><h3 id=\"RandomAccessFile-类\"><a href=\"#RandomAccessFile-类\" class=\"headerlink\" title=\"RandomAccessFile 类\"></a>RandomAccessFile 类</h3><ul>\n<li>RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件<ul>\n<li>支持只访问文件的部分内容</li>\n<li>可以向已存在的文件后追加内容</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针：<ul>\n<li>long getFilePointer()：获取文件记录指针的当前位置</li>\n<li>void seek(long pos)：将文件记录指针定位到 pos 位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"读取文件内容\"><a href=\"#读取文件内容\" class=\"headerlink\" title=\"读取文件内容\"></a>读取文件内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile raf = new RandomAccessFile(“test.txt”, “rw”）;\traf.seek(5);</span><br><span class=\"line\">\tbyte [] b = new byte[1024];</span><br><span class=\"line\">\tint off = 0;</span><br><span class=\"line\">\tint len = 5;</span><br><span class=\"line\">\traf.read(b, off, len);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tString str = new String(b, 0, len);</span><br><span class=\"line\">\tSystem.out.println(str);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\traf.close();</span><br></pre></td></tr></table></figure>\n<h3 id=\"写入文件内容\"><a href=\"#写入文件内容\" class=\"headerlink\" title=\"写入文件内容\"></a>写入文件内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RandomAccessFile raf = new RandomAccessFile(&quot;test.txt&quot;, &quot;rw&quot;);</span><br><span class=\"line\">\traf.seek(5);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t//先读出来</span><br><span class=\"line\">\tString temp = raf.readLine();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\traf.seek(5);</span><br><span class=\"line\">\traf.write(&quot;xyz&quot;.getBytes());</span><br><span class=\"line\">\traf.write(temp.getBytes());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\traf.close();</span><br></pre></td></tr></table></figure>\n<h2 id=\"13-2-11-流的基本应用小节\"><a href=\"#13-2-11-流的基本应用小节\" class=\"headerlink\" title=\"13.2.11 流的基本应用小节\"></a>13.2.11 流的基本应用小节</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流是用来处理数据的。</span><br><span class=\"line\"></span><br><span class=\"line\">处理数据时，一定要先明确数据源，与数据目的地</span><br><span class=\"line\">\t数据源可以是文件，可以是键盘。</span><br><span class=\"line\">\t数据目的地可以是文件、显示器或者其他设备。</span><br><span class=\"line\"></span><br><span class=\"line\">而流只是在帮助数据进行传输,并对传输的数据进行处理，比如过滤处理、转换处理等。</span><br><span class=\"line\"></span><br><span class=\"line\">字节流-缓冲流（重点）</span><br><span class=\"line\">\t输入流InputStream-FileInputStream-BufferedInputStream</span><br><span class=\"line\">\t输出流OutputStream-FileOutputStream-BufferedOutputStream</span><br><span class=\"line\"></span><br><span class=\"line\">字符流-缓冲流（重点）</span><br><span class=\"line\">\t输入流Reader-FileReader-BufferedReader</span><br><span class=\"line\">\t输出流Writer-FileWriter-BufferedWriter</span><br><span class=\"line\"></span><br><span class=\"line\">转换流</span><br><span class=\"line\">\tInputSteamReader和OutputStreamWriter</span><br><span class=\"line\"></span><br><span class=\"line\">对象流ObjectInputStream和ObjectOutputStream（难点）</span><br><span class=\"line\">\t序列化</span><br><span class=\"line\">\t反序列化</span><br><span class=\"line\"></span><br><span class=\"line\">随机存取流RandomAccessFile（掌握读取、写入）</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"12. JavaSE-泛型","url":"http://yoursite.com/2017/01/15/12. JavaSE-泛型/","content":"<h1 id=\"12-1-泛型的概念\"><a href=\"#12-1-泛型的概念\" class=\"headerlink\" title=\"12.1 泛型的概念\"></a>12.1 泛型的概念</h1><p>泛型：标签<br>举例：  </p>\n<blockquote>\n<ul>\n<li>超市购物架上很多瓶子，每个瓶子装的是什么，有标签</li>\n<li>中药店，每个抽屉外面贴着标签</li>\n</ul>\n</blockquote>\n<ul>\n<li>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection<e>，List<e>，ArrayList<e>   这个<e>就是类型参数，即泛型</e></e></e></e></li>\n<li>从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，正如：List<string>，这表明该List只能保存字符串类型的对象。</string></li>\n<li>所谓泛型，就是允许在定义类、接口时指定类型参数（我们称为类型形参），这个类型形参将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。</li>\n</ul>\n<h2 id=\"12-1-1-为什么要使用泛型\"><a href=\"#12-1-1-为什么要使用泛型\" class=\"headerlink\" title=\"12.1.1 为什么要使用泛型\"></a>12.1.1 为什么要使用泛型</h2><p>那么为什么要有泛型呢，直接Object不是也可以存储数据吗？<br>1 解决元素存储的安全性问题，好比商品、药品标签，不会弄错<br>2 解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603111458.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603111516.png\" alt></p>\n<p>泛型就是为了解决哪种在声明时不能确定类型，但在使用时才能确定类型的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t/*ArrayList list = new ArrayList();</span><br><span class=\"line\">\t\tlist.add(1);</span><br><span class=\"line\">\t\tlist.add(&quot;java&quot;);</span><br><span class=\"line\">\t\tlist.add(2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//麻烦</span><br><span class=\"line\">\t\tint i = (int) list.get(0);</span><br><span class=\"line\">\t\t//不安全</span><br><span class=\"line\">\t\tint j = (int) list.get(1);*/</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist.add(1);</span><br><span class=\"line\">//\t\tlist.add(&quot;java&quot;);//类型检查，安全   在编译期间就确保类型安全</span><br><span class=\"line\">\t\tlist.add(2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//省事</span><br><span class=\"line\">\t\tint i = list.get(0);</span><br><span class=\"line\">\t\tint j = list.get(1);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-1-2-掌握集合中的泛型使用\"><a href=\"#12-1-2-掌握集合中的泛型使用\" class=\"headerlink\" title=\"12.1.2 掌握集合中的泛型使用\"></a>12.1.2 掌握集合中的泛型使用</h2><h1 id=\"12-2-自定义泛型\"><a href=\"#12-2-自定义泛型\" class=\"headerlink\" title=\"12.2 自定义泛型\"></a>12.2 自定义泛型</h1><h2 id=\"泛型字母\"><a href=\"#泛型字母\" class=\"headerlink\" title=\"泛型字母\"></a>泛型字母</h2><ul>\n<li>形式类型参数（formal type parameters）即泛型字母</li>\n<li>命名：泛型字母可以随意指定，尽量使用单个的大写字母（有时候多个泛型类型时会加上数字，比如T1，T2）</li>\n<li>常见字母（见名知意）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T：Type</span><br><span class=\"line\">K V：Key Value</span><br><span class=\"line\">E：Element</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-2-1-泛型声明形式之一：泛型类、接口\"><a href=\"#12-2-1-泛型声明形式之一：泛型类、接口\" class=\"headerlink\" title=\"12.2.1  泛型声明形式之一：泛型类、接口\"></a>12.2.1  泛型声明形式之一：泛型类、接口</h2><p>需求：定义学生类，其中有学生成绩</p>\n<ul>\n<li>整数</li>\n<li>小数</li>\n<li>字符串“优秀、良好、合格、不及格”</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Student&lt;T&gt;&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate T score;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Student() &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic Student(String name, T score) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic T getScore() &#123;</span><br><span class=\"line\">\t\treturn score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setScore(T score) &#123;</span><br><span class=\"line\">\t\tthis.score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名：&quot; + name + &quot;, 成绩：&quot; + score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestStudentScore &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tStudent&lt;Integer&gt; s1 = new Student&lt;Integer&gt;(&quot;张三&quot;,89);</span><br><span class=\"line\">\t\tInteger score = s1.getScore();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStudent&lt;Integer&gt; s2 = new Student&lt;Integer&gt;();</span><br><span class=\"line\">//\t\ts2.setScore(&quot;优秀&quot;);</span><br><span class=\"line\">\t\ts2.setScore(99);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明时的要点\"><a href=\"#声明时的要点\" class=\"headerlink\" title=\"声明时的要点\"></a>声明时的要点</h3><ul>\n<li>在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型</li>\n<li>在类/接口上声明的泛型不能使用在静态成员上</li>\n<li>泛型类的构造器如下：public GenericClass(){}。</li>\n<li>而如下是错误的：public GenericClass<e>(){}</e></li>\n<li>泛型类在声明时还可以指定泛型的上限</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.generic.classtype;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestPerson &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">//\t\tPerson&lt;Dog&gt; p = new Person&lt;Dog&gt;();</span><br><span class=\"line\">//\t\tPerson&lt;Object&gt; = new Person&lt;Object&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*class Human&lt;T super Person&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\">class Person&lt;T extends Person&gt;&#123;</span><br><span class=\"line\">\tprivate T parnter;//伴侣</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Man extends Person&lt;Woman&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Woman extends Person&lt;Man&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Dog&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"指定时的要点\"><a href=\"#指定时的要点\" class=\"headerlink\" title=\"指定时的要点\"></a>指定时的要点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当类或接口被使用时，会使用具体的实际类型参数（actual type argument）代替</span><br><span class=\"line\">泛型的指定中不能使用基本数据类型，可以使用包装类替换</span><br><span class=\"line\">泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();  </span><br><span class=\"line\">声明集合变量或创建集合对象，指定泛型</span><br><span class=\"line\">（2）class Dog implements Comparable&lt;Dog&gt;&#123;...&#125;  </span><br><span class=\"line\">实现接口时，指定泛型</span><br><span class=\"line\">（3）public void test(ArrayList&lt;Student&gt; list)&#123;&#125;  </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为学生类型</span><br><span class=\"line\">（4）public void test(ArrayList&lt;?&gt; list)&#123;&#125;     </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为任意类型</span><br><span class=\"line\">（5）public void test(ArrayList&lt;? extends Person&gt; </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为Person或其子类</span><br><span class=\"line\">（6）public void test(ArrayList&lt;? super Son&gt;    </span><br><span class=\"line\">使用泛型类或接口作为形参时，此处指定为Son或其父类</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于泛型类-接口的继承-实现说明\"><a href=\"#关于泛型类-接口的继承-实现说明\" class=\"headerlink\" title=\"关于泛型类/接口的继承/实现说明\"></a>关于泛型类/接口的继承/实现说明</h3><p>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型：</p>\n<ul>\n<li>子类不保留父类的泛型：按需实现</li>\n</ul>\n<blockquote>\n<ul>\n<li>没有类型  擦除</li>\n<li>具体类型</li>\n</ul>\n</blockquote>\n<ul>\n<li>子类保留父类的泛型：泛型子类<blockquote>\n<ul>\n<li>全部保留</li>\n<li>部分保留        </li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>结论：子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类不保留父类的泛型</span><br><span class=\"line\">//1)没有类型  擦除</span><br><span class=\"line\">class Son extends Father&#123;//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//2)具体类型</span><br><span class=\"line\">class Son2 extends Father&lt;Integer,String&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类保留父类的泛型</span><br><span class=\"line\">//1)全部保留</span><br><span class=\"line\">class Son3&lt;T1,T2&gt; extends Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2)部分保留</span><br><span class=\"line\">class Son4&lt;T2&gt; extends Father&lt;Integer,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类不保留父类的泛型</span><br><span class=\"line\">//1)没有类型  擦除</span><br><span class=\"line\">class Son&lt;A,B&gt; extends Father&#123;//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2)具体类型</span><br><span class=\"line\">class Son2&lt;A,B&gt; extends Father&lt;Integer,String&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//子类保留父类的泛型</span><br><span class=\"line\">//1)全部保留</span><br><span class=\"line\">class Son3&lt;T1,T2,A,B&gt; extends Father&lt;T1,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2)部分保留</span><br><span class=\"line\">class Son4&lt;T2,A,B&gt; extends Father&lt;Integer,T2&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体示例代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Dog implements Comparable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int compareTo(Object o) &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Cat implements Comparable&lt;Cat&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int compareTo(Cat o) &#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MySet&lt;E&gt; implements Collection&lt;E&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic boolean add(E e) &#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">......\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于泛型的擦除说明\"><a href=\"#关于泛型的擦除说明\" class=\"headerlink\" title=\"关于泛型的擦除说明\"></a>关于泛型的擦除说明</h3><p>使用泛型类时未指定泛型的具体类型：类似于Object，不等同于Object</p>\n<ul>\n<li>泛型擦除，默认按照Object处理但编译不会类型检查</li>\n<li>明确指定Object，编译会按Object类型检查</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestGenericErasure &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//1、使用时：类似于Object，不等同于Object</span><br><span class=\"line\">\t\tArrayList list = new ArrayList();</span><br><span class=\"line\">//\t\tlist.add(new Date());//有风险</span><br><span class=\"line\">\t\tlist.add(&quot;hello&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttest(list);//泛型擦除，编译不会类型检查</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\tArrayList&lt;Object&gt; list2 = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">//\t\ttest(list2);//一旦指定Object，编译会类型检查，必须按照Object处理</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;String&gt; list)&#123;</span><br><span class=\"line\">\t\tString str = &quot;&quot;;</span><br><span class=\"line\">\t\tfor(String s:list)&#123;</span><br><span class=\"line\">\t\t\tstr += s + &quot;,&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;元素:&quot;+str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"12-2-2-泛型形式之二：泛型方法\"><a href=\"#12-2-2-泛型形式之二：泛型方法\" class=\"headerlink\" title=\"12.2.2 泛型形式之二：泛型方法\"></a>12.2.2 泛型形式之二：泛型方法</h2><ul>\n<li>如果某个类不是泛型类，而某个方法需要使用泛型</li>\n<li>如果某个类是泛型类，但是需要在静态方法上使用泛型</li>\n</ul>\n<h3 id=\"泛型方法的格式：\"><a href=\"#泛型方法的格式：\" class=\"headerlink\" title=\"泛型方法的格式：\"></a>泛型方法的格式：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问权限]  &lt;泛型字母&gt;  返回类型  方法名([泛型字母 参数名称])  抛出的异常</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.generic.method;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestMyArrays &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tInteger[] arr = &#123;1,2,3,4&#125;;</span><br><span class=\"line\">\t\tString str = MyArrays.toString(arr);</span><br><span class=\"line\">\t\tSystem.out.println(str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyArrays&#123;</span><br><span class=\"line\">\tpublic static &lt;T&gt; String toString(T[] arr)&#123;</span><br><span class=\"line\">\t\tString str = &quot;[&quot;;</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\tfor (T t : arr) &#123;</span><br><span class=\"line\">\t\t\tstr += t;</span><br><span class=\"line\">\t\t\tif(i!=arr.length-1)&#123;</span><br><span class=\"line\">\t\t\t\tstr += &quot;,&quot;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstr += &quot;]&quot;;</span><br><span class=\"line\">\t\treturn str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"示例：java-util-Arrays类\"><a href=\"#示例：java-util-Arrays类\" class=\"headerlink\" title=\"示例：java.util.Arrays类\"></a>示例：java.util.Arrays类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; List&lt;T&gt; asList(T... a)</span><br><span class=\"line\">注意：Arrays.asList(…) 方法返回的 List 集合既不是 ArrayList 实例，也不是 Vector 实例。 Arrays.asList(…)  返回值是一个固定长度的 List 集合</span><br><span class=\"line\">public static &lt;T&gt; T[] copyOf(T[] original, int newLength)</span><br><span class=\"line\">public static &lt;T&gt; T[] copyOfRange(T[] original, int from,int to)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//public static &lt;T&gt; List&lt;T&gt; asList(T... a)</span><br><span class=\"line\">\t\tList&lt;String&gt; list = Arrays.asList(&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;);</span><br><span class=\"line\">\t\tList&lt;Integer&gt; list2 = Arrays.asList(1,2,3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//public static &lt;T&gt; T[] copyOf(T[] original, int newLength)</span><br><span class=\"line\">\t\tString[] str = &#123;&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;&#125;;</span><br><span class=\"line\">\t\tString[] array = Arrays.copyOf(str, 10);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//public static &lt;T&gt; T[] copyOfRange(T[] original, int from,int to)</span><br><span class=\"line\">\t\tString[] as = Arrays.copyOfRange(array, 0, 3);</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(str));</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(array));</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(as));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>泛型方法可以是静态方法也可以是非静态方法</li>\n<li>泛型方法声明泛型时也可以指定上限</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.generic.method;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestMyArrays &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist.add(2);</span><br><span class=\"line\">\t\tlist.add(3);</span><br><span class=\"line\">\t\tlist.add(4);</span><br><span class=\"line\">\t\tlist.add(5);</span><br><span class=\"line\">\t\tlist.add(1);</span><br><span class=\"line\">\t\tMyArrays.sort(list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (Integer integer : list) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(integer);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MyArrays&#123;</span><br><span class=\"line\">\tpublic static &lt;T extends Comparable&lt;T&gt;&gt; void sort(List&lt;T&gt; list)&#123;</span><br><span class=\"line\">\t\tfor(int i=0; i&lt;list.size()-1; i++)&#123;</span><br><span class=\"line\">\t\t\tfor(int j=0; j&lt;list.size()-i-1; j++)&#123;</span><br><span class=\"line\">\t\t\t\tComparable&lt;T&gt; c1 = (Comparable&lt;T&gt;)list.get(j);</span><br><span class=\"line\">\t\t\t\tif(c1.compareTo(list.get(j+1))&lt;0)&#123;</span><br><span class=\"line\">\t\t\t\t\tT temp = list.get(j);</span><br><span class=\"line\">\t\t\t\t\tlist.set(j, list.get(j+1));</span><br><span class=\"line\">\t\t\t\t\tlist.set(j+1, temp);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">/*\t\ttest(new String());</span><br><span class=\"line\">\t\ttest(new Object());*/</span><br><span class=\"line\">\t\ttest(new Person());</span><br><span class=\"line\">\t\ttest(new Man());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static &lt;T extends Person&gt; void test(T t)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/*public static &lt;T super Person&gt; void test(T t)&#123;</span><br><span class=\"line\">\t\t//错误</span><br><span class=\"line\">\t&#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Person&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Man extends Person&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T extends Closeable&gt; void free(T... t)&#123;</span><br><span class=\"line\">\tfor(T c : t)&#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tif(c!=null)&#123;</span><br><span class=\"line\">\t\t\t\tc.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-3-泛型通配符\"><a href=\"#12-3-泛型通配符\" class=\"headerlink\" title=\"12.3 泛型通配符\"></a>12.3 泛型通配符</h1><ul>\n<li>只能用于声明变量|形参上，一般是形参类型上，表示可以接收任意</li>\n<li>不能用在<ul>\n<li>1、创建对象，即new 后面</li>\n<li>2、声明泛型类、泛型接口，即class和interface</li>\n<li>3、声明泛型方法，即返回值类型前面&lt;&gt;中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1、匹配任意类型的通配符\"><a href=\"#1、匹配任意类型的通配符\" class=\"headerlink\" title=\"1、匹配任意类型的通配符\"></a>1、匹配任意类型的通配符</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * ?  通配符，类型不确定</span><br><span class=\"line\"> * 1、用于声明变量|形参上</span><br><span class=\"line\"> * 不能用在</span><br><span class=\"line\"> * 1、创建对象</span><br><span class=\"line\"> * 2、声明泛型类、泛型接口、泛型方法</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestGenericWildcard &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tArrayList&lt;?&gt; list = new ArrayList();</span><br><span class=\"line\">\t\tlist = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tlist = new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\t\tlist = new ArrayList&lt;Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlist = Collections.list(new StringTokenizer(&quot;this is a test&quot;));</span><br><span class=\"line\">\t\t//但是此list不能添加任意类型的对象，除了null</span><br><span class=\"line\">\t\tlist.add(null);</span><br><span class=\"line\">//\t\tlist.add(&quot;&quot;);//因为?类似于Object,但不等价与Object，所以还是类型不确定，所以除了null可以给任意引用类型之外，其他类型对象都不能随便赋</span><br><span class=\"line\">\t\tObject obj = list.get(0);//可以调用get()方法并使用其返回值。返回值是一个未知的类型，但是我们知道，它总是一个Object</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ttest(new ArrayList&lt;Object&gt;());</span><br><span class=\"line\">\t\ttest(new ArrayList&lt;String&gt;());</span><br><span class=\"line\">\t\ttest(new ArrayList&lt;Integer&gt;());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//编译错误：不能用在创建对象上，右边属于创建集合对象</span><br><span class=\"line\">//\t\tArrayList&lt;?&gt; list2 = new ArrayList&lt;?&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;?&gt; list)&#123;</span><br><span class=\"line\">\t\tlist.add(null);</span><br><span class=\"line\">//\t\tlist.add(&quot;&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//编译错误：不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?</span><br><span class=\"line\">//\tpublic static &lt;?&gt; void test(ArrayList&lt;?&gt; list)&#123;</span><br><span class=\"line\">//\t\t</span><br><span class=\"line\">//\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//编译错误：不能用在泛型类的声明上</span><br><span class=\"line\">/*class GenericTypeClass&lt;?&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、受限泛型：上限、下限\"><a href=\"#2、受限泛型：上限、下限\" class=\"headerlink\" title=\"2、受限泛型：上限、下限\"></a>2、受限泛型：上限、下限</h2><h3 id=\"（1）通配符指定上限\"><a href=\"#（1）通配符指定上限\" class=\"headerlink\" title=\"（1）通配符指定上限\"></a>（1）通配符指定上限</h3><p>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;= ，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? extends Person</span><br><span class=\"line\">? extends Comparable</span><br></pre></td></tr></table></figure>\n<h4 id=\"满足以下规则\"><a href=\"#满足以下规则\" class=\"headerlink\" title=\"满足以下规则\"></a>满足以下规则</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Fruit&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;Apple&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;FujiApple&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;? extends Apple&gt; 满足 List&lt;? extends Fruit&gt;</span><br><span class=\"line\">List&lt;?&gt; 不满足 List&lt;? extends Fruit&gt; 因为List&lt;?&gt; 等价于List&lt;? extends Object&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tArrayList&lt;Fruit&gt; list1= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list1);</span><br><span class=\"line\">\t\tArrayList&lt;Apple&gt; list2= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list2);</span><br><span class=\"line\">\t\tArrayList&lt;FujiApple&gt; list3= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">\t\ttest(list3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrayList&lt;? extends Fruit&gt; list= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrayList&lt;? extends Apple&gt; list4= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">\t\ttest(list4);</span><br><span class=\"line\">\t\tArrayList&lt;? extends Apple&gt; list5= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list5);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//编译错误，因为ArrayList&lt;?&gt;类似于ArrayList&lt;? extends Object&gt;</span><br><span class=\"line\">\t\t//而且list6有可能赋值new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t//而且list6有可能赋值new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\tArrayList&lt;?&gt; list6 = new ArrayList();</span><br><span class=\"line\">//\t\ttest(list6);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;? extends Fruit&gt; list)&#123;</span><br></pre></td></tr></table></figure>\n<p>如果使用“？ extends  类型”接收泛型对象的时候，则不能设置被泛型指定的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void test(ArrayList&lt;? extends Fruit&gt; list)&#123;</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * 通通编译错误</span><br><span class=\"line\">\t\t * 只能接收使用，不能修改</span><br><span class=\"line\">\t\t * 因为不知道list最终传入的到底是什么样的集合</span><br><span class=\"line\">\t\tlist.add(new Fruit());</span><br><span class=\"line\">\t\tlist.add(new Apple());</span><br><span class=\"line\">\t\tlist.add(new Peach());*/</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//此处只能是Fruit或以上，不能是Apple等子类，因为可能传入的是ArrayList&lt;Fruit&gt;或ArrayList&lt;Peach&gt;</span><br><span class=\"line\">\t\tfor(Fruit f:list)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(f);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//Iterator只能使用Iterator&lt;?&gt;或Iterator&lt;? extends Fruit&gt;</span><br><span class=\"line\">\t\tIterator&lt;? extends Fruit&gt; iter = list.iterator();</span><br><span class=\"line\">          // Iterator&lt;Fruit&gt; iter = list.iterator();//编译错误，因为泛型不支持多态</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）通配符指定下限\"><a href=\"#（2）通配符指定下限\" class=\"headerlink\" title=\"（2）通配符指定下限\"></a>（2）通配符指定下限</h3><p>下限super：使用时指定的类型不能小于操作的类，即&gt;=，如<br>? super Apple<br>存在以下规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Apple&gt;  满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;Fruit&gt;  满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;Object&gt;  满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;? super Apple&gt; 满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;? super Fruit&gt; 满足 ArrayList&lt;? super Apple&gt;</span><br><span class=\"line\">ArrayList&lt;?&gt; 不满足 ArrayList&lt;? super Apple&gt;因为List&lt;?&gt; 等价于List&lt;? extends Object&gt;，那么可能ArrayList&lt;String&gt;</span><br><span class=\"line\">ArrayList&lt;? super FujiApple&gt; 不满足 ArrayList&lt;? super Apple&gt; 因为可能ArrayList&lt; FujiApple&gt;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tArrayList&lt;Apple&gt; list1= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list1);</span><br><span class=\"line\">\t\tArrayList&lt;Fruit&gt; list2= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list2);</span><br><span class=\"line\">\t\tArrayList&lt;Object&gt; list3= new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\ttest(list3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrayList&lt;? super Apple&gt; list4= new ArrayList&lt;Apple&gt;();</span><br><span class=\"line\">\t\ttest(list4);</span><br><span class=\"line\">\t\tArrayList&lt;? super Fruit&gt; list5= new ArrayList&lt;Fruit&gt;();</span><br><span class=\"line\">\t\ttest(list5);</span><br><span class=\"line\">\t\tArrayList&lt;? super Fruit&gt; list6= new ArrayList&lt;Object&gt;();</span><br><span class=\"line\">\t\ttest(list6);</span><br><span class=\"line\">\t//编译错误</span><br><span class=\"line\">\t/*\tArrayList&lt;? super FujiApple&gt; list= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">\t\ttest(list);*/</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\t//编译错误，因为FujiApple是Apple的子类</span><br><span class=\"line\">//\t\tArrayList&lt;? super Apple&gt; list7= new ArrayList&lt;FujiApple&gt;();</span><br><span class=\"line\">//\t\ttest(list7);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//编译错误，因为ArrayList&lt;?&gt;类似于ArrayList&lt;? extends Object&gt;</span><br><span class=\"line\">\t\t//而且list8有可能赋值new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tArrayList&lt;?&gt; list8 = new ArrayList();</span><br><span class=\"line\">//\t\ttest(list8);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(ArrayList&lt;? super Apple&gt; list)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果使用“？ super类型”接收泛型对象的时候，则能够添加数据，但是不能添加父对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void test(ArrayList&lt;? super Apple&gt; list)&#123;</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * 通通编译错误</span><br><span class=\"line\">\t\t * 只能接收本类或子类对象</span><br><span class=\"line\">\t\t * 因为不知道list最终传入的到底是什么样的集合，如果传入的是ArrayList&lt;Apple&gt;，那添加Fruit对象就有问题了*/</span><br><span class=\"line\">\t\tlist.add(new FujiApple());</span><br><span class=\"line\">\t\tlist.add(new Apple());</span><br><span class=\"line\">//\t\tlist.add(new Fruit());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//此处只能是Object,不能是Apple,Fruit，因为可能传入的是ArrayList&lt;Object&gt;</span><br><span class=\"line\">\t\tfor(Object a:list)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-4-泛型嵌套：由外到内分析\"><a href=\"#12-4-泛型嵌套：由外到内分析\" class=\"headerlink\" title=\"12.4 泛型嵌套：由外到内分析\"></a>12.4 泛型嵌套：由外到内分析</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tHashMap&lt;String,ArrayList&lt;Citizen&gt;&gt; map = new HashMap&lt;String,ArrayList&lt;Citizen&gt;&gt;();</span><br><span class=\"line\">\t\tArrayList&lt;Citizen&gt; list = new ArrayList&lt;Citizen&gt;();</span><br><span class=\"line\">\t\tlist.add(new Citizen(&quot;刘恺威&quot;));</span><br><span class=\"line\">\t\tlist.add(new Citizen(&quot;杨幂&quot;));</span><br><span class=\"line\">\t\tlist.add(new Citizen(&quot;小糯米&quot;));</span><br><span class=\"line\">\t\tmap.put(&quot;刘恺威&quot;, list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSet&lt;Entry&lt;String, ArrayList&lt;Citizen&gt;&gt;&gt; entrySet = map.entrySet();</span><br><span class=\"line\">\t\tIterator&lt;Entry&lt;String, ArrayList&lt;Citizen&gt;&gt;&gt; iterator = entrySet.iterator();</span><br><span class=\"line\">\t\twhile(iterator.hasNext())&#123;</span><br><span class=\"line\">\t\t\tEntry&lt;String, ArrayList&lt;Citizen&gt;&gt; next = iterator.next();</span><br><span class=\"line\">\t\t\tString key = next.getKey();</span><br><span class=\"line\">\t\t\tArrayList&lt;Citizen&gt; value = next.getValue();</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;户主：&quot;+key);</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;家庭成员：&quot;+value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-5-泛型的特殊点\"><a href=\"#12-5-泛型的特殊点\" class=\"headerlink\" title=\"12.5 泛型的特殊点\"></a>12.5 泛型的特殊点</h1><h2 id=\"1、泛型没有多态\"><a href=\"#1、泛型没有多态\" class=\"headerlink\" title=\"1、泛型没有多态\"></a>1、泛型没有多态</h2><p>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<b>并不是G<a>的子类型！<br>比如：</a></b></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String是Object的子类，但是List&lt;String &gt;并不是List&lt;Object&gt;的子类。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603113046.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tFruit f = new Apple();//多态</span><br><span class=\"line\">\t\t//泛型没有多态</span><br><span class=\"line\">//\t\tArrayList&lt;Fruit&gt; list = new ArrayList&lt;Apple&gt;();//泛型没有多态</span><br><span class=\"line\">\t\tArrayList&lt;? extends Fruit&gt; list = new ArrayList&lt;Apple&gt;();//使用通配符可以</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、没有泛型数组\"><a href=\"#2、没有泛型数组\" class=\"headerlink\" title=\"2、没有泛型数组\"></a>2、没有泛型数组</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestGenericPolymophism &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//泛型没有数组</span><br><span class=\"line\">//\t\tTiger&lt;String&gt;[] as = new Tiger&lt;String&gt;[];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Tiger&lt;T&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ArrayList源代码</span><br><span class=\"line\">public class ArrayList&lt;E&gt;  。。。&#123;</span><br><span class=\"line\">    transient Object[] elementData;</span><br><span class=\"line\">    public boolean add(E e) &#123;</span><br><span class=\"line\">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class=\"line\">        elementData[size++] = e;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    public E get(int index) &#123;</span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        return elementData(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    E elementData(int index) &#123;</span><br><span class=\"line\">        return (E) elementData[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、jdk1-7简化泛型\"><a href=\"#3、jdk1-7简化泛型\" class=\"headerlink\" title=\"3、jdk1.7简化泛型\"></a>3、jdk1.7简化泛型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//jdk1.7，泛型的简化操作</span><br><span class=\"line\">\tArrayList&lt;Fruit&gt; flist = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、不能在try-catch中使用泛型定义\"><a href=\"#4、不能在try-catch中使用泛型定义\" class=\"headerlink\" title=\"4、不能在try-catch中使用泛型定义\"></a>4、不能在try-catch中使用泛型定义</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try&#123;</span><br><span class=\"line\">&#125;catch(T t)&#123;&#125;\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12-6-Collections工具类\"><a href=\"#12-6-Collections工具类\" class=\"headerlink\" title=\"12.6 Collections工具类\"></a>12.6 Collections工具类</h1><ul>\n<li>参考操作数组的工具类：Arrays</li>\n<li>Collections 是一个操作 Set、List 和 Map 等集合的工具类</li>\n<li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</li>\n</ul>\n<ul>\n<li>排序操作：（均为static方法）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c,T... elements)</span><br><span class=\"line\">将所有指定元素添加到指定 collection 中。</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; int binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list,T key)</span><br><span class=\"line\">在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象</span><br><span class=\"line\">，而且必须是可比较大小的，即支持自然排序的。而且集合也事先必须是有序的，否则结果不确定。</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; int binarySearch(List&lt;? extends T&gt; list,T key,Comparator&lt;? super T&gt; c)</span><br><span class=\"line\">在List集合中查找某个元素的下标，但是List的元素必须是T或T的子类对象，</span><br><span class=\"line\">而且集合也事先必须是按照c比较器规则进行排序过的，否则结果不确定。</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T max(Collection&lt;? extends T&gt; coll)</span><br><span class=\"line\">在coll集合中找出最大的元素，集合中的对象必须是T或T的子类对象，而且支持自然排序</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; T max(Collection&lt;? extends T&gt; coll,Comparator&lt;? super T&gt; comp)</span><br><span class=\"line\">在coll集合中找出最大的元素，集合中的对象必须是T或T的子类对象，</span><br><span class=\"line\"></span><br><span class=\"line\">public static void reverse</span><br><span class=\"line\">反转指定列表List中元素的顺序。</span><br><span class=\"line\"></span><br><span class=\"line\">public static void shuffle(List&lt;?&gt; list) List</span><br><span class=\"line\">集合元素进行随机排序，类似洗牌</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</span><br><span class=\"line\">根据元素的自然顺序对指定 List 集合元素按升序排序</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super T&gt; c)</span><br><span class=\"line\">根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span><br><span class=\"line\"></span><br><span class=\"line\">public static void swap(List&lt;?&gt; list,int i,int j)</span><br><span class=\"line\">将指定 list 集合中的 i 处元素和 j 处元素进行交换</span><br><span class=\"line\"></span><br><span class=\"line\">public static int frequency(Collection&lt;?&gt; c,Object o)</span><br><span class=\"line\">返回指定集合中指定元素的出现次数</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; void copy(List&lt;? super T&gt; dest,List&lt;? extends T&gt; src)</span><br><span class=\"line\">将src中的内容复制到dest中</span><br><span class=\"line\"></span><br><span class=\"line\">public static &lt;T&gt; boolean replaceAll(List&lt;T&gt; list，T oldVal，T newVal)</span><br><span class=\"line\">使用新值替换 List 对象的所有旧值</span><br><span class=\"line\"></span><br><span class=\"line\">Collections 类中提供了多个 synchronizedXxx() 方法，</span><br><span class=\"line\">该方法可使将指定集合包装成线程同步的集合</span><br><span class=\"line\">，从而可以解决多线程并发访问集合时的线程安全问题</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"11. JavaSE-集合","url":"http://yoursite.com/2017/01/10/11. JavaSE-集合/","content":"<h1 id=\"11-1-数组与集合\"><a href=\"#11-1-数组与集合\" class=\"headerlink\" title=\"11.1 数组与集合\"></a>11.1 数组与集合</h1><h2 id=\"11-1-1数组\"><a href=\"#11-1-1数组\" class=\"headerlink\" title=\"11.1.1数组\"></a>11.1.1数组</h2><ul>\n<li>逻辑结构：线性的</li>\n<li>物理结构：顺序的存储结构</li>\n<li>申请内存：一次申请一大段连续的空间，一旦申请到了，内存就固定了。</li>\n<li>存储特点：所有数据存储在这个连续的空间中，数组中的每一个元素都是一个具体的数据（或对象），所有数据都紧密排布，不能有间隔。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603084709.png\" alt></p>\n<ul>\n<li>操作<ul>\n<li>查询：每一个元素都有一个数值下标，可以通过下标瞬间定位到某个元素</li>\n<li>增加：</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>从尾部增加：数组名[total++]=新元素</li>\n<li>从其他位置插入：先把index位置开始所有元素后移，然后数组名[index]=新元素</li>\n</ul>\n</blockquote>\n<ul>\n<li><ul>\n<li>删除：先把index后面的元素前移，然后数组名[total–]=null</li>\n<li>改：直接数组名[index]=新元素</li>\n</ul>\n</li>\n<li><p>优缺点</p>\n<ul>\n<li>优点：查询效率高</li>\n<li>缺点：添加/删除效率低，因为都涉及到移动元素；无法直接获取有效元素的个数，需要total来辅助</li>\n</ul>\n</li>\n<li><p>使用范围：查询操作远多于插入和删除操作的场景</p>\n</li>\n</ul>\n<h3 id=\"11-1-2集合\"><a href=\"#11-1-2集合\" class=\"headerlink\" title=\"11.1.2集合\"></a>11.1.2集合</h3><p>为了可以满足用户数据更多种的逻辑关系，而设计的一系列的不同于数组的可变的聚合的抽象数据类型。<br>总的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、只能存对象</span><br><span class=\"line\">2、容量可以自动调节</span><br><span class=\"line\">3、可以直接获取有效元素的个数：size()</span><br></pre></td></tr></table></figure>\n<h4 id=\"1、集合的几个常用接口\"><a href=\"#1、集合的几个常用接口\" class=\"headerlink\" title=\"1、集合的几个常用接口\"></a>1、集合的几个常用接口</h4><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603101859.png\" alt></p>\n<h4 id=\"2、详细描述\"><a href=\"#2、详细描述\" class=\"headerlink\" title=\"2、详细描述\"></a>2、详细描述</h4><ul>\n<li>Collection 层次结构中的根接口。Collection 表示一组对象，这些对象也称为 collection 的元素。一些 collection 允许有重复的元素，而另一些则不允许。一些 collection 是有序的，而另一些则是无序的。JDK 不提供此接口的任何直接实现：它提供更具体的子接口（如 Set 和 List）实现。此接口通常用来传递 collection，并在需要最大普遍性的地方操作这些 collection。 <ul>\n<li>List：有序的 collection（也称为序列）。此接口的用户可以对列表中每个元素的插入位置进行精确地控制。用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。</li>\n<li>Set：一个不包含重复元素的 collection。更确切地讲，set 不包含满足 e1.equals(e2) 的元素对 e1 和 e2，并且最多包含一个 null 元素。正如其名称所暗示的，此接口模仿了数学上的 set 抽象。 </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>SortedSet进一步提供关于元素的总体排序 的 Set。这些元素使用其自然顺序进行排序，或者根据通常在创建有序 set 时提供的 Comparator进行排序。该 set 的迭代器将按元素升序遍历 set。提供了一些附加的操作来利用这种排序。（此接口是 SortedMap 的 set 对应接口）。 </li>\n</ul>\n</blockquote>\n<ul>\n<li>Map：将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值。 Map 接口提供三种collection 视图，允许以键集、值集或键-值映射关系集的形式查看某个映射的内容。映射顺序 定义为迭代器在映射的 collection 视图上返回其元素的顺序。某些映射实现可明确保证其顺序，如 TreeMap 类；另一些映射实现则不保证顺序，如 HashMap 类。<ul>\n<li>SortedMap进一步提供关于键的总体排序 的 Map。该映射是根据其键的自然顺序进行排序的，或者根据通常在创建有序映射时提供的 Comparator 进行排序。对有序映射的 collection 视图（由 entrySet、keySet 和 values 方法返回）进行迭代时，此顺序就会反映出来。要采用此排序方式，还需要提供一些其他操作（此接口是 SortedSet 的对应映射）。 </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、概况总结\"><a href=\"#3、概况总结\" class=\"headerlink\" title=\"3、概况总结\"></a>3、概况总结</h4><ul>\n<li>Collection接口：定义了存取一组对象的方法，其子接口Set和List分别定义了存储方式<ul>\n<li>Set：中的数据对象没有顺序且不可以重复</li>\n<li>List：中的数据对象有顺序且可以重复</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Map接口定义了存储“键（key）-值（value）映射对”的方法</li>\n</ul>\n<h1 id=\"11-2-Collection接口\"><a href=\"#11-2-Collection接口\" class=\"headerlink\" title=\"11.2 Collection接口\"></a>11.2 Collection接口</h1><p>Collection 层次结构 中的根接口。<br>常用方法：</p>\n<h2 id=\"1、添加\"><a href=\"#1、添加\" class=\"headerlink\" title=\"1、添加\"></a>1、添加</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）add(Object obj)</span><br><span class=\"line\">（2）addAll(Collection coll)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、获取有效元素的个数\"><a href=\"#2、获取有效元素的个数\" class=\"headerlink\" title=\"2、获取有效元素的个数\"></a>2、获取有效元素的个数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int size()</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、清空集合\"><a href=\"#3、清空集合\" class=\"headerlink\" title=\"3、清空集合\"></a>3、清空集合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void clear();</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、是否包含某个元素\"><a href=\"#4、是否包含某个元素\" class=\"headerlink\" title=\"4、是否包含某个元素\"></a>4、是否包含某个元素</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）boolean contains(Object obj)：是通过元素的equals方法来判断是否是同一个对象</span><br><span class=\"line\"></span><br><span class=\"line\">coll.add(&quot;柴林燕&quot;);</span><br><span class=\"line\">coll.contains(&quot;柴林燕&quot;)  true</span><br><span class=\"line\"></span><br><span class=\"line\">本质上是拿集合中的元素与”柴林燕”比较，如果存在就会出现&quot;柴林燕&quot;.equals(&quot;柴林燕&quot;)所以返回true，</span><br><span class=\"line\">因为String类对equals进行了重写，表示比较的字符串的内容</span><br><span class=\"line\"></span><br><span class=\"line\">coll.add(new Student(&quot;柴林燕&quot;))</span><br><span class=\"line\">coll.contains(new Student(&quot;柴林燕&quot;)) false</span><br><span class=\"line\">本质上调用new Student(&quot;柴林燕&quot;).equals(new Student(&quot;柴林燕&quot;)) </span><br><span class=\"line\">用的是Student类中equals，而这个没有重写equals，用的是父类Object的equals，</span><br><span class=\"line\">默认比较的是地址值和“==”等价，所以返回false</span><br><span class=\"line\"> </span><br><span class=\"line\">（2）boolean containsAll(Collection c)也是调用元素的equals方法来比较的。</span><br><span class=\"line\">拿两个集合的元素挨个比较。</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、是否空集合\"><a href=\"#5、是否空集合\" class=\"headerlink\" title=\"5、是否空集合\"></a>5、是否空集合</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isEmpty()</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、删除\"><a href=\"#6、删除\" class=\"headerlink\" title=\"6、删除\"></a>6、删除</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1） boolean remove(Object obj) 通过元素的equals方法判断是否是要删除的那个元素</span><br><span class=\"line\"> \t只会删除找到的第一个元素</span><br><span class=\"line\">    只是把元素从集合删除，内存中还是存在的。</span><br><span class=\"line\">（2）boolean removeAll(Collection coll)</span><br></pre></td></tr></table></figure>\n<h2 id=\"7、取两个集合的交集\"><a href=\"#7、取两个集合的交集\" class=\"headerlink\" title=\"7、取两个集合的交集\"></a>7、取两个集合的交集</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean retainAll(Collection c)</span><br><span class=\"line\"></span><br><span class=\"line\">把交集的结果存在当前集合中，不影响c</span><br></pre></td></tr></table></figure>\n<h2 id=\"8、转成对象数组\"><a href=\"#8、转成对象数组\" class=\"headerlink\" title=\"8、转成对象数组\"></a>8、转成对象数组</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] toArray()</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-3-集合的遍历\"><a href=\"#11-3-集合的遍历\" class=\"headerlink\" title=\"11.3 集合的遍历\"></a>11.3 集合的遍历</h1><h2 id=\"11-3-1-foreach迭代\"><a href=\"#11-3-1-foreach迭代\" class=\"headerlink\" title=\"11.3.1 foreach迭代\"></a>11.3.1 foreach迭代</h2><p>Java 5 提供了 foreach 循环迭代访问 Collection<br>格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(元素的类型  迭代变量 : 数组/集合名称)&#123;</span><br><span class=\"line\">\t  //迭代变量代表的是每一个元素</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collection coll = new ArrayList();</span><br><span class=\"line\">coll.add(1);</span><br><span class=\"line\">coll.add(2);</span><br><span class=\"line\">coll.add(3);</span><br><span class=\"line\">coll.add(4);</span><br><span class=\"line\"></span><br><span class=\"line\">for(Object obj : coll)&#123;</span><br><span class=\"line\">System.out.println(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//foreach循环4次，obj每一次代表一个元素</span><br><span class=\"line\">注意：</span><br><span class=\"line\">foreach遍历只适用于查看/查找集合中的元素，不能在遍历集合时有任何影响集合中元素个数或数据的操作，否则操作结果将不确定。</span><br><span class=\"line\">for(Object obj : coll)&#123;</span><br><span class=\"line\">coll.remove(obj);//错误</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-3-2-Iterator迭代\"><a href=\"#11-3-2-Iterator迭代\" class=\"headerlink\" title=\"11.3.2 Iterator迭代\"></a>11.3.2 Iterator迭代</h2><h3 id=\"1、迭代器概述\"><a href=\"#1、迭代器概述\" class=\"headerlink\" title=\"1、迭代器概述\"></a>1、迭代器概述</h3><ul>\n<li>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</li>\n<li>因为Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</li>\n<li>仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</li>\n<li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603102703.png\" alt></p>\n<ul>\n<li>在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常。</li>\n<li>如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator iter = coll.iterator();//多态引用</span><br><span class=\"line\">while(iter.hasNext())&#123;</span><br><span class=\"line\">\tObject obj = iter.next();</span><br><span class=\"line\">\tSystem.out.println(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Iterator iter = coll.iterator();//回到起点</span><br><span class=\"line\">while(iter.hasNext())&#123;</span><br><span class=\"line\">\tObject obj = iter.next();</span><br><span class=\"line\">\tif(obj.equals(&quot;李四&quot;))&#123;</span><br><span class=\"line\">\t\titer.remove();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法</p>\n<h3 id=\"2、查看Iterator迭代器源码\"><a href=\"#2、查看Iterator迭代器源码\" class=\"headerlink\" title=\"2、查看Iterator迭代器源码\"></a>2、查看Iterator迭代器源码</h3><ul>\n<li>概念：迭代器（iterator）有时又称为游标（cursor），提供一种方法访问一个容器（container）对象中各个元素，而又不需要暴露该对象的内部细节。</li>\n<li>作用：是为容器遍历而生，用以方便的实现对容器内元素的遍历操作。类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”，售票员关注公交车上的每个乘客。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603102930.png\" alt></p>\n<ul>\n<li>走到每个座位之前，看看是否有乘客，如果有检查该乘客，如果该乘客未购票，可以请他下车，也只能请刚刚检查过的乘客下车。</li>\n<li>每一类集合都有自己的迭代器，迭代器是为对应的集合服务的，因此迭代器都是作为对应集合的内部类定义的。</li>\n</ul>\n<p>示例：只摘取关键代码ArrayList的内部迭代器Itr</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class=\"line\">        int cursor;       // index of next element to return</span><br><span class=\"line\">        int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class=\"line\"></span><br><span class=\"line\">        public boolean hasNext() &#123;</span><br><span class=\"line\">            return cursor != size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public E next() &#123;</span><br><span class=\"line\">            int i = cursor;</span><br><span class=\"line\">            cursor = i + 1;</span><br><span class=\"line\">            return (E) elementData[lastRet = i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void remove() &#123;</span><br><span class=\"line\">            if (lastRet &lt; 0)</span><br><span class=\"line\">                throw new IllegalStateException();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                ArrayList.this.remove(lastRet);</span><br><span class=\"line\">                cursor = lastRet;</span><br><span class=\"line\">                lastRet = -1;</span><br><span class=\"line\">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">                throw new ConcurrentModificationException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    public E remove(int index) &#123;</span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\"></span><br><span class=\"line\">        int numMoved = size - index - 1;</span><br><span class=\"line\">        if (numMoved &gt; 0)</span><br><span class=\"line\">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class=\"line\">                             numMoved);</span><br><span class=\"line\">        elementData[--size] = null; // clear to let GC do its work</span><br><span class=\"line\"></span><br><span class=\"line\">        return oldValue;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"11-4-List接口\"><a href=\"#11-4-List接口\" class=\"headerlink\" title=\"11.4 List接口\"></a>11.4 List接口</h1><ul>\n<li>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</li>\n<li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li>\n<li>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</li>\n</ul>\n<h2 id=\"11-4-1-List接口的方法\"><a href=\"#11-4-1-List接口的方法\" class=\"headerlink\" title=\"11.4.1 List接口的方法\"></a>11.4.1 List接口的方法</h2><ul>\n<li>List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法<ul>\n<li>void add(int index, Object ele)</li>\n<li>boolean addAll(int index, Collection eles)</li>\n<li>Object get(int index)</li>\n<li>int indexOf(Object obj)</li>\n<li>int lastIndexOf(Object obj)</li>\n<li>Object remove(int index)</li>\n<li>Object set(int index, Object ele)</li>\n<li>List subList(int fromIndex, int toIndex)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-4-2-List接口的迭代器ListIterator\"><a href=\"#11-4-2-List接口的迭代器ListIterator\" class=\"headerlink\" title=\"11.4.2 List接口的迭代器ListIterator\"></a>11.4.2 List接口的迭代器ListIterator</h2><p>除了foreach和Iterator迭代器之外，List 额外提供了一个 listIterator() 方法，该方法返回一个 ListIterator 对象， ListIterator 接口继承了 Iterator 接口，提供了专门操作 List 的方法：</p>\n<ul>\n<li>void add()</li>\n<li>void set(Object obj)</li>\n<li><p>void remove()</p>\n</li>\n<li><p>boolean hasPrevious()</p>\n</li>\n<li>Object previous()</li>\n<li><p>int previousIndex()</p>\n</li>\n<li><p>boolean hasNext()</p>\n</li>\n<li>Object next()</li>\n<li>int nextIndex()</li>\n</ul>\n<h2 id=\"11-4-3-List的实现类\"><a href=\"#11-4-3-List的实现类\" class=\"headerlink\" title=\"11.4.3 List的实现类\"></a>11.4.3 List的实现类</h2><ul>\n<li>ArrayList：底层实现是数组，线程不安全，效率高，所以，查询块，修改、插入、删除慢</li>\n<li>LinkedList：底层实现是链表，线程不安全，效率高。所以，查询慢，修改、插入、删除快</li>\n<li>Vector：底层实现是数组，线程安全，效率低。但是即使为保证 List 集合线程安全，也不推荐使用Vector。</li>\n</ul>\n<p>ArrayList的JDK1.8之前与之后的实现区别？</p>\n<ul>\n<li>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组</li>\n<li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元素时再创建一个始容量为10的数组</li>\n</ul>\n<h3 id=\"1、ArrayList与Vector的区别？\"><a href=\"#1、ArrayList与Vector的区别？\" class=\"headerlink\" title=\"1、ArrayList与Vector的区别？\"></a>1、ArrayList与Vector的区别？</h3><ul>\n<li>底层都是数组，Vector默认初始容量是10，ArrayList看版本.</li>\n<li>ArrayList扩容增加原来的50%，Vector扩容增加原来的1倍。</li>\n<li>ArrayList线程不安全，效率高，Vector线程安全，效率低。</li>\n<li>Vector因为版本古老，支持Enumeration 迭代器。但是该迭代器不支持快速失败。而Iterator和ListIterator迭代器支持快速失败。如果在迭代器创建后的任意时间从结构上修改了向量（通过迭代器自身的 remove 或 add 方法之外的任何其他方式），则迭代器将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就完全失败，而不是冒着在将来不确定的时间任意发生不确定行为的风险。<br>自学：Enumeration 迭代器的使用</li>\n</ul>\n<h3 id=\"2、LinkedList的特点\"><a href=\"#2、LinkedList的特点\" class=\"headerlink\" title=\"2、LinkedList的特点\"></a>2、LinkedList的特点</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkedList：双向链表，除了保存数据，还定义了两个变量：</span><br><span class=\"line\">prev变量记录前一个元素的位置</span><br><span class=\"line\">next变量记录下一个元素的位置</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604002932.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604003005.png\" alt></p>\n<p>例如：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604003031.png\" alt></p>\n<p><img src=\"http://note.youdao.com/yws/res/6876/B1A9D580AE5F46BFBDEE4663E6D0D869\" alt=\"image\"></p>\n<p>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高。新增方法：</p>\n<ul>\n<li>void addFirst(Object obj)</li>\n<li>void addLast(Object obj)    </li>\n<li>Object getFirst()</li>\n<li>Object getLast()</li>\n<li>Object removeFirst()</li>\n<li>Object removeLast()</li>\n</ul>\n<h1 id=\"11-5-Set接口\"><a href=\"#11-5-Set接口\" class=\"headerlink\" title=\"11.5 Set接口\"></a>11.5 Set接口</h1><ul>\n<li>Set接口是Collection的子接口，set接口没有提供额外的方法。</li>\n<li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。</li>\n<li>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals 方法。因此存放到Set集合中的元素一定要注意equals方法的重写。  </li>\n</ul>\n<p>Set的常用实现类有：HashSet、TreeSet、LinkedHashSet。</p>\n<h2 id=\"11-5-1-HashSet\"><a href=\"#11-5-1-HashSet\" class=\"headerlink\" title=\"11.5.1 HashSet\"></a>11.5.1 HashSet</h2><h3 id=\"1、概述\"><a href=\"#1、概述\" class=\"headerlink\" title=\"1、概述\"></a>1、概述</h3><ul>\n<li>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</li>\n<li>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。</li>\n<li>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。<ul>\n<li>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象在 HashSet 中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好）</li>\n<li>如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败，如果为false，那么会保存该元素，但是该数组的位置已经有元素了，那么会通过链表的方式继续链接。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>HashSet 具有以下特点：<ul>\n<li>不能保证元素的排列顺序</li>\n<li>HashSet 不是线程安全的</li>\n<li>集合元素可以有一个是 null</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603104425.png\" alt></p>\n<p>底层也是数组，初始容量为16，当如果使用率超过0.75，（16*0.75=12）就会扩大容量为原来的2倍。（16扩容为32，依次为64,128….等）</p>\n<p><strong>结论：存放到Set集合中的元素一定要注意equals和hashcode方法的重写。</strong></p>\n<h3 id=\"2、hashCode和equals方法\"><a href=\"#2、hashCode和equals方法\" class=\"headerlink\" title=\"2、hashCode和equals方法\"></a>2、hashCode和equals方法</h3><p>重写equals()方法的原则：</p>\n<ul>\n<li>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</li>\n<li>自反性：x.equals(x)必须返回是“true”。</li>\n<li>类推性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</li>\n<li>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</li>\n<li>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。</li>\n<li>重写 hashCode() 方法的基本原则</li>\n<li>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值</li>\n<li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode() 方法的返回值也应相等</li>\n<li>对象中用作 equals() 方法比较的属性Field，都应该用来计算 hashCode 值</li>\n</ul>\n<h2 id=\"11-5-2-LinkedHashSet\"><a href=\"#11-5-2-LinkedHashSet\" class=\"headerlink\" title=\"11.5.2 LinkedHashSet\"></a>11.5.2 LinkedHashSet</h2><ul>\n<li>LinkedHashSet 是 HashSet 的子类</li>\n<li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</li>\n<li>LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</li>\n<li>LinkedHashSet 不允许集合元素重复。</li>\n</ul>\n<h2 id=\"11-5-3-TreeSet\"><a href=\"#11-5-3-TreeSet\" class=\"headerlink\" title=\"11.5.3 TreeSet\"></a>11.5.3 TreeSet</h2><ul>\n<li>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</li>\n<li>TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</li>\n</ul>\n<h3 id=\"1、自然排序\"><a href=\"#1、自然排序\" class=\"headerlink\" title=\"1、自然排序\"></a>1、自然排序</h3><ul>\n<li>TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序排列，如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。</li>\n<li>向 TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。</li>\n<li>因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是同一个类的对象</li>\n<li>对于 TreeSet 集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过 compareTo(Object obj) 方法比较返回值</li>\n<li>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过 equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。否则让人难以理解。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Comparable 的典型实现：</span><br><span class=\"line\">BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</span><br><span class=\"line\">Character：按字符的 unicode值来进行比较</span><br><span class=\"line\">Boolean：true 对应的包装类实例大于 false 对应的包装类实例</span><br><span class=\"line\">String：按字符串中字符的 unicode 值进行比较</span><br><span class=\"line\">Date、Time：后边的时间、日期比前面的时间、日期大</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、定制排序\"><a href=\"#2、定制排序\" class=\"headerlink\" title=\"2、定制排序\"></a>2、定制排序</h3><ul>\n<li>TreeSet的自然排序是根据集合元素的大小，进行元素升序排列。如果需要定制排序，比如降序排列，可通过Comparator接口的帮助。需要重写compare(T o1,T o2)方法。利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li>\n<li>要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。</li>\n<li>此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异常。</li>\n<li>使用定制排序判断两个元素相等的标准是：通过Comparator比较两个元素返回了0。</li>\n<li>当使用具有与 equals 不一致的强行排序能力的 Comparator 对有序 set（或有序映射）进行排序时，应该小心谨慎。假定一个带显式 Comparator c 的有序 set（或有序映射）与从 set S 中抽取出来的元素（或键）一起使用。如果 c 强行对 S 进行的排序是与 equals 不一致的，那么有序 set（或有序映射）将是行为“怪异的”。</li>\n</ul>\n<h3 id=\"3、结论\"><a href=\"#3、结论\" class=\"headerlink\" title=\"3、结论\"></a>3、结论</h3><ul>\n<li>放到TreeSet集合中的元素必须是同一个类型的元素</li>\n<li>放到TreeSet集合中的元素必须实现Comparable接口，重写compareTo(Object obj)方法，并且需要使得equals方法的与compareTo方法结果一直，即如果两个对象通过 equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。</li>\n<li>TreeSet的自然排序是根据集合元素的大小，进行元素升序排列。如果需要定制排序，比如降序排列，可以将实现Comparator接口的实例作为形参传递给TreeSet的构造器，那么添加元素时，将调用compare(T o1,T o2)方法作为排序依据。同时也应该注意equals方法与compare(T o1,T o2)方法的结果一致。</li>\n</ul>\n<h1 id=\"11-6-Collection集合框架集\"><a href=\"#11-6-Collection集合框架集\" class=\"headerlink\" title=\"11.6 Collection集合框架集\"></a>11.6 Collection集合框架集</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603104836.png\" alt></p>\n<h1 id=\"11-7-Map\"><a href=\"#11-7-Map\" class=\"headerlink\" title=\"11.7 Map\"></a>11.7 Map</h1><h2 id=\"11-7-1-Map概述\"><a href=\"#11-7-1-Map概述\" class=\"headerlink\" title=\"11.7.1 Map概述\"></a>11.7.1 Map概述</h2><ul>\n<li>Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value</li>\n<li>Map 中的 key 和 value 都可以是任何引用类型的数据</li>\n<li>Map 中的 key 不允许重复</li>\n<li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value。</li>\n<li>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和Properties。</li>\n<li>HashMap是 Map 接口使用频率最高的实现类。</li>\n<li>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</li>\n</ul>\n<h3 id=\"Map的常用方法：\"><a href=\"#Map的常用方法：\" class=\"headerlink\" title=\"Map的常用方法：\"></a>Map的常用方法：</h3><h4 id=\"1、添加、删除操作：\"><a href=\"#1、添加、删除操作：\" class=\"headerlink\" title=\"1、添加、删除操作：\"></a>1、添加、删除操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object put(Object key,Object value)</span><br><span class=\"line\">Object remove(Object key)</span><br><span class=\"line\">void putAll(Map t)</span><br><span class=\"line\">void clear()</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、元素查询的操作：\"><a href=\"#2、元素查询的操作：\" class=\"headerlink\" title=\"2、元素查询的操作：\"></a>2、元素查询的操作：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object get(Object key)</span><br><span class=\"line\">boolean containsKey(Object key)</span><br><span class=\"line\">boolean containsValue(Object value)</span><br><span class=\"line\">int size()</span><br><span class=\"line\">boolean isEmpty()</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、元视图操作的方法：\"><a href=\"#3、元视图操作的方法：\" class=\"headerlink\" title=\"3、元视图操作的方法：\"></a>3、元视图操作的方法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set keySet()</span><br><span class=\"line\">Collection values()</span><br><span class=\"line\">Set entrySet()</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-7-2-Map的遍历\"><a href=\"#11-7-2-Map的遍历\" class=\"headerlink\" title=\"11.7.2 Map的遍历\"></a>11.7.2 Map的遍历</h2><p>Collection集合的遍历： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）foreach</span><br><span class=\"line\">（2）通过Iterator对象遍历</span><br></pre></td></tr></table></figure>\n<p>Map的遍历，不能支持foreach</p>\n<ul>\n<li><p>分开遍历：</p>\n<ul>\n<li>单独遍历所有key，还可以根据key获取对应value</li>\n<li>单独遍历所有value</li>\n</ul>\n</li>\n<li><p>成对遍历：遍历的是映射关系Map.Entry<br>Map.Entry是Map接口的内部接口。每一种Map内部有自己的Map.Entry的实现类<br>在Map中存储数据，实际上是将Key—-&gt;value的数据存储在Map.Entry接口的实例中，再在Map集合中插入Map.Entry的实例化对象，如图示： </p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105233.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tMap map = new HashMap();</span><br><span class=\"line\">\t\tmap.put(&quot;邢涛&quot;, 60);</span><br><span class=\"line\">\t\tmap.put(&quot;林明明&quot;, 70);</span><br><span class=\"line\">\t\tmap.put(&quot;田杰&quot;, 80);</span><br><span class=\"line\">\t\tmap.put(&quot;李铠&quot;, 90);</span><br><span class=\"line\">\t\tmap.put(&quot;李信&quot;, 60);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map的所有key:&quot;);</span><br><span class=\"line\">\t\tSet keys = map.keySet();//HashSet</span><br><span class=\"line\">\t\tfor(Object key : keys)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(key+&quot;-&gt;&quot;+map.get(key));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map的所有的value：&quot;);</span><br><span class=\"line\">\t\tCollection values = map.values();</span><br><span class=\"line\">\t\tIterator iter = values.iterator();</span><br><span class=\"line\">\t\twhile(iter.hasNext())&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(iter.next());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;map所有的映射关系：&quot;);</span><br><span class=\"line\">\t\t//映射关系的类型是Map.Entry类型，它是Map接口的内部接口</span><br><span class=\"line\">\t\tSet mappings = map.entrySet();</span><br><span class=\"line\">\t\tfor(Object mapping : mappings)&#123;</span><br><span class=\"line\">\t\t\t//System.out.println(mapping);</span><br><span class=\"line\">\t\t\tMap.Entry entry = (Map.Entry)mapping;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;key是：&quot;+ entry.getKey()+ &quot;，value是：&quot;+entry.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"11-7-3-Map的实现类\"><a href=\"#11-7-3-Map的实现类\" class=\"headerlink\" title=\"11.7.3 Map的实现类\"></a>11.7.3 Map的实现类</h2><h3 id=\"1、HashMap\"><a href=\"#1、HashMap\" class=\"headerlink\" title=\"1、HashMap\"></a>1、HashMap</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</span><br><span class=\"line\">HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</span><br><span class=\"line\">HashMap线程不安全</span><br></pre></td></tr></table></figure>\n<h4 id=\"JDK1-8之前：\"><a href=\"#JDK1-8之前：\" class=\"headerlink\" title=\"JDK1.8之前：\"></a>JDK1.8之前：</h4><ul>\n<li>HashMap的内部存储结构其实是数组和链表的结合。当实例化一个HashMap时，系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</li>\n<li>每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105350.png\" alt></p>\n<ul>\n<li>HashMap的扩容<ul>\n<li>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>那么HashMap什么时候进行扩容呢？</p>\n<ul>\n<li>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)<em>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16</em>0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"JDK1-8之后：\"><a href=\"#JDK1-8之后：\" class=\"headerlink\" title=\"JDK1.8之后：\"></a>JDK1.8之后：</h4><ul>\n<li>HashMap的内部存储结构其实是数组和链表/树的结合。当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</li>\n<li>每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last,或树的叶子结点。（七上八下）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105548.png\" alt></p>\n<p>那么HashMap什么时候进行扩容和树形化呢？</p>\n<ul>\n<li><p>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)<em>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过16</em>0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p>\n</li>\n<li><p>当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize方法时判断树的结点个数低于6个，也会把树在转为链表。</p>\n</li>\n</ul>\n<p>关于映射关系的key是否可以修改？</p>\n<ul>\n<li>映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</li>\n</ul>\n<p>HashSet的底层实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HashSet&lt;E&gt; ......&#123;</span><br><span class=\"line\">    private transient HashMap&lt;E,Object&gt; map;</span><br><span class=\"line\">private static final Object PRESENT = new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    public HashSet() &#123;</span><br><span class=\"line\">        map = new HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public HashSet(int initialCapacity, float loadFactor) &#123;</span><br><span class=\"line\">        map = new HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public HashSet(int initialCapacity) &#123;</span><br><span class=\"line\">        map = new HashMap&lt;&gt;(initialCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class=\"line\">        return map.keySet().iterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int size() &#123;</span><br><span class=\"line\">        return map.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean isEmpty() &#123;</span><br><span class=\"line\">        return map.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean contains(Object o) &#123;</span><br><span class=\"line\">        return map.containsKey(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean add(E e) &#123;</span><br><span class=\"line\">        return map.put(e, PRESENT)==null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean remove(Object o) &#123;</span><br><span class=\"line\">        return map.remove(o)==PRESENT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void clear() &#123;</span><br><span class=\"line\">        map.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、LinkedHashMap\"><a href=\"#2、LinkedHashMap\" class=\"headerlink\" title=\"2、LinkedHashMap\"></a>2、LinkedHashMap</h3><p>LinkedHashMap 是 HashMap 的子类<br>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代顺序与 Key-Value 对的插入顺序一致</p>\n<h3 id=\"3、TreeMap\"><a href=\"#3、TreeMap\" class=\"headerlink\" title=\"3、TreeMap\"></a>3、TreeMap</h3><ul>\n<li>TreeMap存储 Key-Value 对时，需要根据 key进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。</li>\n<li><p>TreeMap 的 Key 的排序：</p>\n<ul>\n<li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li>\n</ul>\n</li>\n<li><p>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。</p>\n</li>\n<li>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</li>\n<li>若使用自定义类作为TreeMap的key，所属类需要重写equals()和hashCode()方法，且equals()方法返回true时，compareTo()方法应返回0。</li>\n</ul>\n<h3 id=\"4、Hashtable\"><a href=\"#4、Hashtable\" class=\"headerlink\" title=\"4、Hashtable\"></a>4、Hashtable</h3><ul>\n<li>Hashtable是个古老的 Map 实现类，线程安全。</li>\n<li>与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value</li>\n<li>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</li>\n<li>Hashtable判断两个key相等、两个value相等的标准，与hashMap一致。</li>\n</ul>\n<h3 id=\"5、Properties\"><a href=\"#5、Properties\" class=\"headerlink\" title=\"5、Properties\"></a>5、Properties</h3><ul>\n<li>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</li>\n<li>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</li>\n<li>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</li>\n</ul>\n<h2 id=\"11-7-4-Map集合框架集\"><a href=\"#11-7-4-Map集合框架集\" class=\"headerlink\" title=\"11.7.4 Map集合框架集\"></a>11.7.4 Map集合框架集</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603105930.png\" alt></p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"有一种能力，叫遇事不纠结","url":"http://yoursite.com/2017/01/03/鸡汤-有一种能力，叫遇事不纠结/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609010303.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;昨晚睡前，看到朋友小肖在群里发消息，求大家开导她，说自己遇上一件十分纠结的事。看着手机屏幕上抓狂的表情，我都能脑补出小肖纠结的样子。</p>\n<p>&emsp;&emsp;前不久，小肖答应朋友一起去自驾游，后来才得知公司有个临时任务需要加班。尽管如此，她还是没有推掉和朋友的约定，心怀侥幸地想着，说不定店长到时给她来个“特赦令”什么的。</p>\n<p>&emsp;&emsp;就这样一天拖一天，眼看着明天就是约定好的出发日期，纠结的小肖还是没能做出任何决定，只是急得如同热锅上的蚂蚁，反复问大家该怎么办。</p>\n<p>&emsp;&emsp;群里有人看不下去了，回她：你认真想想看，哪一件事是你根本就推不了的？</p>\n<p>&emsp;&emsp;结果倒好，想来想去，她还是觉得两件事都推不掉。“工作是很重要，但答应朋友的事也不能轻易爽约啊，这样会显得我很没信用。”小肖说。</p>\n<p>&emsp;&emsp;显而易见，这场聊天，以小肖无法释然的纠结而告终。</p>\n<p>&emsp;&emsp;其实，每个人在做选择的时候可能都会犯难和犹豫。选自己想要的，通常会受限于现实条件；但退而求其次，又觉得心有不甘。于是到最后无论怎么选，你都觉得它是错的。</p>\n<blockquote>\n<ul>\n<li>然而，我们需要知道的是，有些事情本来就没有绝对正确的选择。执着有时是种美德，但如果过于纠结，一味强求所谓的正确答案，只会让自己陷入难以选择的死胡同里。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;真正有魄力的人，很少纠结。</p>\n<p>&emsp;&emsp;我的前任上司，也是圈内公认的业务能手。一年前，她以部门经理的身份空降到我们部门，之后便对所有的项目进行了重新包装，顺利帮助公司实现五年来的第一次盈利。</p>\n<p>&emsp;&emsp;很多人佩服她杀伐决断的能力，但我知道，她其实也遇到过许多棘手的情况。有一回，合作方突然在临近产品上架前提出要撤资，让我们另请高明，而一旦无法如期供货，我们将面临着严重的违约风险。</p>\n<p>&emsp;&emsp;正在大家都捏了把冷汗的时候，她却毫不退缩，转过身就开始召集人员部署会议，商讨解决方案，直到把任务细化到每一个时间节点和每一个人身上。</p>\n<p>&emsp;&emsp;在她的应急处理和团队的分工合作下，我们不仅成功渡过了这次危机，还在圈内打出了好口碑，展示了强大的危机处理能力。</p>\n<p>&emsp;&emsp;后来，我有机会和她一起出差，无比崇拜地同她聊起这件事。她只是微微一笑，说自己当时其实也很紧张。“但是我的职场经验告诉我，越是艰难的时候，越考验个人的应变能力。只有不回避问题，及时处理，才可能把危机变转机。”</p>\n<blockquote>\n<ul>\n<li>这番话，也让我在后来的工作中受用无穷。说到底，遇到困难不可怕，可怕的是你把时间都浪费在了纠结和懊恼上，结果却白白错过了解决问题的时机。</li>\n</ul>\n</blockquote>\n<p>&emsp;&emsp;遇事不纠结，你才不会为其所累。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;每个人的生活，都是由各种未知的变数组成的。很多时候，我们纠结，其实更像是在逃避现实、回避压力。</p>\n<p>&emsp;&emsp;我也曾是一个颇为纠结的人，遇事紧张，反复纠结，草率决定，迅速后悔。当然，为此也吃了不少苦头。</p>\n<p>&emsp;&emsp;直到这几年，随着职场阅历的增加，我开始越来越清楚地意识到：生活是自己的，别人只能给出建议，却无法替你做出决定。你越害怕面对，就越会被各种难题绊倒。</p>\n<p>&emsp;&emsp;正如有人所说，不管怎么郁闷纠结或者找借口，想解决问题，最后都得去面对。所以，我们最大的敌人，一直是自己。而所有的纠结，到头来也都是在跟自己过不去。</p>\n<p>&emsp;&emsp;面对未知，耽于纠结，只会一无所成；敢于面对，才能变得更强大。有了疑问，就尽自己最大的耐心和坚持去解答它。即使最终依然不能如自己所愿，但只要为此尽力了，相信结局就能坦然无悔。</p>\n<p>&emsp;&emsp;还是那句话，很多事情，并没有标准答案，唯有笃定坚持。</p>\n<blockquote>\n<ul>\n<li>愿你我都能在人生这条路上，不纠结过去，不将就未来，轻装上阵，幸福前行。</li>\n</ul>\n</blockquote>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"10. JavaSE-常用类","url":"http://yoursite.com/2017/01/01/10. JavaSE-常用类/","content":"<h1 id=\"10-1包装类Wrapper\"><a href=\"#10-1包装类Wrapper\" class=\"headerlink\" title=\"10.1包装类Wrapper\"></a>10.1包装类Wrapper</h1><p>学习API更深的意义在于复习面向对象的知识。查看源代码，学习源代码。</p>\n<h2 id=\"10-1-1-为什么需要包装类\"><a href=\"#10-1-1-为什么需要包装类\" class=\"headerlink\" title=\"10.1.1 为什么需要包装类\"></a>10.1.1 为什么需要包装类</h2><p>Java并不是纯面向对象的语言。Java语言是一个面向对象的语言，但是Java中的基本数据类型却是不面向对象的。基本数据类型有它的优势：性能（效率高，节省空间）。<br>但是我们在实际使用中经常需要将基本数据类型转化成对象，便于操作。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）集合的操作，</span><br><span class=\"line\">（2）使用Object类型接收任意类型的数据等，</span><br><span class=\"line\">（3）泛型实参，这时，我们就需要将基本数据类型数据转化为对象。</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-1-2-包装类\"><a href=\"#10-1-2-包装类\" class=\"headerlink\" title=\"10.1.2 包装类\"></a>10.1.2 包装类</h2><p>包装类均位于java.lang包，包装类和基本数据类型的对应关系，如图10-1：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530233521.png\" alt></p>\n<p>其中有六个都是继承自java.lang.Number类：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530234032.png\" alt></p>\n<h2 id=\"10-1-3自动装箱（auto-boxing）与自动拆箱（unboxing）\"><a href=\"#10-1-3自动装箱（auto-boxing）与自动拆箱（unboxing）\" class=\"headerlink\" title=\"10.1.3自动装箱（auto_boxing）与自动拆箱（unboxing）\"></a>10.1.3自动装箱（auto_boxing）与自动拆箱（unboxing）</h2><p>JDK1.5之前需要手动装箱与拆箱，JDK1.5之后支持自动装箱与自动拆箱。</p>\n<h3 id=\"自动装箱\"><a href=\"#自动装箱\" class=\"headerlink\" title=\". 自动装箱\"></a>. 自动装箱</h3><p>基本数据类型就自动的封装到与它相同类型的包装中，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = 100;</span><br></pre></td></tr></table></figure>\n<p>本质上是，编译器编译时为我们添加了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i = new Integer(100);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-自动拆箱\"><a href=\"#2-自动拆箱\" class=\"headerlink\" title=\"2. 自动拆箱\"></a>2. 自动拆箱</h3><p>包装类对象自动转换成基本类型数据。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = new Integer(100);</span><br></pre></td></tr></table></figure>\n<p>本质上，编译器编译时为我们添加了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = new Integer(100).intValue();</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-1-4-包装类的作用\"><a href=\"#10-1-4-包装类的作用\" class=\"headerlink\" title=\"10.1.4 包装类的作用\"></a>10.1.4 包装类的作用</h2><h3 id=\"1-数据类型的范围\"><a href=\"#1-数据类型的范围\" class=\"headerlink\" title=\"1 数据类型的范围\"></a>1 数据类型的范围</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIN_VALUE、MAX_VALUE</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Float和Double中还有正无穷大POSITIVE_INFINITY、负无穷大NEGATIVE_INFINITY，还NaN，是Not a Number的缩写。NaN 用于处理计算中出现的错误情况，比如 0.0 除以 0.0 或者求负数的平方根。</li>\n<li>程序员可以利用这种定制的 NaN 值中的特定位模式来表达某些诊断信息。</li>\n</ul>\n<h3 id=\"2-数据类型的转换\"><a href=\"#2-数据类型的转换\" class=\"headerlink\" title=\"2 数据类型的转换\"></a>2 数据类型的转换</h3><h4 id=\"1、字符串转成包装类对象\"><a href=\"#1、字符串转成包装类对象\" class=\"headerlink\" title=\"1、字符串转成包装类对象\"></a>1、字符串转成包装类对象</h4><p>（1）使用包装类型的构造方法<br>除了Character类型，其他7中类型都有1个构造方法，其参数是字符串类型<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer t2=new Integer(&quot;500&quot;);//参数是字符串，字符串的值是必须对应的数值</span><br><span class=\"line\">Integer t3=new Integer(&quot;abc&quot;);// java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br></pre></td></tr></table></figure>\n<p>（2）使用包装类的valueOf方法<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i=Integer.valueOf(&quot;500&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、字符串转成基本数据类型\"><a href=\"#2、字符串转成基本数据类型\" class=\"headerlink\" title=\"2、字符串转成基本数据类型\"></a>2、字符串转成基本数据类型</h4><p>通过包装类的parseXxx(String s)静态方法<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i=Integer.parseInt(&quot;500&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-包装类的其他方法\"><a href=\"#3-包装类的其他方法\" class=\"headerlink\" title=\"3. 包装类的其他方法\"></a>3. 包装类的其他方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Integer类型</span><br><span class=\"line\">public static String toBinaryString(int i)  //把十进制转成二进制</span><br><span class=\"line\">public static String toHexString(int i)     //把十进制转成十六进制</span><br><span class=\"line\">public static String toOctalString(int i)   //把十进制转成八进制</span><br><span class=\"line\">2、Character类型</span><br><span class=\"line\">public static char toUpperCase(char ch)  //转成大写字母</span><br><span class=\"line\">public static char toLowerCase(char ch)  //转成小写字母</span><br><span class=\"line\">其他的查看相关API文档即可</span><br><span class=\"line\">3、equals</span><br><span class=\"line\">按照包装的基本数据类型的值比较</span><br><span class=\"line\">4、compareTo</span><br><span class=\"line\">按照包装的基本数据类型的值比较</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-1-5-缓存问题\"><a href=\"#10-1-5-缓存问题\" class=\"headerlink\" title=\"10.1.5 缓存问题\"></a>10.1.5 缓存问题</h2><p>我们在编程时大量需要值在-128到127范围之间的Integer对象。如果只能通过new来创建，需要在堆中开辟大量值一样的Integer对象。这是相当不划算的，IntegerCache.cache很好的起到了缓存的作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缓存</span><br><span class=\"line\">byte Byte -128–127</span><br><span class=\"line\">short Short -128–127</span><br><span class=\"line\">int Integer -128—127</span><br><span class=\"line\">long Long -128—127</span><br><span class=\"line\">float Float 不缓存</span><br><span class=\"line\">double Double 不缓存</span><br><span class=\"line\">char Character 0–127</span><br><span class=\"line\">boolean Boolean TURE，FALSE</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-2-字符串String类\"><a href=\"#10-2-字符串String类\" class=\"headerlink\" title=\"10.2 字符串String类\"></a>10.2 字符串String类</h1><h2 id=\"10-2-1-字符串String类的特点\"><a href=\"#10-2-1-字符串String类的特点\" class=\"headerlink\" title=\"10.2.1 字符串String类的特点\"></a>10.2.1 字符串String类的特点</h2><p>字符串的学习，有的同学就看看API，记下方法，有的同学看看源代码，还有的同学画画图，自然学的深度是不一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The &#123;@code String&#125; class represents character strings. All</span><br><span class=\"line\"> * string literals in Java programs, such as &#123;@code &quot;abc&quot;&#125;, are</span><br><span class=\"line\"> * implemented as instances of this class.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * Strings are constant; their values cannot be changed after they</span><br><span class=\"line\"> * are created. String buffers support mutable strings.</span><br><span class=\"line\"> * Because String objects are immutable they can be shared. For example:</span><br><span class=\"line\"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class=\"line\"> *     String str = &quot;abc&quot;;</span><br><span class=\"line\"> * &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;</span><br><span class=\"line\"> * is equivalent to:</span><br><span class=\"line\"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class=\"line\"> *     char data[] = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;;</span><br><span class=\"line\"> *     String str = new String(data);</span><br><span class=\"line\"> * &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;</span><br><span class=\"line\"> * Here are some more examples of how strings can be used:</span><br><span class=\"line\"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class=\"line\"> *     System.out.println(&quot;abc&quot;);</span><br><span class=\"line\"> *     String cde = &quot;cde&quot;;</span><br><span class=\"line\"> *     System.out.println(&quot;abc&quot; + cde);</span><br><span class=\"line\"> *     String c = &quot;abc&quot;.substring(2,3);</span><br><span class=\"line\"> *     String d = cde.substring(1, 2);</span><br><span class=\"line\"> * &lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * The class &#123;@code String&#125; includes methods for examining</span><br><span class=\"line\"> * individual characters of the sequence, for comparing strings, for</span><br><span class=\"line\"> * searching strings, for extracting substrings, and for creating a</span><br><span class=\"line\"> * copy of a string with all characters translated to uppercase or to</span><br><span class=\"line\"> * lowercase. Case mapping is based on the Unicode Standard version</span><br><span class=\"line\"> * specified by the &#123;@link java.lang.Character Character&#125; class.</span><br><span class=\"line\"> * &lt;p&gt;</span><br><span class=\"line\"> * The Java language provides special support for the string</span><br><span class=\"line\"> * concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of</span><br><span class=\"line\"> * other objects to strings. String concatenation is implemented</span><br><span class=\"line\"> * through the &#123;@code StringBuilder&#125;(or &#123;@code StringBuffer&#125;)</span><br><span class=\"line\"> * class and its &#123;@code append&#125; method.</span><br><span class=\"line\"> * String conversions are implemented through the method</span><br><span class=\"line\"> * &#123;@code toString&#125;, defined by &#123;@code Object&#125; and</span><br><span class=\"line\"> * inherited by all classes in Java. For additional information on</span><br><span class=\"line\"> * string concatenation and conversion, see Gosling, Joy, and Steele,</span><br><span class=\"line\"> * &lt;i&gt;The Java Language Specification&lt;/i&gt;.</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String 类代表字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。 </li>\n<li>字符串是常量；它们的值在创建之后不能更改。字符串缓冲区支持可变的字符串。因为 String 对象是不可变的，所以可以共享。例如： </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = &quot;abc&quot;;</span><br></pre></td></tr></table></figure>\n<p> 等效于： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char data[] = &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;;</span><br><span class=\"line\">     String str = new String(data);</span><br></pre></td></tr></table></figure>\n<p>下面给出了一些如何使用字符串的更多示例： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(&quot;abc&quot;);</span><br><span class=\"line\">     String cde = &quot;cde&quot;;</span><br><span class=\"line\">     System.out.println(&quot;abc&quot; + cde);</span><br><span class=\"line\">     String c = &quot;abc&quot;.substring(2,3);</span><br><span class=\"line\">     String d = cde.substring(1, 2);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。</li>\n<li><p>大小写映射基于 Character 类指定的 Unicode 标准版。 </p>\n</li>\n<li><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。</p>\n</li>\n<li>字符串串联是通过 StringBuilder（或 StringBuffer）类及其 append 方法实现的。</li>\n<li>字符串转换是通过 toString 方法实现的，该方法由 Object 类定义，并可被 Java 中的所有类继承。</li>\n<li>有关字符串串联和转换的更多信息，请参阅 Gosling、Joy 和 Steele 合著的 The Java Language Specification。 </li>\n</ul>\n<h3 id=\"1-String是个final类\"><a href=\"#1-String是个final类\" class=\"headerlink\" title=\"1 String是个final类\"></a>1 String是个final类</h3><h3 id=\"2-String是不可变的字符序列\"><a href=\"#2-String是不可变的字符序列\" class=\"headerlink\" title=\"2 String是不可变的字符序列\"></a>2 String是不可变的字符序列</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class String</span><br><span class=\"line\">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class=\"line\">    /** The value is used for character storage. */</span><br><span class=\"line\">    private final char value[];</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Cache the hash code for the string */</span><br><span class=\"line\">    private int hash; // Default to 0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String对象的字符内容是存储在一个字符数组中的。</li>\n<li>private意味着外面无法直接获取字符数组，而且String没有提供value的get和set方法，</li>\n<li>final意味着字符数组的引用不可改变，即通过让value指向新的数组对象来实现修改String对象，</li>\n<li>而且String也没有提供方法来修改value数组某个元素值，因此字符串的字符数组内容也不可变。</li>\n</ul>\n<p>疑问？那么字符串的拼接、字符串的截取、字符串的替换等操作是如何实现的呢？<br>每次修改都创建一个新的char数组表示修改结果。</p>\n<h3 id=\"3-String对象的创建\"><a href=\"#3-String对象的创建\" class=\"headerlink\" title=\"3 String对象的创建\"></a>3 String对象的创建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = “hello”;</span><br><span class=\"line\">String  s1 = new String();   //  本质上  this.value = new char[0];</span><br><span class=\"line\">String  s2 = new String(String original);  //this.value = original.value;</span><br><span class=\"line\">String  s3 = new String(char[] a);  //this.value = Arrays.copyOf(value, value.length);</span><br><span class=\"line\">String  s4 = new String(char[] a,int startIndex,int count)</span><br><span class=\"line\">.......</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235002.png\" alt></p>\n<h3 id=\"4-字符串对象是如何存储的\"><a href=\"#4-字符串对象是如何存储的\" class=\"headerlink\" title=\"4 字符串对象是如何存储的\"></a>4 字符串对象是如何存储的</h3><p>字符串常量存储在字符串常量池，目的是共享<br>字符串非常量对象存储在堆中。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235346.png\" alt></p>\n<h3 id=\"5-String的拼接\"><a href=\"#5-String的拼接\" class=\"headerlink\" title=\"5 String的拼接\"></a>5 String的拼接</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235426.png\" alt></p>\n<p>结论：<br>常量与常量的拼接结果在常量池<br>只要其中有一个是变量，结果就在堆中<br>如果拼接的结果调用intern()方法，就在常量池中</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235538.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530235559.png\" alt></p>\n<h3 id=\"6、String对象的比较\"><a href=\"#6、String对象的比较\" class=\"headerlink\" title=\"6、String对象的比较\"></a>6、String对象的比较</h3><p><strong>==比较的是地址。</strong><br>equals比较的是字符串的内容，重写了Object的equals方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object anObject) &#123;</span><br><span class=\"line\">        if (this == anObject) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (anObject instanceof String) &#123;</span><br><span class=\"line\">            String anotherString = (String)anObject;</span><br><span class=\"line\">            int n = value.length;</span><br><span class=\"line\">            if (n == anotherString.value.length) &#123;</span><br><span class=\"line\">                char v1[] = value;</span><br><span class=\"line\">                char v2[] = anotherString.value;</span><br><span class=\"line\">                int i = 0;</span><br><span class=\"line\">                while (n-- != 0) &#123;</span><br><span class=\"line\">                    if (v1[i] != v2[i])</span><br><span class=\"line\">                        return false;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-2-2-String类的常用方法\"><a href=\"#10-2-2-String类的常用方法\" class=\"headerlink\" title=\"10.2.2 String类的常用方法\"></a>10.2.2 String类的常用方法</h2><h3 id=\"1、常用方法系列之一\"><a href=\"#1、常用方法系列之一\" class=\"headerlink\" title=\"1、常用方法系列之一\"></a>1、常用方法系列之一</h3><ul>\n<li>int length()：返回字符串的长度： return value.length;</li>\n<li>boolean isEmpty()：判断是否是空字符串：return value.length == 0;</li>\n<li>String toLowerCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</li>\n<li>String toUpperCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</li>\n<li>String trim()：返回字符串的副本，忽略前导空白和尾部空白。</li>\n<li>boolean equals(Object obj)：比较字符串的内容</li>\n<li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</li>\n<li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li>\n</ul>\n<h3 id=\"2-String类和字符相关操作\"><a href=\"#2-String类和字符相关操作\" class=\"headerlink\" title=\"2 String类和字符相关操作\"></a>2 String类和字符相关操作</h3><ul>\n<li>char charAt(int index)： 返回某索引处的字符return value[index];</li>\n<li>char[ ] toCharArray()：将此字符串转换为一个新的字符数组</li>\n<li>String(char[ ] value)：分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。 </li>\n<li>String(char[ ] value, int offset, int count)：分配一个新的 String，它包含取自字符数组参数一个子数组的字符。 </li>\n</ul>\n<h3 id=\"3-String类字节与字符串操作方法\"><a href=\"#3-String类字节与字符串操作方法\" class=\"headerlink\" title=\"3 String类字节与字符串操作方法\"></a>3 String类字节与字符串操作方法</h3><p>编码：把字符–&gt;字节</p>\n<ul>\n<li>byte[ ] getBytes()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</li>\n<li>byte[ ] getBytes(Charset charset) ：使用给定的 charset 将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</li>\n<li>byte[ ] getBytes(String charsetName) ：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。<br>解码：把字节–&gt;字符</li>\n<li>String(byte[] bytes) ：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, Charset charset)：通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, int offset, int length) ：通过使用平台的默认字符集解码指定的 byte 子数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, int offset, int length, Charset charset)：通过使用指定的 charset 解码指定的 byte 子数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, int offset, int length, String charsetName)：通过使用指定的字符集解码指定的 byte 子数组，构造一个新的 String。 </li>\n<li>String(byte[] bytes, String charsetName)：通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。 </li>\n</ul>\n<h3 id=\"4-String类判断是否以指定内容开头或结尾\"><a href=\"#4-String类判断是否以指定内容开头或结尾\" class=\"headerlink\" title=\"4 String类判断是否以指定内容开头或结尾\"></a>4 String类判断是否以指定内容开头或结尾</h3><ul>\n<li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束。 </li>\n<li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始。 </li>\n<li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</li>\n</ul>\n<h3 id=\"5-String类字符串查找操作\"><a href=\"#5-String类字符串查找操作\" class=\"headerlink\" title=\"5 String类字符串查找操作\"></a>5 String类字符串查找操作</h3><ul>\n<li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true。</li>\n<li>int indexOf(int ch)：返回指定字符在此字符串中第一次出现处的索引。 </li>\n<li>int indexOf(int ch, int fromIndex)：返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。 </li>\n<li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引。 </li>\n<li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。 </li>\n<li>int lastIndexOf(int ch)：返回指定字符在此字符串中最后一次出现处的索引。 </li>\n<li>int lastIndexOf(int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。 </li>\n<li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引。 </li>\n<li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。<br>indexOf和lastIndexOf方法如果未找到都是返回-1</li>\n</ul>\n<h3 id=\"6-String类字符串截取操作\"><a href=\"#6-String类字符串截取操作\" class=\"headerlink\" title=\"6 String类字符串截取操作\"></a>6 String类字符串截取操作</h3><ul>\n<li>String substring(int beginIndex) <pre><code>返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。 \n</code></pre></li>\n<li>String substring(int beginIndex, int endIndex) <pre><code>返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。 \n</code></pre></li>\n</ul>\n<h3 id=\"7-String类是否匹配正则\"><a href=\"#7-String类是否匹配正则\" class=\"headerlink\" title=\"7 String类是否匹配正则\"></a>7 String类是否匹配正则</h3><ul>\n<li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tString str = &quot;12345&quot;;</span><br><span class=\"line\">\t\t//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span><br><span class=\"line\">\t\tboolean matches = str.matches(&quot;\\\\d+&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(matches);</span><br><span class=\"line\">\t\tString tel = &quot;0571-4534289&quot;;</span><br><span class=\"line\">\t\t//判断这是否是一个杭州的固定电话</span><br><span class=\"line\">\t\tboolean result = tel.matches(&quot;0571-\\\\d&#123;7,8&#125;&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-String类替换操作\"><a href=\"#8-String类替换操作\" class=\"headerlink\" title=\"8 String类替换操作\"></a>8 String类替换操作</h3><ul>\n<li>String replace(char oldChar, char newChar)： <pre><code>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 \n</code></pre></li>\n<li>String replace(CharSequence target, CharSequence replacement)： <pre><code>使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。 \n</code></pre></li>\n<li>replaceAll(String regex, String replacement)： <pre><code>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 \n</code></pre></li>\n<li>String replaceFirst(String regex, String replacement)： <pre><code>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 \n</code></pre></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tString str = &quot;12hello34world5java7891mysql456&quot;;</span><br><span class=\"line\">\t\t//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span><br><span class=\"line\">\t\tString string = str.replaceAll(&quot;\\\\d+&quot;, &quot;,&quot;).replaceAll(&quot;^,|,$&quot;, &quot;&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(string);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-String类字符串拆分操作\"><a href=\"#9-String类字符串拆分操作\" class=\"headerlink\" title=\"9 String类字符串拆分操作\"></a>9 String类字符串拆分操作</h3><ul>\n<li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。 </li>\n<li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tString str = &quot;hello|world|java&quot;;</span><br><span class=\"line\">\t\tString[] strings = str.split(&quot;\\\\|&quot;);</span><br><span class=\"line\">\t\tfor (String string : strings) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString str2 = &quot;hello.world.java&quot;;</span><br><span class=\"line\">\t\tString[] strings2 = str2.split(&quot;\\\\.&quot;);</span><br><span class=\"line\">\t\tfor (String string : strings2) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-3-可变字符序列：字符串缓冲区\"><a href=\"#10-3-可变字符序列：字符串缓冲区\" class=\"headerlink\" title=\"10.3 可变字符序列：字符串缓冲区\"></a>10.3 可变字符序列：字符串缓冲区</h1><h2 id=\"10-3-1-StringBuffer、StringBuilder、String的区别\"><a href=\"#10-3-1-StringBuffer、StringBuilder、String的区别\" class=\"headerlink\" title=\"10.3.1 StringBuffer、StringBuilder、String的区别\"></a>10.3.1 StringBuffer、StringBuilder、String的区别</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000436.png\" alt></p>\n<h3 id=\"1-一个类似于-String\"><a href=\"#1-一个类似于-String\" class=\"headerlink\" title=\"1 一个类似于 String\"></a>1 一个类似于 String</h3><p>的字符串缓冲区，但能被修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容，所有对StringBuffer或StringBuilder对象的字符序列的修改不会产生新的StringBuffer或StringBuilder对象，这点和String很大的不同。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000517.png\" alt></p>\n<p>value没有final声明,value可以不断扩容，count记录有效字符的个数。</p>\n<h3 id=\"2-StringBuilder：\"><a href=\"#2-StringBuilder：\" class=\"headerlink\" title=\"2 StringBuilder：\"></a>2 StringBuilder：</h3><p>线程安全，效率低；StringBuffer：线程不安全，效率高</p>\n<h2 id=\"10-3-2-StringBuffer和StringBuilder不同的API\"><a href=\"#10-3-2-StringBuffer和StringBuilder不同的API\" class=\"headerlink\" title=\"10.3.2 StringBuffer和StringBuilder不同的API\"></a>10.3.2 StringBuffer和StringBuilder不同的API</h2><h3 id=\"1、构造器\"><a href=\"#1、构造器\" class=\"headerlink\" title=\"1、构造器\"></a>1、构造器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuffer或StringBuilder对象的创建必须用new+构造器。</span><br><span class=\"line\">StringBuffer()   初始容量为16的字符串缓冲区</span><br><span class=\"line\">StringBuffer(int size)   构造指定容量的字符串缓冲区</span><br><span class=\"line\">StringBuffer(String str)  将内容初始化为指定字符串内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、和字符序列改变有关的方法\"><a href=\"#2、和字符序列改变有关的方法\" class=\"headerlink\" title=\"2、和字符序列改变有关的方法\"></a>2、和字符序列改变有关的方法</h3><p>而且所有这些方法支持方法链</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串拼接</span><br><span class=\"line\">StringBuffer delete(int start,int end)：删除指定位置的内容</span><br><span class=\"line\">StringBuffer insert(int offset, xx)：在指定位置插入xx</span><br><span class=\"line\">StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span><br><span class=\"line\">StringBuffer reverse() ：把当前字符序列逆转</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tStringBuffer sf = new StringBuffer();</span><br><span class=\"line\">\t\tsf.append(&quot;hello&quot;).append(&quot;world&quot;).append(&quot;java&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(sf);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>方法链的原理</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000702.png\" alt></p>\n<p>当append和insert时，如果原来value数组长度不够，可扩容</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000722.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000744.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531000842.png\" alt></p>\n<h2 id=\"10-3-3-效率测试\"><a href=\"#10-3-3-效率测试\" class=\"headerlink\" title=\"10.3.3 效率测试\"></a>10.3.3 效率测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.api.string;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestStringBuilder &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttestStringBuilder();</span><br><span class=\"line\">\t\ttestStringBuffer();</span><br><span class=\"line\">\t\ttestString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void testString()&#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\tString s = new String(&quot;0&quot;);</span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=10000;i++)&#123;</span><br><span class=\"line\">\t\t\ts += i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\tlong end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;String拼接+用时：&quot;+(end-start));</span><br><span class=\"line\">\t\tlong memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class=\"line\">        System.out.println(&quot;String拼接+memory: &quot; + memory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void testStringBuilder()&#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\tStringBuilder s = new StringBuilder(&quot;0&quot;);</span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=10000;i++)&#123;</span><br><span class=\"line\">\t\t\ts.append(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\tlong end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;StringBuilder拼接+用时：&quot;+(end-start));</span><br><span class=\"line\">\t\tlong memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class=\"line\">        System.out.println(&quot;StringBuilder拼接+memory: &quot; + memory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void testStringBuffer()&#123;</span><br><span class=\"line\">\t\tlong start = System.currentTimeMillis();</span><br><span class=\"line\">\t\tStringBuffer s = new StringBuffer(&quot;0&quot;);</span><br><span class=\"line\">\t\tfor(int i=1;i&lt;=10000;i++)&#123;</span><br><span class=\"line\">\t\t\ts.append(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t\tlong end = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;StringBuffer拼接+用时：&quot;+(end-start));</span><br><span class=\"line\">\t\tlong memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class=\"line\">        System.out.println(&quot;StringBuffer拼接+memory: &quot; + memory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-4-System系统类\"><a href=\"#10-4-System系统类\" class=\"headerlink\" title=\"10.4 System系统类\"></a>10.4 System系统类</h1><ul>\n<li>System 类包含一些有用的类字段和方法。它不能被实例化。 </li>\n<li>在 System 类提供的设施中，有标准输入、标准输出和错误输出流；对外部定义的属性和环境变量的访问；加载文件和库的方法；还有快速复制数组的一部分的实用方法。 </li>\n</ul>\n<h2 id=\"10-4-1-标准输入、标准输出和错误输出流对象\"><a href=\"#10-4-1-标准输入、标准输出和错误输出流对象\" class=\"headerlink\" title=\"10.4.1 标准输入、标准输出和错误输出流对象\"></a>10.4.1 标准输入、标准输出和错误输出流对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrintStream err：“标准”错误输出流。 </span><br><span class=\"line\">InputStream in：“标准”输入流。 </span><br><span class=\"line\">PrintStream out：“标准”输出流。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestSystem&#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)&#123;</span><br><span class=\"line\">\t\tScanner input = new Scanner(System.in);</span><br><span class=\"line\">\t\tSystem.out.print(&quot;请输入成绩：&quot;);</span><br><span class=\"line\">\t\tint score = input.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(score&gt;=0 &amp;&amp; score&lt;=100)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;成绩是：&quot; + score);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tSystem.err.println(&quot;输入有误，成绩应该在[0,100]&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-4-2-常用方法\"><a href=\"#10-4-2-常用方法\" class=\"headerlink\" title=\"10.4.2 常用方法\"></a>10.4.2 常用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void arraycopy(Object src, int srcPos, Object dest, int destPos, int length) ：从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。</span><br><span class=\"line\">long currentTimeMillis() ：返回以毫秒为单位的当前时间。  </span><br><span class=\"line\">void exit(int status) ：终止当前正在运行的 Java 虚拟机。</span><br><span class=\"line\">void gc()：运行垃圾回收器。  </span><br><span class=\"line\">Properties getProperties()：确定当前的系统属性。 </span><br><span class=\"line\">String getProperty(String key)：获取指定键指示的系统属性。 </span><br><span class=\"line\">void setErr(PrintStream err) ：重新分配“标准”错误输出流。 </span><br><span class=\"line\">void setIn(InputStream in)：重新分配“标准”输入流。 </span><br><span class=\"line\">void setOut(PrintStream out)：重新分配“标准”输出流。 </span><br><span class=\"line\">String setProperty(String key, String value) ：设置指定键指示的系统属性。</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-5-JDK1-8之前日期时间类\"><a href=\"#10-5-JDK1-8之前日期时间类\" class=\"headerlink\" title=\"10.5 JDK1.8之前日期时间类\"></a>10.5 JDK1.8之前日期时间类</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531001054.png\" alt></p>\n<h2 id=\"10-5-1-java-lang-System类\"><a href=\"#10-5-1-java-lang-System类\" class=\"headerlink\" title=\"10.5.1 java.lang.System类\"></a>10.5.1 java.lang.System类</h2><p>System类提供的public static long currentTimeMillis()用来返回当前时间与1970年1月1日0时0分0秒GMT之间以毫秒为单位的时间差。此方法适于计算时间差。</p>\n<h2 id=\"10-5-2-java-util-Date\"><a href=\"#10-5-2-java-util-Date\" class=\"headerlink\" title=\"10.5.2 java.util.Date\"></a>10.5.2 java.util.Date</h2><p>它的对象表示一个特定的瞬间，精确到毫秒。<br>Java中时间的表示说白了也是数字，是从标准纪元1970年1月1日0时0分0秒GMT到某个时刻的毫秒数，类型是long<br>理解：一维的时间轴，选择1970年1月1日0时0分0秒时间为0刻度，1毫秒一刻度  </p>\n<h3 id=\"构造方法：\"><a href=\"#构造方法：\" class=\"headerlink\" title=\"构造方法：\"></a>构造方法：</h3><ul>\n<li>Date()：      源代码：this(System.currentTimeMillis());</li>\n<li>Date(long date)</li>\n</ul>\n<h3 id=\"常用方法：\"><a href=\"#常用方法：\" class=\"headerlink\" title=\"常用方法：\"></a>常用方法：</h3><ul>\n<li>getTime():返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li>\n<li>toString():把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中：<br> dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)， zzz是时间标准。</li>\n</ul>\n<h3 id=\"已过时的方法：\"><a href=\"#已过时的方法：\" class=\"headerlink\" title=\"已过时的方法：\"></a>已过时的方法：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-public Date(int year,int month,int date,int hrs,int min,int sec)</span><br><span class=\"line\">参数：</span><br><span class=\"line\"></span><br><span class=\"line\">year - 减 1900 的年份。</span><br><span class=\"line\">month - 0-11 之间的月份。</span><br><span class=\"line\">date - 一月中 1-31 之间的某一天。</span><br><span class=\"line\">hrs - 0-23 之间的小时数。</span><br><span class=\"line\">min - 0-59 之间的分钟数。</span><br><span class=\"line\">sec - 0-59 之间的秒数。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>getYear() 从 JDK 1.1 开始，由 Calendar.get(Calendar.YEAR) - 1900 取代。</li>\n<li>getMonth()从 JDK 1.1 开始，由 Calendar.get(Calendar.MONTH) 取代。返回的值在 0 和 11 之间，值 0 表示 1 月。 </li>\n<li>getDate() JDK 1.1 开始，由 Calendar.get(Calendar.DAY_OF_MONTH) 取代。返回的值在 1 和 31 之间</li>\n<li>getDay()从 JDK 1.1 开始，由 Calendar.get(Calendar.DAY_OF_WEEK) 取代。 返回值 (0 = Sunday, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday) 表示一周中的某一天</li>\n<li>getHours()从 JDK 1.1 开始，由 Calendar.get(Calendar.HOUR_OF_DAY) 取代。返回值是一个数字（0 至 23）</li>\n<li>getMinutes()从 JDK 1.1 开始，由 Calendar.get(Calendar.MINUTE) 取代。 返回值在 0 和 59 之间。 </li>\n<li>getSeconds()从 JDK 1.1 开始，由 Calendar.get(Calendar.SECOND) 取代。回的值在 0 和 61 之间。值 60 和 61 只可能发生在考虑了闰秒的 Java 虚拟机上。 </li>\n</ul>\n<h2 id=\"10-5-3-java-util-TimeZone和Locale\"><a href=\"#10-5-3-java-util-TimeZone和Locale\" class=\"headerlink\" title=\"10.5.3 java.util.TimeZone和Locale\"></a>10.5.3 java.util.TimeZone和Locale</h2><ul>\n<li>Locale 对象表示了特定的地理、政治和文化地区。需要 Locale 来执行其任务的操作称为语言环境敏感的 操作，它使用 Locale 为用户量身定制信息。例如，显示一个数值，日期就是语言环境敏感的操作，应该根据用户的国家、地区或文化的风俗/传统来格式化该数值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取Locale对象：</span><br><span class=\"line\"> Locale(String language)</span><br><span class=\"line\"> Locale(String language, String country)</span><br><span class=\"line\"> Locale.CHINA、Locale.US等</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocale loc = Locale.CHINA;</span><br><span class=\"line\">\t\tSystem.out.println(loc);//zh_CN</span><br><span class=\"line\">\t\tSystem.out.println(Locale.US);//en_US</span><br><span class=\"line\">\t\tSystem.out.println(Locale.JAPAN);//ja_JP</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tLocale c = new Locale(&quot;zh&quot;,&quot;CN&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>通常，使用 TimeZone的getDefault 获取 TimeZone，getDefault 基于程序运行所在的时区创建 TimeZone。例如，对于在日本运行的程序，getDefault 基于日本标准时间创建 TimeZone 对象。 </p>\n</li>\n<li><p>也可以用TimeZone的 getTimeZone 及时区 ID 获取 TimeZone 。例如美国太平洋时区的时区 ID 是 “America/Los_Angeles”。因此，可以使用下面语句获得美国太平洋时间 TimeZone 对象： </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TimeZone tz = TimeZone.getTimeZone(&quot;America/Los_Angeles&quot;);</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTimeZone t = TimeZone.getDefault();</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTimeZone t1 = TimeZone.getTimeZone(&quot;America/New_York&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(t1);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTimeZone t2 = TimeZone.getTimeZone(&quot;Asia/Shanghai&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(t2);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] all = TimeZone.getAvailableIDs();</span><br><span class=\"line\">for (String id : all) &#123;</span><br><span class=\"line\">\tSystem.out.println(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-5-4-java-util-Calendar\"><a href=\"#10-5-4-java-util-Calendar\" class=\"headerlink\" title=\"10.5.4 java.util.Calendar\"></a>10.5.4 java.util.Calendar</h2><ul>\n<li>Calendar 类是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等 日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。瞬间可用毫秒值来表示，它是距历元（即格林威治标准时间 1970 年 1 月 1 日的 00:00:00.000，格里高利历）的偏移量。 </li>\n<li>人们对于时间的认识是：某年某月某日，这样的日期概念。计算机是long类型的数字。通过Calendar在二者之间搭起桥梁。而且Calendar提供了很多关于日期时间计算的方法。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531001631.png\" alt></p>\n<ul>\n<li>GregorianCalendar（公历）是Calendar的一个具体子类，提供了世界上大多数国家/地区使用的标准日历系统。</li>\n</ul>\n<p>注意：<br>月份：一月是0，二月是1，以此类推，12月是11<br>星期：周日是1，周二是2,。。。。周六是7</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531001747.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认语言环境的时间（时区）</span><br><span class=\"line\">\t\tCalendar c = new GregorianCalendar();</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * java.util.GregorianCalendar[</span><br><span class=\"line\">\t\t * time=1480667849712,</span><br><span class=\"line\">\t\t * areFieldsSet=true,</span><br><span class=\"line\">\t\t * areAllFieldsSet=true,</span><br><span class=\"line\">\t\t * lenient=true,</span><br><span class=\"line\">\t\t * zone=sun.util.calendar.ZoneInfo[id=&quot;Asia/Shanghai&quot;,offset=28800000,dstSavings=0,useDaylight=false,transitions=19,lastRule=null],</span><br><span class=\"line\">\t\t * firstDayOfWeek=1,</span><br><span class=\"line\">\t\t * minimalDaysInFirstWeek=1,</span><br><span class=\"line\">\t\t * ERA=1,</span><br><span class=\"line\">\t\t * YEAR=2016,</span><br><span class=\"line\">\t\t * MONTH=11,</span><br><span class=\"line\">\t\t * WEEK_OF_YEAR=49,//本年第49周</span><br><span class=\"line\">\t\t * WEEK_OF_MONTH=1,//本月第1周</span><br><span class=\"line\">\t\t * DAY_OF_MONTH=2,</span><br><span class=\"line\">\t\t * DAY_OF_YEAR=337,//本年第337天</span><br><span class=\"line\">\t\t * DAY_OF_WEEK=6,</span><br><span class=\"line\">\t\t * DAY_OF_WEEK_IN_MONTH=1,\t\t</span><br><span class=\"line\">\t\t * AM_PM=1, //下午</span><br><span class=\"line\">\t\t * HOUR=4,</span><br><span class=\"line\">\t\t * HOUR_OF_DAY=16,  //HOUR是12小时制， HOUR_OF_DAY是24小时制</span><br><span class=\"line\">\t\t * MINUTE=37,</span><br><span class=\"line\">\t\t * SECOND=29,</span><br><span class=\"line\">\t\t * MILLISECOND=712,</span><br><span class=\"line\">\t\t * ZONE_OFFSET=28800000,</span><br><span class=\"line\">\t\t * DST_OFFSET=0]</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//默认语言环境的时间（时区）</span><br><span class=\"line\">\t\tCalendar c = new GregorianCalendar();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tint year=c.get(Calendar.YEAR);</span><br><span class=\"line\">\t\tint month=c.get(Calendar.MONTH);</span><br><span class=\"line\">\t\tint date=c.get(Calendar.DAY_OF_MONTH);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tint hour=c.get(Calendar.HOUR_OF_DAY);</span><br><span class=\"line\">\t\tint minute=c.get(Calendar.MINUTE);</span><br><span class=\"line\">\t\tint second=c.get(Calendar.SECOND);</span><br><span class=\"line\">\t\tint mill=c.get(Calendar.MILLISECOND);</span><br><span class=\"line\">\t\tint week=c.get(Calendar.DAY_OF_WEEK);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStringBuffer dateStr=new StringBuffer();</span><br><span class=\"line\">\t\tdateStr.append(year).append(&quot;年&quot;);</span><br><span class=\"line\">\t\tdateStr.append(month+1).append(&quot;月&quot;);</span><br><span class=\"line\">\t\tdateStr.append(date).append(&quot;日&quot;).append(&quot;  &quot;);</span><br><span class=\"line\">\t\tdateStr.append(hour).append(&quot;时&quot;);</span><br><span class=\"line\">\t\tdateStr.append(minute).append(&quot;分&quot;);</span><br><span class=\"line\">\t\tdateStr.append(second).append(&quot;秒&quot;);</span><br><span class=\"line\">\t\tdateStr.append(mill).append(&quot;毫秒&quot;).append(&quot;  &quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString[] weeks=&#123;&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;&#125;;</span><br><span class=\"line\">\t\tdateStr.append(&quot;星期&quot;).append(weeks[week-1]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(dateStr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tCalendar c = new GregorianCalendar(2015, 6, 13);</span><br><span class=\"line\">//\t\tc.set(2016, Calendar.DECEMBER, 4, 12, 12, 0);</span><br><span class=\"line\">//\t\tc.setTime(new Date());</span><br><span class=\"line\">\t\t//15天之后</span><br><span class=\"line\">\t\t//c.add(Calendar.DATE, 15);</span><br><span class=\"line\">\t\t//2个月之前</span><br><span class=\"line\">\t\t//c.add(Calendar.DAY_OF_MONTH, -2);</span><br><span class=\"line\">\t\t//12小时之后</span><br><span class=\"line\">\t\tc.add(Calendar.HOUR, 12);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDate time = c.getTime();//转成日期</span><br><span class=\"line\">\t\tSystem.out.println(time);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>public static Calendar getInstance()使用默认时区和语言环境获得一个日历。返回的 Calendar 基于当前时间，使用了默认时区和默认语言环境。 </li>\n<li>public static Calendar getInstance(TimeZone zone, Locale aLocale)使用指定时区和语言环境获得一个日历。返回的 Calendar 基于当前时间，使用了给定的时区和给定的语言环境。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tCalendar c = Calendar.getInstance();</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tCalendar c2 = Calendar.getInstance(TimeZone.getTimeZone(&quot;Asia/Shanghai&quot;), Locale.CHINA);</span><br><span class=\"line\">\t\tSystem.out.println(c2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tCalendar c3 = Calendar.getInstance(TimeZone.getTimeZone(&quot;America/New_York&quot;), Locale.US);</span><br><span class=\"line\">\t\tSystem.out.println(c3);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-5-5-java-text-DateFormat和SimpleDateFormat\"><a href=\"#10-5-5-java-text-DateFormat和SimpleDateFormat\" class=\"headerlink\" title=\"10.5.5 java.text.DateFormat和SimpleDateFormat\"></a>10.5.5 java.text.DateFormat和SimpleDateFormat</h2><p>完成字符串和时间对象的转化：</p>\n<ul>\n<li>format(date)</li>\n<li>Date parse(string)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tDate date = new Date();</span><br><span class=\"line\">\t\tSimpleDateFormat sf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss 是本年的第几D&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(sf.format(date));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString s = &quot;2016-12-01 14:12:23&quot;;</span><br><span class=\"line\">\t\tSimpleDateFormat sf2 = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tDate d = sf2.parse(s);</span><br><span class=\"line\">\t\t\tSystem.out.println(d);</span><br><span class=\"line\">\t\t&#125; catch (ParseException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531002016.png\" alt></p>\n<h1 id=\"10-6-数学相关类Math、BigInteger、BigDecimal\"><a href=\"#10-6-数学相关类Math、BigInteger、BigDecimal\" class=\"headerlink\" title=\"10.6 数学相关类Math、BigInteger、BigDecimal\"></a>10.6 数学相关类Math、BigInteger、BigDecimal</h1><h2 id=\"10-6-1-java-lang-Math类\"><a href=\"#10-6-1-java-lang-Math类\" class=\"headerlink\" title=\"10.6.1 java.lang.Math类\"></a>10.6.1 java.lang.Math类</h2><p>java.lang.Math提供了一系列静态方法用于科学计算；<br>其方法的参数和返回值类型一般为double型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abs     绝对值</span><br><span class=\"line\">acos,asin,atan,cos,sin,tan  三角函数</span><br><span class=\"line\">sqrt     平方根</span><br><span class=\"line\">pow(double a,doble b)     a的b次幂</span><br><span class=\"line\">log    自然对数</span><br><span class=\"line\">exp    e为底指数</span><br><span class=\"line\">max(double a,double b)</span><br><span class=\"line\">min(double a,double b)</span><br><span class=\"line\">random()      返回0.0到1.0的随机数</span><br><span class=\"line\">long round(double a)     double型数据a转换为long型（四舍五入）</span><br><span class=\"line\">toDegrees(double angrad)     弧度—&gt;角度</span><br><span class=\"line\">toRadians(double angdeg)     角度—&gt;弧度</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test1() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(Math.random());//随机值</span><br><span class=\"line\">\t\tSystem.out.println(Math.round(1.8));//四舍五入  保留整数部分</span><br><span class=\"line\">\t\tSystem.out.println(Math.floor(1.2));//1.0  向下取</span><br><span class=\"line\">\t\tSystem.out.println(Math.ceil(1.2));//2.0  向上取</span><br><span class=\"line\">\t\tSystem.out.println(Math.floor(-2.4));//-3.0</span><br><span class=\"line\">\t\tSystem.out.println(Math.ceil(-2.4));//-2.0</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-6-2-java-math包的BigInteger和BigDecimal\"><a href=\"#10-6-2-java-math包的BigInteger和BigDecimal\" class=\"headerlink\" title=\"10.6.2 java.math包的BigInteger和BigDecimal\"></a>10.6.2 java.math包的BigInteger和BigDecimal</h2><p>Integer类作为int的包装类，能存储的最大整型值为231-1，Long类也是有限的，最大为263-1如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。<br>java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。 </p>\n<ul>\n<li>构造方法<ul>\n<li>BigInteger(String val)：根据字符串构建BigInteger对象</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>常用方法<ul>\n<li>BigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger。 </li>\n<li>BigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger。</li>\n<li>BigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger。</li>\n<li>BigInteger divide(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数相除只保留整数部分。</li>\n<li>BigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。</li>\n<li>BigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this / val) 后跟 (this % val) 的两个 BigInteger 的数组。</li>\n<li>BigInteger pow(int exponent) ：返回其值为 (thisexponent) 的 BigInteger。 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test2()&#123;</span><br><span class=\"line\">//\t\tlong num1 = 12345678901234567890L;//out of range 超过long的范围</span><br><span class=\"line\">\t\tBigInteger num1 = new BigInteger(&quot;12345678901234567890&quot;);</span><br><span class=\"line\">\t\tBigInteger num2 = new BigInteger(&quot;92345678901234567890&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//\t\tSystem.out.println(&quot;和：&quot; + (num1 + num2));//错误的</span><br><span class=\"line\">\t\tSystem.out.println(&quot;和：&quot; + num1.add(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;减：&quot; + num1.subtract(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;乘：&quot; + num1.multiply(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1));//两个整数相除只保留整数部分</span><br><span class=\"line\">\t\tSystem.out.println(&quot;幂次方：&quot; + num2.pow(5));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>一般的Float类和Double类可以用来做科学计算或工程计算，但是在商业计算中，要求数字精度比较高，所以用到java.math.BigDecimal类。BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</p>\n<ul>\n<li>构造器<ul>\n<li>BigDecimal(double val)</li>\n<li>BigDecimal(String val)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>常用方法<ul>\n<li>BigDecimal add(BigDecimal augend) :返回一个 BigDecimal，其值为 (this + augend)，其标度为 max(this.scale(), augend.scale())。</li>\n<li>BigDecimal subtract(BigDecimal subtrahend) ：返回一个 BigDecimal，其值为 (this - subtrahend)，其标度为 max(this.scale(), subtrahend.scale())。 </li>\n<li>BigDecimal multiply(BigDecimal multiplicand)：返回一个 BigDecimal，其值为 (this × multiplicand)，其标度为 (this.scale() + multiplicand.scale())。</li>\n<li>BigDecimal pow(int n) ：返回其值为 (thisn) 的 BigDecimal，准确计算该幂，使其具有无限精度。</li>\n<li>BigDecimal divide(BigDecimal divisor)： 返回一个 BigDecimal，其值为 (this / divisor)，其首选标度为 (this.scale() - divisor.scale())；如果无法表示准确的商值（因为它有无穷的十进制扩展），则抛出 ArithmeticException。</li>\n<li>BigDecimal divide(BigDecimal divisor, int roundingMode) ：返回一个 BigDecimal，其值为 (this / divisor)，其标度为 this.scale()。  </li>\n<li>BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) ：返回一个 BigDecimal，其值为 (this / divisor)，其标度为指定标度。 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">\tpublic void test3()&#123;</span><br><span class=\"line\">\t\tBigDecimal num1 = new BigDecimal(&quot;-12.1234567890123456567899554544444332&quot;);</span><br><span class=\"line\">\t\tBigDecimal num2 = new BigDecimal(&quot;89.6734567890123456567899554544444333&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;和：&quot; + num1.add(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;减：&quot; + num1.subtract(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;乘：&quot; + num1.multiply(num2));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(new BigDecimal(&quot;2&quot;)));//可以整除（除尽）就对，不能整除就报异常</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_HALF_UP));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_DOWN));//往零的方向舍去</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_FLOOR));//往小的方向舍去</span><br><span class=\"line\">\t\tSystem.out.println(&quot;除：&quot; + num2.divide(num1,BigDecimal.ROUND_CEILING));//往大的方向舍去</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-7-比较器：自然排序与定制排序\"><a href=\"#10-7-比较器：自然排序与定制排序\" class=\"headerlink\" title=\"10.7 比较器：自然排序与定制排序\"></a>10.7 比较器：自然排序与定制排序</h1><h2 id=\"10-7-1-自然排序：java-lang-Comparable\"><a href=\"#10-7-1-自然排序：java-lang-Comparable\" class=\"headerlink\" title=\"10.7.1 自然排序：java.lang.Comparable\"></a>10.7.1 自然排序：java.lang.Comparable</h2><ul>\n<li><p>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo(T t) 方法被称为它的自然比较方法。当前对象this与指定对象t比较“大小”，如果当前对象this大于指定对象t，则返回正整数，如果当前对象this小于指定对象t，则返回负整数，如果当前对象this等于指定对象t，则返回零。</p>\n</li>\n<li><p>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort（和 Arrays.sort）进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p>\n</li>\n<li><p>Comparable的典型实现：</p>\n<ul>\n<li>String：按照字符串中字符的Unicode值进行比较</li>\n<li>Character：按照字符的Unicode值来进行比较</li>\n<li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li>\n<li>Date、Time等：后面的日期时间比前面的日期时间大</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"10-7-2-定制排序：java-util-Compartor\"><a href=\"#10-7-2-定制排序：java-util-Compartor\" class=\"headerlink\" title=\"10.7.2 定制排序：java.util.Compartor\"></a>10.7.2 定制排序：java.util.Compartor</h2><ul>\n<li><p>强行对某个对象 collection 进行整体排序 的比较函数。可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p>\n</li>\n<li><p>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序。</p>\n</li>\n</ul>\n<h2 id=\"10-7-3-示例\"><a href=\"#10-7-3-示例\" class=\"headerlink\" title=\"10.7.3 示例\"></a>10.7.3 示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.api.compare;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.text.Collator;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.Comparator;</span><br><span class=\"line\">import java.util.Locale;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestCompare &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tGoods[] all = new Goods[4];</span><br><span class=\"line\">\t\tall[0] = new Goods(&quot;《红楼梦》&quot;,100);</span><br><span class=\"line\">\t\tall[1] = new Goods(&quot;《西游记》&quot;,80);</span><br><span class=\"line\">\t\tall[2] = new Goods(&quot;《三国演义》&quot;,140);</span><br><span class=\"line\">\t\tall[3] = new Goods(&quot;《水浒传》&quot;,120);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrays.sort(all);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(all));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrays.sort(all , new Comparator() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic int compare(Object o1, Object o2) &#123;</span><br><span class=\"line\">\t\t\t\tGoods g1 = (Goods) o1;</span><br><span class=\"line\">\t\t\t\tGoods g2 = (Goods) o2;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\treturn Collator.getInstance(Locale.CHINA).compare(g1.getName(),g2.getName());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(all));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Goods implements Comparable&#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate double price;</span><br><span class=\"line\">\tpublic Goods(String name, double price) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.price = price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic double getPrice() &#123;</span><br><span class=\"line\">\t\treturn price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setPrice(double price) &#123;</span><br><span class=\"line\">\t\tthis.price = price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;商品名：&quot; + name + &quot;, 价格：&quot; + price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int compareTo(Object o) &#123;</span><br><span class=\"line\">\t\tGoods other = (Goods) o;</span><br><span class=\"line\">\t\tif(this.price &gt; other.price)&#123;</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;else if(this.price &lt; other.price)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-8-JDK1-8新增日期时间类型\"><a href=\"#10-8-JDK1-8新增日期时间类型\" class=\"headerlink\" title=\"10.8 JDK1.8新增日期时间类型\"></a>10.8 JDK1.8新增日期时间类型</h1><p>如果我们可以跟别人说：“我们在1502643933071见面，别晚了！”那么就再简单不过了。但是我们希望时间与昼夜和四季有关，于是事情就变复杂了。Java1.0中包含了一个Date类，但是它的大多数方法已经在Java 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：</p>\n<ul>\n<li>可变性：象日期和时间这样的类应该是不可变的。Calendar类中可以使用三种方法更改日历字段：set()、add() 和 roll()。</li>\n<li>偏移性：Date中的年份是从1900开始的，而月份都是从0开始的。</li>\n<li>格式化：格式化只对Date有用，Calendar则不行。</li>\n<li>此外，它们也不是线程安全的，不能处理闰秒等。</li>\n</ul>\n<p>Date的API： </p>\n<blockquote>\n<p>尽管 Date 类打算反映协调世界时 (UTC)，但无法做到如此准确，这取决于 Java 虚拟机的主机环境。当前几乎所有操作系统都假定 1 天 = 24 × 60 × 60 = 86400 秒。但对于 UTC，大约每一两年出现一次额外的一秒，称为“闰秒”。闰秒始终作为当天的最后一秒增加，并且始终在 12 月 31 日或 6 月 30 日增加。例如，1995 年的最后一分钟是 61 秒，因为增加了闰秒。大多数计算机时钟不是特别的准确，因此不能反映闰秒的差别。<br>在类 Date 所有可以接受或返回年、月、日期、小时、分钟和秒值的方法中，将使用下面的表示形式： </p>\n</blockquote>\n<ul>\n<li>年份 y 由整数 y - 1900 表示。 </li>\n<li>月份由从 0 至 11 的整数表示；0 是一月、1 是二月等等；因此 11 是十二月。 </li>\n<li>日期（一月中的某天）按通常方式由整数 1 至 31 表示。 </li>\n<li>小时由从 0 至 23 的整数表示。因此，从午夜到 1 a.m. 的时间是 0 点，从中午到 1 p.m. 的时间是 12 点。 </li>\n<li>分钟按通常方式由 0 至 59 的整数表示。 </li>\n<li>秒由 0 至 61 的整数表示；值 60 和 61 只对闰秒发生，尽管那样，也只用在实际正确跟踪闰秒的 Java 实现中。于按当前引入闰秒的方式，两个闰秒在同一分钟内发生是极不可能的，但此规范遵循 ISO C 的日期和时间约定。 </li>\n</ul>\n<p>在所有情形中，针对这些目的赋予方法的参数不需要在指定的范围内；例如，可以把日期指定为 1 月 32 日，并把它解释为 2 月 1 日的相同含义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date date = new Date(2017-1900,8-1,28);</span><br><span class=\"line\">System.out.println(date);//Mon Aug 28 00:00:00 CST 2017</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以说，对日期和时间的操作一直是Java程序员最痛苦的地方之一。第三次引入的API是成功的，并且java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。  </li>\n<li>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.time – 包含值对象的基础包</span><br><span class=\"line\">java.time.chrono – 提供对不同的日历系统的访问。</span><br><span class=\"line\">java.time.format – 格式化和解析时间和日期</span><br><span class=\"line\">java.time.temporal – 包括底层框架和扩展特性</span><br><span class=\"line\">java.time.zone – 包含时区支持的类</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于时钟（Clock），本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了了日期时间和本地化的管理。</p>\n</blockquote>\n<ul>\n<li>说明：大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531003328.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531003703.png\" alt></p>\n<h2 id=\"10-8-1-java-time\"><a href=\"#10-8-1-java-time\" class=\"headerlink\" title=\"10.8.1 java.time\"></a>10.8.1 java.time</h2><h3 id=\"1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）\"><a href=\"#1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）\" class=\"headerlink\" title=\"1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）\"></a>1、本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。</span><br><span class=\"line\">LocalTime表示一个时间，而不是日期</span><br><span class=\"line\">LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</span><br></pre></td></tr></table></figure>\n<p>描述<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now() / now(ZoneId zone)</span><br><span class=\"line\">静态方法，根据当前时间创建对象/指定时区的对象</span><br><span class=\"line\">of()</span><br><span class=\"line\">静态方法，根据指定日期/时间创建对象</span><br><span class=\"line\">getDayOfMonth()/getDayOfYear()</span><br><span class=\"line\">获得月份天数(1-31) /获得年份天数(1-366)</span><br><span class=\"line\">getDayOfWeek()</span><br><span class=\"line\">获得星期几(返回一个 DayOfWeek 枚举值)</span><br><span class=\"line\">getMonth()</span><br><span class=\"line\">获得月份, 返回一个 Month 枚举值</span><br><span class=\"line\">getMonthValue() / getYear()</span><br><span class=\"line\">获得月份(1-12) /获得年份</span><br><span class=\"line\">getHours()/getMinute()/getSecond()</span><br><span class=\"line\">获得当前对象对应的小时、分钟、秒</span><br><span class=\"line\">withDayOfMonth()/withDayOfYear()/withMonth()/withYear()</span><br><span class=\"line\">将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</span><br><span class=\"line\"> with(TemporalAdjuster  t)</span><br><span class=\"line\">将当前日期时间设置为校对器指定的日期时间</span><br><span class=\"line\">plusDays(), plusWeeks(), plusMonths(), plusYears(),plusHours()</span><br><span class=\"line\">向当前对象添加几天、几周、几个月、几年、几小时</span><br><span class=\"line\">minusMonths() / minusWeeks()/minusDays()/minusYears()/minusHours()</span><br><span class=\"line\">从当前对象减去几月、几周、几天、几年、几小时</span><br><span class=\"line\">plus(TemporalAmount t)/minus(TemporalAmount t)</span><br><span class=\"line\">添加或减少一个 Duration 或 Period</span><br><span class=\"line\">isBefore()/isAfter()</span><br><span class=\"line\">比较两个 LocalDate</span><br><span class=\"line\">isLeapYear()</span><br><span class=\"line\">判断是否是闰年（在LocalDate类中声明）</span><br><span class=\"line\"> format(DateTimeFormatter  t)</span><br><span class=\"line\">格式化本地日期、时间，返回一个字符串</span><br><span class=\"line\"> parse(Charsequence text)</span><br><span class=\"line\">将指定格式的字符串解析为日期、时间</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//now()</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">\tpublic void testLocalDateTime()&#123;</span><br><span class=\"line\">\t\tLocalDate date = LocalDate.now();</span><br><span class=\"line\">\t\tLocalTime time = LocalTime.now();</span><br><span class=\"line\">\t\tLocalDateTime datetime = LocalDateTime.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //of()或parse</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void testLocalDate() &#123;</span><br><span class=\"line\">\t\t// LocalDate date = LocalDate.now();</span><br><span class=\"line\">\t\t// LocalDate date = LocalDate.of(2017, 3, 20);</span><br><span class=\"line\">\t\tLocalDate date = LocalDate.parse(&quot;2017-03-12&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDateTime t = LocalDateTime.now();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;这一天是这一年的第几天：&quot;+t.getDayOfYear());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;年：&quot;+t.getYear());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;月：&quot;+t.getMonth());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;月份值：&quot;+t.getMonthValue());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;日：&quot;+t.getDayOfMonth());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;星期：&quot;+t.getDayOfWeek());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;时：&quot;+t.getHour());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;分：&quot;+t.getMinute());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;秒：&quot;+t.getSecond());</span><br><span class=\"line\">\t\tSystem.out.println(t.getMonthValue());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testLocalDate2() &#123;</span><br><span class=\"line\">\tLocalDate date = LocalDate.now();</span><br><span class=\"line\"></span><br><span class=\"line\">       //withXxx()方法，不改变原来的date对象，返回一个新的对象，不可变性</span><br><span class=\"line\">\t// LocalDate date2 = date.withDayOfMonth(1);//获取这个月的第一天</span><br><span class=\"line\">\tLocalDate date2 = date.with(TemporalAdjusters.firstDayOfMonth());// 获取这个月的第一天</span><br><span class=\"line\">\tSystem.out.println(date2);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 获取这个月的最后一天</span><br><span class=\"line\">\tLocalDate date3 = date.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class=\"line\">\tSystem.out.println(date3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//45天后的日期</span><br><span class=\"line\">\tLocalDate date4 = date.plusDays(45);</span><br><span class=\"line\">\tSystem.out.println(date4);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//20天前的日期</span><br><span class=\"line\">\tLocalDate date5 = date.minusDays(20);</span><br><span class=\"line\">\tSystem.out.println(date5);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tboolean before = date.isBefore(date5);</span><br><span class=\"line\">\tSystem.out.println(date+&quot;是否比&quot;+date5+&quot;早&quot; + before);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tSystem.out.println(date+&quot;是否是闰年：&quot;+date.isLeapYear());</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MonthDay month = MonthDay.of(8, 14);</span><br><span class=\"line\">MonthDay today = MonthDay.from(date);</span><br><span class=\"line\">System.out.println(&quot;今天是否是生日：&quot; + month.equals(today));</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、瞬时：Instant\"><a href=\"#2、瞬时：Instant\" class=\"headerlink\" title=\"2、瞬时：Instant\"></a>2、瞬时：Instant</h3><ul>\n<li>Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。</li>\n<li>在处理时间和日期的时候，我们通常会想到年,月,日,时,分,秒。然而，这只是时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中，也是从1970年开始，但以毫秒为单位。</li>\n<li>java.time包通过值类型Instant提供机器视图。Instant表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为java.time包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531004049.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531004148.png\" alt></p>\n<p>时间戳：指格林威治时间1970年01月01日00时00分00秒（北京时间1970年01月01日08时00分00秒）起至现在的总秒数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tInstant t = Instant.now();</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//偏移8个小时</span><br><span class=\"line\">\t\tOffsetDateTime atOffset = t.atOffset(ZoneOffset.ofHours(8));</span><br><span class=\"line\">\t\tSystem.out.println(atOffset);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlong milli = t.toEpochMilli();</span><br><span class=\"line\">\t\tSystem.out.println(milli);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tInstant in2 = Instant.ofEpochSecond(10000000);</span><br><span class=\"line\">\t\tSystem.out.println(in2);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、带时区的日期、时间的处理\"><a href=\"#3、带时区的日期、时间的处理\" class=\"headerlink\" title=\"3、带时区的日期、时间的处理\"></a>3、带时区的日期、时间的处理</h3><p>作为一个开发者，如果不用去处理时区和它带来的复杂性，那是幸运的。java.time包下的LocalDate、LocalTime、LocalDateTime和Instant基本能满足需求。当你不可避免时区时，ZonedDateTime等类可以满足我们的需求。  </p>\n<p>ZonedDateTime：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe/Paris。</p>\n<ul>\n<li>其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式，例如：Asia/Shanghai等</li>\n<li>now()：使用系统时间获取当前的ZonedDateTime</li>\n<li>now(ZoneId)：返回指定时区的ZonedDateTime</li>\n</ul>\n<p>ZoneId：该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris</p>\n<ul>\n<li>getAvailableZoneIds()：静态方法，可以获取所有时区信息</li>\n<li>of(String id)：静态方法，用指定的时区信息获取ZoneId对象</li>\n</ul>\n<p>Clock：使用时区提供对当前即时、日期和时间的访问的时钟。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();</span><br><span class=\"line\">\t\tfor (String string : availableZoneIds) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tZonedDateTime t = ZonedDateTime.now();</span><br><span class=\"line\">\t\tSystem.out.println(t);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tZonedDateTime t1 = ZonedDateTime.now(ZoneId.of(&quot;America/New_York&quot;));</span><br><span class=\"line\">\t\tSystem.out.println(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">//\t\tClock clock = Clock.systemDefaultZone();</span><br><span class=\"line\">\t\tClock c = Clock.system(ZoneId.of(&quot;America/New_York&quot;));</span><br><span class=\"line\">\t\tSystem.out.println(c.getZone());</span><br><span class=\"line\">\t\tSystem.out.println(c.instant());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、持续时间：Duration\"><a href=\"#4、持续时间：Duration\" class=\"headerlink\" title=\"4、持续时间：Duration\"></a>4、持续时间：Duration</h3><p>Duration:用于计算两个“时间”间隔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDateTime t1 = LocalDateTime.now();</span><br><span class=\"line\">\t\tLocalDateTime t2 = LocalDateTime.of(2017, 8, 29, 0, 0, 0, 0);</span><br><span class=\"line\">\t\tDuration between = Duration.between(t1, t2);</span><br><span class=\"line\">\t\tSystem.out.println(between);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总天数：&quot;+between.toDays());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总小时数：&quot;+between.toHours());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总分钟数：&quot;+between.toMinutes());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总秒数：&quot;+between.getSeconds());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总毫秒数：&quot;+between.toMillis());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总纳秒数：&quot;+between.toNanos());</span><br><span class=\"line\">\t\tSystem.out.println(&quot;不够一秒的纳秒数：&quot;+between.getNano());</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、日期间隔：Period\"><a href=\"#5、日期间隔：Period\" class=\"headerlink\" title=\"5、日期间隔：Period\"></a>5、日期间隔：Period</h3><p>Period:用于计算两个“日期”间隔</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDate t1 = LocalDate.now();</span><br><span class=\"line\">\t\tLocalDate t2 = LocalDate.of(2018, 12, 31);</span><br><span class=\"line\">\t\tPeriod between = Period.between(t1, t2);</span><br><span class=\"line\">\t\tSystem.out.println(between);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的年数：&quot;+between.getYears());//1年</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的月数：&quot;+between.getMonths());//又7个月</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的天数：&quot;+between.getDays());//零25天</span><br><span class=\"line\">\t\tSystem.out.println(&quot;相差的总数：&quot;+between.toTotalMonths());//总共19个月</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-8-2-java-time-temporal-TemporalAdjuster-时间校正器\"><a href=\"#10-8-2-java-time-temporal-TemporalAdjuster-时间校正器\" class=\"headerlink\" title=\"10.8.2 java.time.temporal.TemporalAdjuster : 时间校正器\"></a>10.8.2 java.time.temporal.TemporalAdjuster : 时间校正器</h2><ul>\n<li>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。</li>\n<li>TemporalAdjusters : 该类通过静态方法(firstDayOfXxx()/lastDayOfXxx()/nextXxx())提供了大量的常用 TemporalAdjuster 的实现。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tLocalDate now = LocalDate.now();</span><br><span class=\"line\">\t\tSystem.out.println(&quot;下一个周日:&quot;+now.with(TemporalAdjusters.next(DayOfWeek.SUNDAY)));</span><br><span class=\"line\">\t\tSystem.out.println(&quot;下周五&quot; + now.with(TemporalAdjusters.next(DayOfWeek.FRIDAY)));</span><br><span class=\"line\">        System.out.println(&quot;本月最后一天:&quot;+now.with(TemporalAdjusters.lastDayOfMonth()));//2017-08-31</span><br><span class=\"line\">\t\tLocalDate week = LocalDate.now().with(new TemporalAdjuster()&#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Temporal adjustInto(Temporal temporal) &#123;</span><br><span class=\"line\">\t\t\t\tLocalDate date = (LocalDate) temporal;</span><br><span class=\"line\">\t\t\t\tif(date.getDayOfWeek().equals(DayOfWeek.MONDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(7);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.TUESDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(6);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.WEDNESDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(5);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.THURSDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(4);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.FRIDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(3);</span><br><span class=\"line\">\t\t\t\t&#125;else if(date.getDayOfWeek().equals(DayOfWeek.SATURDAY))&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(2);</span><br><span class=\"line\">\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\treturn date.plusDays(1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tSystem.out.println(&quot;下一个工作日：&quot; + week);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-8-3-java-time-format-DateTimeFormatter-类\"><a href=\"#10-8-3-java-time-format-DateTimeFormatter-类\" class=\"headerlink\" title=\"10.8.3 java.time.format.DateTimeFormatter 类\"></a>10.8.3 java.time.format.DateTimeFormatter 类</h2><ul>\n<li>该类提供了三种格式化方法：</li>\n<li>预定义的标准格式。如：ISO_DATE_TIME;ISO_DATE</li>\n<li>本地化相关的格式。如：ofLocalizedDate(FormatStyle.MEDIUM)</li>\n<li>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ISO_DATE.format(LocalDate.now()));</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ISO_DATE_TIME.format(LocalDateTime.now()));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//FULL和SHORT适用于LocalDate和LocalTime</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).format(LocalDate.now()));</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT).format(LocalTime.now()));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//LONG和MEDIUM适用于LocalDateTime</span><br><span class=\"line\">\t\tSystem.out.println(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).format(LocalDateTime.now()));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tDateTimeFormatter op = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(op.format(LocalDateTime.now()));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-8-4-与传统日期处理的转换\"><a href=\"#10-8-4-与传统日期处理的转换\" class=\"headerlink\" title=\"10.8.4 与传统日期处理的转换\"></a>10.8.4 与传统日期处理的转换</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190531004958.png\" alt></p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"一个人最好的状态，有事做、有人爱、有所期待","url":"http://yoursite.com/2016/12/29/鸡汤-一个人最好的状态，有事做、有人爱、有所期待/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190608235335.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;我有一个女闺蜜,他叫小鱼。小鱼最近神采飞扬，心情大好，行为举止都充满自信，和一年前的她形成了鲜明对比。</p>\n<p>&emsp;&emsp;一年半前，因为工作岗位调整，小鱼辞职离开了原来的公司。这么多年来一直在职场忙碌，她和先生商量后，准备给自己放个长假，休息一两年，也多花点时间陪陪家人。</p>\n<p>&emsp;&emsp;但谁知，在家里休息的第二个月，她就开始坐不住了。 平时，丈夫上班，孩子上学，朋友们也都在忙着各自的事情，她突然发现，自己成了无所事事的那个人。</p>\n<p>&emsp;&emsp;除了逛逛街看看展，她也把烘焙、茶艺、插花等等都试了一个遍，但还是不快乐。她发现，自己其实是闲不下来的。</p>\n<p>&emsp;&emsp;小鱼是行动派，说做就做。她找来知根知底的大学音乐系同学，在小区商业街租了两层店面，开了一家乐器行，又聘请专业的老师，开设了一家针对学龄儿童的乐器培训学校。如今培训学校开办得很成功，她越来越忙，却感到无比充实，幸福感爆棚。</p>\n<p>&emsp;&emsp;我们都知道努力很辛苦，可闲着真的舒服吗？人一旦闲下来，就容易胡思乱想。玩了一整天的游戏，除了眼睛的疲惫，什么也没得到。刷了一整天的手机，夜幕降临才发现，时间都哪去了？这时候，就更容易焦虑不安了。</p>\n<blockquote>\n<ul>\n<li>有事做，保持专注，才是一个人最舒服的状态。即使偶尔感觉累，但成就感带来的充实才是快乐的源泉。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;我们常常会觉得人生不易，世事艰难，但生活的温柔之处就是，总有一个人的出现，让你原谅生活之前对你所有的刁难。</p>\n<p>&emsp;&emsp;我们有父母的爱，他们无怨无悔付出，只希望你能生活得比他们好。我们有朋友的爱，他们陪你说话听你抱怨，最爱看到你脸上洋溢的是开心的笑意。我们有伴侣的爱，他/她为你心动，为你牵挂，只愿此生能永远伴着你。</p>\n<p>&emsp;&emsp;很喜欢这句话，人生最幸福的四件事：有人信你，有人爱你，有人等你，有人懂你。遇见不论早晚，真心才能相伴；朋友不论远近，懂得才有温暖。轰轰烈烈的，未必是真心；默默无声的，未必是无心。把一切交给时间，总会有答案。</p>\n<p>&emsp;&emsp;我的朋友温妮说，如果每天早晨醒来，你看到镜子里的自己，嘴角上扬，神情放松，那么，你就是被爱的人了。</p>\n<p>&emsp;&emsp;温妮曾经因为一段劣质感情伤透了心，情绪低落了很久，做事情提不起劲头。她后来终于鼓足勇气快刀斩乱麻，和过去说再见。现在的她，重新获得优质的爱情，状态焕然一新。</p>\n<blockquote>\n<ul>\n<li>真爱你的人，会护你周全，在漫长的岁月中，美好如初见。就像黑暗中的一点星光，滂沱大雨中的一把雨伞，渺茫大海中的一座灯塔。这些温暖或许微弱，却足以暖透你的心。</li>\n</ul>\n</blockquote>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;我们来到这世上的意义，就是爱想爱的人，做喜欢的事，同时对未来充满希望，有所期待。</p>\n<p>&emsp;&emsp;有所期望的未来，这是奋斗的目标，更是前行的动力，可以让我们排除干扰，抵抗焦虑，实现理想生活。</p>\n<p>&emsp;&emsp;有些人认为，世界上那些美好的事都与自己无缘，不是为自己准备的。他们终日自怨自艾，觉得全世界都背叛了自己。一个志趣低微、目光短浅的人，的确是会距离幸福越来越远的，因为他连筑梦的念头都不曾拥有。</p>\n<p>&emsp;&emsp;只有对自己的前途有着美好的期待，才能激发我们的潜能。期待安家立业，期待有人爱，期待受人尊重，每一种期待都激励和鞭策我们不断努力。</p>\n<p>&emsp;&emsp;“我们终其一生都在寻找幸福。”你期待什么，便可能得到什么。甘于贫穷的人，只能过贫穷的生活，觉得自己不配拥有爱情的人，注定孤独终老。那些全心全意期待成功的人，才更有动力去获得成功。</p>\n<blockquote>\n<ul>\n<li>愿你能一直保持最好的状态，有事做，有人爱，有所期待。因为，这就是幸福的模样。</li>\n</ul>\n</blockquote>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"9. JavaSE-Java异常处理","url":"http://yoursite.com/2016/12/24/9. JavaSE-Java异常处理/","content":"<p>#9.1 异常的概述</p>\n<h2 id=\"9-1-1-什么是异常\"><a href=\"#9-1-1-什么是异常\" class=\"headerlink\" title=\"9.1.1 什么是异常\"></a>9.1.1 什么是异常</h2><blockquote>\n<ul>\n<li>异常，又称为例外，是指不可预知的非正常的情况，例如：正常开车突然路口窜出一条狗来，或者正常上下班的路上，某个街角偶遇了爱情，或者在每天晨跑的小树林遭遇了歹徒。这些突发的情况的发生是不可预知的，where,when……，但是如果处理好了，美好的生活不受影响，可以继续，如果处理不好，可能就“挂”了。</li>\n<li>Java语言将程序执行中发生的不正常情况称为“异常”，异常是一种对程序运行过程中发生错误时进行通知的机制。如：网络连接失败、用户输入错误或打开文件失败等。</li>\n</ul>\n</blockquote>\n<p> <img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530165032.png\" alt></p>\n<h2 id=\"9-1-2-Java异常的堆栈式抛出机制\"><a href=\"#9-1-2-Java异常的堆栈式抛出机制\" class=\"headerlink\" title=\"9.1.2 Java异常的堆栈式抛出机制\"></a>9.1.2 Java异常的堆栈式抛出机制</h2><p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\">public class TestException &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint a = Integer.parseInt(args[0]);</span><br><span class=\"line\">\t\tint b = Integer.parseInt(args[1]);</span><br><span class=\"line\">\t\tSystem.out.println(a + &quot;/&quot; + b + &quot;=&quot; + a/b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException  12  3</span><br></pre></td></tr></table></figure>\n<p>运行结果显示12/3=4，结果正常。</p>\n<h3 id=\"1-ArrayIndexOutOfBoundsException数组下标越界异常\"><a href=\"#1-ArrayIndexOutOfBoundsException数组下标越界异常\" class=\"headerlink\" title=\"1. ArrayIndexOutOfBoundsException数组下标越界异常\"></a>1. ArrayIndexOutOfBoundsException数组下标越界异常</h3><p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException</span><br></pre></td></tr></table></figure>\n<p>出现异常形式，如图9-1：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530165238.png\" alt></p>\n<h3 id=\"2-NumberFormatException数字格式化异常\"><a href=\"#2-NumberFormatException数字格式化异常\" class=\"headerlink\" title=\"2. NumberFormatException数字格式化异常\"></a>2. NumberFormatException数字格式化异常</h3><p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException  a  b</span><br></pre></td></tr></table></figure>\n<p>出现异常形式，如图9-2：</p>\n<p><img src=\"http://note.youdao.com/yws/res/6111/E0EEA67E326B44F88C522355472DF277\" alt=\"image\"></p>\n<h3 id=\"3-ArithmeticException算术异常\"><a href=\"#3-ArithmeticException算术异常\" class=\"headerlink\" title=\"3. ArithmeticException算术异常\"></a>3. ArithmeticException算术异常</h3><p>命令行执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java  com.exception.TestException  12  0</span><br></pre></td></tr></table></figure>\n<p>出现异常形式，如图9-3：</p>\n<p><img src=\"http://note.youdao.com/yws/res/6115/6B2236572F2549EEA6C1290778B0667D\" alt=\"image\"></p>\n<h3 id=\"4-结论\"><a href=\"#4-结论\" class=\"headerlink\" title=\"4. 结论\"></a>4. 结论</h3><p>在Java中异常以对象的形式出现，不同的异常对象中封装了相应的错误信息。<br>Java是采用面向对象的方式来处理异常的。处理过程：</p>\n<ul>\n<li>抛出异常：在执行一个方法时，如果在某句代码发生异常，则会在该句代码处生成代表该异常的一个对象，停止当前执行路径，并把异常对象提交给JRE，不同的异常对象中封装了相应的错误信息。</li>\n<li>捕获异常：JRE得到该异常后，寻找相应的代码来处理该异常。JRE在方法的调用栈中查找，从生成异常的方法开始回溯，直到找到相应的异常处理代码为止。如果没有找到处理代码，那么程序终止运行<br>Java中异常的是以堆栈式抛出机制来进行错误通知的，如图10-4。</li>\n</ul>\n<p><img src=\"http://note.youdao.com/yws/res/6118/2A148296222146499CEC8890FAE7A502\" alt=\"image\"></p>\n<h1 id=\"9-2-异常体系结构\"><a href=\"#9-2-异常体系结构\" class=\"headerlink\" title=\"9.2 异常体系结构\"></a>9.2 异常体系结构</h1><p>如10.1.2所示的ArrayIndexOutOfBoundsException数组下标越界异常，NumberFormatException数字格式化异常，ArithmeticException算术异常，查看它们的API，例如图9-5,9-6,9-7。</p>\n<p><img src=\"http://note.youdao.com/yws/res/6120/E6C67A0CEABC4234A6F158AB8563DAAD\" alt=\"image\"></p>\n<p><img src=\"http://note.youdao.com/yws/res/6122/047861140C034F1AA897892453C30046\" alt=\"image\"></p>\n<p><img src=\"http://note.youdao.com/yws/res/6124/6B44AF6FC34148B9A9EE29CB92F31693\" alt=\"image\"></p>\n<h2 id=\"9-2-1-异常的分类\"><a href=\"#9-2-1-异常的分类\" class=\"headerlink\" title=\"9.2.1 异常的分类\"></a>9.2.1 异常的分类</h2><p>Java语言提供了两大类异常，如图9-8：</p>\n<ul>\n<li>编译时异常（受检异常Checked）<br>编译时异常：指程序中必须接受检查和处理的异常，由Exception 类表示。</li>\n<li>运行时异常（非受检异常UnChecked）<br>运行时异常：程序中可以不接受检查和处理，或致命性错误异常，由RuntimeException类或Error类表示。</li>\n</ul>\n<p><img src=\"http://note.youdao.com/yws/res/6131/C962A64258584FDEB8E0ADEF0B71771E\" alt=\"image\"></p>\n<h2 id=\"9-2-2-Throwable\"><a href=\"#9-2-2-Throwable\" class=\"headerlink\" title=\"9.2.2 Throwable\"></a>9.2.2 Throwable</h2><ul>\n<li>Throwable 类是 Java 语言中所有错误或异常的超类。只有当对象是此类（或其子类之一）的实例时，才能通过 Java 虚拟机或者 Java throw 语句抛出。类似地，只有此类或其子类之一才可以是 catch 子句中的参数类型。 </li>\n<li>两个子类的实例，Error 和 Exception，通常用于指示发生了异常情况。通常，这些实例是在异常情况的上下文中新近创建的，因此包含了相关的信息（比如堆栈跟踪数据）。 <h2 id=\"9-2-3-Error\"><a href=\"#9-2-3-Error\" class=\"headerlink\" title=\"9.2.3 Error\"></a>9.2.3 Error</h2></li>\n<li>Error 是 Throwable 的子类，用于指示合理的应用程序不应该试图捕获的严重问题。大多数这样的错误都是异常条件。虽然 ThreadDeath 错误是一个“正规”的条件，但它也是 Error 的子类，因为大多数应用程序都不应该试图捕获它。 </li>\n<li>在执行该方法期间，无需在其 throws 子句中声明可能抛出但是未能捕获的 Error 的任何子类，因为这些错误可能是再也不会发生的异常条件。 <h2 id=\"9-2-4-Exception\"><a href=\"#9-2-4-Exception\" class=\"headerlink\" title=\"9.2.4 Exception\"></a>9.2.4 Exception</h2>Exception 类及其子类是 Throwable 的一种形式，它指出了合理的应用程序想要捕获的条件。<br>应该在程序中尽可能的预知并处理异常。</li>\n<li>checkedException：受检异常。这一类异常，编译时必须对其进行处理，如果不处理，编译不通过。（checked表示编译器检查过已经处理过的）。例如：疲劳必须休息、喝酒必须不能开车、刹车必须好用。</li>\n<li>RuntimeException（uncheckedException）：运行时异常（非受检异常）。一类特殊的异常，如被0除、数组下标越界等，其产生比较频繁，处理麻烦，如果显式的声明或捕获将会对程序可读性和运行效率影响很大。因此由系统自动检测并将它们交给缺省的异常处理程序，即交给JVM处理，用户不显式处理。但是应该尽量避免！！！<br>例如：前车急刹车、有人加塞、路口突然窜出的电动车等等。换句话说，出现RuntimeException一定是你的问题，可以不捕获，因为小心点这些异常是可以避免的，例如：数组下标越界异常ArrayIndexOutOfBoundsException，空指针异常NullPointerException，类型转换异常ClassCastException等等。<h1 id=\"9-3-异常处理机制\"><a href=\"#9-3-异常处理机制\" class=\"headerlink\" title=\"9.3 异常处理机制\"></a>9.3 异常处理机制</h1><h2 id=\"9-3-1-捕获异常（try…catch…finally）\"><a href=\"#9-3-1-捕获异常（try…catch…finally）\" class=\"headerlink\" title=\"9.3.1 捕获异常（try…catch…finally）\"></a>9.3.1 捕获异常（try…catch…finally）</h2>可使用try…catch…finally语句捕获异常，避免程序不正常终止  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\t\t……</span><br><span class=\"line\">\t&#125; [catch (&lt;异常类型&gt;  &lt;异常引用变量&gt;) &#123;</span><br><span class=\"line\">\t\t……</span><br><span class=\"line\">\t&#125; ]*  </span><br><span class=\"line\">[finally &#123;</span><br><span class=\"line\">\t\t……</span><br><span class=\"line\">\t&#125;]</span><br></pre></td></tr></table></figure>\n<p>说明：<br>（1）*可使用多个catch子句捕获多个异常，[]表示可选。<br>（2）可以有如下组合形式：<code>try...catch，try...finally，try...catch...finally</code>。  </p>\n<h3 id=\"1-try\"><a href=\"#1-try\" class=\"headerlink\" title=\"1. try\"></a>1. try</h3><ul>\n<li>try块中是可能发生异常的代码。其中某句代码发生异常，就会跳过try块中该句后面的代码，该句代码处会产生并抛出一种或几种类型的异常对象，它后面的catch语句要分别对这些异常做相应的处理。  </li>\n<li>注意：<br>一个try必须带一个catch块或finally块或两者都有，即try块不能单独存在。<br>当异常处理的代码执行结束以后，是不会回到try语句块去执行尚未执行的代码的。只会执行try…catch…finally后面的代码。  <h3 id=\"2-catch\"><a href=\"#2-catch\" class=\"headerlink\" title=\"2. catch\"></a>2. catch</h3></li>\n<li>每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。  </li>\n<li>catch块如果多个，异常对象将从上到下依次匹配类型，一旦某个catch的异常类型匹配成功，其他的catch将不再执行，即一个异常只能进入一个catch块。  </li>\n<li>catch可以有多个，但是多个catch中的异常类型如果是“互斥关系（没有继承关系）”，顺序随意；如果是“包含关系（继承关系）”，必须小上大下/子上父下。<h3 id=\"3-finally\"><a href=\"#3-finally\" class=\"headerlink\" title=\"3. finally\"></a>3. finally</h3></li>\n<li>有些语句，不管是否发生了异常，都必须要执行，那么就可以把这样的语句放到finally语句块中。</li>\n<li>通常在finally中关闭程序块已打开的资源，比如：文件流、释放数据库连接等。<h3 id=\"4-运行示意图\"><a href=\"#4-运行示意图\" class=\"headerlink\" title=\"4. 运行示意图\"></a>4. 运行示意图</h3>try…catch…finally的运行示意图，如图10-9</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530171700.png\" alt></p>\n<h3 id=\"5-示例\"><a href=\"#5-示例\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><p>####（1）示例1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tint a = Integer.parseInt(args[0]);</span><br><span class=\"line\">\t\t\tint b = Integer.parseInt(args[1]);</span><br><span class=\"line\">\t\t\tSystem.out.println(a + &quot;/&quot; + b + &quot;=&quot; + a/b);</span><br><span class=\"line\">\t\t&#125; catch (NumberFormatException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (ArithmeticException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;程序继续...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>####（2）示例2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.FileNotFoundException;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestFileReader &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tFileReader fr = null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tfr = new FileReader(&quot;d:/a.txt&quot;);</span><br><span class=\"line\">\t\t\tchar c = (char) fr.read();</span><br><span class=\"line\">\t\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\t&#125; catch (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t//IOException不能放前面，因为FileNotFoundException 是子类</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; finally&#123;</span><br><span class=\"line\">              //可以嵌套</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tif(fr!=null)&#123;//需要判断非空</span><br><span class=\"line\">\t\t\t\t\tfr.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(&quot;程序继续...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-3-2-显式声明抛出异常（throws）\"><a href=\"#9-3-2-显式声明抛出异常（throws）\" class=\"headerlink\" title=\"9.3.2 显式声明抛出异常（throws）\"></a>9.3.2 显式声明抛出异常（throws）</h3><ul>\n<li>如果一个方法出现Checked Exception，但是并不能确定如何处理这种异常或者不立刻处理它，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</li>\n<li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。如果一个方法抛出多个受检异常，就必须在方法的签名中列出所有的异常，之间以逗号隔开。<h4 id=\"1-示例代码\"><a href=\"#1-示例代码\" class=\"headerlink\" title=\"1. 示例代码\"></a>1. 示例代码</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.FileNotFoundException;</span><br><span class=\"line\">import java.io.FileReader;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestFileReader2 &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\treadFile(&quot;d:/a.txt&quot;);</span><br><span class=\"line\">\t\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void readFile(String filename) throws FileNotFoundException,IOException&#123;</span><br><span class=\"line\">\t\tFileReader fr = new FileReader(&quot;d:/a.txt&quot;);</span><br><span class=\"line\">\t\tchar c = (char) fr.read();</span><br><span class=\"line\">\t\tSystem.out.println(c);</span><br><span class=\"line\">\t\tfr.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-重写方法对throws异常的要求\"><a href=\"#2-重写方法对throws异常的要求\" class=\"headerlink\" title=\"2. 重写方法对throws异常的要求\"></a>2. 重写方法对throws异常的要求</h4><p>重写方法不能抛出比被重写方法范围更大的异常类型。在多态的情况下，对重写方法的调用–异常的捕获按父类声明的异常处理。即</p>\n<ul>\n<li>父类被重写的方法没有声明抛出checked受检异常，那么重写的方法也不能声明抛出异常</li>\n<li>子类重写方法声明抛出的异常的类型和父类被重写的方法声明抛出异常类型一致</li>\n<li>子类重写方法声明抛出的异常的类型是父类被重写的方法声明抛出异常的子类</li>\n<li>子类重写方法可以在方法内部处理异常，而不声明抛出异常<br>正确的示例代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tpublic void method()throws IOException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class B extends A&#123;</span><br><span class=\"line\">\tpublic void method()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class C extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws FileNotFoundException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class D extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws IOException,FileNotFoundException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class E extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws IOException,RuntimeException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>错误的示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tpublic void method()throws IOException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class F extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws Exception &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class G extends A&#123;</span><br><span class=\"line\">\tpublic void method() throws IOException,SQLException&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-4-手动抛出异常（throw）\"><a href=\"#9-4-手动抛出异常（throw）\" class=\"headerlink\" title=\"9.4 手动抛出异常（throw）\"></a>9.4 手动抛出异常（throw）</h1><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可以根据需要手动创建并抛出。可以抛出的异常必须是Throwable或其子类的实例。<br>首先要创建异常类对象，然后通过throw语句实现抛出操作，提交给Java运行环境。<br>语法格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw 异常对象;</span><br></pre></td></tr></table></figure>\n<p>不管系统自动生成的还是手动创建的，异常对象一旦抛出都需要使用捕获try…catch或继续抛出throws的方式处理。<br>其次，throw语句可以代替return语句结束方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestThrow &#123;</span><br><span class=\"line\">\tpublic static void check(String username,String password)&#123;</span><br><span class=\"line\">\t\tif(username==null || &quot;&quot;.equals(username.trim()))&#123;</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(&quot;用户名不能为空&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(password==null || &quot;&quot;.equals(password.trim()))&#123;</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(&quot;密码不能为空&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-5-自定义异常\"><a href=\"#9-5-自定义异常\" class=\"headerlink\" title=\"9.5 自定义异常\"></a>9.5 自定义异常</h1><ul>\n<li>在程序中，可能会遇到任何标准异常类都没能充分的描述清楚的问题，这种情况下可以创建自己的异常类。</li>\n<li>从Exception类或者它的子类派生一个子类即可</li>\n<li>习惯上，自定义异常类应该包含2个构造器：一个是无参构造，另一个是带有详细信息的构造器</li>\n<li>自定义的异常只能通过throw抛出。</li>\n<li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestMyException &#123;</span><br><span class=\"line\">\tpublic static void login(String username,String password) throws WrongUsernameOrPassWordException&#123;</span><br><span class=\"line\">\t\tif(!(&quot;admin&quot;.equals(username) &amp;&amp; &quot;123&quot;.equals(password)))&#123;</span><br><span class=\"line\">\t\t\tthrow new WrongUsernameOrPassWordException(&quot;用户名或密码错误&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;登录成功&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class WrongUsernameOrPassWordException extends Exception&#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic WrongUsernameOrPassWordException() &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic WrongUsernameOrPassWordException(String message) &#123;</span><br><span class=\"line\">\t\tsuper(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-6-finally与return\"><a href=\"#9-6-finally与return\" class=\"headerlink\" title=\"9.6 finally与return\"></a>9.6 finally与return</h1><p>执行顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、执行try,catch，给“返回值”临时变量赋值</span><br><span class=\"line\">2、执行finally</span><br><span class=\"line\">3、return</span><br><span class=\"line\">return语句两个作用：给返回值赋值，结束方法运行</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-6-1-从finally的return回来\"><a href=\"#9-6-1-从finally的return回来\" class=\"headerlink\" title=\"9.6.1 从finally的return回来\"></a>9.6.1 从finally的return回来</h2><p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestReturn &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint result = test(&quot;a&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int test(String str)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tInteger.parseInt(str);</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;catch(NumberFormatException e)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;finally&#123;</span><br><span class=\"line\">            System.out.println(&quot;test结束&quot;);</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test结束</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-6-2-从catch的return回来\"><a href=\"#9-6-2-从catch的return回来\" class=\"headerlink\" title=\"9.6.2 从catch的return回来\"></a>9.6.2 从catch的return回来</h2><p>示例代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestReturn &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint result = test(&quot;a&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int test(String str)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tInteger.parseInt(str);</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;catch(NumberFormatException e)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;finally&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;test结束&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test结束</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-6-3-从try的return回来\"><a href=\"#9-6-3-从try的return回来\" class=\"headerlink\" title=\"9.6.3 从try的return回来\"></a>9.6.3 从try的return回来</h2><p>示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.exception;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestReturn &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tint result = test(&quot;12&quot;);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int test(String str)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tInteger.parseInt(str);</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125;catch(NumberFormatException e)&#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;finally&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;test结束&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test结束</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-7-小结\"><a href=\"#9-7-小结\" class=\"headerlink\" title=\"9.7 小结\"></a>9.7 小结</h1><ul>\n<li>要避免使用异常处理代替错误处理，这样会降低程序的清晰性，并且效率低下。</li>\n<li>不要进行小粒度的异常处理——应该将整个任务包装在一个try语句块中。</li>\n<li>异常往往在高层处理。例如：（高层）领导—&gt;员工。调用关系。有问题赶紧上报<br>Java的异常处理机制总体示意图，如图10-10：</li>\n</ul>\n<p><img src=\"http://note.youdao.com/yws/res/6167/B96E6C21D3064CFE8883B3FD2DD151A2\" alt=\"image\"></p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"有了这些小习惯，生活就不那么委屈了","url":"http://yoursite.com/2016/11/24/鸡汤-有了这些小习惯，生活就不那么委屈了/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609002510.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;有位网友分享奶奶教她的生活经验，得到了过万转发点赞。</p>\n<p>&emsp;&emsp;奶奶说：“做人要勤快，冰箱里想吃的东西没有了要记得买，衣服换下来了不穿就马上洗。这样在外面累了，会想‘回家吃点喜欢吃的东西’而不是想‘好累啊，回家还有一大堆衣服要洗’，有这样的习惯，生活就不那么委屈了。”</p>\n<p>&emsp;&emsp;深深地被奶奶那句“生活就不那么委屈了”戳中。如果连自己都不善待自己，回到家没好吃的，还看到一堆脏衣服，脑补这画面都觉得烦心。</p>\n<p>&emsp;&emsp;再忙再累也要用心照顾好自己，别成为奶奶口中“在外面累了，还有一堆脏衣服要洗”的人。</p>\n<blockquote>\n<ul>\n<li>生活有委屈感，很多时候是因为我们有敷衍自己的坏习惯。想要活得不那么委屈，首先要学会好好照顾自己，最基本的做法就是坚持美好的小习惯。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;曾经被邀请到一位同事家玩，她家干净到连清洁阿姨都说没什么可打扫的。我问她你平日这么忙，怎么还有时间把家里保持得一尘不染。</p>\n<p>&emsp;&emsp;她说自己有个1分钟家务的好习惯，炒完菜，立马用抹布清理灶台，洗手、洗脸后即刻用抹布擦干溅在洗手台上的水迹，刷牙的空隙擦一擦洗手间的镜子，煮菜空隙擦一擦冰箱门。</p>\n<p>&emsp;&emsp;因为常年保持这个1分钟做家务的习惯，她家每天都干净舒适。回家无须有做家务的压力，家被她打造成能装进疲惫身体和灵魂的温柔乡。</p>\n<p>&emsp;&emsp;有时候一些随手能做到的小习惯，会让你在打拼一天后的生活变得更从容。就算在外面受了多大的委屈，只要回到干净舒适的小窝，躺在舒服的床上，感觉众生皆可原谅。</p>\n<p>&emsp;&emsp;可能很多人都有同样的感受，当清掉家里的垃圾、叠好衣服、清洗好床单，就会有股愉悦感涌上心头。</p>\n<p>&emsp;&emsp;能照顾好自己的人，都是能认认真真履行好习惯的人。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;一个好友好不容易请了一天假到医院看病，排队挂号时才发现没带身份证和医保卡，又赶回家拿，回到医院，号已经没了。</p>\n<p>&emsp;&emsp;朋友又生气又自责又委屈，她对我说，都怪自己昨天换了包包，没把证件放进包包里。</p>\n<p>&emsp;&emsp;我清楚她的习惯，经常换包包都丢三落四。因为她没有提前准备的好习惯，每次匆匆出门才把东西放进包包里，当然容易遗漏。</p>\n<p>&emsp;&emsp;我还认识另一位朋友，每天回家都会把手提包的东西掏出来，固定放在玄关的篮子里，第二天出门再把篮子里的物品放进包包里。这样做有两个好处：一是及时清理掉包包里没有用的东西；二是如果第二天换包包，能够不遗漏东西。</p>\n<p>这个小习惯特别适合那些工作很忙又经常换手提包的人，能减少忙乱中漏东西的情节。</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>&emsp;&emsp;很多时候，一些美好的小习惯可以帮助我们渡过人生的低潮。可是生活里，很多人宁愿躺在沙发上用手机点外卖吃薯片，也不愿意煮顿健康美食慰劳自己；宁愿第二天忍受打卡迟到被罚款，也不愿意提前一天配好第二天要穿的衣服节约时间；宁愿满身赘肉，也不愿意下班后锻炼跑步……</p>\n<p>&emsp;&emsp;我们有太多敷衍自己的日常而不自知。</p>\n<p>&emsp;&emsp;在生活里越受到委屈，越要爱自己，而爱自己就要从坚持一个个美好的小习惯开始。</p>\n<blockquote>\n<ul>\n<li>如果你感觉生活一团糟，想改变现状，不妨先以整理家居、为自己洗手作羹汤、听一首美妙的音乐作为“奠基仪式”。让好的习惯持之以恒，你的世界就会逐渐变亮，心情会越发明媚，令人委屈的空气也会跟着变得稀薄。</li>\n</ul>\n</blockquote>\n<p>&emsp;&emsp;愿从今天开始，你能住上整洁的房间，有喜欢的食物，有软蓬蓬散发清香的床，有美美的鲜花，每天都在温暖中轻轻笑醒。</p>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"8. JavaSE-枚举与注解","url":"http://yoursite.com/2016/11/12/8. JavaSE-枚举与注解/","content":"<h1 id=\"8-1-枚举\"><a href=\"#8-1-枚举\" class=\"headerlink\" title=\"8.1 枚举\"></a>8.1 枚举</h1><h2 id=\"8-1-1-什么是枚举\"><a href=\"#8-1-1-什么是枚举\" class=\"headerlink\" title=\"8.1.1 什么是枚举\"></a>8.1.1 什么是枚举</h2><p>类的对象只有有限个的、确定的<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">星期：Monday(星期一)......Sunday(星期天)</span><br><span class=\"line\">性别：Man(男)、Woman(女)</span><br><span class=\"line\">月份：January(1月)......December(12月)</span><br><span class=\"line\">季节：Spring(春节)......Winter(冬天)</span><br><span class=\"line\">七彩标准色：Red(红)......Purple(紫)</span><br><span class=\"line\">支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</span><br><span class=\"line\">就职状态：Busy、Free、Vocation、Dimission</span><br><span class=\"line\">订单状态：Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Return（退货）、Checked（已确认）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-1-2-如何定义枚举类型\"><a href=\"#8-1-2-如何定义枚举类型\" class=\"headerlink\" title=\"8.1.2 如何定义枚举类型\"></a>8.1.2 如何定义枚举类型</h2><p>要点：</p>\n<ul>\n<li>私有化类的构造器，保证不能在类的外部创建其对象 </li>\n<li>在类的内部创建枚举类的实例。声明为：public static final </li>\n</ul>\n<p>JDK1.5之前：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestEnumType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSeason s = Season.SPRING;</span><br><span class=\"line\">\t\tSystem.out.println(s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Season&#123;</span><br><span class=\"line\">\tpublic static final Season SPRING = new Season();</span><br><span class=\"line\">\tpublic static final Season SUMMER = new Season();</span><br><span class=\"line\">\tpublic static final Season AUTUMN = new Season();</span><br><span class=\"line\">\tpublic static final Season WINTER = new Season();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate Season()&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String toString()&#123;</span><br><span class=\"line\">\t\tif(this == SPRING)&#123;</span><br><span class=\"line\">\t\t\treturn &quot;SPRING&quot;;</span><br><span class=\"line\">\t\t&#125;else if(this == SUMMER)&#123;</span><br><span class=\"line\">\t\t\treturn &quot;SUMMER&quot;;</span><br><span class=\"line\">\t\t&#125;else if(this == AUTUMN)&#123;</span><br><span class=\"line\">\t\t\treturn &quot;AUTUMN&quot;;</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\treturn &quot;WINTER&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK1.5之后：</p>\n<ul>\n<li>使用 enum 定义的枚举类默认继承了 java.lang.Enum类。因此不能再继承其他类。</li>\n<li>枚举类的所有构造器只能使用 private 访问控制符</li>\n<li>枚举类的所有实例必须在枚举类中显式列出(, 分隔    ; 结尾)，必须在枚举类的第一行声明枚举类对象。列出的实例系统会自动添加 public static final 修饰</li>\n<li>JDK 1.5 之后可以在 switch 表达式中使用Enum定义的枚举类的对象作为表达式, case 子句可以直接使用枚举值的名字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.enumtype.after15;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestEnumType &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSeason s = Season.SPRING;</span><br><span class=\"line\">\t\tswitch(s)&#123;</span><br><span class=\"line\">\t\tcase SPRING:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;春暖花开&quot;);break;</span><br><span class=\"line\">\t\tcase SUMMER:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;夏日炎炎&quot;);break;</span><br><span class=\"line\">\t\tcase AUTUMN:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;秋高气爽&quot;);break;</span><br><span class=\"line\">\t\tcase WINTER:</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;白雪皑皑&quot;);break;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Season&#123;</span><br><span class=\"line\">\tSPRING,SUMMER,AUTUMN,WINTER;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-1-3-java-lang-Enum类的方法\"><a href=\"#8-1-3-java-lang-Enum类的方法\" class=\"headerlink\" title=\"8.1.3 java.lang.Enum类的方法\"></a>8.1.3 java.lang.Enum类的方法</h2><p>除了toString方法，都是final修饰的方法，因此都不能重写</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530132629.png\" alt></p>\n<p>还有两个API文档中没有，但枚举类类拥有并且常用的方法</p>\n<ul>\n<li>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</li>\n<li>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常。</li>\n</ul>\n<h2 id=\"8-1-4-枚举的特别说明\"><a href=\"#8-1-4-枚举的特别说明\" class=\"headerlink\" title=\"8.1.4 枚举的特别说明\"></a>8.1.4 枚举的特别说明</h2><h3 id=\"1、枚举中定义属性\"><a href=\"#1、枚举中定义属性\" class=\"headerlink\" title=\"1、枚举中定义属性\"></a>1、枚举中定义属性</h3><ul>\n<li>枚举类对象的属性不应允许被改动, 所以应该使用 private final修饰。不是语法要求，而是语义要求。</li>\n<li>枚举类的使用 private final 修饰的属性应该在构造器中为其赋值。</li>\n<li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.enumtype.before15;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestWeekField &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tWeek w = Week.MONDAY;</span><br><span class=\"line\">\t\tSystem.out.println(w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Week&#123;</span><br><span class=\"line\">\tMONDAY(&quot;星期一&quot;),</span><br><span class=\"line\">\tTUESDAY(&quot;星期二&quot;),</span><br><span class=\"line\">\tWEDNESDAY(&quot;星期三&quot;),</span><br><span class=\"line\">\tTHURSDAY(&quot;星期四&quot;),</span><br><span class=\"line\">\tFRIDAY(&quot;星期五&quot;),</span><br><span class=\"line\">\tSATURDAY(&quot;星期六&quot;),</span><br><span class=\"line\">\tSUNDAY(&quot;星期日&quot;);</span><br><span class=\"line\">\tprivate final String DESCRPTION;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate Week(String dESCRPTION) &#123;</span><br><span class=\"line\">\t\tDESCRPTION = dESCRPTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String toString()&#123;</span><br><span class=\"line\">\t\treturn DESCRPTION;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、枚举类可以自定义方法\"><a href=\"#2、枚举类可以自定义方法\" class=\"headerlink\" title=\"2、枚举类可以自定义方法\"></a>2、枚举类可以自定义方法</h3><p>静态和非静态</p>\n<h3 id=\"3、枚举类可以实现一个或者多个接口（了解）\"><a href=\"#3、枚举类可以实现一个或者多个接口（了解）\" class=\"headerlink\" title=\"3、枚举类可以实现一个或者多个接口（了解）\"></a>3、枚举类可以实现一个或者多个接口（了解）</h3><ul>\n<li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li>\n<li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式, 则可以让每个枚举值分别来实现该方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Change&#123;</span><br><span class=\"line\">\tvoid degenerate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Checkable&#123;</span><br><span class=\"line\">\tvoid check();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">enum Gender implements Change,Checkable&#123;</span><br><span class=\"line\">\tMAN&#123;</span><br><span class=\"line\">\t\tpublic void degenerate()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;咔嚓一刀&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,WOMAN&#123;</span><br><span class=\"line\">\t\tpublic void degenerate()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;比较复杂&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tpublic void check()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;脱光&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、枚举类可以自己定义抽象方法（了解）\"><a href=\"#4、枚举类可以自己定义抽象方法（了解）\" class=\"headerlink\" title=\"4、枚举类可以自己定义抽象方法（了解）\"></a>4、枚举类可以自己定义抽象方法（了解）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Payment&#123;</span><br><span class=\"line\">\tCASH&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;现金支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tWECHAT&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;微信支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tALIPAY&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;支付鸨支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tCARD&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;银行卡支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tCREDIT&#123;</span><br><span class=\"line\">\t\tpublic void pay()&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;信用卡支付&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tpublic abstract void pay();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-1-5-关于枚举的拓展\"><a href=\"#8-1-5-关于枚举的拓展\" class=\"headerlink\" title=\"8.1.5 关于枚举的拓展\"></a>8.1.5 关于枚举的拓展</h2><p>java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复；EnumMap中的key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以参考JDK文档。</p>\n<h1 id=\"8-2-注解Annotation\"><a href=\"#8-2-注解Annotation\" class=\"headerlink\" title=\"8.2 注解Annotation\"></a>8.2 注解Annotation</h1><p>注解Annotation是从JDK5.0开始引入的新特性。</p>\n<h2 id=\"8-2-1-注解的概述\"><a href=\"#8-2-1-注解的概述\" class=\"headerlink\" title=\"8.2.1 注解的概述\"></a>8.2.1 注解的概述</h2><h3 id=\"1、Annotation的作用\"><a href=\"#1、Annotation的作用\" class=\"headerlink\" title=\"1、Annotation的作用\"></a>1、Annotation的作用</h3><ul>\n<li>注解不是程序本身，可以对程序作出解释。（这一点，跟注释没什么区别）</li>\n<li>可以被其他程序（比如：编译器，Checker Framework等）读取。（注解信息处理流程，是注解和注释的重大区别。如果没有注解信息处理流程，则注解毫无意义）<h3 id=\"2、Annotation的格式\"><a href=\"#2、Annotation的格式\" class=\"headerlink\" title=\"2、Annotation的格式\"></a>2、Annotation的格式</h3>注解是以“@注释名”在代码中存在的，还可以添加一些参数值，例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SuppressWarnings(value=”unchecked”)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、Annotation在哪里使用\"><a href=\"#3、Annotation在哪里使用\" class=\"headerlink\" title=\"3、Annotation在哪里使用\"></a>3、Annotation在哪里使用</h3><p>Annotation 可以像修饰符一样被使用, 可用于修饰包，类, 构造器, 方法, 成员变量, 参数, 局部变量。相当于给它们添加了额外的辅助信息，而且有些注解我们可以通过反射机制编程实现对这些元数据的访问。</p>\n<h2 id=\"8-2-2-常见的注解示例\"><a href=\"#8-2-2-常见的注解示例\" class=\"headerlink\" title=\"8.2.2 常见的注解示例\"></a>8.2.2 常见的注解示例</h2><h3 id=\"1、生成文档\"><a href=\"#1、生成文档\" class=\"headerlink\" title=\"1、生成文档\"></a>1、生成文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@author 标明开发该类模块的作者，多个作者之间使用,分割</span><br><span class=\"line\">@version 标明该类模块的版本</span><br><span class=\"line\">@see 参考转向，也就是相关主题</span><br><span class=\"line\">@since 从哪个版本开始增加的</span><br><span class=\"line\">@param 对方法中某参数的说明，如果没有参数就不能写</span><br><span class=\"line\">@return 对方法返回值的说明，如果方法的返回值类型是void就不能写</span><br><span class=\"line\">@exception 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写</span><br><span class=\"line\">其中 @param  @return 和 @exception 这三个标记都是只用于方法的。</span><br><span class=\"line\">@param的格式要求：@param 形参名 形参类型  形参说明</span><br><span class=\"line\">@return 的格式要求：@return 返回值类型 返回值说明</span><br><span class=\"line\">@exception的格式要求：@exception 异常类型 异常说明</span><br><span class=\"line\">@param和@exception可以并列多个</span><br><span class=\"line\">javadoc.exe就是这些注解的信息处理流程</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.annotation.javadoc;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * @author Irene</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @see Math.java</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestJavadoc &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 程序的主方法，程序的入口</span><br><span class=\"line\">\t * @param args String[] 命令行参数</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 求圆面积的方法</span><br><span class=\"line\">\t * @param radius double 半径值</span><br><span class=\"line\">\t * @return double 圆的面积</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tpublic static double getArea(double radius)&#123;</span><br><span class=\"line\">\t\treturn Math.PI * radius * radius;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530133407.png\" alt></p>\n<h3 id=\"2、在编译时进行格式检查\"><a href=\"#2、在编译时进行格式检查\" class=\"headerlink\" title=\"2、在编译时进行格式检查\"></a>2、在编译时进行格式检查</h3><p> JDK中系统内置了常用的三个注解：<br> （1）@Override：按照重写的要求检查方法的格式<br> （2）@Deprecated：过时，表示不鼓励程序员使用这样的元素，因为存在危险或有更好的实现<br> （3）@SuppressWarnings：抑制警告 </p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000425.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.annotation.javadoc;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t@SuppressWarnings(&quot;unused&quot;)</span><br><span class=\"line\">\t\tint a = 10;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Deprecated</span><br><span class=\"line\">\tpublic void print()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;过时的方法&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;重写的toString方法()&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、跟踪代码依赖性，实现替代配置文件功能\"><a href=\"#3、跟踪代码依赖性，实现替代配置文件功能\" class=\"headerlink\" title=\"3、跟踪代码依赖性，实现替代配置文件功能\"></a>3、跟踪代码依赖性，实现替代配置文件功能</h3><p>Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.annotation.WebServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">@WebServlet(&quot;/login&quot;)</span><br><span class=\"line\">public class LoginServlet extends HttpServlet &#123;</span><br><span class=\"line\">\tprivate static final long serialVersionUID = 1L;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;servlet-class&gt;com.servlet.LoginServlet&lt;/servlet-class&gt;</span><br><span class=\"line\">&lt;/servlet&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">  &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span><br><span class=\"line\">  &lt;url-pattern&gt;/login&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>spring框架中关于“事务”的管理<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(propagation=Propagation.REQUIRES_NEW,</span><br><span class=\"line\">\t\t\t\tisolation=Isolation.READ_COMMITTED,</span><br><span class=\"line\">\t\t\t\treadOnly=false,</span><br><span class=\"line\">                timeout=3)</span><br><span class=\"line\">\tpublic void buyBook(String username, String isbn) &#123;</span><br><span class=\"line\">\t\t//1.查询书的单价</span><br><span class=\"line\">\t\tint price = bookShopDao.findBookPriceByIsbn(isbn);</span><br><span class=\"line\">\t\t//2. 更新库存</span><br><span class=\"line\">\t\tbookShopDao.updateBookStock(isbn);\t</span><br><span class=\"line\">\t\t//3. 更新用户的余额</span><br><span class=\"line\">\t\tbookShopDao.updateUserAccount(username, price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">     &lt;!-- 配置事务属性 --&gt;</span><br><span class=\"line\">\t &lt;tx:advice transaction-manager=&quot;dataSourceTransactionManager&quot; id=&quot;txAdvice&quot;&gt;</span><br><span class=\"line\">\t \t &lt;tx:attributes&gt;</span><br><span class=\"line\">\t \t \t\t&lt;!-- 配置每个方法使用的事务属性 --&gt;</span><br><span class=\"line\">\t \t \t\t&lt;tx:method name=&quot;buyBook&quot; propagation=&quot;REQUIRES_NEW&quot; </span><br><span class=\"line\">\t \t \t\t\t\t   isolation=&quot;READ_COMMITTED&quot;  read-only=&quot;false&quot; </span><br><span class=\"line\">\t \t \t\t\t\t   timeout=&quot;3&quot; /&gt;</span><br><span class=\"line\">\t \t &lt;/tx:attributes&gt;</span><br><span class=\"line\">\t &lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4、JUnit框架中的注解\"><a href=\"#4、JUnit框架中的注解\" class=\"headerlink\" title=\"4、JUnit框架中的注解\"></a>4、JUnit框架中的注解</h3><ul>\n<li>JUnit是由 Erich Gamma 和 Kent Beck 编写的一个回归测试框架（regression testing framework）,供Java开发人员编写单元测试之用。多数Java的开发环境都已经集成了JUnit作为单元测试的工具。</li>\n<li>Junit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。<h4 id=\"1-如何使用JUnit\"><a href=\"#1-如何使用JUnit\" class=\"headerlink\" title=\"1 如何使用JUnit\"></a>1 如何使用JUnit</h4>要使用JUnit，必须在项目的编译路径中必须引入JUnit的库，即相关的.class文件组成的jar包。<br>如何把JUnit的jar添加到编译路径如图所示：</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134033.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134123.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134149.png\" alt></p>\n<h4 id=\"2-JUnit的常用注解\"><a href=\"#2-JUnit的常用注解\" class=\"headerlink\" title=\"2 JUnit的常用注解\"></a>2 JUnit的常用注解</h4><ul>\n<li>使用JUnit测试的类必须是public的。</li>\n<li>JUnit4常见的注解和要求：这些方法都必须是public，无参，无返回值。</li>\n<li>@Test：标记在非静态的测试方法上。只有标记@Test的方法才能被作为一个测试方法单独测试。一个类中可以有多个@Test标记的方法。运行时如果只想运行其中一个@Test标记的方法，那么选择这个方法名，然后单独运行，否则整个类的所有标记了@Test的方法都会被执行。-</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test(timeout=1000)：设置超时时间，如果测试时间超过了你定义的timeout，测试失败</span><br><span class=\"line\">@Test(expected)： 申明出会发生的异常，比如 @Test（expected = Exception.class）</span><br><span class=\"line\">了解：</span><br><span class=\"line\">@BeforeClass：标记在静态方法上。因为这个方法只执行一次。在类初始化时执行。</span><br><span class=\"line\">@AfterClass：标记在静态方法上。因为这个方法只执行一次。在所有方法完成后执行。</span><br><span class=\"line\">@Before：标记在非静态方法上。在@Test方法前面执行，而且是在每一个@Test方法前面都执行</span><br><span class=\"line\">@After：标记在非静态方法上。在@Test方法后面执行，而且是在每一个@Test方法后面都执行</span><br><span class=\"line\">@Ignore：标记在本次不参与测试的方法上。这个注解的含义就是“某些方法尚未完成，暂不参与此次测试”。</span><br><span class=\"line\">@BeforeClass、@AfterClass、@Before、@After、@Ignore都是配合@Test它使用的，单独使用没有意义。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.junit.After;</span><br><span class=\"line\">import org.junit.AfterClass;</span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.BeforeClass;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestJUnit2 &#123;</span><br><span class=\"line\">\tprivate static Object[] array;</span><br><span class=\"line\">\tprivate static int total;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@BeforeClass</span><br><span class=\"line\">\tpublic static void init()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;初始化数组&quot;);</span><br><span class=\"line\">\t\tarray = new Object[5];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Before</span><br><span class=\"line\">\tpublic void before()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;调用之前total=&quot; + total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Test</span><br><span class=\"line\">\tpublic void add()&#123;</span><br><span class=\"line\">\t\t//往数组中存储一个元素</span><br><span class=\"line\">\t\tSystem.out.println(&quot;add&quot;);</span><br><span class=\"line\">\t\tarray[total++] = &quot;hello&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@After</span><br><span class=\"line\">\tpublic void after()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;调用之前total=&quot; + total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@AfterClass</span><br><span class=\"line\">\tpublic static void destroy()&#123;</span><br><span class=\"line\">\t\tarray = null;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;销毁数组&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-如何运行Junit测试方法\"><a href=\"#3-如何运行Junit测试方法\" class=\"headerlink\" title=\"3 如何运行Junit测试方法\"></a>3 如何运行Junit测试方法</h4><p>一个类中可以有多个@Test标记的方法，运行时如果只想运行其中一个@Test标记的方法，那么选择这个方法名，然后单独运行，否则整个类的所有标记了@Test的方法都会被执行。</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134423.png\" alt></p>\n<h2 id=\"8-2-3-自定义注解与反射读取注解\"><a href=\"#8-2-3-自定义注解与反射读取注解\" class=\"headerlink\" title=\"8.2.3 自定义注解与反射读取注解\"></a>8.2.3 自定义注解与反射读取注解</h2><ul>\n<li>定义新的 Annotation 类型使用 @interface 关键字</li>\n<li>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明. 其方法名和返回值定义了该成员的名字和类型. 我们称为配置参数。类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</li>\n<li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用 default 关键字</li>\n<li>如果只有一个参数成员，建议使用参数名为value</li>\n<li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 = 参数值”，如果只有一个参数成员，且名称为value，可以省略“value=”</li>\n<li>没有成员定义的 Annotation 称为标记; 包含成员变量的 Annotation 称为元数据 Annotation</li>\n<li>注意：自定义注解必须配上注解的信息处理流程才有意义。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.annotation.javadoc;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">@MyAnnotation(value=&quot;尚硅谷&quot;)</span><br><span class=\"line\">public class TestMyAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tClass clazz = TestMyAnnotation.class;</span><br><span class=\"line\">\t\tAnnotation a = clazz.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">\t\tMyAnnotation m = (MyAnnotation) a;</span><br><span class=\"line\">\t\tString info = m.value();</span><br><span class=\"line\">\t\tSystem.out.println(info);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(ElementType.TYPE)</span><br><span class=\"line\">@interface MyAnnotation&#123;</span><br><span class=\"line\">\tString value() default &quot;auguigu&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-4-元注解\"><a href=\"#8-2-4-元注解\" class=\"headerlink\" title=\"8.2.4 元注解\"></a>8.2.4 元注解</h2><blockquote>\n<p>Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）@Target</span><br><span class=\"line\">（2）@Retention</span><br><span class=\"line\">（3）@Documented</span><br><span class=\"line\">（4）@Inherited</span><br></pre></td></tr></table></figure>\n<p>在java.lang.annotation包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、@Target</span><br><span class=\"line\">作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530134908.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2、@Retention</span><br><span class=\"line\">@Retention定义了该Annotation被保留的时间长短</span><br><span class=\"line\">作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</span><br><span class=\"line\">@Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指定值:</span><br><span class=\"line\">取值（RetentionPoicy）有：</span><br><span class=\"line\">SOURCE:在源文件中有效（即源文件保留）</span><br><span class=\"line\">CLASS:在class文件中有效（即class保留） 这是默认值</span><br><span class=\"line\">RUNTIME:在运行时有效（即运行时保留）当运行 Java 程序时, JVM 会保留注释. 程序可以通过反射获取该注释</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000638.png\" alt><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3、@Documented</span><br><span class=\"line\">Documented 注解表明这个注解应该被 javadoc工具记录。默认情况下,javadoc是不包括注解的，但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理。</span><br><span class=\"line\">4、@Inherited</span><br><span class=\"line\">允许子类继承父类中的注解</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"8-2-5-JDK1-8注解的新特性\"><a href=\"#8-2-5-JDK1-8注解的新特性\" class=\"headerlink\" title=\"8.2.5 JDK1.8注解的新特性\"></a>8.2.5 JDK1.8注解的新特性</h2><p>Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。  </p>\n<h3 id=\"1、可重复注解\"><a href=\"#1、可重复注解\" class=\"headerlink\" title=\"1、可重复注解\"></a>1、可重复注解</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class TestOldAnnotation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RoleAnnotations(&#123;@RoleAnnotation(role=&quot;admin&quot;),@RoleAnnotation(role=&quot;manager&quot;),@RoleAnnotation(role=&quot;saler&quot;)&#125;)</span><br><span class=\"line\">\tpublic void add()&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@interface RoleAnnotation&#123;</span><br><span class=\"line\">\tString role() default &quot;admin&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//表示target是所有</span><br><span class=\"line\">@interface RoleAnnotations&#123;</span><br><span class=\"line\">\tRoleAnnotation[] value();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK1.8之后，可读性更好</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Repeatable;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestNewAnnotation &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@LimitAnnotation(role=&quot;admin&quot;)</span><br><span class=\"line\">\t@LimitAnnotation(role=&quot;manager&quot;)</span><br><span class=\"line\">\t@LimitAnnotation(role=&quot;saler&quot;)</span><br><span class=\"line\">\tpublic void test()&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Target(ElementType.METHOD)      此处的target必须与LimitAnnotation一致</span><br><span class=\"line\">@interface LimitAnnotations&#123;</span><br><span class=\"line\">\tLimitAnnotation[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Repeatable(LimitAnnotations.class)</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@interface LimitAnnotation&#123;</span><br><span class=\"line\">\tString role() default &quot;admin&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、类型注解\"><a href=\"#2、类型注解\" class=\"headerlink\" title=\"2、类型注解\"></a>2、类型注解</h3><p>JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ElementType &#123;</span><br><span class=\"line\">    /** Class, interface (including annotation type), or enum declaration */</span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Field declaration (includes enum constants) */</span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Method declaration */</span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Formal parameter declaration */</span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Constructor declaration */</span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Local variable declaration */</span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Annotation type declaration */</span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /** Package declaration */</span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Type parameter declaration</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @since 1.8</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Use of a type</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @since 1.8</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在java 8之前，注解只能是在声明的地方所使用，java8开始，注解可以应用在任何地方。</li>\n<li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（eg：泛型声明）。</li>\n<li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.com.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestTypeDefine&lt;@TypeDefine() U&gt; &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate U u;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic &lt;@TypeDefine() T&gt; void test(T t)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Target(&#123;ElementType.TYPE_PARAMETER&#125;)</span><br><span class=\"line\">@interface TypeDefine&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">package com.atguigu.anno;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.ElementType;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\">@MyAnnotation</span><br><span class=\"line\">public class TestAnnotation&lt;U&gt;&#123;</span><br><span class=\"line\">\t@MyAnnotation</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTestAnnotation &lt;@MyAnnotation String&gt; t = null;</span><br><span class=\"line\">\t\tint a = (@MyAnnotation int)2L;</span><br><span class=\"line\">\t\t@MyAnnotation int b = 10;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static &lt;@MyAnnotation T&gt; void method(T t)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(@MyAnnotation String arg)throws @MyAnnotation Exception&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Target(ElementType.TYPE_USE)</span><br><span class=\"line\">@interface MyAnnotation&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类型注解被用来支持在Java的程序中做强类型检查。配合第三方插件工具Checker Framework（使用Checker Framework可以找到类型注解出现的地方并检查），可以在编译的时候检测出<code>runtime error（eg：UnsupportedOperationException； NumberFormatException；NullPointerException异常等都是runtime error）</code>，以提高代码质量。这就是类型注解的作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package checker;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.checkerframework.checker.nullness.qual.NonNull;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TestChecker &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tObject obj = null;</span><br><span class=\"line\">\t\tprintNonNullToString(obj);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void printNonNullToString(@NonNull Object object) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(object.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000751.png\" alt></p>\n<p>进入源代码目录   通过javac编译  -processor 后面接注释处理流程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac  -processor org.checkerframework.checker.nullness.NullnessChecker TestChecker.java</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190604000832.png\" alt></p>\n<p>警告处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -Xbootclasspath/p:D:\\software\\eclipse\\checker-framework-2.1.13\\checker\\dist\\jdk8.jar -processor org.checkerframework.checker.nullness.NullnessChecker TestChecker.java</span><br></pre></td></tr></table></figure>\n<p>要配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classpath=.;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar;D:\\software\\eclipse\\checker-framework-2.1.13\\checker\\dist\\checker.jar;D:\\software\\eclipse\\checker-framework-2.1.13\\checker\\dist\\checker-qual.jar;</span><br></pre></td></tr></table></figure>\n<p>注意</p>\n<ul>\n<li>java 5,6,7版本是不支持注解@NonNull，但checker framework 有个向下兼容的解决方案，就是将类型注解@NonNull 用/**/注释起来。 </li>\n</ul>\n<p>这样javac编译器就会忽略掉注释块，但用checker framework里面的javac编译器同样能够检测出@NonNull错误。</p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"7. JavaSE-面向对象高级特性","url":"http://yoursite.com/2016/10/28/7. JavaSE-面向对象高级特性/","content":"<h1 id=\"7-1-Object类\"><a href=\"#7-1-Object类\" class=\"headerlink\" title=\"7.1 Object类\"></a>7.1 Object类</h1><h2 id=\"7-1-1-Object类的特点\"><a href=\"#7-1-1-Object类的特点\" class=\"headerlink\" title=\"7.1.1 Object类的特点\"></a>7.1.1 Object类的特点</h2><blockquote>\n<p>Object类是所有类的根父类, 也就是说如果一个类没有显式声明父类, 那么这个类的父类就是Object类,<br>所以, Object类中的属性和方法会被所有类继承, 都可以直接调用.</p>\n</blockquote>\n<h2 id=\"7-1-2-类中的典型方法\"><a href=\"#7-1-2-类中的典型方法\" class=\"headerlink\" title=\"7.1.2 类中的典型方法\"></a>7.1.2 类中的典型方法</h2><h3 id=\"1-toString\"><a href=\"#1-toString\" class=\"headerlink\" title=\"1. toString()\"></a>1. toString()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String toString()</span><br></pre></td></tr></table></figure>\n<p>这个方法返回当前对象的一个字符串表示, 通常用于描述这个对象的内容.<br>这个方法也会在对象被打印和与字符串拼接时自动调用, 结果还是一个字符串.</p>\n<h3 id=\"2-equals\"><a href=\"#2-equals\" class=\"headerlink\" title=\"2. equals()\"></a>2. equals()</h3><p>表示两个对象内容是否相等, 通常情况下, 两个不同的对象是不相等的, 但是我们可以通过覆盖这个方法,实现两个内容相等, 但不同的对象之间具有等同性比较能力. </p>\n<h3 id=\"3-hashCode\"><a href=\"#3-hashCode\" class=\"headerlink\" title=\"3. hashCode()\"></a>3. hashCode()</h3><p>当两个对象的内容相等时, <strong>equals方法的结果就应该返回true</strong>, 但同时这两个对象调用hashCode方法返回的哈希码值也必须要相等, 相同的道理, 两个hashCode码值不同的对象, <strong>equals方法一定返回false</strong>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Point &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate int x;</span><br><span class=\"line\">\tprivate int y;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Point() &#123;&#125;</span><br><span class=\"line\">\tpublic Point(int x, int y) &#123;</span><br><span class=\"line\">\t\tthis.x = x;</span><br><span class=\"line\">\t\tthis.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setX(int x) &#123;</span><br><span class=\"line\">\t\tthis.x = x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getX() &#123;</span><br><span class=\"line\">\t\treturn x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setY(int y) &#123;</span><br><span class=\"line\">\t\tthis.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getY() &#123;</span><br><span class=\"line\">\t\treturn y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;X:&quot; + x + &quot;,Y:&quot; + y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override // 可以完成真实的比较</span><br><span class=\"line\">\tpublic boolean equals(Object obj) &#123;</span><br><span class=\"line\">\t\tif (obj instanceof Point &amp;&amp; this.x == ((Point)obj).x &amp;&amp; this.y == ((Point)obj).y) &#123;</span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic int hashCode() &#123;</span><br><span class=\"line\">\t\treturn Integer.parseInt(x * 10 + &quot;&quot; + y * 10);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 返回对象的字符串表示, 通常在打印对象时调用</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn &quot;x:&quot; + x + &quot;,y:&quot; + y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PointTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tPoint p1 = new Point(10, 20);</span><br><span class=\"line\">\t\tPoint p2 = new Point(10, 20);</span><br><span class=\"line\">\t\tSystem.out.println(p1 == p2); // 打印false, 因为比较两个对象的地址</span><br><span class=\"line\">\t\tboolean b = p1.equals(p2); // 返回true, 因为比较两个对象的内容</span><br><span class=\"line\">\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(p1.hashCode()); // 两个对象的哈希码也都一样</span><br><span class=\"line\">\t\tSystem.out.println(p2.hashCode());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(p1); // 打印对象时, 打印的其实是对象的toString()方法的结果</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-1-3-Object的使用\"><a href=\"#7-1-3-Object的使用\" class=\"headerlink\" title=\"7.1.3 Object的使用\"></a>7.1.3 Object的使用</h2><p>Object类型通常用于表示任意对象的引用类型, 使用Object类型可以兼容任意对象, 很灵活方便, 也因为Object类是根父类, 所以其中的方法具有普遍性, 便于统一处理.</p>\n<h2 id=\"7-1-4-Object的注意点\"><a href=\"#7-1-4-Object的注意点\" class=\"headerlink\" title=\"7.1.4 Object的注意点\"></a>7.1.4 Object的注意点</h2><p>因为Object类型是父类类型, 所以Object类型的对象究竟是什么类型的对象就变得非常复杂, 所以想要处理不同的子类对象, 比较麻烦, 需要配合instanceof操作符和类型转换. </p>\n<h1 id=\"7-2-static关键字\"><a href=\"#7-2-static关键字\" class=\"headerlink\" title=\"7.2 static关键字\"></a>7.2 static关键字</h1><h2 id=\"7-2-1-static关键字含义\"><a href=\"#7-2-1-static关键字含义\" class=\"headerlink\" title=\"7.2.1 static关键字含义\"></a>7.2.1 static关键字含义</h2><h3 id=\"1-为什么要使用static\"><a href=\"#1-为什么要使用static\" class=\"headerlink\" title=\"1. 为什么要使用static\"></a>1. 为什么要使用static</h3><blockquote>\n<ul>\n<li>有一些数据不必要隶属于每个对象, 例如Chinese类的country属性就应该是China,并且所有对象都应该是相同的, 这样的数据就可以声明成static的, 这样的数据就隶属于类, 通过类就可以直接访问, 当然通过对象也可以访问. </li>\n<li>有一些方法也是相同的道理, 可以被static修饰, 这样的方法只需要通过类调用即可, 不需要创建对象.</li>\n</ul>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530095828.png\" alt></p>\n<h3 id=\"2-使用了static后的变化\"><a href=\"#2-使用了static后的变化\" class=\"headerlink\" title=\"2. 使用了static后的变化\"></a>2. 使用了static后的变化</h3><p>使用了static以后的数据不再是不确定的, 就像对象的创建就是不确定的(也可称之为动态), static是确定的, 和动态形成对比, 所以称之为静态. </p>\n<h3 id=\"3-使用范围：\"><a href=\"#3-使用范围：\" class=\"headerlink\" title=\"3.使用范围：\"></a>3.使用范围：</h3><p>在Java类中，可用static修饰属性、方法、代码块、内部类</p>\n<h3 id=\"4-被修饰后的成员具备以下特点：\"><a href=\"#4-被修饰后的成员具备以下特点：\" class=\"headerlink\" title=\"4.被修饰后的成员具备以下特点：\"></a>4.被修饰后的成员具备以下特点：</h3><p>①    随着类的加载而加载<br>②    优先于对象存在<br>③    修饰的成员，被所有对象所共享<br>④    访问权限允许时，可不创建对象，直接被类调用  </p>\n<h2 id=\"7-2-2-static修饰属性\"><a href=\"#7-2-2-static修饰属性\" class=\"headerlink\" title=\"7.2.2 static修饰属性\"></a>7.2.2 static修饰属性</h2><h3 id=\"1-类属性\"><a href=\"#1-类属性\" class=\"headerlink\" title=\"1. 类属性\"></a>1. 类属性</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530095936.png\" alt></p>\n<h3 id=\"2-类属性的存储\"><a href=\"#2-类属性的存储\" class=\"headerlink\" title=\"2. 类属性的存储\"></a>2. 类属性的存储</h3><p>类属性保存在方法区的类信息数据区中</p>\n<h3 id=\"3-类属性的使用\"><a href=\"#3-类属性的使用\" class=\"headerlink\" title=\"3. 类属性的使用\"></a>3. 类属性的使用</h3><p>类属性可以直接通过类名使用</p>\n<h3 id=\"4-静态属性的特点\"><a href=\"#4-静态属性的特点\" class=\"headerlink\" title=\"4. 静态属性的特点\"></a>4. 静态属性的特点</h3><p>因为隶属于类, 所以静态属性通常是共享数据</p>\n<h2 id=\"7-2-3-static-修饰方法\"><a href=\"#7-2-3-static-修饰方法\" class=\"headerlink\" title=\"7.2.3 static 修饰方法\"></a>7.2.3 static 修饰方法</h2><h3 id=\"1-类方法-class-Method\"><a href=\"#1-类方法-class-Method\" class=\"headerlink\" title=\"1. 类方法(class Method)\"></a>1. 类方法(class Method)</h3><ul>\n<li>没有对象的实例时，可以用类名.方法名()的形式访问由static标记的类方法。</li>\n<li>在static方法内部只能访问类的static属性，不能访问类的非static属性。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">private int id;</span><br><span class=\"line\">       private static int total = 0;</span><br><span class=\"line\">       public static int getTotalPerson() &#123; </span><br><span class=\"line\">\t    \t\tid++;\t//非法</span><br><span class=\"line\">\t\t\t\treturn total;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       public Person() &#123;</span><br><span class=\"line\">         \ttotal++;</span><br><span class=\"line\"> \t\t\t\tid = total;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       public static void main(String[] args) &#123;</span><br><span class=\"line\"> \t\t\t\tSystem.out.println(&quot;Number of total is &quot; +Person.getTotalPerson());</span><br><span class=\"line\">\t\t\t\t//没有创建对象也可以访问静态方法</span><br><span class=\"line\"> \t\t\t\tPerson p1 = new Person();</span><br><span class=\"line\">     \t\t\tSystem.out.println( &quot;Number of total is &quot;+ p1.getTotalPerson());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-类方法特点\"><a href=\"#2-类方法特点\" class=\"headerlink\" title=\"2. 类方法特点\"></a>2. 类方法特点</h3><p>类方法隶属于类, 不能在其中直接访问对象属性, 如果想要访问对象属性, 必须先创建对象, 通过对象再访问对象属性. 而在非静态方法中, 可以直接调用类方法.</p>\n<h2 id=\"7-2-4单例设计模式\"><a href=\"#7-2-4单例设计模式\" class=\"headerlink\" title=\"7.2.4单例设计模式\"></a>7.2.4单例设计模式</h2><blockquote>\n<ul>\n<li>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式。设计模式就像是经典的棋谱，不同的棋局，我们用不同的棋谱，免去我们自己再思考和摸索。</li>\n<li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造方法的访问权限设置为private，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的该类对象的变量也必须定义成静态的。</li>\n</ul>\n</blockquote>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530100642.png\" alt></p>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><p><img src=\"http://note.youdao.com/yws/res/5869/67679F24EB994B5487180C512B907812\" alt=\"image\"></p>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530100824.png\" alt></p>\n<h1 id=\"7-3-代码块\"><a href=\"#7-3-代码块\" class=\"headerlink\" title=\"7.3 代码块\"></a>7.3 代码块</h1><h2 id=\"7-3-1-什么是代码块\"><a href=\"#7-3-1-什么是代码块\" class=\"headerlink\" title=\"7.3.1 什么是代码块\"></a>7.3.1 什么是代码块</h2><h3 id=\"1-什么是代码块\"><a href=\"#1-什么是代码块\" class=\"headerlink\" title=\"1. 什么是代码块\"></a>1. 什么是代码块</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530100959.png\" alt></p>\n<h3 id=\"2-静态代码块\"><a href=\"#2-静态代码块\" class=\"headerlink\" title=\"2.静态代码块\"></a>2.静态代码块</h3><ul>\n<li>一个类中初始化块若有修饰符，则只能被static修饰，称为静态代码块(static block )，当类被载入时，类属性的声明和静态代码块先后顺序被执行，且只被执行一次。</li>\n<li>static块通常用于初始化static (类)属性</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">\tpublic static int total;</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t        total = 100;//为total赋初值 </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t…… //其它属性或方法声明</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-非静态代码块\"><a href=\"#3-非静态代码块\" class=\"headerlink\" title=\"3. 非静态代码块\"></a>3. 非静态代码块</h3><ul>\n<li>概念：没有static修饰的代码块</li>\n<li>特点：<br>①    可以有输出语句。<br>②    可以对类的属性、类的声明进行初始化操作。<br>③    可以调用静态的变量或方法。<br>④    若有多个非静态的代码块，那么按照从上到下的顺序依次执行。<br>⑤    每次创建对象的时候，都会执行一次。且先于构造器执行  </li>\n</ul>\n<h3 id=\"4-静态和非静态关系\"><a href=\"#4-静态和非静态关系\" class=\"headerlink\" title=\"4 静态和非静态关系\"></a>4 静态和非静态关系</h3><h4 id=\"非静态的本质是什么\"><a href=\"#非静态的本质是什么\" class=\"headerlink\" title=\"非静态的本质是什么\"></a>非静态的本质是什么</h4><p>非静态也可以称为动态, 意思是确定的, 在程序中对象的创建是不确定的, 因为只要new就会产生对象, 所以非静态的概念必然是和对象相关的.</p>\n<h4 id=\"静态的本质是什么\"><a href=\"#静态的本质是什么\" class=\"headerlink\" title=\"静态的本质是什么\"></a>静态的本质是什么</h4><p>静态的就是确定的, 唯一的, 在程序中是稳定的, 和有无对象无关, 也和有多少对象无关, 只和类相关, 所以, 所以静态成员是稳定并唯一的.</p>\n<h4 id=\"如何互相使用\"><a href=\"#如何互相使用\" class=\"headerlink\" title=\"如何互相使用\"></a>如何互相使用</h4><p>在非静态环境中可以中直接使用静态成员, 因为在非静态环境中, 对象必然是已经创建了, 对象既然已经创建, 类也肯定已经加载过了, 所以在使用上并不会有问题.</p>\n<blockquote>\n<p>但是 在静态环境中却不可以直接使用非静态成员, 因为静态成员可以使用, 不要求对象,只要求类加载好就可以了, 但是类加载, 并不意味着一定要创建对象, 并且对象创建在哪里也不知道. 所以在静态环境中不可以直接访问非静态成员, 因为非静态成员隶属于对象, 所以在静态环境中只能通过创建对象, 并再通过对象来间接访问非静态成员.</p>\n</blockquote>\n<h2 id=\"7-3-2-执行顺序\"><a href=\"#7-3-2-执行顺序\" class=\"headerlink\" title=\"7.3.2 执行顺序\"></a>7.3.2 执行顺序</h2><h3 id=\"1-创建对象时-在同一个类中执行顺序\"><a href=\"#1-创建对象时-在同一个类中执行顺序\" class=\"headerlink\" title=\"1. 创建对象时, 在同一个类中执行顺序\"></a>1. 创建对象时, 在同一个类中执行顺序</h3><p>在同一个类中, 如果创建这个类的对象, 执行顺序是</p>\n<blockquote>\n<p>1静态属性声明<br>2静态语句块或静态属性的显式初始化<br>3非静态属性声明<br>4非静态语句块或非静态属性的显式初始化<br>构造器</p>\n</blockquote>\n<h3 id=\"2-创建对象时-有继承关系存在时执行顺序\"><a href=\"#2-创建对象时-有继承关系存在时执行顺序\" class=\"headerlink\" title=\"2. 创建对象时, 有继承关系存在时执行顺序\"></a>2. 创建对象时, 有继承关系存在时执行顺序</h3><p>a)    父类的静态属性声明<br>b)    父类的静态语句块或父类静态属性的显式赋值<br>c)    子类的静态属性声明<br>d)    子类的静态语句块或子类静态属性的显式赋值<br>e)    父类非静态属性的声明<br>f)    子类非静态属性的声明<br>g)    父类的非静态语句块或父类非静态属性的显式赋值<br>h)    父类构造器<br>i)    子类的非静态语句块或子类非静态属性的显式赋值<br>j)    子类构造器  </p>\n<h1 id=\"7-4-final关键字\"><a href=\"#7-4-final关键字\" class=\"headerlink\" title=\"7.4 final关键字\"></a>7.4 final关键字</h1><h2 id=\"7-4-1-final关键字的含义\"><a href=\"#7-4-1-final关键字的含义\" class=\"headerlink\" title=\"7.4.1 final关键字的含义\"></a>7.4.1 final关键字的含义</h2><h3 id=\"1-final的作用\"><a href=\"#1-final的作用\" class=\"headerlink\" title=\"1. final的作用\"></a>1. final的作用</h3><ul>\n<li>在Java中声明类、属性和方法时，可使用关键字final来修饰,表示“最终”。</li>\n<li>final标记的类不能被继承。提高安全性，提高程序的可读性。<br><code>比如：String类、System类、StringBuffer类</code></li>\n<li>final标记的方法不能被子类重写。<br><code>比如：Object类中的getClass()。</code></li>\n<li>final标记的变量(成员变量或局部变量)即称为常量。名称大写，且只能被赋值一次。</li>\n<li>final标记的成员变量必须在声明的同时或在每个构造方法中或代码块中显式赋值，然后才能使用。<br><code>比如：final double PI=3.14;</code></li>\n</ul>\n<h2 id=\"7-4-2-final修饰类\"><a href=\"#7-4-2-final修饰类\" class=\"headerlink\" title=\"7.4.2 final修饰类\"></a>7.4.2 final修饰类</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530101645.png\" alt></p>\n<h2 id=\"7-4-3-final修饰方法\"><a href=\"#7-4-3-final修饰方法\" class=\"headerlink\" title=\"7.4.3 final修饰方法\"></a>7.4.3 final修饰方法</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530101723.png\" alt></p>\n<h2 id=\"7-4-4-final修饰变量\"><a href=\"#7-4-4-final修饰变量\" class=\"headerlink\" title=\"7.4.4 final修饰变量\"></a>7.4.4 final修饰变量</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530101918.png\" alt></p>\n<h2 id=\"7-7-5-空final量和final修饰局部变量\"><a href=\"#7-7-5-空final量和final修饰局部变量\" class=\"headerlink\" title=\"7.7.5 空final量和final修饰局部变量\"></a>7.7.5 空final量和final修饰局部变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class Test &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static int totalNumber = 5 ;</span><br><span class=\"line\">\tpublic final int ID; // 空final量, 在构造器中初始化</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Test()&#123;</span><br><span class=\"line\">\t\tID = ++totalNumber;  //可在构造方法中给final变量赋值</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTest t = new Test();</span><br><span class=\"line\">\t\tSystem.out.println(t.ID);\t\t</span><br><span class=\"line\">\t\tfinal int I = 10;</span><br><span class=\"line\">\t\tfinal int J;</span><br><span class=\"line\">\t\tJ = 20;</span><br><span class=\"line\">\t\tJ = 30; // 不可以再次赋值</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"7-5-native关键字\"><a href=\"#7-5-native关键字\" class=\"headerlink\" title=\"7.5 native关键字\"></a>7.5 native关键字</h1><h2 id=\"7-5-1-native含义\"><a href=\"#7-5-1-native含义\" class=\"headerlink\" title=\"7.5.1 native含义\"></a>7.5.1 native含义</h2><blockquote>\n<p>native表示本地的意思, 可以修饰方法, 被native修饰的方法没有方法体, 所谓本地就是代码是和当前操作系统密切相关的. 方法没有java代码的方法体, 但是一定是使用了C/C++等编写成的, 并且封装在操作系统相关的库文件中. 在执行这样的方法时, 实际执行的是库中的代码.</p>\n</blockquote>\n<h2 id=\"7-5-2-native关键字使用场景\"><a href=\"#7-5-2-native关键字使用场景\" class=\"headerlink\" title=\"7.5.2 native关键字使用场景\"></a>7.5.2 native关键字使用场景</h2><p>有一些代码需要和底层设备交互, 而这些交互的功能并未由JDK提供现成的类库, 那么必须使用native方式让java程序和库交互, 再由库完成对底层设备的使用.</p>\n<h2 id=\"7-5-3-native关键字特点\"><a href=\"#7-5-3-native关键字特点\" class=\"headerlink\" title=\"7.5.3 native关键字特点\"></a>7.5.3 native关键字特点</h2><p><strong>特点</strong>：用native修饰的方法是调用的库中的代码, 所以这样的代码如果再换一个平台就会出现问题, 无法实现跨平台.</p>\n<h1 id=\"7-6-抽象类\"><a href=\"#7-6-抽象类\" class=\"headerlink\" title=\"7.6 抽象类\"></a>7.6 抽象类</h1><h2 id=\"7-6-1-抽象类概念\"><a href=\"#7-6-1-抽象类概念\" class=\"headerlink\" title=\"7.6.1 抽象类概念\"></a>7.6.1 抽象类概念</h2><h3 id=\"1-抽象类-abstract-class\"><a href=\"#1-抽象类-abstract-class\" class=\"headerlink\" title=\"1.抽象类(abstract class)\"></a>1.抽象类(abstract class)</h3><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类就可以声明为抽象类。</p>\n<h3 id=\"2-抽象类和具体类\"><a href=\"#2-抽象类和具体类\" class=\"headerlink\" title=\"2. 抽象类和具体类\"></a>2. 抽象类和具体类</h3><p>抽象类与具体类</p>\n<ul>\n<li>具体类—对现实世界一种实体的抽象定义。</li>\n<li>抽象类—对现实世界一种类型的多种实体的统一抽象定义。<br>例如： </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pet类应定义为抽象类</span><br><span class=\"line\">Bird类应定义为具体类</span><br><span class=\"line\">抽象类中可声明抽象方法</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\">\tpublic abstract class Pet &#123;</span><br><span class=\"line\">            public abstract void speak();</span><br><span class=\"line\">            ……</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-6-2特点\"><a href=\"#7-6-2特点\" class=\"headerlink\" title=\"7.6.2特点\"></a>7.6.2特点</h2><p>①用abstract关键字来修饰一个类时，这个类叫做抽象类；<br>②用abstract来修饰一个方法时，该方法叫做抽象方法。<br>抽象方法：只有方法的声明，没有方法的实现。以分号结束：<code>abstract int abstractMethod( int a );</code><br>含有抽象方法的类必须被声明为抽象类。</p>\n<ul>\n<li>抽象类不能被实例化。抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。  </li>\n<li>若没有重写全部的抽象方法，仍为抽象类。  </li>\n<li>不能用abstract修饰属性、私有方法、构造器、静态方法、final的方法。</li>\n</ul>\n<h2 id=\"7-6-3抽象类使用\"><a href=\"#7-6-3抽象类使用\" class=\"headerlink\" title=\"7.6.3抽象类使用\"></a>7.6.3抽象类使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Pet &#123;</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate int weight;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Pet(String name, int age, int weight) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.weight = weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic abstract void speak(); // 抽象方法,仅有方法签名没有方法体,因此不能执行</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic abstract void eat(); </span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bird extends Pet &#123;</span><br><span class=\"line\">\tprivate int flySpeed;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Bird(String name, int age, int weight, int flySpeed) &#123;</span><br><span class=\"line\">\t\tsuper(name, age, weight);</span><br><span class=\"line\">\t\tthis. flySpeed = flySpeed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getFlySpeed() &#123;</span><br><span class=\"line\">\t\treturn flySpeed;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void speak() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;布谷布谷...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void eat() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Eating...&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestAbstract &#123;</span><br><span class=\"line\">    public static void main(String args[]) &#123;</span><br><span class=\"line\">        Pet pet = new Bird(&quot;小布&quot;, 1, 100, 20); // 抽象类适用于多态</span><br><span class=\"line\">        pet.speak(); // 虚拟方法调用, 执行子类方法, 父类方法是抽象的, 无法执行</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-6-4-使用场景\"><a href=\"#7-6-4-使用场景\" class=\"headerlink\" title=\"7.6.4 使用场景\"></a>7.6.4 使用场景</h2><p>解决方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java允许类设计者指定：</span><br><span class=\"line\">\t    超类声明一个方法但不提供实现，</span><br><span class=\"line\">\t    该方法的实现由子类提供。</span><br><span class=\"line\">\t    这样的方法称为抽象方法。</span><br><span class=\"line\">\t    有一个或更多抽象方法的类称为抽象类。</span><br></pre></td></tr></table></figure>\n<p>Vehicle是一个抽象类，有两个抽象方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Vehicle&#123;</span><br><span class=\"line\">\tpublic abstract double calcFuelEfficiency();\t//计算燃料效率的抽象方法</span><br><span class=\"line\">\tpublic abstract double calcTripDistance();\t//计算行驶距离的抽象方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Truck extends Vehicle&#123;</span><br><span class=\"line\">\tpublic double calcFuelEfficiency( )   &#123; //写出计算卡车的燃料效率的具体方法   &#125;</span><br><span class=\"line\">\tpublic double calcTripDistance( )    &#123;  //写出计算卡车行驶距离的具体方法   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class RiverBarge extends Vehicle&#123;</span><br><span class=\"line\">\t public double calcFuelEfficiency( ) &#123; //写出计算驳船的燃料效率的具体方法  &#125;</span><br><span class=\"line\">\t public double calcTripDistance( )  &#123;  //写出计算驳船行驶距离的具体方法&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：抽象类不能实例化   new Vihicle()是非法的</p>\n<h1 id=\"7-7-接口\"><a href=\"#7-7-接口\" class=\"headerlink\" title=\"7.7 接口\"></a>7.7 接口</h1><h2 id=\"7-7-1-接口的概念\"><a href=\"#7-7-1-接口的概念\" class=\"headerlink\" title=\"7.7.1 接口的概念\"></a>7.7.1 接口的概念</h2><h3 id=\"1-什么是接口\"><a href=\"#1-什么是接口\" class=\"headerlink\" title=\"1. 什么是接口\"></a>1. 什么是接口</h3><p>   接口的用途是用来定义现实世界不同类型事物的共同行为特征。<br>    例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">飞行特征（包括起飞，飞行、着陆等行为）是鸟和飞机所共有的。</span><br><span class=\"line\">\t鸟和飞机可定义为具体类</span><br><span class=\"line\">\t它们的共同行为特征可被定义在接口中</span><br><span class=\"line\">\t接口中所有方法均为抽象方法</span><br><span class=\"line\">\t示例：</span><br><span class=\"line\">\tpublic interface Flyer &#123;</span><br><span class=\"line\">\t\t  public void takeoff();</span><br><span class=\"line\">\t\t  ……</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-接口的组成\"><a href=\"#2-接口的组成\" class=\"headerlink\" title=\"2. 接口的组成\"></a>2. 接口的组成</h3><p>接口可以包含以下成员：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①属性</span><br><span class=\"line\">\t接口中的所有属性均被视静态常量。</span><br><span class=\"line\">\t例如，下面几种方式的声明是等效的：</span><br><span class=\"line\">int num = 10;</span><br><span class=\"line\">public int num = 10;</span><br><span class=\"line\">public static final int num = 10;</span><br><span class=\"line\">②抽象方法</span><br><span class=\"line\">接口中所有方法均为抽象方法。</span><br><span class=\"line\">例如，下面两种方式的声明是等效的：</span><br><span class=\"line\">public abstract void takeoff();</span><br><span class=\"line\"></span><br><span class=\"line\">public interface Flyer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public abstract void takeoff();</span><br><span class=\"line\">    public void land();</span><br><span class=\"line\">public void fly();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-7-2-接口的使用\"><a href=\"#7-7-2-接口的使用\" class=\"headerlink\" title=\"7.7.2 接口的使用\"></a>7.7.2 接口的使用</h2><p>1、有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。<br>2、一个类可以实现多个接口，<br>3、接口不能被实例化  </p>\n<ul>\n<li>具体类（子类）可以实现接口（父类） ，并实现接口中的全部抽象方法</li>\n<li>class SubClass implements InterfaceA{ }</li>\n</ul>\n<p>4、具体类适用父接口的多态<br>5、接口也可以继承其它接口。<br>6、实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍为抽象类。<br>7、接口的主要用途就是被实现类实现。（面向接口编程）<br>8、一个类可以同时继承父类并实现接口</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530103212.png\" alt></p>\n<h2 id=\"7-7-3-接口的注意事项\"><a href=\"#7-7-3-接口的注意事项\" class=\"headerlink\" title=\"7.7.3 接口的注意事项\"></a>7.7.3 接口的注意事项</h2><ul>\n<li>如果实现接口的类中没有实现接口中的全部方法，必须将此类定义为抽象类 </li>\n<li>接口也可以继承另一个接口，使用extends关键字。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface MyInterface&#123;</span><br><span class=\"line\">\t\t\tString s=“MyInterface”;</span><br><span class=\"line\">\t\t\tpublic void absM1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tinterface SubInterface extends MyInterface&#123;</span><br><span class=\"line\">\t\t\tpublic void absM2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic class SubAdapter implements SubInterface&#123;</span><br><span class=\"line\">\t\t\tpublic void absM1()&#123;System.out.println(“absM1”);&#125;</span><br><span class=\"line\">\t\t\tpublic void absM2()&#123;System.out.println(“absM2”);&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类SubAdapter必须给出接口SubInterface以及父接口MyInterface中所有方法的实现。</p>\n<h2 id=\"7-7-4-接口小结\"><a href=\"#7-7-4-接口小结\" class=\"headerlink\" title=\"7.7.4 接口小结\"></a>7.7.4 接口小结</h2><p>接口的特点：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①用interface来定义。</span><br><span class=\"line\">②接口中的所有成员变量都默认是由public static final修饰的。</span><br><span class=\"line\">③接口中的所有方法都默认是由public abstract修饰的。</span><br><span class=\"line\">④接口没有构造器。</span><br><span class=\"line\">⑤接口采用多继承机制。</span><br><span class=\"line\">⑥接口定义举例</span><br><span class=\"line\">    public interface Runner &#123;</span><br><span class=\"line\">\t\t\tint ID = 1;</span><br><span class=\"line\">\t\t\tvoid start();</span><br><span class=\"line\">\t\t\tpublic void run();</span><br><span class=\"line\">\t\t\tvoid stop();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-7-5-接口和抽象类的关系\"><a href=\"#7-7-5-接口和抽象类的关系\" class=\"headerlink\" title=\"7.7.5 接口和抽象类的关系\"></a>7.7.5 接口和抽象类的关系</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530103339.png\" alt></p>\n<h2 id=\"7-7-6-接口在java8中的变化\"><a href=\"#7-7-6-接口在java8中的变化\" class=\"headerlink\" title=\"7.7.6 接口在java8中的变化\"></a>7.7.6 接口在java8中的变化</h2><p>Java 8中，你可以为接口添加默认方法和静态方法。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p>\n<ul>\n<li>默认方法：默认方法使用 default 关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。<br>比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</li>\n<li>静态方法：使用 static 关键字修饰。可以通过接口直接调用静态方法，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。你可以在标准库中找到像Collection/Collections或者Path/Paths这样成对的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface AA &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    double PI = 3.14;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic default void method() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;北京&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefault String method1() &#123;</span><br><span class=\"line\">\t\treturn &quot;上海&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void method2() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(“hello lambda!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>①若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时<br>选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。  </p>\n<p>②接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530103531.png\" alt></p>\n<h1 id=\"7-8-内部类\"><a href=\"#7-8-内部类\" class=\"headerlink\" title=\"7.8 内部类\"></a>7.8 内部类</h1><h2 id=\"7-8-1-什么是内部类\"><a href=\"#7-8-1-什么是内部类\" class=\"headerlink\" title=\"7.8.1 什么是内部类\"></a>7.8.1 什么是内部类</h2><ol>\n<li>概念</li>\n</ol>\n<ul>\n<li>在Java中，允许一个类的定义位于另一个类的内部，前者称为内部类，后者称为外部类。</li>\n<li>Inner class一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。</li>\n<li>Inner class的名字不能与包含它的类名相同；</li>\n<li>Inner class可以使用外部类的私有数据，因为它是外部类的成员，同一个类的成员之间可相互访问。而外部类要访问内部类中的成员需要:内部类.成员或者内部类对象.成员。<br>分类：成员内部类（static成员内部类嵌套类和成员内部类）<pre><code>局部内部类（不谈修饰符）、匿名内部类\n</code></pre></li>\n</ul>\n<h2 id=\"7-8-2-成员内部类\"><a href=\"#7-8-2-成员内部类\" class=\"headerlink\" title=\"7.8.2 成员内部类\"></a>7.8.2 成员内部类</h2><h3 id=\"1-普通内部类\"><a href=\"#1-普通内部类\" class=\"headerlink\" title=\"1. 普通内部类\"></a>1. 普通内部类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate int s;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class B &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void mb() &#123;</span><br><span class=\"line\">\t\t\ts = 100; // 在普通内部类的方法中, 可以直接外部类的私有成员.</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;在内部类B中s=&quot; + s);</span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void ma() &#123;</span><br><span class=\"line\">\t\tB i = new B();</span><br><span class=\"line\">\t\ti.mb();</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tA o = new A();</span><br><span class=\"line\">\t\to.ma(); // 调用外部类的方法, 间接创建了内部类对象并调用了内部类对象的方法</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class A &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tprivate int s = 111;</span><br><span class=\"line\">        </span><br><span class=\"line\">\tpublic class B &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tprivate int s = 222;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tpublic void mb(int s) &#123;</span><br><span class=\"line\">\t        System.out.println(s);        // 访问最近的形参值:333</span><br><span class=\"line\">\t        System.out.println(this.s);     // 访问本类当前对象的属性:222</span><br><span class=\"line\">\t        System.out.println(A.this.s);   // 访问外部类的当前对象的属性:111</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;    </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tA a = new A();</span><br><span class=\"line\">\t\tA.B b = a.new B(); // 在测试类中创建普通内部类的对象需要使用外部类对象</span><br><span class=\"line\">\t\tb.mb(333); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-嵌套类\"><a href=\"#2-嵌套类\" class=\"headerlink\" title=\"2. 嵌套类\"></a>2. 嵌套类</h3><p>被static修饰的成员内部类就称为嵌套类.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate int s;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static class B &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic void mb() &#123;</span><br><span class=\"line\">\t\t\t//s = 100; // 在嵌套类的方法中, 不可以直接外部类的非静态成员.</span><br><span class=\"line\">\t\t\t//System.out.println(&quot;在内部类B中s=&quot; + s);</span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void ma() &#123;</span><br><span class=\"line\">\t\tB i = new B();</span><br><span class=\"line\">\t\ti.mb();</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tA.B b = new A.B(); // 创建嵌套类对象, 不需要外部类的对象</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-8-3-局部内部类\"><a href=\"#7-8-3-局部内部类\" class=\"headerlink\" title=\"7.8.3 局部内部类\"></a>7.8.3 局部内部类</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h3><p>在方法体中声明的内部类就是局部内部类, 局部内部类的范围和局部变量类似.</p>\n<h3 id=\"2-普通局部内部类\"><a href=\"#2-普通局部内部类\" class=\"headerlink\" title=\"2. 普通局部内部类\"></a>2. 普通局部内部类</h3><p>在方法中声明的内部类, 有类名, 使用和普通类类似.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test &#123;    </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tclass A &#123;</span><br><span class=\"line\">\t\t\tpublic void test();</span><br><span class=\"line\">\t\t&#125;; </span><br><span class=\"line\">\t\tA a = new A();</span><br><span class=\"line\">\t\ta.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-匿名内部类\"><a href=\"#3-匿名内部类\" class=\"headerlink\" title=\"3. 匿名内部类\"></a>3. 匿名内部类</h3><p>在方法中声明的内部类,   但是没有class关键字和具体类名, 称为匿名内部类, 因为没有类名, 所以必须在声明内部类的同时创建对象, 否则无法创建对象了.<br>所以匿名内部类的语法是 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类 引用 = new 父类(实参列表) &#123;类体&#125;;</span><br></pre></td></tr></table></figure>\n<p>匿名内部类最常用用法是new 后面的类名是已经存在的类, 或抽象类, 或接口. 如果是抽象类或接口, 则匿名内部类类体中必须实现全部的抽象方法, 由此可见, 匿名内部类只能作为new后面的类或抽象或接口的子类存在, 但是没有类名, 所以通常在声明的时候就创建对象.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface A &#123;</span><br><span class=\"line\">    public void a();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Test &#123;    </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tnew A() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">\t\t\tpublic void a() &#123;</span><br><span class=\"line\">                System.out.println(“匿名内部类实现接口方法”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t\t&#125;.a(); // 打印输出内容…</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"6. JavaSE-面向对象基本特征","url":"http://yoursite.com/2016/10/15/6. JavaSE-面向对象基本特征/","content":"<h1 id=\"6-1-基本特征一-封装\"><a href=\"#6-1-基本特征一-封装\" class=\"headerlink\" title=\"6.1 基本特征一 封装\"></a>6.1 基本特征一 封装</h1><h2 id=\"6-1-1访问控制修饰符作用\"><a href=\"#6-1-1访问控制修饰符作用\" class=\"headerlink\" title=\"6.1.1访问控制修饰符作用\"></a>6.1.1访问控制修饰符作用</h2><p>访问控制修饰符的作用是控制类中的成员可以在哪些范围内被访问到</p>\n<h2 id=\"6-1-2访问控制修饰符\"><a href=\"#6-1-2访问控制修饰符\" class=\"headerlink\" title=\"6.1.2访问控制修饰符\"></a>6.1.2访问控制修饰符</h2><p>用的最多的有2个</p>\n<blockquote>\n<p>1    public 公共的意思, 访问范围最大, 可以任意范围内访问<br>2    private 私有的意思, 访问范围最小, 只能在本类中被访问</p>\n</blockquote>\n<h2 id=\"6-1-3-如何封装\"><a href=\"#6-1-3-如何封装\" class=\"headerlink\" title=\"6.1.3 如何封装\"></a>6.1.3 如何封装</h2><h3 id=\"6-1-3-1-成员\"><a href=\"#6-1-3-1-成员\" class=\"headerlink\" title=\"6.1.3.1 成员\"></a>6.1.3.1 成员</h3><p>类中的要素,<strong>属性, 方法, 构造器, 代码块, 成员内部类</strong>, 这些要素都隶属于类, 对于本类而言, 这些要素就是互为成员, 既然是互为成员, 那么它们之间的互相访问是没有任何障碍.</p>\n<h3 id=\"6-1-3-2-成员私有化\"><a href=\"#6-1-3-2-成员私有化\" class=\"headerlink\" title=\"6.1.3.2 成员私有化\"></a>6.1.3.2 成员私有化</h3><p>只需要把类中的成员使用private修饰就是私有化了, 而一旦成员被私有化, 这个成员也称为被封装了<br><strong>注意 : 代码块不能封装</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name; // 对象属性</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate String gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void eat(String something) &#123;</span><br><span class=\"line\">System.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-1-3-3-封装的问题\"><a href=\"#6-1-3-3-封装的问题\" class=\"headerlink\" title=\"6.1.3.3 封装的问题\"></a>6.1.3.3 封装的问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); </span><br><span class=\"line\">        // 下面的语句都不能执行了, 因为在测试类中,不能直接跨类访问别的类中的私有成员</span><br><span class=\"line\">        //t.name = “张三”;</span><br><span class=\"line\">        //t.age = 30;</span><br><span class=\"line\">        //t.gender = “男”;</span><br><span class=\"line\">        //System.out.println(t.name); </span><br><span class=\"line\">//System.out.println(t.age); </span><br><span class=\"line\">//System.out.println(t.age); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-get-set方法\"><a href=\"#1-get-set方法\" class=\"headerlink\" title=\"1  get/set方法\"></a>1  get/set方法</h4><blockquote>\n<p>   因为成员一旦私有化, 就不可以在其他类中直接访问了, 但是在其他类中仍然有访问的需求, 成员之间是可以互相访问的, 所以解决这个问题的方法就是在本类中添加一些公共方法, 通过方法间接访问类中的私有成员.</p>\n</blockquote>\n<p>public class Teacher {</p>\n<pre><code>private String name = &quot;某老师&quot;; // 实例变量, 私有化属性, 封装\nprivate int age = 30; // 当属性被私有化时, 只能在本类中使用\nprivate String gender = &quot;男&quot;;\n\n// 用于间接设置name属性, 所以方法必须公共的\npublic void setName(String n) {\n    name = n; \n}\n\n// 用于间接获取name属性, 所以方法必须公共的\npublic String getName() {\n    return name; \n}\n\npublic void setGender(String g) {\n    gender = g;\n}\n\npublic String getGender() {\n    return gender;\n}\n\npublic void setAge(int age) { \n    this.age = age;\n}\n\n// get方法有返回值, 没有参数\npublic int getAge() {\n    return age;\n}\n\n// 实例方法\npublic void lesson() {\n    System.out.println(name + &quot;老师在上课&quot;); // 成员可以互访\n}\n\npublic void eat(String something) {\n    System.out.println(&quot;老师在吃&quot; + something);\n}\n\n// 描述对象的详细信息, 把所有的属性值串接成一个字符串\npublic String say() {\n    String str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;\n    return str;\n}\n</code></pre><p>}</p>\n<h4 id=\"2-间接访问属性\"><a href=\"#2-间接访问属性\" class=\"headerlink\" title=\"2.间接访问属性\"></a>2.间接访问属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher();</span><br><span class=\"line\">\t\tt.setName(&quot;张老师&quot;);// 通过方法设置属性</span><br><span class=\"line\">\t\tt.setAge(30); </span><br><span class=\"line\">\t\tt.setGender(&quot;男&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(t.getName());</span><br><span class=\"line\">\t\tSystem.out.println(t.getAge());// 通过方法获取属性</span><br><span class=\"line\">\t\tSystem.out.println(t.getGender());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-为什么要封装\"><a href=\"#3-为什么要封装\" class=\"headerlink\" title=\"3. 为什么要封装\"></a>3. 为什么要封装</h4><p>如果不使用封装而直接访问对象的属性, 就可以给属性赋上一些不合理的数据值, 比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t.age = 50000; // 显然这个操作是应该失败的, 因为年龄不合理</span><br></pre></td></tr></table></figure>\n<p>但是如果通过方法来赋值, 就可以把这种错误拦截住<br>相同的道理, 如果要获取某个属性, 但是需要在内部再处理一下, 也可以通过方法来实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 保护数据</span><br><span class=\"line\">\tpublic void setAge(int a) &#123; </span><br><span class=\"line\">\t\tif (a &gt; 120 || a &lt; 0) &#123; // 当参数中传入的数据不合理时, 方法直接返回, 不给对象的属性赋值</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-2-构造器\"><a href=\"#6-2-构造器\" class=\"headerlink\" title=\"6.2 构造器\"></a>6.2 构造器</h1><h2 id=\"6-2-1-什么是构造器\"><a href=\"#6-2-1-什么是构造器\" class=\"headerlink\" title=\"6.2.1 什么是构造器\"></a>6.2.1 什么是构造器</h2><h3 id=\"1-什么是初始化\"><a href=\"#1-什么是初始化\" class=\"headerlink\" title=\"1. 什么是初始化\"></a>1. 什么是初始化</h3><pre><code>对象在刚创建时进行的工作就称为初始化, 初始化的主要工作是针对对象的属性的.\n</code></pre><h3 id=\"2-构造器概念\"><a href=\"#2-构造器概念\" class=\"headerlink\" title=\"2.构造器概念\"></a>2.构造器概念</h3><p>   当对象创建时, 希望对象的属性值被正确赋值, 此时就需要用到了构造器, 构造器也称为构造方法, 本质上构造器就是一个方法, 是一个特殊的方法.</p>\n<h3 id=\"3-如何定义构造器\"><a href=\"#3-如何定义构造器\" class=\"headerlink\" title=\"3. 如何定义构造器\"></a>3. 如何定义构造器</h3><p>  构造器(构造方法)的定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 类名(参数类型1 形参1, 参数类型2 形参2….) &#123;</span><br><span class=\"line\">代码块;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tname = &quot;张三&quot;;</span><br><span class=\"line\">\t\tage = 35;</span><br><span class=\"line\">\t\tgender = &quot;男&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 : 类中如果没有提供任何的构造器, 编译器也会自动添加一个缺省的构造器<br>缺省的构造器就是 修饰符和类一致, 无参, 并且方法体中没有代码.</p>\n<h2 id=\"6-2-2-构造器的特点\"><a href=\"#6-2-2-构造器的特点\" class=\"headerlink\" title=\"6.2.2 构造器的特点\"></a>6.2.2 构造器的特点</h2><ul>\n<li>特点1：<br>构造器没有返回值, 也不可以声明void</li>\n<li>特点2：构造器名称必须和类名一致</li>\n<li>特点3：构造器不可以被final, static, abstract等修饰</li>\n<li>特点4：<br>构造器不像普通方法可以随意调用, 只能在创建对象时调用一次<h2 id=\"6-2-3-构造器调用\"><a href=\"#6-2-3-构造器调用\" class=\"headerlink\" title=\"6.2.3 构造器调用\"></a>6.2.3 构造器调用</h2><h3 id=\"1-如何调用构造器\"><a href=\"#1-如何调用构造器\" class=\"headerlink\" title=\"1.如何调用构造器\"></a>1.如何调用构造器</h3>使用new关键字在创建对象时就会自动调用了构造器</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher(); // 调用无参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t.say()); // 输出”姓名:张三,年龄:35,性别:男”</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2-4-构造器重载\"><a href=\"#6-2-4-构造器重载\" class=\"headerlink\" title=\"6.2.4 构造器重载\"></a>6.2.4 构造器重载</h2><h3 id=\"1-什么是构造器重载\"><a href=\"#1-什么是构造器重载\" class=\"headerlink\" title=\"1.什么是构造器重载\"></a>1.什么是构造器重载</h3><p>当一个类中有多个构造器, 并且参数不同就形成构造器重载<br>构造器重载的目的是可以使用多种方式创建不同的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tname = &quot;佟刚&quot;;</span><br><span class=\"line\">\t\tage = 35;</span><br><span class=\"line\">\t\tgender = &quot;女&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 有参构造器</span><br><span class=\"line\">\tpublic Teacher(String n, int a) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = &quot;女&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// 有参构造器</span><br><span class=\"line\">\tpublic Teacher(String n, int a, String g) &#123; </span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t1 = new Teacher(); // 调用无参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t1.say());</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t2 = new Teacher(“李四”, 40); // 调用有参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t2.say());</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t3 = new Teacher(“王五”, 50, “男”); // 调用有参构造方法</span><br><span class=\"line\">\t\tSystem.out.println(t3.say());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-this-调用\"><a href=\"#2-this-调用\" class=\"headerlink\" title=\"2. this()调用\"></a>2. this()调用</h3><p>  在无参构造器中, 给对象的3个属性分别完成赋值, 而这个操作可以通过调用另外一个构造器来完成,调用的语法this(实参列表);<br>  注意 : </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this(…) 调用必须放在构造器的第一行!</span><br><span class=\"line\">\tthis(…) 调用时,必须保证有一个构造器是没有this(…)的, 否则会形成构造器递归调用.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\t// 注释不算行</span><br><span class=\"line\">\t\tthis(&quot;张三&quot;, 35, &quot;男&quot;); // 通过调用第3个构造器完成属性赋值</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 有参构造器</span><br><span class=\"line\">\tpublic Teacher(String n, int a) &#123;</span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = &quot;女&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher(String n, int a, String g) &#123; </span><br><span class=\"line\">\t\tname = n;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tgender = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-3-this关键字和对象关系\"><a href=\"#6-3-this关键字和对象关系\" class=\"headerlink\" title=\"6.3 this关键字和对象关系\"></a>6.3 this关键字和对象关系</h1><h2 id=\"6-3-1-this关键字含义\"><a href=\"#6-3-1-this关键字含义\" class=\"headerlink\" title=\"6.3.1 this关键字含义\"></a>6.3.1 this关键字含义</h2><h3 id=\"1-this代表什么\"><a href=\"#1-this代表什么\" class=\"headerlink\" title=\"1. this代表什么\"></a>1. this代表什么</h3><pre><code>this代表对象, 代表的是当前对象, this里保存的是对象的地址.\n</code></pre><p>谁是当前对象? 比如方法调用<br><code>t1.say()</code>在这个方法执行时<br>执行以下代码 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这段代码可以写成</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果是一样的, 当前对象是哪个对象呢? 就是调用这个方法的对象, <code>t1.say()</code>中的t1就是当前对象,显然这个当前对象在变化, 因为<code>t2.say()</code>调用时,this就是指的是t2了.</p>\n<h3 id=\"2-为什么使用this\"><a href=\"#2-为什么使用this\" class=\"headerlink\" title=\"2.为什么使用this\"></a>2.为什么使用this</h3><p>this强调了使用当前对象, 有的时候属性如果和方法中的局部变量重名时, 为了区别必须使用this,在构造器重载时, 调用别的构造器也需要使用this. 两者的语法不一样.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tthis(&quot;佟刚&quot;, 35, &quot;女&quot;); // 调用其他构造器 </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender) &#123; </span><br><span class=\"line\">\t\tthis.name = name; // this表示对象, 右侧的name是形参, 是局部变量</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn this.name; // 加上this也可以, 但是没有必须, 它暗含了this</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用this的优点\"><a href=\"#3-使用this的优点\" class=\"headerlink\" title=\"3.使用this的优点\"></a>3.使用this的优点</h3><blockquote>\n<ol>\n<li>使用this可以提高代码的可读性, 强调要使用的是当前对象.</li>\n<li>在方法中, 如果局部变量和属性重名, 必须使用this, 用以区分属性和局部变量, 并且这样局部变量的含义也更清晰.</li>\n<li>this(…)调用可以简化构造器调用, 并有利于维护. 如果有修改的需要, 只要修改被调用的构造器就可以了.</li>\n</ol>\n</blockquote>\n<h2 id=\"6-3-2-对象的传递\"><a href=\"#6-3-2-对象的传递\" class=\"headerlink\" title=\"6.3.2 对象的传递\"></a>6.3.2 对象的传递</h2><h3 id=\"1-为什么要传递对象\"><a href=\"#1-为什么要传递对象\" class=\"headerlink\" title=\"1. 为什么要传递对象\"></a>1. 为什么要传递对象</h3><p>在有些方法中, 功能的完成除了需要一些基本数据外, 还需要复杂类型, 比如在Teacher类中方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    // 老师上课的代码, 老师上课时, 需要一台电脑, 这时就可以通过参数传递一个电脑对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void lesson(Computer computer) &#123;</span><br><span class=\"line\">// 老师上课的代码, 老师上课时, 需要一台电脑, 这时就可以通过参数传递一个电脑对象</span><br><span class=\"line\">// 这样在老师上课的代码中, 就可以直接使用传入的Computer对象.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.对象如何传递<br>在方法调用时, 由调用者传实参时,负责把对象传给方法.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Computer &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate double cpu;</span><br><span class=\"line\">\tprivate int memory;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer(double cpu, int memory) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setCpu(double cpu) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic double getCpu() &#123;</span><br><span class=\"line\">\t\treturn cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setMemory(int memory) &#123;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getMemory() &#123;</span><br><span class=\"line\">\t\treturn memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;CPU:&quot; + cpu + &quot;GHz, 内存:&quot; + memory + &quot;G&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher() &#123; // 无参构造器</span><br><span class=\"line\">\t\tthis(&quot;佟刚&quot;, 35, &quot;女&quot;);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender) &#123; </span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void lesson(Computer com) &#123; // 这个方法应该需要一台电脑才能上课</span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + com.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;);</span><br><span class=\"line\">\t\tComputer com = new Computer(3.5, 4); // 要传递的对象先创建好</span><br><span class=\"line\">\t\tt.lesson(com); // 通过实参传递对象</span><br><span class=\"line\">        // 以上代码打印输出为”[李四] 老师使用电脑[CPU:3.5GHz,内存:4G]在上课&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-传递的是什么\"><a href=\"#3-传递的是什么\" class=\"headerlink\" title=\"3.传递的是什么\"></a>3.传递的是什么</h3><blockquote>\n<p>在方法调用中的实参com是在main方法中声明的引用变量, 但是这个引用指向了在main中创建的新的Computer对象, 所以在lesson方法执行时, 接收到的是对象的引用, 通过引用使用了对象.</p>\n</blockquote>\n<h3 id=\"4-对象传递的优点\"><a href=\"#4-对象传递的优点\" class=\"headerlink\" title=\"4.对象传递的优点\"></a>4.对象传递的优点</h3><p>即使对象很大, 属性很多, 在对象传递时, 并不是把对象本身复制了一份, 而是只把对象的引用传递了, 优点就是速度快.</p>\n<h3 id=\"5-对象传递的危险性\"><a href=\"#5-对象传递的危险性\" class=\"headerlink\" title=\"5.对象传递的危险性\"></a>5.对象传递的危险性</h3><p>危险性就在于因为传递了对象的引用, 这样通过引用一方面可以读取对象的属性或调用对象的方法, 同时如果通过引用直接修改对象的属性, 也会导致对象属性的变化, 所以当把对象传递给方法时, 如果在方法内部有对于对象的修改操作, 对于调用者来说, 这个修改也是同步的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">public void lesson(Computer com) &#123; // 这个方法应该需要一台电脑才能上课</span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + com.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">        com.setMemory(8);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher();</span><br><span class=\"line\">\t\tComputer com = new Computer(3.5, 4); // 要传递的对象先创建好</span><br><span class=\"line\">\t\tt.lesson(com); // 通过实参传递对象</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(com.getMemory()); // 输出的不是原来的4而是在方法中被修改后的8</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-3-3-对象关联\"><a href=\"#6-3-3-对象关联\" class=\"headerlink\" title=\"6.3.3 对象关联\"></a>6.3.3 对象关联</h2><h3 id=\"1-什么是对象关联\"><a href=\"#1-什么是对象关联\" class=\"headerlink\" title=\"1. 什么是对象关联\"></a>1. 什么是对象关联</h3><p>   对象关联就是一个对象关联了另外一个对象, 前者拥有了后者, 是一种包含关系.</p>\n<h3 id=\"2-为什么要关联对象\"><a href=\"#2-为什么要关联对象\" class=\"headerlink\" title=\"2. 为什么要关联对象\"></a>2. 为什么要关联对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void lesson(Computer com) &#123; // 这个方法应该需要一台电脑才能上课</span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + com.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法中老师对象要想上课, 需要通过参数传入一个对象. 方法结束后, 这个对象对于老师对象来说就会消失, 显然老师对象最好是应该完全拥有一个电脑对象, 这样再执行上课方法时,就不需要再传入对象, 而是使用自己拥有的对象, 甚至还可以再添加一些别的方法使用此对象.</p>\n<h3 id=\"3-如何关联对象\"><a href=\"#3-如何关联对象\" class=\"headerlink\" title=\"3. 如何关联对象\"></a>3. 如何关联对象</h3><p>  在当前类中把要关联的对象作为属性即可.<br>  也可以在构造器中添加参数为关联的对象赋值, 也可以添加对应的get/set方法,用以处理这个关联的对象</p>\n<p>先写被关联的类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Computer &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate double cpu;</span><br><span class=\"line\">\tprivate int memory;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Computer(double cpu, int memory) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setCpu(double cpu) &#123;</span><br><span class=\"line\">\t\tthis.cpu = cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic double getCpu() &#123;</span><br><span class=\"line\">\t\treturn cpu;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setMemory(int memory) &#123;</span><br><span class=\"line\">\t\tthis.memory = memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getMemory() &#123;</span><br><span class=\"line\">\t\treturn memory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;CPU:&quot; + cpu + &quot;GHz, 内存:&quot; + memory + &quot;G&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Teacher类中关联Computer类的对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">    // 对象关联, 把被关联的对象声明成属性</span><br><span class=\"line\">    private Computer computer;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 可以通过构造器完成对关联对象的初始化</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender, Computer computer) &#123; </span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">        this.computer = computer;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 同时应该再提供相应的get/set方法</span><br><span class=\"line\">public void setComputer(Computer computer) &#123;</span><br><span class=\"line\">    this.computer = computer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public Computer getComputer() &#123;</span><br><span class=\"line\">    return computer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 在上课方法中, 不必再在每次调用时传参了.</span><br><span class=\"line\">\tpublic void lesson() &#123; </span><br><span class=\"line\">\t\tSystem.out.println(&quot;[&quot; + this.name + &quot;] 老师使用电脑[&quot; + computer.say() + &quot;]在上课&quot;); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">Computer com = new Computer(3.5, 4); // 要关联的对象先创建好</span><br><span class=\"line\">\t\tTeacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;, com); // 通过构造器完成对象关联</span><br><span class=\"line\">\t\tt.lesson(); // 通过实参传递对象</span><br><span class=\"line\">        // 以上代码打印输出为”[李四] 老师使用电脑[CPU:3.5GHz,内存:4G]在上课&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-对象关联的作用\"><a href=\"#4-对象关联的作用\" class=\"headerlink\" title=\"4. 对象关联的作用\"></a>4. 对象关联的作用</h3><p>   对象关联的作用非常广泛, 当一个类完成某种功能时, 有的时候如果有现成的其他对象可以直接使用, 并且在本类中要多次多方法中使用同一个功能时, 对象关联更显得必要. 这样使得对象之间的关系更加紧密.</p>\n<h2 id=\"6-3-4-javabean\"><a href=\"#6-3-4-javabean\" class=\"headerlink\" title=\"6.3.4 javabean\"></a>6.3.4 javabean</h2><ul>\n<li>JavaBean是一种Java语言写成的可重用组件。</li>\n<li>所谓javaBean，是指符合如下标准的Java类：</li>\n</ul>\n<blockquote>\n<ul>\n<li>类是公共的</li>\n<li>有一个无参的公共的构造器</li>\n<li>有属性，且有对应的get、set方法</li>\n<li>用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestJavaBean&#123;</span><br><span class=\"line\">\tprivate String name;  //属性一般定义为private</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tpublic  TestJavaBean()&#123;&#125;</span><br><span class=\"line\">\tpublic int getAge()&#123;</span><br><span class=\"line\">\t     return age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setAge(int age)&#123;</span><br><span class=\"line\">\t     this.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getName()&#123;</span><br><span class=\"line\">\t    return name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setName(String name)&#123;</span><br><span class=\"line\">\t    this.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-4-包\"><a href=\"#6-4-包\" class=\"headerlink\" title=\"6.4 包\"></a>6.4 包</h1><h2 id=\"6-4-1-package语句\"><a href=\"#6-4-1-package语句\" class=\"headerlink\" title=\"6.4.1 package语句\"></a>6.4.1 package语句</h2><h3 id=\"1-为什么要使用包\"><a href=\"#1-为什么要使用包\" class=\"headerlink\" title=\"1  为什么要使用包\"></a>1  为什么要使用包</h3><ul>\n<li>当程序中涉及的类越来越多时, 类的功能含义以及如果有同名类该如何处理的问题就出现了. </li>\n<li>我们希望把功能类似的一组类放在一起, 有利于管理和维护, 在java中使用了”包”的概念来分类管理</li>\n<li>包和目录非常接近, 但是虽然文件系统中是以目录的形式出现的, 但是在程序中包不是目录,目录也不是包.</li>\n</ul>\n<p>###2  如何使用包<br>   在程序的第一行添加语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package 包名.子包名.子子包名……;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>包目录深度没有限制, 但也不宜太深</li>\n<li><p>package的作用就是让编译器编译代码时, 把生成的class文件放置到指定的包目录中, 并在类中记录包信息.</p>\n</li>\n<li><p>包名及子包结构通常符合下列规范,由四个部分组成：</p>\n</li>\n<li>机构类型名称.机构名称.项目名称.模块名称</li>\n</ul>\n<h3 id=\"3-使用包带来的问题\"><a href=\"#3-使用包带来的问题\" class=\"headerlink\" title=\"3  使用包带来的问题\"></a>3  使用包带来的问题</h3><p>一旦源文件中使用了package语句, 那么这个源文件中的所有类都会被放置到指定的包中,<br>带来2个问题</p>\n<blockquote>\n<p>1)    包中的所有的类如果被别的包中的类访问时, 不能再使用简单类名(simple name), 必须使用全限定名称(qualified name), 全限定类名 就是所有的包名.类名.<br>2)    如果类是主类, 那么在执行主类时, 必须使用全限定类名.<br>3)    编译源文件时必须加上选项-d 生成的包目录及其中的类文件的目标目录, 通过这个目录是当前目录, 在eclipse中这个目录是bin</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.javase.javabean; </span><br><span class=\"line\"></span><br><span class=\"line\">public class Teacher &#123; // Teacher类在其他包的类中使用时,必须使用全限定名称</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age = 30;</span><br><span class=\"line\">\tprivate String gender = &quot;女&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 可以通过构造器完成对关联对象的初始化</span><br><span class=\"line\">\tpublic Teacher(String name, int age, String gender) &#123; </span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + this.name + &quot;,年龄:&quot; + this.age + &quot;,性别:&quot; + this.gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.javase.test;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t//Teacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;); // 编译时这行语句就会报错!!!</span><br><span class=\"line\">        com.atguigu.javase.javabean.Teacher t = new com.atguigu.javase.javabean.Teacher(“李四”,25,”女”);</span><br><span class=\"line\">        System.out.println(t.say());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并且在命令行中执行此主类时必须使用全限定类名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java com.javase.test.TeacherTest</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-4-2-import语句\"><a href=\"#6-4-2-import语句\" class=\"headerlink\" title=\"6.4.2 import语句\"></a>6.4.2 import语句</h2><h3 id=\"1-import作用是什么\"><a href=\"#1-import作用是什么\" class=\"headerlink\" title=\"1. import作用是什么\"></a>1. import作用是什么</h3><blockquote>\n<p>跨包使用类时, 必须使用全限定类名, 所以当一个类中使用别的包的类太多时, 或者一个类的包名特别冗长时, 使用全限定名称代价就会非常高, 即使是一个类已经使用过了全限定, 下次再使用时,仍然还得使用全限定类名. 为了解决这个问题, 使用import导入语句, 把本类中要使用的其他包中的类导入进来, 这样, 在本类中再使用别的包的类就不必再使用全限定类名了, 可以直接使用简单类名, 这样就可以简化开发.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.javase.test;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.atguigu.javase.javabean.Teacher;</span><br><span class=\"line\"></span><br><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tTeacher t = new Teacher(&quot;李四&quot;, 25, &quot;女&quot;); // 虽然Teacher类不在本包, 因为已经导入可以使用</span><br><span class=\"line\">        System.out.println(t.say());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-import注意事项\"><a href=\"#2-import注意事项\" class=\"headerlink\" title=\"2. import注意事项\"></a>2. import注意事项</h3><blockquote>\n<p>①    import 也可以一次性导入某个包的所有类, 使用.*通配符即可<br>②    import导入时,必须要保证要导入的类确实存在</p>\n</blockquote>\n<h1 id=\"6-5-eclipse的使用\"><a href=\"#6-5-eclipse的使用\" class=\"headerlink\" title=\"6.5 eclipse的使用\"></a>6.5 eclipse的使用</h1><h2 id=\"6-5-1-安装\"><a href=\"#6-5-1-安装\" class=\"headerlink\" title=\"6.5.1 安装\"></a>6.5.1 安装</h2><h3 id=\"1-版本选择\"><a href=\"#1-版本选择\" class=\"headerlink\" title=\"1  版本选择\"></a>1  版本选择</h3><p>  在命令行执行语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java –version</span><br></pre></td></tr></table></figure>\n<p>   最后一行如果显示以下内容, 表明JDK版本是64位的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>  最后一行如果显示以下内容,表明JDK版本是32位的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) Client VM (build 24.80-b11, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>  Eclipse的位数必须和JDK位数一致, 否则无法运行.</p>\n<h3 id=\"2-工作空间\"><a href=\"#2-工作空间\" class=\"headerlink\" title=\"2  工作空间\"></a>2  工作空间</h3><p>  在硬盘上创建一个目录, 记下它的位置, 作用就是eclipse使用这个目录保存一些常用的设置和项目配置信   息, 称之为工作空间.</p>\n<h2 id=\"6-5-2-运行\"><a href=\"#6-5-2-运行\" class=\"headerlink\" title=\"6.5.2 运行\"></a>6.5.2 运行</h2><h3 id=\"1-启动eclipse\"><a href=\"#1-启动eclipse\" class=\"headerlink\" title=\"1 启动eclipse\"></a>1 启动eclipse</h3><p>  解压好eclipse以后, 进入目录, 双击eclipse.exe运行</p>\n<h3 id=\"2-透视图和窗口布局\"><a href=\"#2-透视图和窗口布局\" class=\"headerlink\" title=\"2 透视图和窗口布局\"></a>2 透视图和窗口布局</h3><p><img src=\"https://i.loli.net/2019/05/29/5cee0fffb507366942.jpg\" alt></p>\n<h3 id=\"3-一些常用设置\"><a href=\"#3-一些常用设置\" class=\"headerlink\" title=\"3. 一些常用设置\"></a>3. 一些常用设置</h3><p>1） 设置字体</p>\n<p> <img src=\"https://i.loli.net/2019/05/29/5cee0fffd085f68947.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee1007096ab39316.jpg\" alt></p>\n<p>2）设置快捷操作</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100733a5d78165.jpg\" alt></p>\n<h2 id=\"6-5-3-使用常用功能\"><a href=\"#6-5-3-使用常用功能\" class=\"headerlink\" title=\"6.5.3 使用常用功能\"></a>6.5.3 使用常用功能</h2><ol>\n<li>创建项目</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100730e5654509.jpg\" alt></p>\n<ol start=\"2\">\n<li>创建包</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0ffff1bdc69394.jpg\" alt></p>\n<ol start=\"3\">\n<li>创建类</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100736b6425011.jpg\" alt></p>\n<ol start=\"4\">\n<li>编辑代码<br>自动生成构造器</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10000077c17027.jpg\" alt></p>\n<p>\f自动生成get/set方法</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100729b1214440.jpg\" alt></p>\n<p>\f添加say()方法</p>\n<p>创建测试类并运行结果</p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffe555236372.jpg\" alt></p>\n<p>\f</p>\n<ol start=\"5\">\n<li>一些常用快捷键</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + 1 快速修正错误</span><br><span class=\"line\">Ctrl + d 快速删除当前行</span><br><span class=\"line\">Ctrl + Alt + 下方向 快速在下方复制当前行</span><br><span class=\"line\">Alt + / 自动完成提醒功能</span><br><span class=\"line\">Ctrl + shift + f 格式化代码</span><br><span class=\"line\">Ctrl + shift + o 整理导入</span><br><span class=\"line\">按住ctrl移动鼠标, 可以查看指定位置的元素的声明.</span><br><span class=\"line\"></span><br><span class=\"line\">Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了) </span><br><span class=\"line\">Alt+↑ 当前行和上面一行交互位置(同上) </span><br><span class=\"line\">Alt+← 前一个编辑的页面 </span><br><span class=\"line\">Alt+→ 下一个编辑的页面(当然是针对上面那条来说了) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性 </span><br><span class=\"line\"></span><br><span class=\"line\">Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后) </span><br><span class=\"line\">Shift+Ctrl+Enter 在当前行插入空行(原理同上条) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Q 定位到最后编辑的地方 </span><br><span class=\"line\">Ctrl+L 定位在某行 (对于程序超过100的人就有福音了) </span><br><span class=\"line\">Ctrl+M 最大化当前的Edit或View (再按则反之) </span><br><span class=\"line\">Ctrl+/ 注释当前行,再按则取消注释 </span><br><span class=\"line\">Ctrl+O 快速显示 OutLine </span><br><span class=\"line\">Ctrl+T 快速显示当前类的继承结构 </span><br><span class=\"line\">Ctrl+W 关闭当前Editer </span><br><span class=\"line\">Ctrl+K 参照选中的Word快速定位到下一个 </span><br><span class=\"line\">Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+/(小键盘) 折叠当前类中的所有代码 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+×(小键盘) 展开当前类中的所有代码 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查) </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+F4 关闭所有打开的Editer </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+X 把当前选中的文本全部变为小写 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+Y 把当前选中的文本全部变为小写 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+F 格式化当前代码 </span><br><span class=\"line\"></span><br><span class=\"line\">Ctrl+Shift+P 定位到对于的匹配符(譬如&#123;&#125;) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之) </span><br><span class=\"line\"></span><br><span class=\"line\">下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能) </span><br><span class=\"line\"></span><br><span class=\"line\">Alt+Shift+I 合并变量(可能这样说有点不妥Inline) </span><br><span class=\"line\">Alt+Shift+V 移动函数和变量(不怎么常用) </span><br><span class=\"line\">Alt+Shift+Z 重构的后悔药(Undo)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">序号           功能                                      快捷键</span><br><span class=\"line\">1       为用户提供内容的辅助                      〔Alt＋/〕</span><br><span class=\"line\">2       显示类中方法和属性的大纲，快速定位        〔Ctrl＋O〕</span><br><span class=\"line\">3       光标所在行或选定行快速添加注释或取消注释  〔Ctrl＋/〕</span><br><span class=\"line\">4       窗口的最大化和还原                        〔Ctrl＋M〕</span><br><span class=\"line\">5       快速修正                                  〔Ctrl＋1〕</span><br><span class=\"line\">-----------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">6            快速向下和向上查找                        〔Ctrl＋K〕、〔Ctrl＋Shift＋K〕</span><br><span class=\"line\">7            查找构建路径中的可找到类                  〔Ctrl+Shift＋T〕</span><br><span class=\"line\">8            查找构建路径重点的所有文件                〔Ctrl＋Shift＋R〕</span><br><span class=\"line\">9            查找类、方法和属性的引用                  〔Ctrl＋Shift＋G〕</span><br><span class=\"line\">10          快速生成import                            〔Ctrl＋Shift＋O〕</span><br><span class=\"line\">11          格式化代码                                〔Ctrl＋Shift＋F〕</span><br><span class=\"line\">12        查找当前文件所在项目中的路径              〔Alt＋Shift＋W〕</span><br><span class=\"line\">13        定位到当前编辑器的某一行                  〔Ctrl＋L〕</span><br><span class=\"line\">14        后退历史记录和前进历史记录                〔Alt＋&lt;-〕、〔Alt＋-&gt;〕</span><br><span class=\"line\">15        快速定位光标位置的某个类、方法和属性        〔F3〕</span><br><span class=\"line\">16        显示类的继承关系                            〔F4〕</span><br></pre></td></tr></table></figure>\n<p>\f</p>\n<ol start=\"6\">\n<li>导入项目</li>\n</ol>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10070616510190.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee100005fa972786.jpg\" alt></p>\n<h1 id=\"6-6-基本特征二-继承\"><a href=\"#6-6-基本特征二-继承\" class=\"headerlink\" title=\"6.6 基本特征二 继承\"></a>6.6 基本特征二 继承</h1><h2 id=\"6-6-1-继承\"><a href=\"#6-6-1-继承\" class=\"headerlink\" title=\"6.6.1 继承\"></a>6.6.1 继承</h2><h3 id=\"1-继承的概念\"><a href=\"#1-继承的概念\" class=\"headerlink\" title=\"1 继承的概念\"></a>1 继承的概念</h3><p>一个类从另外一个类继承所有成员, 包括属性和方法, 但是不包括构造器和语句块<br>从现有类创建子类, 现有类就称为<code>父类, 基类, 超类.</code></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffec1e076794.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">      public String name;</span><br><span class=\"line\">      public int age;</span><br><span class=\"line\">      public Date birthDate;</span><br><span class=\"line\">      public String getInfo()   </span><br><span class=\"line\">     &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffef15372674.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student &#123;</span><br><span class=\"line\">      public String name;</span><br><span class=\"line\">      public int age;</span><br><span class=\"line\">      public Date birthDate;</span><br><span class=\"line\">      public String school;</span><br><span class=\"line\">      public String getInfo()  </span><br><span class=\"line\">     &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10072df5363871.jpg\" alt></p>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10073975322106.jpg\" alt></p>\n<h3 id=\"2-为什么要继承\"><a href=\"#2-为什么要继承\" class=\"headerlink\" title=\"2 为什么要继承\"></a>2 为什么要继承</h3><ul>\n<li>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。</li>\n<li>此处的多个类称为子类，单独的这个类称为父类（基类或超类）。可以理解为:“子类 is a 父类”</li>\n</ul>\n<blockquote>\n<p>当一个类和另外一个类的属性和方法完全相同, 并且同时又比另一个类多一些特有的属性和方法时, 前者就可以作成后者的子类, 子类继承父类的所有成员, 这样, 在子类中就可以省略从父类继承的成员, 便于代码的复用, 以及更统一的类型管理.</p>\n</blockquote>\n<h3 id=\"3-继承语法\"><a href=\"#3-继承语法\" class=\"headerlink\" title=\"3 继承语法\"></a>3 继承语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 子类 extends 父类 &#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从语法意思来看, 子类是扩展自父类, 也可以理解为子类是在以父类为基础的前提下, 进一步扩展一些属性和方法, 所以子类大于父类, 或者也可以说, 子类包含父类.</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee10000331989402.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">      public String name;</span><br><span class=\"line\">      public int age;</span><br><span class=\"line\">      public Date birthDate;</span><br><span class=\"line\">      public String getInfo() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Student extends Person&#123;</span><br><span class=\"line\">      public String school;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//Student类继承了父类Person的所有属性和方法，并增加了一个属性school。</span><br><span class=\"line\">//Person中的属性和方法,Student都可以使用。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/29/5cee0fffe959515357.jpg\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529125920.png\" alt></p>\n<h3 id=\"4-继承的特点\"><a href=\"#4-继承的特点\" class=\"headerlink\" title=\"4 继承的特点\"></a>4 继承的特点</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529125953.png\" alt></p>\n<p>①子类继承父类的所有成员(构造器除外), 就意味着父类的私有成员也会被子类继承, 但是因为私有成员只能被本类访问, 所以即使是在子类中也不能直接访问从父类继承的私有成员, 可以通过从父类继承的公共的get/set方法间接访问.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">      private String name;</span><br><span class=\"line\">      private int age;</span><br><span class=\"line\">      private Date birthDate;</span><br><span class=\"line\">      </span><br><span class=\"line\">      public void setName(String name) &#123;</span><br><span class=\"line\">          this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public String getInfo() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Student extends Person&#123;</span><br><span class=\"line\">      public String school;</span><br><span class=\"line\">      public void test() &#123;</span><br><span class=\"line\">          //name = “小明”; // 不可以, 因为是私有的</span><br><span class=\"line\">          setName(“小明”);// 可以, 通过公共方法间接访问</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>②单继承</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130433.png\" alt></p>\n<blockquote>\n<p>在继承关系中, 一个类Person可以被另外的类Soldier和Student和Officer继承, 然后Student又被Graduate类继承, 这是允许的, 在这样的体系中, Graduate类也称为Person类的子类, Person类也称为Graduate类的父类, 这样的继承我们称之为多层继承. 在这样的体系中, Student类称为Graduate类的直接父类, 显然地, Person类称为Graduate类的间接父类, 在java中, 多层继承是被允许的.<br>Java中不允许的多继承是指多重继承, 也就是说一个类不允许有多个直接父类, 间接父类并没有个数限制. 称之为单继承.</p>\n</blockquote>\n<h2 id=\"6-6-2方法覆盖-override\"><a href=\"#6-6-2方法覆盖-override\" class=\"headerlink\" title=\"6.6.2方法覆盖(override)\"></a>6.6.2方法覆盖(override)</h2><h3 id=\"1-什么是方法覆盖\"><a href=\"#1-什么是方法覆盖\" class=\"headerlink\" title=\"1. 什么是方法覆盖\"></a>1. 什么是方法覆盖</h3><p>定义：</p>\n<ul>\n<li>在子类中可以根据需要对从父类中继承来的方法进行改造，</li>\n<li><p>也称方法的重写、重置。在程序执行时，子类的方法将覆盖父类的方法。<br>要求：</p>\n</li>\n<li><p>覆盖方法必须和被重写方法具有相同的方法名称、参数列表和返回值类型。</p>\n</li>\n<li>覆盖方法不能使用比被重写方法更严格的访问权限。</li>\n<li>覆盖和被覆盖的方法必须同时为非static的。</li>\n<li>子类方法抛出的异常不能大于父类被重写方法的异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String name;</span><br><span class=\"line\">\tpublic int age;</span><br><span class=\"line\">\tpublic String getInfo() &#123;</span><br><span class=\"line\">\t\treturn &quot;Name: &quot;+ name + &quot;\\n&quot; +&quot;age: &quot;+ age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String school;</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getInfo() &#123;       //重写方法</span><br><span class=\"line\">\t\treturn  &quot;Name: &quot;+ name + &quot;\\nage: &quot;+ age + &quot;\\nschool: &quot;+ school;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tStudent s1=new Student();</span><br><span class=\"line\">\t\ts1.name=&quot;Bob&quot;;</span><br><span class=\"line\">\t\ts1.age=20;</span><br><span class=\"line\">\t\ts1.school=&quot;school2&quot;;</span><br><span class=\"line\">\t\tSystem.out.println(s1.getInfo());   //Name:Bob  age:20  school:school2 执行的是子类重写过的方法</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-为什么要方法覆盖\"><a href=\"#2-为什么要方法覆盖\" class=\"headerlink\" title=\"2.为什么要方法覆盖\"></a>2.为什么要方法覆盖</h3><blockquote>\n<p>有的时候子类继承的父类方法并不能满足子类的需要, 而方法名称又要保持一致, 此时用到方法覆盖.</p>\n</blockquote>\n<h3 id=\"3-方法覆盖的特殊性\"><a href=\"#3-方法覆盖的特殊性\" class=\"headerlink\" title=\"3. 方法覆盖的特殊性\"></a>3. 方法覆盖的特殊性</h3><blockquote>\n<p>子类一旦把父类的方法覆盖, 那么在测试类中再无法通过子类对象调用父类的被覆盖方法了, 因为子类已经把父类的方法重写了, 如果有调用父类方法的需求, 只能通过再创建一个父类对象来调用.</p>\n</blockquote>\n<h3 id=\"4-Override注解的使用\"><a href=\"#4-Override注解的使用\" class=\"headerlink\" title=\"4. @Override注解的使用\"></a>4. @Override注解的使用</h3><blockquote>\n<p>有的时候, 在子类中写重写方法时, 容易出现一些低级的拼写错误, 或其他错误, 导致方法不能正确覆盖时, 程序的运行就会出乎意外, 所以为了防止这种现象, 在子类的覆盖方法上添加修饰符@Override注解.</p>\n<ul>\n<li>注解 : 本质上一种类, 也是一种特殊的注释, 所以一般情况下,  程序不执行注解, 但是会被编译器, 运行时所识别和处理(通过反射的方式).注解也有很多.</li>\n<li>@Override注解的作用是告诉编译器, 在编译程序时, 必须先检查此方法是否满足方法覆盖的条件, 如果不满足, 则编译出错, 这样强制程序员通过排查, 提前检查方法覆盖的问题.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String school;</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    @Override // 加上注解, 也能提高代码可读性</span><br><span class=\"line\">\tpublic String getInfo() &#123;       //重写方法</span><br><span class=\"line\">\t\treturn  &quot;Name: &quot;+ name + &quot;\\nage: &quot;+ age + &quot;\\nschool: &quot;+ school;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-6-3-四种访问权限\"><a href=\"#6-6-3-四种访问权限\" class=\"headerlink\" title=\"6.6.3 四种访问权限\"></a>6.6.3 四种访问权限</h2><h3 id=\"1-为什么需要访问权限\"><a href=\"#1-为什么需要访问权限\" class=\"headerlink\" title=\"1  为什么需要访问权限\"></a>1  为什么需要访问权限</h3><p>有的时候, 类中的一些成员需要控制可以被哪些范围的其他类所访问, 就可以使用访问控制修饰符来控制.</p>\n<h3 id=\"2-访问权限\"><a href=\"#2-访问权限\" class=\"headerlink\" title=\"2  访问权限\"></a>2  访问权限</h3><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130828.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130846.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529130939.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Parent&#123;</span><br><span class=\"line\">        private int f1 = 1;</span><br><span class=\"line\">        int f2 = 2;</span><br><span class=\"line\">        protected  int f3 = 3;</span><br><span class=\"line\">        public  int f4 = 4;</span><br><span class=\"line\">        private  void  fm1() &#123;System.out.println(&quot;in fm1() f1=&quot; + f1);&#125;</span><br><span class=\"line\">        void fm2() &#123;System.out.println(&quot;in fm2() f2=&quot; + f2);&#125;</span><br><span class=\"line\">        protected  void  fm3() &#123;System.out.println(&quot;in fm3() f3=&quot; + f3);&#125;</span><br><span class=\"line\">        public void fm4() &#123;System.out.println(&quot;in fm4() f4=&quot; + f4);&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Child extends Parent&#123;               //设父类和子类在同一个包内</span><br><span class=\"line\">\tprivate int c1 = 21;</span><br><span class=\"line\">\tpublic  int c2 = 22;\t </span><br><span class=\"line\">\tprivate void cm1()&#123;System.out.println(&quot;in cm1() c1=&quot; + c1);&#125;</span><br><span class=\"line\">\tpublic  void cm2()&#123;System.out.println(&quot;in cm2() c2=&quot; + c2);&#125;</span><br><span class=\"line\">\tpublic static void main(String args[])&#123;</span><br><span class=\"line\">\t\tint i; </span><br><span class=\"line\">\t\tParent  p = new Parent();</span><br><span class=\"line\">\t\t// i = p1.f1; // 不可以访问其他类的私有成员</span><br><span class=\"line\">\t\ti = p.f2;//\ti = p.f3;\ti = p.f4;\tp.fm2();//\tp.fm3();\tp.fm4();\t\t</span><br><span class=\"line\">\t\tChild  c = new Child();</span><br><span class=\"line\">\t\ti = c.f2;\t        //\ti = c.f3;\t\ti = c.f4;\t\t</span><br><span class=\"line\">\t\ti = c.c1;\t        //\ti = c.c2;</span><br><span class=\"line\">\t\t//c.fm1(); // 不能访问</span><br><span class=\"line\">\t\tc.cm1();        // c.cm2(); c.fm2(); c.fm3(); c.fm4() 都能访问</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-访问权限的使用注意\"><a href=\"#3-访问权限的使用注意\" class=\"headerlink\" title=\"3. 访问权限的使用注意\"></a>3. 访问权限的使用注意</h3><p>protected是被保护的, 容易从字面意思理解成它的范围会比较小, 但是其实被protected修饰的成员的访问范围是仅次于public的, 所以要小心.</p>\n<h1 id=\"6-7-super关键字\"><a href=\"#6-7-super关键字\" class=\"headerlink\" title=\"6.7 super关键字\"></a>6.7 super关键字</h1><h2 id=\"6-7-1-super关键字含义\"><a href=\"#6-7-1-super关键字含义\" class=\"headerlink\" title=\"6.7.1 super关键字含义\"></a>6.7.1 super关键字含义</h2><h3 id=\"1-super关键字\"><a href=\"#1-super关键字\" class=\"headerlink\" title=\"1. super关键字\"></a>1. super关键字</h3><p>作用：</p>\n<ul>\n<li>在Java类中使用super来调用父类中的指定操作：</li>\n<li>super可用于访问父类中定义的属性</li>\n<li>super可用于调用父类中定义的成员方法</li>\n<li><p>super可用于在子类构造方法中调用父类的构造器<br>注意：</p>\n</li>\n<li><p>尤其当子父类出现同名成员时，可以用super进行区分</p>\n</li>\n<li>super的追溯不仅限于直接父类</li>\n<li>super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识</li>\n<li>super关键字表示在当前类中特别指定要使用父类的成员时使用super限定.</li>\n<li>这里的父类不仅包括直接父类, 也包括间接父类.</li>\n</ul>\n<h2 id=\"6-7-2-super使用场景\"><a href=\"#6-7-2-super使用场景\" class=\"headerlink\" title=\"6.7.2 super使用场景\"></a>6.7.2 super使用场景</h2><h3 id=\"1-方法中使用\"><a href=\"#1-方法中使用\" class=\"headerlink\" title=\"1. 方法中使用\"></a>1. 方法中使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected String name=&quot;张三&quot;;</span><br><span class=\"line\">protected int age;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getInfo() &#123;</span><br><span class=\"line\">         return “Name: ” + name + “\\nage: ” + age; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Student extends Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected String name = &quot;李四&quot;;</span><br><span class=\"line\">\tprivate String school = &quot;New Oriental&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic String getSchool()&#123; </span><br><span class=\"line\">return school; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">public String getInfo() &#123;</span><br><span class=\"line\">        return super.getInfo() +&quot;\\nschool: &quot; +school; </span><br><span class=\"line\">// 在方法中使用super可以调用父类中的被覆盖方法</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class TestStudent&#123;</span><br><span class=\"line\">\tpublic static void main(String[] args)&#123;</span><br><span class=\"line\">\t\tStudent st = new Student();</span><br><span class=\"line\">\t\tSystem.out.println(st.getInfo());</span><br><span class=\"line\">\t&#125; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-构造器中使用\"><a href=\"#2-构造器中使用\" class=\"headerlink\" title=\"2. 构造器中使用\"></a>2. 构造器中使用</h3><p>①    子类中所有的构造器默认都会访问父类中空参数的构造器<br>②    当父类中没有空参数的构造器时，子类的构造器必须通过this(参数列表)或者super(参数列表)语句指定调用本类或者父类中相应的构造器，且必须放在构造器的第一行<br>③    如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate Date birthDate;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name, int age, Date d) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.birthDate = d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name, int age) &#123;</span><br><span class=\"line\">\t\tthis(name, age, null);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name, Date d) &#123;</span><br><span class=\"line\">\t\tthis(name, 30, d);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Person(String name) &#123;</span><br><span class=\"line\">\t\tthis(name, 30);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t// ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Student extends Person &#123;</span><br><span class=\"line\">\tprivate String school;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Student(String name, int age, String s) &#123;</span><br><span class=\"line\">\t\tsuper(name, age); // 直接显式调用父类有参构造器</span><br><span class=\"line\">\t\tschool = s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Student(String name, String s) &#123;</span><br><span class=\"line\">\t\tsuper(name); // 直接显式调用父类有参构造器</span><br><span class=\"line\">\t\tschool = s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Student(String s) &#123; // 直接隐式调用父类无参构造器</span><br><span class=\"line\">\t\tschool = s;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-7-3子类对象实例化过程\"><a href=\"#6-7-3子类对象实例化过程\" class=\"headerlink\" title=\"6.7.3子类对象实例化过程\"></a>6.7.3子类对象实例化过程</h2><ol>\n<li>执行顺序</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529131237.png\" alt></p>\n<h2 id=\"6-7-4-super和this的区别\"><a href=\"#6-7-4-super和this的区别\" class=\"headerlink\" title=\"6.7.4 super和this的区别\"></a>6.7.4 super和this的区别</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529141052.png\" alt></p>\n<h1 id=\"6-8-基本特征三-多态\"><a href=\"#6-8-基本特征三-多态\" class=\"headerlink\" title=\"6.8 基本特征三 多态\"></a>6.8 基本特征三 多态</h1><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190529141154.png\" alt></p>\n<h2 id=\"6-8-1-什么是多态\"><a href=\"#6-8-1-什么是多态\" class=\"headerlink\" title=\"6.8.1 什么是多态\"></a>6.8.1 什么是多态</h2><h3 id=\"1-本态\"><a href=\"#1-本态\" class=\"headerlink\" title=\"1. 本态\"></a>1. 本态</h3><p>一个对象的本类形态就是本态.</p>\n<h3 id=\"2-多态\"><a href=\"#2-多态\" class=\"headerlink\" title=\"2. 多态\"></a>2. 多态</h3><p>一个对象的多种父类形态就是多态</p>\n<h2 id=\"6-8-2多态的使用\"><a href=\"#6-8-2多态的使用\" class=\"headerlink\" title=\"6.8.2多态的使用\"></a>6.8.2多态的使用</h2><h3 id=\"1-多态引用\"><a href=\"#1-多态引用\" class=\"headerlink\" title=\"1. 多态引用\"></a>1. 多态引用</h3><p>  将子类对象赋值于父类类型的引用变量就是多态引用, 在这里对象其实还是子类对象, 只不过是被看作是一个父类类型的对象.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = new Student();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多态性，是面向对象中最重要的概念，在java中有两种体现：<ol>\n<li>方法的重载(overload)和重写(overwrite)。</li>\n<li>对象的多态性   ——可以直接应用在抽象类和接口上。</li>\n</ol>\n</li>\n<li><p>Java引用变量有两个类型：编译时类型和运行时类型。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。</p>\n</li>\n<li><p>注意：若编译时类型和运行时类型不一致，就出现多态（Polymorphism）</p>\n</li>\n</ul>\n<h3 id=\"2-多态带来的问题\"><a href=\"#2-多态带来的问题\" class=\"headerlink\" title=\"2 多态带来的问题\"></a>2 多态带来的问题</h3><ul>\n<li>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student m = new Student();</span><br><span class=\"line\">m.school = “pku”; \t//合法,Student类有school成员变量</span><br><span class=\"line\">Person e = new Student(); </span><br><span class=\"line\">e.school = “pku”;\t//非法,Person类没有school成员变量</span><br></pre></td></tr></table></figure>\n<pre><code>属性是在编译时确定的，编译时e为Person类型，没有school成员变量，\n</code></pre><p>因而编译错误。</p>\n<h2 id=\"6-8-3虚拟方法调用-Virtual-Method-Invocation\"><a href=\"#6-8-3虚拟方法调用-Virtual-Method-Invocation\" class=\"headerlink\" title=\"6.8.3虚拟方法调用(Virtual Method Invocation)\"></a>6.8.3虚拟方法调用(Virtual Method Invocation)</h2><h3 id=\"1-什么是虚拟方法\"><a href=\"#1-什么是虚拟方法\" class=\"headerlink\" title=\"1. 什么是虚拟方法\"></a>1. 什么是虚拟方法</h3><p>  正常的方法调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \t\tPerson e = new Person();</span><br><span class=\"line\">\t\te.getInfo();</span><br><span class=\"line\">\t\tStudent e = new Student();</span><br><span class=\"line\"> \t\te.getInfo();</span><br><span class=\"line\">虚拟方法调用(多态情况下)：</span><br><span class=\"line\">\t\t\tPerson e = new Student();</span><br><span class=\"line\">  \t\te.getInfo();\t//调用Student类的getInfo()方法</span><br></pre></td></tr></table></figure>\n<p>  编译时类型和运行时类型：</p>\n<p>  编译时e为Person类型，而方法的调用是在运行时确定的，所以调用的是Student类的getInfo()方法。<br>  ——动态绑定</p>\n<h3 id=\"2-多态小结\"><a href=\"#2-多态小结\" class=\"headerlink\" title=\"2. 多态小结\"></a>2. 多态小结</h3><pre><code>前提：\n\n  需要存在继承或者实现关系\n要有覆盖操作\n\n  成员方法：\n\n编译时：要查看引用变量所属的类中是否有所调用的方法。\n(编译时检查父类类型)\n运行时：调用实际对象所属的类中的重写方法。\n\n(运行时执行子类类型)\n\n成员变量：\n\n不具备多态性，只看引用变量所属的类。\n</code></pre><h2 id=\"6-8-4多态的应用场景\"><a href=\"#6-8-4多态的应用场景\" class=\"headerlink\" title=\"6.8.4多态的应用场景\"></a>6.8.4多态的应用场景</h2><h3 id=\"1-多态数组\"><a href=\"#1-多态数组\" class=\"headerlink\" title=\"1. 多态数组\"></a>1. 多态数组</h3><p>   当创建多个不同的子类对象, 而又想统一处理这批对象时, 就可以使用多态数组.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person[] arr = &#123;new Student(), new Teacher()&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\tprivate int age;</span><br><span class=\"line\">\tprivate String gender;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tpublic Person(String name, int age, String gender) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setName(String name) &#123;</span><br><span class=\"line\">\t\tthis.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getName() &#123;</span><br><span class=\"line\">\t\treturn name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setAge(int age) &#123;</span><br><span class=\"line\">\t\tthis.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int getAge() &#123;</span><br><span class=\"line\">\t\treturn age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void sayHello() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;打个招呼&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Chinese extends Person &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate String shuxiang;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic Chinese(String name, int age, String gender, String shuxiang) &#123;</span><br><span class=\"line\">\t\tsuper(name, age, gender); </span><br><span class=\"line\">\t\tthis.shuxiang = shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setShuxiang(String shuxiang) &#123;</span><br><span class=\"line\">\t\tthis.shuxiang = shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic String getShuxiang() &#123;</span><br><span class=\"line\">\t\treturn shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void spring() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;过大年&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\treturn super.say() + &quot;,属相:&quot; + shuxiang;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void sayHello() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;吃了吗?&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class American extends Person &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate boolean hasGun;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic American() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic American(String name, int age, String gender, boolean hasGun) &#123;</span><br><span class=\"line\">\t\tsuper(name, age, gender);</span><br><span class=\"line\">\t\tthis.hasGun = hasGun;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void setHasGun(boolean hasGun) &#123;</span><br><span class=\"line\">\t\tthis.hasGun = hasGun;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic boolean isHasGun() &#123;</span><br><span class=\"line\">\t\treturn hasGun;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic void christmas() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Merry Christmas!!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic void sayHello() &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;How are you?&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tPerson[] ps = new Person[5]; // 多态数组, 可以保存任意类型的子类对象</span><br><span class=\"line\">\t\tps[0] = new Chinese(&quot;张三&quot;, 30, &quot;男&quot;, &quot;牛&quot;);</span><br><span class=\"line\">\t\tps[1] = new American(&quot;Jack&quot;, 25, &quot;male&quot;, true);</span><br><span class=\"line\">\t\tps[2] = new Person(&quot;某人&quot;, 15, &quot;未知&quot;);</span><br><span class=\"line\">\t\tps[3] = new American(&quot;Rose&quot;, 32, &quot;female&quot;, false);</span><br><span class=\"line\">\t\tps[4] = new Chinese(&quot;李四&quot;, 40, &quot;女&quot;, &quot;羊&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (Person p : ps) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(p.say());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;-------------------------&quot;);</span><br><span class=\"line\">        // 因为在同一个数组中, 并且所有对象都有age属性, 所以就可以对所有元素进行冒泡排序</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; ps.length - 1; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; ps.length - 1 - i; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (ps[j].getAge() &gt; ps[j + 1].getAge()) &#123;</span><br><span class=\"line\">\t\t\t\t\tPerson tmp = ps[j];</span><br><span class=\"line\">\t\t\t\t\tps[j] = ps[j + 1];</span><br><span class=\"line\">\t\t\t\t\tps[j + 1] = tmp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (Person p : ps) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(p.say());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-多态参数\"><a href=\"#2-多态参数\" class=\"headerlink\" title=\"2. 多态参数\"></a>2. 多态参数</h3><blockquote>\n<p>在设计方法时, 有的方法内部需要用到另外的类的对象, 但是在设计方法时, 又不需要关心究竟是哪个对象, 只关心这些实参对象都是某个类型的, 此时, 方法的参数的类型就可以写成父类类型的参数,这样的方法的参数就是多态参数.</p>\n</blockquote>\n<figure class=\"highlight plain\"><figcaption><span>p) &#123;</span><a href=\"//\">这个方法的参数p的具体类型未知</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    System.out.println(p.say());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">test(new Chinese()); // 在实际调用多态参数方法时, 可以传入任意本类或子类类型的对象</span><br><span class=\"line\">test(new American());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>x instanceof A：检验x是否为类A的对象，返回值为boolean型。</strong></p>\n<ul>\n<li>要求x所属的类与类A必须是子类和父类的关系，否则编译错误。</li>\n<li>如果x属于类A的子类B，x instanceof  A值也为true。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person extends Object &#123;…&#125;</span><br><span class=\"line\">public class Student extends Person &#123;…&#125;</span><br><span class=\"line\">public class Graduate extends Person &#123;…&#125;</span><br><span class=\"line\">-------------------------------------------------------------------</span><br><span class=\"line\">public void method1(Person e) &#123;</span><br><span class=\"line\">\tif (e instanceof Person) </span><br><span class=\"line\">\t\t// 处理Person类及其子类对象</span><br><span class=\"line\">\tif (e instanceof Student) </span><br><span class=\"line\">\t\t//处理Student类及其子类对象</span><br><span class=\"line\">\tif (e instanceof Graduate)</span><br><span class=\"line\">\t\t//处理Graduate类及其子类对象</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-对象类型转换-Casting\"><a href=\"#3-对象类型转换-Casting\" class=\"headerlink\" title=\"3 对象类型转换(Casting)\"></a>3 对象类型转换(Casting)</h3><ul>\n<li><p>基本数据类型的Casting：</p>\n<ul>\n<li>自动类型转换：小的数据类型可以自动转换成大的数据类型<br><code>如long g=20;   double d=12.0f</code></li>\n<li>强制类型转换：可以把大的数据类型强制转换(casting)成小的数据类型<pre><code>` 如 float f=(float)12.0;   int a=(int)1200L\n</code></pre></li>\n</ul>\n</li>\n<li><p>对Java对象的强制类型转换称为造型</p>\n</li>\n</ul>\n<ul>\n<li>从子类到父类的类型可以自动进行</li>\n<li>从父类到子类的类型转换必须通过造型(强制类型转换)实现</li>\n<li>无继承关系的引用类型间的转换是非法的</li>\n<li>在造型前可以使用instanceof操作符测试一个对象的类型</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190530094040.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class PersonTest5 &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void test(Person p) &#123; // 多态参数, 提高了兼容性!!</span><br><span class=\"line\">\t\tp.sayHello(); //方法中父类中定义,所以直接调用,\t\t</span><br><span class=\"line\">\t\t//p.spring(); // 多态副作用, 子类特有成员不能访问</span><br><span class=\"line\">\t\t// 必须对对象的真实身份进行检测 </span><br><span class=\"line\">\t\tif (p instanceof Chinese) &#123; // 造型有风险, 使用须谨慎!!!</span><br><span class=\"line\">\t\t\tChinese ch = (Chinese)p; // 造型: 对象是什么类型还原成什么类型</span><br><span class=\"line\">\t\t\tch.spring(); // 子类特有的成员的访问,必须要经过造型.</span><br><span class=\"line\">\t\t&#125; else if (p instanceof American) &#123;</span><br><span class=\"line\">\t\t\t((American)p).christmas();</span><br><span class=\"line\">\t\t&#125; else if (p instanceof Person)&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(&quot;普通人一枚&quot;);\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tPerson[] ps = new Person[5]; // 多态数组, 可以保存任意类型的子类对象</span><br><span class=\"line\">\t\tChinese c1 = new Chinese(&quot;张三&quot;, 30, &quot;男&quot;, &quot;牛&quot;);</span><br><span class=\"line\">\t\tAmerican a1  = new American(&quot;Jack&quot;, 25, &quot;male&quot;, true);</span><br><span class=\"line\">\t\tPerson p1 = new Person(&quot;某人&quot;, 15, &quot;未知&quot;);</span><br><span class=\"line\">\t\tAmerican a2 = new American(&quot;Rose&quot;, 32, &quot;female&quot;, false);</span><br><span class=\"line\">\t\tChinese c2 = new Chinese(&quot;李四&quot;, 40, &quot;女&quot;, &quot;羊&quot;);</span><br><span class=\"line\">\t\tps[0] = c1;</span><br><span class=\"line\">\t\tps[1] = a1;</span><br><span class=\"line\">\t\tps[2] = p1;</span><br><span class=\"line\">\t\tps[3] = a2;</span><br><span class=\"line\">\t\tps[4] = c2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;-------------------------&quot;);</span><br><span class=\"line\">\t\tfor (Person p : ps) &#123;</span><br><span class=\"line\">\t\t\ttest(p); // 不同的子类对象作为实参调用方法, 方法的执行也不一样.</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"谁是你可以随时说话的人","url":"http://yoursite.com/2016/10/12/鸡汤-谁是你可以随时说话的人/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609011108.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;你是否有过这样的感觉：某一天内心郁闷，想找个人聊一聊，翻遍通讯录竟发现无一人可约？</p>\n<p>&emsp;&emsp;今天的通讯格外发达，电话、语音、视频选项颇多，微信好友也能刷上好几页。可为什么我们越来越找不到一个可以随时聊天的人了呢？</p>\n<p>&emsp;&emsp;清清是个全职妈妈，外人眼中的人生赢家。丈夫多金帅气，儿子乖巧懂事，仿佛这一辈子已经无所求了。</p>\n<p>&emsp;&emsp;可家家有本难念的经，她最大的烦恼是孤独。丈夫经常出差，好不容易回来两天，大部分时间也都在处理工作，两人之间很少交谈。和丈夫分享儿子被表扬的喜悦，丈夫只是笑笑，随后又埋头于工作。想和丈夫聊聊家常，说说贴心话，他也只是敷衍地回答。</p>\n<p>&emsp;&emsp;都说婚姻需要双方共同经营，他们之间却连最基本的沟通都没有，可想而知这段婚姻是有多么失败。一年后，清清选择和丈夫离婚，因为她再也无法忍受这种无话可谈的生活。</p>\n<p>&emsp;&emsp;试想当你想到一件好玩的事，唾沫横飞讲得开心，一转头却发现他在打游戏，压根没有听。你立刻没了兴趣，甚至还有点气恼。有些时候不是你不想说，而是根本无从诉说。</p>\n<blockquote>\n<ul>\n<li>茫茫人海，万千红尘，在对的时间遇上对的人实属不易。能找到一个你愿意说、他愿意听，并且厮守一生的爱人更是难上加难。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;打开微信，一页一页地反复滑动、寻找，你能选出几个可以随时陪你聊天的人？</p>\n<p>&emsp;&emsp;我有幸找到两个，可是再仔细算一下，我的好友总数又是多少？大部分微信好友都是点赞之交，连“评论之交”都不见得有几个。</p>\n<p>&emsp;&emsp;有网友说：以前和我形影不离、无话不谈的闺蜜，结婚生子后经常失联。以前发微信都是秒回，现在不能秒回就算了，甚至两三天后才会回，我又不敢随便打电话。我们的关系是不是再也回不到以前了？</p>\n<blockquote>\n<ul>\n<li>其实，这不是关系变差了，只是我们需要承担的变多了。</li>\n</ul>\n</blockquote>\n<p>&emsp;&emsp;年轻时，我们可以无所顾忌地谈天说地，甚至整夜不睡觉，哪怕是随意的一个话题都能聊很久很久。随着年龄的增大，我们的社会关系越来越复杂，需要处理的事情也是一件又一件，留给自己的时间越减越短。</p>\n<p>&emsp;&emsp;等到想找个人聊聊近期心情时，却发现各自已有了新的朋友圈。能听你说话又愿意和你说话的人寥寥无几，倾诉的欲望也就变成了奢望。</p>\n<p>&emsp;&emsp;这时候就无比希望能有一个交心的好友，可以在你孤寂、愤懑之时陪你聊聊天、舒舒意，就像伯牙和子期那样高山流水遇知音。以心会友，一个眼神、一个动作就能明白彼此。</p>\n<p>3</p>\n<p>&emsp;&emsp;或许你人缘不错，和你认识的人也不少，关系也挺好，但总觉得心里空着一块，或许就是缺了个能随时说话的人。</p>\n<p>&emsp;&emsp;但要找到这样一个人，并不容易。我以为，可以和你交心、随时说话的人通常具备几个特点：</p>\n<blockquote>\n<ul>\n<li>一是许久未见，再见亲密如初。他能在茫茫人海中一眼看到你，为你送上大大的拥抱，一扫路途中的疲惫。你们迫不及待地诉说着彼此的思念，一如当初，毫无生分。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>是不管多忙，对你永远有时间。微信置顶，只为在第一时间接收到你的消息，连一秒钟都不愿让你等待。凌晨接到电话，第一反应不是扰人清梦，而是关切地询问是否出事，甚至比你更着急。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>是你的任何变化，一眼就能看出。记得你每时每刻的模样，些许改变一眼就能识别。细心关注你的喜怒哀乐，常常为你调整心情。</li>\n</ul>\n</blockquote>\n<p>但即使是这样的人，也需要给彼此一定的个人空间，不会让人觉得太过于依赖，没了界限感。</p>\n<p>如若遇到，请珍惜，那会是你人生中的瑰宝。</p>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"收到请回复，不仅仅是一种礼貌","url":"http://yoursite.com/2016/09/07/鸡汤-收到请回复，不仅仅是一种礼貌/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609001818.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;不知道在你的生活中，是否经常会遇到不喜欢回复信息的人。</p>\n<p>&emsp;&emsp;你在群里通知工作，他迟迟不回复，导致你不知道任务是否传达成功；你找对方咨询一个事情，他仿佛没看见你的信息，但下次有求于你，还假装什么事情都没发生过；你找对方聊天，他很久不回复，转身却看见他发了一条朋友圈，与他人聊得正嗨。</p>\n<p>&emsp;&emsp;知乎上有一个问题，什么样的人最靠谱？其中一个高赞回答是，收到会回复的人。深以为然。</p>\n<p>&emsp;&emsp;有一次，领导布置了一项任务，需要我、同事A、同事B三个人共同完成。同事A负责前期的框架开发。我便在群里给他发信息，希望他能够在某一个时间前提交，以便后期我和同事B的工作能顺利进行。</p>\n<p>&emsp;&emsp;因为工作任务比较紧急，在群里我没看见他的回复，给他发私信也没有回复，我便有些心焦，给他打了个电话。他过了很久才缓缓地接起来，说：“我看到了啊。我在既定时间完成就行，不是什么大事，就不回复了。”</p>\n<p>&emsp;&emsp;听完这些，我瞬间觉得这个人很不靠谱。对于他来说，只要能完成任务，回复不回复不是什么大事。可他却忘了，当一件事情交代给他，这就不仅是他一个人的事情，还牵扯到与他合作的其他同事。</p>\n<blockquote>\n<ul>\n<li>收到回复，有时不仅仅是一种礼貌，还是靠谱度的度量衡。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;前段时间，我拉黑了一个交情很不错的朋友。这位朋友在工作之余会接一些帮别人画画的工作。有一次，我想为一位去当兵的好友画一幅肖像画留作纪念，便找到了这位朋友。</p>\n<p>&emsp;&emsp;我们谈好价格、作画需求和大概的交画时间后，因为信任这位朋友，我直接付了画作的全款。到了约定交画的时间，他一直没有出现。我去找他，他才说最近比较忙，要过几天再给我。</p>\n<p>&emsp;&emsp;之后我又问了三四次，每次都要隔好几天才回复我，还以各种理由推脱：我手上还有几张催得很急，画完马上画你的；我去外地学习了，过几天给你；我这几天搬家，搬好后就给你画。到最后，无论我发什么，他干脆直接不回我的信息。</p>\n<p>&emsp;&emsp;这件事以前，我对这位朋友的印象非常好，幽默、有才华、人也帅气，可这次事情之后我便直接拉黑了他。人品不好的人，不值得相交。</p>\n<blockquote>\n<ul>\n<li>小事见格局，细节看人品。及时回复对方的信息，答应了的事情就努力做到，这些事情不大，却很好地折射出一个人的人品。人品好的人，才能走得更远。</li>\n</ul>\n</blockquote>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;收到回复，是一种有礼貌的表现，也是对别人的尊重。</p>\n<p>&emsp;&emsp;面对面交流时，如果有人跟你说话或者打招呼，你毫无回应或者假装没看见，是一件很没礼貌的事情。微信上收到回复也是一样。</p>\n<p>&emsp;&emsp;有人曾说，与别人相处时最讨厌两件事，一是我和你说话你听到了却不回我，二是我给你发消息你看到了却不回我。还有一种更令人难堪，就是对方不回复你，却发了朋友圈。</p>\n<p>&emsp;&emsp;真心换真心，换不来的最后都会变成死心。要知道，人与人之间，感情、尊重从来都是相互的。你付出多少，才能收获多少。</p>\n<p>&emsp;&emsp;工作中及时回复，你更能获得领导和同事的信任，工作也能更好地完成；与朋友相交，如果本来见面的机会就少，再不回复信息，迟早有一天会渐行渐远；最牵挂你的人永远是父母，及时回复他们的信息，别让他们空守着手机思念你。</p>\n<blockquote>\n<ul>\n<li>每晚睡前，检查一下手机，如果有未回复的重要信息，尽量回复一下。别让这么一件小事，耽误了工作，疏远了感情。</li>\n</ul>\n</blockquote>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"5. JavaSE-面向对象基础","url":"http://yoursite.com/2016/09/06/5. JavaSE-面向对象基础/","content":"<h1 id=\"5-1-类与对象\"><a href=\"#5-1-类与对象\" class=\"headerlink\" title=\"5.1 类与对象\"></a>5.1 类与对象</h1><h2 id=\"5-1-1面向对象与面向过程\"><a href=\"#5-1-1面向对象与面向过程\" class=\"headerlink\" title=\"5.1.1面向对象与面向过程\"></a>5.1.1面向对象与面向过程</h2><p>1.学习面向对象内容的三条主线<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.\tjava类及类的成员</span><br><span class=\"line\">2.\t面向对象的三大特征</span><br><span class=\"line\">3.\t其它关键字</span><br></pre></td></tr></table></figure></p>\n<p>2.面向对象(OOP) 与面向过程(POP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面向对象 OOP :</span><br><span class=\"line\">     Object Oriented Programming  </span><br><span class=\"line\">面向过程 POP ：</span><br><span class=\"line\">     Procedure Oriented Programming</span><br></pre></td></tr></table></figure></p>\n<p>二者都是一种思想，面向对象是相对于面向过程而言的。<br>面向过程，强调的是功能行为。<br>面向对象，将功能封装进对象，强调具备了功能的对象。</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35d928b945184.jpg\" alt></p>\n<p>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，<br>如<strong>抽象、分类、继承、聚合、多态</strong>等。</p>\n<h2 id=\"5-1-2类与类之间的关系\"><a href=\"#5-1-2类与类之间的关系\" class=\"headerlink\" title=\"5.1.2类与类之间的关系\"></a>5.1.2类与类之间的关系</h2><p>###1.关联关系</p>\n<p>学院包含教授和研究生, 体现类包含另外的一些类</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35d2d65890533.jpg\" alt></p>\n<h3 id=\"2-继承关系\"><a href=\"#2-继承关系\" class=\"headerlink\" title=\"2.继承关系\"></a>2.继承关系</h3><pre><code>游泳运动员是运动员的一种, \n排球运行员又是球类运动员的一种,\n体现的是类型的一脉相承\n</code></pre><p><img src=\"https://i.loli.net/2019/05/27/5cebb35d5795112211.jpg\" alt></p>\n<h3 id=\"3-聚合关系\"><a href=\"#3-聚合关系\" class=\"headerlink\" title=\"3.聚合关系\"></a>3.聚合关系</h3><p>球队中包含队长以及多个队员,体现的是包含</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35c3c02929986.jpg\" alt></p>\n<h2 id=\"5-1-3面向对象的三大特征\"><a href=\"#5-1-3面向对象的三大特征\" class=\"headerlink\" title=\"5.1.3面向对象的三大特征\"></a>5.1.3面向对象的三大特征</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">封装  (Encapsulation)</span><br><span class=\"line\">继承  (Inheritance)</span><br><span class=\"line\">多态  (Polymorphism)</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-1-4面向对象的思想概述\"><a href=\"#5-1-4面向对象的思想概述\" class=\"headerlink\" title=\"5.1.4面向对象的思想概述\"></a>5.1.4面向对象的思想概述</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">① 程序员从执行者转化成了指挥者。</span><br><span class=\"line\">② 完成需求时：</span><br><span class=\"line\">    1.先去找具有所需功能的对象来用。</span><br><span class=\"line\">    2.如果该对象不存在，那么创建一个具有所需功能的对象。</span><br><span class=\"line\">    3.这样简化开发并提高复用。</span><br><span class=\"line\">③ 类(class)和对象(object)是面向对象的核心概念。</span><br><span class=\"line\">④ 类是对一类事物描述，是抽象的、概念上的定义</span><br><span class=\"line\">⑤ 对象是实际存在的该类事物的每个个体，因而也称实例(instance)。</span><br><span class=\"line\">⑥ “万事万物皆对象” – 在java中一切皆对象</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-2-类与对象\"><a href=\"#5-2-类与对象\" class=\"headerlink\" title=\"5.2 类与对象\"></a>5.2 类与对象</h1><h2 id=\"5-2-1-类的概念\"><a href=\"#5-2-1-类的概念\" class=\"headerlink\" title=\"5.2.1 类的概念\"></a>5.2.1 类的概念</h2><h3 id=\"1-java类及类的成员\"><a href=\"#1-java类及类的成员\" class=\"headerlink\" title=\"1. java类及类的成员\"></a>1. java类及类的成员</h3><ul>\n<li>现实世界万事万物是由分子、原子构成的。同理，Java代码世界是由诸多个不同功能的类构成的。</li>\n<li>现实世界中的分子、原子又是由什么构成的呢？原子核、电子！那么，Java中用类class来描述事物也是如此</li>\n<li>事物有大小,颜色,好坏,高低, 胖瘦,等等特征, 而这些特征又可以用数据描述,在程序中保存数据的就是变量</li>\n<li>事物也有行为动作, 比如吃, 跑, 跳, 移动等等, 而这些行为的描述又比变量稍复杂一点, 用方法来描述事物的行为. 所以类中最常见的两种成员就是:</li>\n</ul>\n<blockquote>\n<ul>\n<li>属 性：对应类中的成员变量(描述事物的特征)<br>行 为：对应类中的成员方法(描述事物的行为)</li>\n</ul>\n</blockquote>\n<h3 id=\"2-面向对象的思想概述\"><a href=\"#2-面向对象的思想概述\" class=\"headerlink\" title=\"2. 面向对象的思想概述\"></a>2. 面向对象的思想概述</h3><p><img src=\"https://i.loli.net/2019/05/27/5cebb35d4f37177423.jpg\" alt></p>\n<blockquote>\n<ul>\n<li>可以理解为：类 = 汽车设计图；对象 = 实实在在的汽车</li>\n<li>面向对象程序设计的重点是类的设计</li>\n<li>定义类其实是定义类中的成员(成员变量和成员方法)</li>\n</ul>\n</blockquote>\n<p>所以类就是对现实世界事物的抽象定义, 这个抽象定义就可以基本把某事物描述清楚. 要想描述清楚事物, 必须要知道事物有哪些特征(数据, 用变量保存), 有哪些行为(用方法描述), 当某事物的特征和行为都描述清楚后, 我们就认为对这个事物有一个大概的把握.</p>\n<h2 id=\"5-2-2-对象的概念\"><a href=\"#5-2-2-对象的概念\" class=\"headerlink\" title=\"5.2.2 对象的概念\"></a>5.2.2 对象的概念</h2><ul>\n<li>对象就是一个类的实实在在的实体, 也称为实例, 所以对象(object)也称为实例(instance), 实例就是对象, 对象就是实例.</li>\n</ul>\n<pre><code>比如 “学生” 可以是一个类, 因为它描述了学生这一群体事物, 而具体的”3年级的小明” 就是一个对象, 相同的 “4年级的小花” 也是一个学生对象. \n</code></pre><h2 id=\"5-2-3-类和对象的关系\"><a href=\"#5-2-3-类和对象的关系\" class=\"headerlink\" title=\"5.2.3 类和对象的关系\"></a>5.2.3 类和对象的关系</h2><blockquote>\n<p>   类是描述事物的, 一旦描述清楚, 就可以代表一类事物了, 但是类只是概念, 要想使用实体, 必须要有对象, 但是从时间的先后顺序来讲, 是先有类, 才有的对象, 因为类就像是一个模板, 而对象就像是用这个模板制造出来的产品, 如前面图示所描述的, 汽车设计图是一个模板, 一旦有了这个模板, 就可以使用设计图, 无限制地制造汽车了.<br>    在这个过程中, 类的设计是更重要的, 就像现实中也是汽车设计师的工资通常比实施工人要高.</p>\n</blockquote>\n<pre><code>![](https://i.loli.net/2019/05/27/5cebb35d6dbec82796.jpg)\n</code></pre><h2 id=\"5-2-4-类的语法格式\"><a href=\"#5-2-4-类的语法格式\" class=\"headerlink\" title=\"5.2.4 类的语法格式\"></a>5.2.4 类的语法格式</h2><p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603234818.png\" alt></p>\n<p>示例代码 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString name;\t\t\t// 在类中声明的变量 name, 此时就是属性, 也称为成员变量, 描述人有名字</span><br><span class=\"line\">\tint age ;\t            // 在类中声明的变量 age, 此时就是属性, 也称为成员变量, 描述人有年龄</span><br><span class=\"line\">\t</span><br><span class=\"line\">    public void play() &#123;    // 声明方法play(), 也称为成员方法, 表示人会玩</span><br><span class=\"line\">\t\tage = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-3-属性\"><a href=\"#5-3-属性\" class=\"headerlink\" title=\"5.3 属性\"></a>5.3 属性</h1><h2 id=\"5-3-1语法格式：\"><a href=\"#5-3-1语法格式：\" class=\"headerlink\" title=\"5.3.1语法格式：\"></a>5.3.1语法格式：</h2><p>修饰符  类型  属性名 = 初值 ; </p>\n<ul>\n<li>说明:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符private : 该属性只能由该类的方法访问。</span><br><span class=\"line\">\t        修饰符public : 该属性可以被该类以外的方法访问。    </span><br><span class=\"line\">            类型：任何基本类型，如int、boolean或任何引用类型。</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3-2举例：\"><a href=\"#5-3-2举例：\" class=\"headerlink\" title=\"5.3.2举例：\"></a>5.3.2举例：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person&#123;</span><br><span class=\"line\">\tprivate int age;                  // 声明private变量 age</span><br><span class=\"line\">\tpublic String name = “Lila”;    // 声明public变量 name</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.属性的使用：<br>属性通常是要隶属于某个对象来使用的, 也就是说要想使用属性, 必须要先创建对象, 创建对象的语法很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类名 引用变量名 = new 类名();</span><br></pre></td></tr></table></figure>\n<p>对象创建好以后, 就可以通过引用变量名来使用对象了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用变量名.name = “Jack”;</span><br><span class=\"line\">System.out.println(引用变量名.name);</span><br></pre></td></tr></table></figure>\n<p>属性的使用和普通变量没有区别, 唯一的区别就在于属性是隶属于某个对象了.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString name; // 实例变量</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher();</span><br><span class=\"line\">\t\tt.name = &quot;李二狗&quot;; // 把”李二狗”值赋给t对象的属性name</span><br><span class=\"line\">\t\tSystem.out.println(t.name); // 打印t对象的name属性值, 输出就是”李二狗”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-4-方法\"><a href=\"#5-4-方法\" class=\"headerlink\" title=\"5.4 方法\"></a>5.4 方法</h1><h2 id=\"5-4-1-方法的概念\"><a href=\"#5-4-1-方法的概念\" class=\"headerlink\" title=\"5.4.1 方法的概念\"></a>5.4.1 方法的概念</h2><p>1  什么是方法</p>\n<ul>\n<li>方法是类或对象行为特征的抽象，也称为函数。 </li>\n<li>Java里的方法不能独立存在，所有的方法必须定义在类里。<br>方法也可以描述为是某个功能的执行体, 一个方法通常对应一个功能.</li>\n</ul>\n<p>2 为什么使用方法</p>\n<blockquote>\n<p>比如要想完成某种功能, 需要执行10行代码, 我们在程序中需要这个功能时,就把这10行代码写出来就可以了, 但是如果要多次使用这个功能, 虽然可以通过复制这10行代码的方式来完成功能, 但是效率低, 并且不利于维护. 所以我们通常把具有特定独立功能的一些代码封装到一个方法中, 这样, 只需要简单地调用这个方法就可以自动完成功能了.</p>\n</blockquote>\n<p>3  方法和属性的关系</p>\n<blockquote>\n<p>Java里的方法不能独立存在，所有的方法必须定义在类里, 而属性也是定义在类里的, 所以方法和属性都是隶属于类的, 方法和属性是平等的关系.</p>\n<ul>\n<li>属性用于描述事物的特征数据.</li>\n<li>方法用于描述事物的功能行为.</li>\n</ul>\n</blockquote>\n<h2 id=\"5-4-2-方法的声明与调用\"><a href=\"#5-4-2-方法的声明与调用\" class=\"headerlink\" title=\"5.4.2 方法的声明与调用\"></a>5.4.2 方法的声明与调用</h2><ol>\n<li>方法的声明语法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名（参数类型 形参1，参数类型 形参2，….）｛</span><br><span class=\"line\">  \t程序代码</span><br><span class=\"line\">  \treturn 返回值;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<p>其中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">形式参数：在方法被调用时用于接收外部传入的数据的变量。</span><br><span class=\"line\">参数类型：就是该形式参数的数据类型。</span><br><span class=\"line\">返回值：方法在执行完毕后返还给调用它的程序的数据。</span><br><span class=\"line\">返回值类型：方法要返回的结果的数据类型。</span><br><span class=\"line\">实际参数：调用方法时实际传给函数形式参数的数据。</span><br></pre></td></tr></table></figure></p>\n<p>注意 : </p>\n<blockquote>\n<ul>\n<li>一个类中可以有多个方法。</li>\n<li>方法中只能调用方法，不可以在方法内部定义方法。</li>\n<li>方法声明不是方法调用</li>\n</ul>\n</blockquote>\n<ul>\n<li>如果某个方法只是单纯的执行一些代码, 并没有计算结果返回, 那么返回值类型就是void</li>\n<li>表示方法没有返回值, 此时方法中的return可以省略, 或者也可以仅使用return; 表示方法结束.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    System.out.println(“test()”);</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2  方法的声明的构成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法声明的构成包括 方法签名 + 方法体</span><br></pre></td></tr></table></figure></p>\n<p>3  方法签名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法签名包括 返回值类型 方法名(形参类型1 形参1, 形参类型2 形参2…)</span><br><span class=\"line\">方法名作用是用于定位方法是哪一个, 因为在一个类中可以有多个方法.</span><br><span class=\"line\">参数列表表示方法在执行时需要的数据, 参数列表也可以为空, 表示方法执行时不需要数据.</span><br></pre></td></tr></table></figure></p>\n<p>如上例中的<code>int add(int a, int b)</code><br>4  方法体<br>方法体就是方法签名后面的{}以及其中的所有内容, 方法体才是方法在调用时实际执行的代码<br>那么方法签名的作用是什么呢? 签名是一个方法调用的参考, 方法在调用时应该严格按照方法签名来调用, 以防止出错.</p>\n<p>如上面例子中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5  方法的调用<br>方法可以任何可以有语句的位置调用, 比如另一个方法中, 或另一个类的某方法中<br>调用语法是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象引用.方法名(实参值1, 实参值2…);</span><br></pre></td></tr></table></figure></p>\n<p>对象引用是方法所在的类的对象, 实参值1, 2 是根据方法签名中要求的数据类型而实际传递给方法的值. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    System.out.println(“a + b”);</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    System.out.println(“test()”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">\t\tt.test(); // 当执行程序时, 打印输出”test()”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6 方法的返回值<br>有的方法会返回一个结果值, 如上面的方法int add(int a, int b)<br>如果直接调用这个方法, 而不接收其返回值, 这个方法会执行并返回结果, 但是在main方法中没有保存, 返回值结果被丢弃了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">\t\tt.add(100, 200); // 如果这样调用, 只会打印输出”a + b”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法的返回值就是方法调用本身, 如上例中方法调用整体t.add(100,200) 就可以看作是300这个值了, 当然, 前提是方法必须先都执行完才能返回300, 所以我们可以选择接收返回值.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">\t\tint n = t.add(100, 200); //这样调用, 会打印输出”a + b” 并把300保存在n中</span><br><span class=\"line\">        System.out.println(n); //输出300</span><br><span class=\"line\">        System.out.println(t.add(30, 50)); // 输出80</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-4-3-重载\"><a href=\"#5-4-3-重载\" class=\"headerlink\" title=\"5.4.3 重载\"></a>5.4.3 重载</h2><h3 id=\"1-重载的概念\"><a href=\"#1-重载的概念\" class=\"headerlink\" title=\"1  重载的概念\"></a>1  重载的概念</h3><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数不同即可。</p>\n<p>参数不同的含义是仅参数个数不同 或者 类型不同 或者 顺序不同.</p>\n<p>注意 :<br>    参数不同不包含参数名的不同.</p>\n<h3 id=\"2-如何重载\"><a href=\"#2-如何重载\" class=\"headerlink\" title=\"2  如何重载\"></a>2  如何重载</h3><p>在同一个类中写同名方法, 保证参数不同即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 这个方法就可以和下面2个方法形成重载</span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    System.out.println(“a + b”);</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public double add(int a, double b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public double add(double a, int b) &#123;</span><br><span class=\"line\">    return a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void test() &#123;</span><br><span class=\"line\">    System.out.println(“test()”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-重载的方法的调用\"><a href=\"#3-重载的方法的调用\" class=\"headerlink\" title=\"3  重载的方法的调用\"></a>3  重载的方法的调用</h3><p>调用重载方法取决于实参列表, 和形参列表要匹配才可以, 或者也可以是被形参列表兼容.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">        System.out.println(t.add(30, 50)); // 调用 int add(int a, int b)</span><br><span class=\"line\">System.out.println(t.add(209, 0.502)); // 调用 double add(int a, double b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-重载的作用\"><a href=\"#4-重载的作用\" class=\"headerlink\" title=\"4  重载的作用\"></a>4  重载的作用</h3><p>在调用同名方法时, 只需要实参不同即可, 调用者调用这个方法就变得简单, 也不用再记忆多个不同的方法名. 前提是这些重载的方法有类似的功能.</p>\n<h3 id=\"5-重载的练习\"><a href=\"#5-重载的练习\" class=\"headerlink\" title=\"5  重载的练习\"></a>5  重载的练习</h3><p>1.判 断：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与void show(int a,char b,double c)&#123;&#125;构成重载的有：</span><br><span class=\"line\">a)\tvoid show(int x,char y,double z)&#123;&#125;   </span><br><span class=\"line\">b)\tint show(int a,double c,char b)&#123;&#125;   </span><br><span class=\"line\">c)  void show(int a,double c,char b)&#123;&#125;  </span><br><span class=\"line\">d)  boolean show(int c,char b)&#123;&#125;  </span><br><span class=\"line\">e)  void show(double c)&#123;&#125;  </span><br><span class=\"line\">f)  double show(int x,char y,double z)&#123;&#125;  </span><br><span class=\"line\">g)  void shows(double c)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-4-4-参数传递机制\"><a href=\"#5-4-4-参数传递机制\" class=\"headerlink\" title=\"5.4.4 参数传递机制\"></a>5.4.4 参数传递机制</h2><h3 id=\"1-为什么要传参\"><a href=\"#1-为什么要传参\" class=\"headerlink\" title=\"1  为什么要传参\"></a>1  为什么要传参</h3><p>有的方法在执行时, 需要用到一些值, 这些值在执行时必须要由调用者传递(告诉)给方法, 方法才可以正确执行</p>\n<h3 id=\"2-传参的本质是什么\"><a href=\"#2-传参的本质是什么\" class=\"headerlink\" title=\"2  传参的本质是什么\"></a>2  传参的本质是什么</h3><p>传参的本质是方法在调用时, 把实参的值赋值给形参(形参是局部变量), 也称为传值调用</p>\n<h3 id=\"3-方法调用的内存结构\"><a href=\"#3-方法调用的内存结构\" class=\"headerlink\" title=\"3  方法调用的内存结构\"></a>3  方法调用的内存结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">public void test2(int a) &#123;</span><br><span class=\"line\">    System.out.println(“test2 a:” + a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public int add(int a, int b) &#123;</span><br><span class=\"line\">    System.out.println(“a + b”);</span><br><span class=\"line\">    int c = a + b;</span><br><span class=\"line\">    return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class PersonTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tPerson t = new Person();</span><br><span class=\"line\">        int a = 10;</span><br><span class=\"line\">        int b = 20;</span><br><span class=\"line\">        int c = t.add(a, b); // 通过值传递把a的值赋值给方法中的形参a</span><br><span class=\"line\">System.out.println(c); // 方法调用返回值也是赋值给c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2019/05/27/5cebb35dd6b9396075.jpg\" alt></p>\n<p>注意 : 方法返回值30保存在一个临时空间中, 方法调用结束后返回给调用者后就消失.</p>\n<h2 id=\"5-4-5-可变参数\"><a href=\"#5-4-5-可变参数\" class=\"headerlink\" title=\"5.4.5 可变参数\"></a>5.4.5 可变参数</h2><h3 id=\"1-什么是可变参数\"><a href=\"#1-什么是可变参数\" class=\"headerlink\" title=\"1  什么是可变参数\"></a>1  什么是可变参数</h3><blockquote>\n<p>当一个方法中的参数类型都相同, 但是个数不确定的情况下.</p>\n</blockquote>\n<h3 id=\"2-如何声明可变参数\"><a href=\"#2-如何声明可变参数\" class=\"headerlink\" title=\"2 如何声明可变参数\"></a>2 如何声明可变参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面采用数组形参来定义方法</span><br><span class=\"line\">public void test(int a ,String[] books);</span><br><span class=\"line\">//以可变个数形参来定义方法</span><br><span class=\"line\">public void test(int a ,String…books);</span><br></pre></td></tr></table></figure>\n<p>注意 : 以上两个方法不可以共存.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class VarArgs &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/*类中的方法的功能类似, 但是参数个数不确定</span><br><span class=\"line\">\tpublic int avg(int a, int b) &#123;</span><br><span class=\"line\">\t\treturn (a + b) / 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int avg(int a, int b, int c) &#123;</span><br><span class=\"line\">\t\treturn (a + b + c) / 3;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic int avg(int a, int b, int c, int d) &#123;</span><br><span class=\"line\">\t\treturn (a + b + c + d) / 4;</span><br><span class=\"line\">\t&#125;*/</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 可变参数, 参数的个数可以是任意个, 只能放在参数列表的最后</span><br><span class=\"line\">\tpublic int avg(String a, int... values) &#123; // int...是数组, 同时又能兼容任意个数参数</span><br><span class=\"line\">\t\tint sum = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; values.length; i++) &#123;</span><br><span class=\"line\">\t\t\tsum += values[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn sum / values.length;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-可变参数的本质是什么\"><a href=\"#3-可变参数的本质是什么\" class=\"headerlink\" title=\"3 可变参数的本质是什么\"></a>3 可变参数的本质是什么</h3><blockquote>\n<p>可变参数的本质上是方法在调用时, 实际传递的是数组.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class VarArgsTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String... args) &#123; </span><br><span class=\"line\">VarArg va = new VarArg();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(va.avg(2)); // 一个参数可以</span><br><span class=\"line\">\t\tSystem.out.println(va.avg()); // 不传参数也可以</span><br><span class=\"line\">System.out.println(va.avg(null)); // 传null也可以</span><br><span class=\"line\">\t\tSystem.out.println(va.avg(10, 20, 40, 50)); // 任意多个也可以</span><br><span class=\"line\">\t\tSystem.out.println(va.avg(10, 20, 40, 50,70, 80, 100, 5, 2, 3));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int[] arr = new int[]&#123;2, 3, 4, 5&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(va.avg(arr)); // 直接传数组也可以</span><br><span class=\"line\">\tSystem.out.println(va.avg(new int[]&#123;10, 20&#125;)); // 编译器会自动做这件事,也可以手工创建数组</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-5-对象的使用\"><a href=\"#5-5-对象的使用\" class=\"headerlink\" title=\"5.5 对象的使用\"></a>5.5 对象的使用</h1><h2 id=\"5-5-1-创建对象\"><a href=\"#5-5-1-创建对象\" class=\"headerlink\" title=\"5.5.1 创建对象\"></a>5.5.1 创建对象</h2><h3 id=\"1-关键字new\"><a href=\"#1-关键字new\" class=\"headerlink\" title=\"1 关键字new\"></a>1 关键字new</h3><p>类一旦写好了, 就可以使用关键字new创建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;\t</span><br><span class=\"line\">\tString name; // 对象属性</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void eat(String something) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">\tpublic String say() &#123;</span><br><span class=\"line\">\t\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\t\treturn str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); // 对象创建</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-对象创建在哪里了\"><a href=\"#2-对象创建在哪里了\" class=\"headerlink\" title=\"2  对象创建在哪里了\"></a>2  对象创建在哪里了</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher t = new Teacher();</span><br></pre></td></tr></table></figure>\n<p>在这里t是什么呢? 是不是对象呢? 答案是否定的, t仅仅是一个引用变量, 什么是引用变量? 就是保存地址的一个特殊变量, 同时它也有类型, 表明它指向的对象的类型是Teacher类型的. 但是上面的对象的使用全是通过t来完成的, 原因就在于通过t可以定位对象的实体, 对象的实体是保存在堆内存中.</p>\n<h3 id=\"3-对象包含哪些内容\"><a href=\"#3-对象包含哪些内容\" class=\"headerlink\" title=\"3  对象包含哪些内容\"></a>3  对象包含哪些内容</h3><p>当一个对象被创建时, 这个对象就会包含类中所有的属性值, 如上面的例子, Teacher属性中有String name, 和 int age属性, 所以对象中包含了两个数据: 一个是name, 一个是age</p>\n<h2 id=\"5-5-2-使用对象\"><a href=\"#5-5-2-使用对象\" class=\"headerlink\" title=\"5.5.2 使用对象\"></a>5.5.2 使用对象</h2><h3 id=\"1-使用属性\"><a href=\"#1-使用属性\" class=\"headerlink\" title=\"1  使用属性\"></a>1  使用属性</h3><p>通过引用修改对象的属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString name; // 对象属性</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void eat(String something) &#123;</span><br><span class=\"line\">System.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); </span><br><span class=\"line\">        t.name = “张三”;</span><br><span class=\"line\">        t.age = 30;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”张三”</span><br><span class=\"line\">System.out.println(t.age); // 输出30</span><br><span class=\"line\"></span><br><span class=\"line\">t.name = “张四”;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”张四”</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-调用方法\"><a href=\"#2-调用方法\" class=\"headerlink\" title=\"2  调用方法\"></a>2  调用方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Teacher &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString name; // 对象属性</span><br><span class=\"line\">\tint age;</span><br><span class=\"line\">\tString gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对象方法</span><br><span class=\"line\">public void lesson() &#123;</span><br><span class=\"line\">    System.out.println(name + “老师在上课”);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public void eat(String something) &#123;</span><br><span class=\"line\">System.out.println(&quot;老师在吃&quot; + something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 描述对象的详细信息, 把所有的属性值串接成一个字符串</span><br><span class=\"line\">public String say() &#123;</span><br><span class=\"line\">\tString str = &quot;姓名:&quot; + name + &quot;,年龄:&quot; + age + &quot;,性别:&quot; + gender;</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t = new Teacher(); </span><br><span class=\"line\">        t.name = “张三”;</span><br><span class=\"line\">        t.age = 30;</span><br><span class=\"line\">        t.gender = “男”;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”张三”</span><br><span class=\"line\">System.out.println(t.age); // 输出30</span><br><span class=\"line\"></span><br><span class=\"line\">t.name = “李三”;</span><br><span class=\"line\">        System.out.println(t.name); // 输出”李三”</span><br><span class=\"line\"></span><br><span class=\"line\">        t.lesson(); // 输出 李三老师在上课 // 思考, 为什么不是输出张三老师在上课?</span><br><span class=\"line\">        t.eat(“鱼香肉丝”); // 输出 &quot;老师在吃鱼香肉丝&quot;</span><br><span class=\"line\">System.out.println(t.say()); // 输出 “姓名: 李三,年龄:30,性别:男”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-5-3-对象的独立性\"><a href=\"#5-5-3-对象的独立性\" class=\"headerlink\" title=\"5.5.3 对象的独立性\"></a>5.5.3 对象的独立性</h2><h3 id=\"1-同一个类创建多个对象\"><a href=\"#1-同一个类创建多个对象\" class=\"headerlink\" title=\"1  同一个类创建多个对象\"></a>1  同一个类创建多个对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t1 = new Teacher(); </span><br><span class=\"line\">        t1.name = “张三”;</span><br><span class=\"line\">        t1.age = 30;</span><br><span class=\"line\">        t1.gender = “男”;</span><br><span class=\"line\">        System.out.println(t1.name); // 输出”张三”</span><br><span class=\"line\">System.out.println(t1.age); // 输出30</span><br><span class=\"line\">System.out.println(t1.gender); // 输出”男”</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t2 = new Teacher(); </span><br><span class=\"line\">        t2.name = “李四”;</span><br><span class=\"line\">        t2.age = 40;</span><br><span class=\"line\">        t2.gender = “女”;</span><br><span class=\"line\">        System.out.println(t2.name); // 输出”李四”</span><br><span class=\"line\">System.out.println(t2.age); // 输出40</span><br><span class=\"line\">System.out.println(t2.gender); // 输出”女”</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅可以创建两个对象, 可以创建任意多个对象, 前提是内存有空间.</p>\n<h3 id=\"2-对象之间的关系\"><a href=\"#2-对象之间的关系\" class=\"headerlink\" title=\"2  对象之间的关系\"></a>2  对象之间的关系</h3><ul>\n<li>对象之间是独立的, 如上例子中, t1是一个独立的对象, t2也是一个独立的对象, 两者互不干扰.</li>\n<li>但是两个对象都是Teacher类型的, 所以它们的共同点是隶属于同一个类, 拥有类似的属性</li>\n<li>同一个类的不同对象虽然是独立的, 但是它们所占用的内存空间大小是一样的.</li>\n</ul>\n<h3 id=\"3-对象交换\"><a href=\"#3-对象交换\" class=\"headerlink\" title=\"3 对象交换\"></a>3 对象交换</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tTeacher t1 = new Teacher(); </span><br><span class=\"line\">        t1.name = “张三”;</span><br><span class=\"line\">        t1.age = 30;</span><br><span class=\"line\">        System.out.println(t1.name); // 输出”张三”</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher t2 = new Teacher(); </span><br><span class=\"line\">        t2.name = “李四”;</span><br><span class=\"line\">        t2.age = 40;</span><br><span class=\"line\">        System.out.println(t2.name); // 输出”李四”    </span><br><span class=\"line\">     // 对象的交换和普通变量的交换类似</span><br><span class=\"line\">     // 需要声明一个临时变量</span><br><span class=\"line\">        Teacher tmp = t1;</span><br><span class=\"line\">        t1 = t2;</span><br><span class=\"line\">        t2 = tmp;</span><br><span class=\"line\">      System.out.println(t1.name); // 输出”李四” 思考 如果输出t1的年龄,是多少?</span><br><span class=\"line\">System.out.println(t2.name); // 输出”张三”</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##5.5.4 匿名对象</p>\n<h3 id=\"1-什么是匿名对象\"><a href=\"#1-什么是匿名对象\" class=\"headerlink\" title=\"1  什么是匿名对象\"></a>1  什么是匿名对象</h3><p>在创建对象后并不把对象的地址保存在引用变量中, 而是直接使用创建好的对象的引用访问成员.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TeacherTest &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123; </span><br><span class=\"line\">\t\tnew Teacher().eat(“宫暴鸡丁”);  // 后面不能再使用这个对象了</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-匿名对象特点\"><a href=\"#2-匿名对象特点\" class=\"headerlink\" title=\"2  匿名对象特点\"></a>2  匿名对象特点</h3><p>因为对象没有使用引用变量保存, 所以对象访问完成后, 就无法再次访问了</p>\n<h3 id=\"3-匿名对象作用\"><a href=\"#3-匿名对象作用\" class=\"headerlink\" title=\"3  匿名对象作用\"></a>3  匿名对象作用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a)\t适用于对象的一次性使用场景中</span><br><span class=\"line\">b)\t适用于方法调用时传递对象</span><br><span class=\"line\">c)\t适用于对象的传递(对象作为参数传递)</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-6-Java内存管理\"><a href=\"#5-6-Java内存管理\" class=\"headerlink\" title=\"5.6 Java内存管理\"></a>5.6 Java内存管理</h1><h2 id=\"5-6-1-内存分类\"><a href=\"#5-6-1-内存分类\" class=\"headerlink\" title=\"5.6.1 内存分类\"></a>5.6.1 内存分类</h2><ol>\n<li>栈和堆</li>\n</ol>\n<ul>\n<li>Java中的内存管理分为两部分, 一部分是栈, 另外一部分是堆.</li>\n<li>栈(stack)是后进先出的内存结构, 主要作用是方法调用时使用, 在内存中占用的空间比较小</li>\n<li>堆(heap)是内存的绝大部分空间, 没有特定的结构, 堆内存的特点是大.</li>\n<li>堆内存分为两部分, 一部分是方法区, 另外一部分称为GC区</li>\n</ul>\n<h1 id=\"5-6-2-垃圾回收\"><a href=\"#5-6-2-垃圾回收\" class=\"headerlink\" title=\"5.6.2 垃圾回收\"></a>5.6.2 垃圾回收</h1><ul>\n<li>什么是垃圾<blockquote>\n<p>主要是指在堆内存中的GC区中, 由于对象不再使用后, 对象所占用的空间应该被释放, 这个空间就称为垃圾, 这个对象就称为垃圾对象</p>\n</blockquote>\n</li>\n<li>垃圾如何回收<blockquote>\n<p>垃圾的回收是由GC(垃圾回收器)在后台处理, 在程序中,当某个对象不再有引用指向时, 这个对象就变为垃圾对象, 对象占用的空间就会由GC标记为可用状态, 这样,再次创建新对象时, 就可以使用这个可用空间, 从而可以实现自动的内存清理.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"5-6-3-对象创建\"><a href=\"#5-6-3-对象创建\" class=\"headerlink\" title=\"5.6.3 对象创建\"></a>5.6.3 对象创建</h2><ul>\n<li>1对象创建在哪里<br>对象创建在GC区中</li>\n<li>2对象创建过程<br>1) 在方法区中加载类模板<br>2) 依据类模板中属性的定义, 在GC区中开辟空间<br>3) 把这个空间的地址返回给对象的创建者中的引用变量</li>\n<li>3对象销毁<br>当一个对象被认定是垃圾后, 由GC在后台负责销毁此对象, 并释放内存空间.</li>\n</ul>\n<h1 id=\"5-7-对象数组\"><a href=\"#5-7-对象数组\" class=\"headerlink\" title=\"5.7 对象数组\"></a>5.7 对象数组</h1><h2 id=\"5-7-1-对象数组的声明和创建\"><a href=\"#5-7-1-对象数组的声明和创建\" class=\"headerlink\" title=\"5.7.1 对象数组的声明和创建\"></a>5.7.1 对象数组的声明和创建</h2><h3 id=\"1-动态方式\"><a href=\"#1-动态方式\" class=\"headerlink\" title=\"1  动态方式\"></a>1  动态方式</h3><p>创建方式和基本数据类型的是类似的.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用类型名称[] 数组名 = new 引用类型名称[数组长度];</span><br></pre></td></tr></table></figure></p>\n<p>注意 : 此时创建出来的数组对象中的元素都为null</p>\n<p>对象数组也称为引用数组.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher[] arr = new Teacher [4]; // 共4个元素, 但是每个元素都是null</span><br><span class=\"line\">//arr[0].lesson(); 会出现空指针异常</span><br></pre></td></tr></table></figure>\n<p>###2  静态方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">① 引用类型名称[] 数组名 = new 引用类型名称[]&#123;引用1, 引用2, 引用3…&#125;;</span><br><span class=\"line\">注意 : 右面的[]内不允许出现数组的长度</span><br><span class=\"line\">Teacher t1 = new Teacher();</span><br><span class=\"line\">Teacher t2 = new Teacher();</span><br><span class=\"line\">Teacher t3 = new Teacher();</span><br><span class=\"line\">t1.name = “张一”;</span><br><span class=\"line\">t2.name = “张二”;</span><br><span class=\"line\">t3.name = “张三”;</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher [] arr = new Teacher [] &#123;t1, t2, t3&#125;;</span><br><span class=\"line\">arr[0].lesson(); // 不会出现问题</span><br><span class=\"line\">② 引用类型名称[] 数组名 = &#123;引用1, 引用2, 引用3…&#125;;</span><br><span class=\"line\">注意 : 此方式虽然简单, 但是它只能用于声明和创建必须在同一行语句中的情况.</span><br><span class=\"line\">Teacher t1 = new Teacher();</span><br><span class=\"line\">Teacher t2 = new Teacher();</span><br><span class=\"line\">Teacher t3 = new Teacher();</span><br><span class=\"line\">t1.name = “张一”;</span><br><span class=\"line\">t2.name = “张二”;</span><br><span class=\"line\">t3.name = “张三”;</span><br><span class=\"line\"></span><br><span class=\"line\">Teacher [] arr = &#123;t1, t2, t3&#125;;</span><br><span class=\"line\">// arr = &#123;t2, t3&#125;; // 这样不可以</span><br><span class=\"line\">arr[0].lesson(); // 不会出现问题</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-7-2-对象数组的使用\"><a href=\"#5-7-2-对象数组的使用\" class=\"headerlink\" title=\"5.7.2 对象数组的使用\"></a>5.7.2 对象数组的使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Teacher[] arr = new Teacher [3]; // 共3个元素, 但是每个元素都是null</span><br><span class=\"line\"></span><br><span class=\"line\">arr[0] = new Teacher();</span><br><span class=\"line\">arr[1] = new Teacher();</span><br><span class=\"line\">arr[2] = new Teacher();</span><br><span class=\"line\">arr[0].name = “张一”;</span><br><span class=\"line\">arr[1].name = “张二”;</span><br><span class=\"line\">arr[2].name = “张三”;</span><br><span class=\"line\"></span><br><span class=\"line\">for (Teacher t : arr) &#123;</span><br><span class=\"line\">    System.out.println(t.name); // 访问</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"4. JavaSE-数组","url":"http://yoursite.com/2016/08/25/4. JavaSE-数组/","content":"<h1 id=\"4-1-数组的特点和好处\"><a href=\"#4-1-数组的特点和好处\" class=\"headerlink\" title=\"4.1 数组的特点和好处\"></a>4.1 数组的特点和好处</h1><h2 id=\"4-1-1-数组的特点\"><a href=\"#4-1-1-数组的特点\" class=\"headerlink\" title=\"4.1.1 数组的特点\"></a>4.1.1 数组的特点</h2><p>1、数组存储的是相同类型的一组元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double[] arr = &#123;1.6,2.3,1,2,&apos;a&apos;&#125;;</span><br></pre></td></tr></table></figure>\n<p>2、数组的定义类型可以是任意类型，包含基本类型或引用类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] arr = &#123;&quot;john&quot;,&quot;lucy&quot;&#125;;</span><br><span class=\"line\">Person[] arr;</span><br><span class=\"line\">int[][] arr;</span><br><span class=\"line\">Person[][] arr;</span><br></pre></td></tr></table></figure></p>\n<p>3、数组属于引用类型，引用存储在栈中，值存储在堆中，又称为对象。</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5ceba4934773730896.jpg\" alt></p>\n<p>4、数组的成员如果不赋值，有默认值。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte/short/int/long——&gt;0</span><br><span class=\"line\">    float/double——&gt;0.0</span><br><span class=\"line\">    char——&gt;\\u0000</span><br><span class=\"line\">    boolean——&gt;false</span><br><span class=\"line\">    String——&gt;null</span><br></pre></td></tr></table></figure>\n<p>5、数组的四要素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型、标识符、元素、下标（0——数组名.length-1）</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-1-2-数组的好处\"><a href=\"#4-1-2-数组的好处\" class=\"headerlink\" title=\"4.1.2 数组的好处\"></a>4.1.2 数组的好处</h2><p>说明：相当于用于保存一组元素的容器<br>好处：<br>1、提高代码的简洁性和扩展性，且同时开辟多个空间，提高了效率<br>2、分类存储，且空间是连续的，容易查找</p>\n<h1 id=\"4-2-数组的语法和使用步骤\"><a href=\"#4-2-数组的语法和使用步骤\" class=\"headerlink\" title=\"4.2 数组的语法和使用步骤\"></a>4.2 数组的语法和使用步骤</h1><h2 id=\"4-2-1-动态初始化\"><a href=\"#4-2-1-动态初始化\" class=\"headerlink\" title=\"4.2.1 动态初始化\"></a>4.2.1 动态初始化</h2><p>针对题型：声明时不确定值是什么<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">步骤1、声明</span><br><span class=\"line\">数据类型[] 数组名;或</span><br><span class=\"line\">数据类型 数组名[];</span><br><span class=\"line\"></span><br><span class=\"line\">步骤2、开辟空间</span><br><span class=\"line\">数组名 = new 数据类型[长度];//长度不能省略</span><br><span class=\"line\"></span><br><span class=\"line\">步骤3、赋值</span><br><span class=\"line\">方式一：一个个赋值</span><br><span class=\"line\">数组名[下标] = 值;</span><br><span class=\"line\">方式二：循环赋值</span><br><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">\t数组名[i] = 值;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">步骤4、使用</span><br><span class=\"line\">System.out.println(数组名[下标]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-2-静态初始化\"><a href=\"#4-2-2-静态初始化\" class=\"headerlink\" title=\"4.2.2 静态初始化\"></a>4.2.2 静态初始化</h2><p>针对题型：声明时就知道值是什么<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">步骤1、声明并初始化</span><br><span class=\"line\">数据类型 数组名[] = new 数据类型[]&#123;值，值，值&#125;;或</span><br><span class=\"line\">数据类型[] 数组名 = &#123;值，值，值&#125;;</span><br><span class=\"line\">步骤2、使用</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-3-使用注意事项\"><a href=\"#4-2-3-使用注意事项\" class=\"headerlink\" title=\"4.2.3 使用注意事项\"></a>4.2.3 使用注意事项</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">①数组的下标：0——arr.length-1,如果超出范围，</span><br><span class=\"line\">则报ArrayIndexOutOfBoundsException</span><br><span class=\"line\">②数组的成员如果不手动赋值，也有默认值</span><br><span class=\"line\">int——0</span><br><span class=\"line\">double——0.0</span><br><span class=\"line\">char——\\u0000</span><br><span class=\"line\">boolean——false</span><br><span class=\"line\">引用类型——null</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-3-数组的使用\"><a href=\"#4-3-数组的使用\" class=\"headerlink\" title=\"4.3 数组的使用\"></a>4.3 数组的使用</h1><h2 id=\"4-3-1-正序打印\"><a href=\"#4-3-1-正序打印\" class=\"headerlink\" title=\"4.3.1 正序打印\"></a>4.3.1 正序打印</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   System.out.println(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-2-逆序打印\"><a href=\"#4-3-2-逆序打印\" class=\"headerlink\" title=\"4.3.2 逆序打印\"></a>4.3.2 逆序打印</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=arr.length-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-3-求和、平均值\"><a href=\"#4-3-3-求和、平均值\" class=\"headerlink\" title=\"4.3.3 求和、平均值\"></a>4.3.3 求和、平均值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sum = 0;</span><br><span class=\"line\">for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">  sum+=arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum:和  aum/arr.length平均值</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-4-求最值\"><a href=\"#4-3-4-求最值\" class=\"headerlink\" title=\"4.3.4 求最值\"></a>4.3.4 求最值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max = arr[0];</span><br><span class=\"line\">int indexMax = 0;</span><br><span class=\"line\">int min = arr[0];</span><br><span class=\"line\">int indexMin = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">for(int i=1;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">   if(arr[i]&gt;max)&#123;</span><br><span class=\"line\">     max = arr[i];</span><br><span class=\"line\">     indexMax = i;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   if(arr[i]&lt;min)&#123;</span><br><span class=\"line\">     min = arr[i];</span><br><span class=\"line\">     indexMin = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>max:最大值<br>min：最小值</p>\n<h2 id=\"4-3-5-查找\"><a href=\"#4-3-5-查找\" class=\"headerlink\" title=\"4.3.5 查找\"></a>4.3.5 查找</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int index=-1;</span><br><span class=\"line\">for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if(arr[i]==带查找的元素)&#123;</span><br><span class=\"line\">       index = i;</span><br><span class=\"line\">       break;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(index==-1)&#123;//没找到&#125;else&#123;找到了&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-6-排序\"><a href=\"#4-3-6-排序\" class=\"headerlink\" title=\"4.3.6 排序\"></a>4.3.6 排序</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;arr.length-1;i++)&#123;</span><br><span class=\"line\">  for(int j=0;j&lt;arr.length-1-i;j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     if(arr[j]&gt;arr[j+1])&#123;</span><br><span class=\"line\">       int t = arr[j];</span><br><span class=\"line\">       arr[j] = arr[j+1];</span><br><span class=\"line\">       arr[j+1]=t;</span><br><span class=\"line\">  &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-7赋值\"><a href=\"#4-3-7赋值\" class=\"headerlink\" title=\"4.3.7赋值\"></a>4.3.7赋值</h2><p>特点：</p>\n<ul>\n<li>基本类型变量的赋值：赋的是值，其中一个更改不影响另外一个</li>\n<li>引用类型变量的赋值：赋的是地址，二者共同引用一个空间，其中一个更改影响另外一个</li>\n</ul>\n<blockquote>\n<p>如果希望赋的是值（内容），则可以采用循环赋值</p>\n<ul>\n<li>方式一：传统的使用 = 赋值<br><code>newArr = arr;</code></li>\n<li>方式二：循环赋值<br>`①创建新数组，长度=旧数组.length<br>int[] newArr = new int[arr.length];<br>②循环将旧数组的元素依次赋值给新数组的每个成员<br>for(int i=0;i&lt;newArr.length;i++){<br>  newArr[i] = arr[i];<br>}</li>\n</ul>\n</blockquote>\n<p> `</p>\n<h1 id=\"4-4二维数组\"><a href=\"#4-4二维数组\" class=\"headerlink\" title=\"4.4二维数组\"></a>4.4二维数组</h1><h2 id=\"4-4-1-特点\"><a href=\"#4-4-1-特点\" class=\"headerlink\" title=\"4.4.1 特点\"></a>4.4.1 特点</h2><ul>\n<li>二维数组本身属于也能用类型，保存的也是地址号</li>\n<li>二维数组相当于多个一维数组的组合，也就是二维数组中的每个元素又是一个一维数组</li>\n</ul>\n<h2 id=\"4-4-2-使用步骤\"><a href=\"#4-4-2-使用步骤\" class=\"headerlink\" title=\"4.4.2 使用步骤\"></a>4.4.2 使用步骤</h2><ul>\n<li>1、动态初始化</li>\n</ul>\n<p>步骤1 :声明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">格式1：数据类型[][] 数组名;</span><br><span class=\"line\">\t格式2：数据类型[] 数组名[];</span><br><span class=\"line\">格式3:数据类型 数组名[][];</span><br></pre></td></tr></table></figure></p>\n<p>步骤2:开辟空间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式1：固定列数</span><br><span class=\"line\">数组名 = new 数据类型[行数][列数];</span><br><span class=\"line\">//行数相当于二维数组的长度或一维数组的个数，列数相当于每个一维数组中的成员个数</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">格式2：不固定列数</span><br><span class=\"line\">数组名 = new 数据类型[行数][];</span><br><span class=\"line\">前两步可以合二为一</span><br><span class=\"line\">语法示例：</span><br><span class=\"line\">int[][] arr = new int[5][];</span><br></pre></td></tr></table></figure></p>\n<p>步骤3:赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式1：固定列数</span><br><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     数组名[i][j] = 值;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">格式2：不固定列数</span><br><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   数组名[i]=new 数据类型[长度];//长度不能省略！</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     数组名[i][j] = 值;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>步骤4、使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     System.out.println(数组名[i][j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>2、静态初始化</li>\n</ul>\n<p>步骤1、声明并初始化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型[][] 数组名 =&#123;&#123;值，值&#125;,&#123;值，值，值&#125;&#125;;或</span><br><span class=\"line\">数据类型[][] 数组名 =new 数据类型[][]&#123;&#123;值，值&#125;,&#123;值，值，值&#125;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>步骤2、使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=0;i&lt;数组名.length;i++)&#123;</span><br><span class=\"line\">   for(int j=0;j&lt;数组名[i].length;j++)&#123;</span><br><span class=\"line\">     System.out.println(数组名[i][j]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"你总要学会，自己去面对所有的难","url":"http://yoursite.com/2016/08/15/鸡汤-你总要学会，自己去面对所有的难/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609011450.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;不知你是否有这样的时刻：其实没遭到什么打击，没遇到什么挫折，也没受到什么重创，就是莫名感到情绪低落，莫名地提不起劲，莫名地想要逃离周围的一切。</p>\n<p>&emsp;&emsp;一个读者跟我说，他有个习惯，就是下班后总是会晚半小时才回家。他通常就是在办公室静静地坐着，喝口茶，听听音乐，又或者翻几页书。</p>\n<p>&emsp;&emsp;大概工作的压力、家庭的琐碎以及人情世故的复杂，让他感到有些疲惫吧。这短暂独处的时间，恰恰是他给自己的一个缓冲和调节。</p>\n<blockquote>\n<ul>\n<li>有人说，成年人的世界里没有“容易”二字。谁都是一路学着坚强、学着忍耐、学着跟一切不如意对抗。但有时，总有一些微不足道的小事能把我们压倒，总有一些鸡零狗碎的困惑会把我们困住。让我们痛苦的，往往不是难以逾越的高山大海，而是脚底下的一捧细沙。</li>\n</ul>\n</blockquote>\n<p>&emsp;&emsp;我们也想过松懈和放弃，但我们更清楚地知道，不撑住，只会更难。</p>\n<p>&emsp;&emsp;所以，我们学会了不动声色地安慰自己，也学会了悄无声息地跟生活握手言和。</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;有人说，年龄越大，越沉默。因为有些话，找不到对的那个人说；有些苦，没有人能感同身受；有些累，并不是人人都曾亲身体会。</p>\n<p>&emsp;&emsp;这段日子，我突然感到有些力不从心。一来可能是太过劳累，身体没办法给我提供足够的能量和支撑；二来可能是对自己的期望过高，总是对自己不够满意。</p>\n<p>&emsp;&emsp;遇到这样的状况，我不太喜欢诉苦，而是会选择好好吃饭，好好睡觉；该工作时工作，该读书时读书；尽量让自己不去胡思乱想，也尽量不说抱怨的话；留着所有力气让自己变美好，而不是变得更糟糕。</p>\n<p>&emsp;&emsp;不好的状态，很快就在积极的调节中得以恢复。</p>\n<blockquote>\n<ul>\n<li>许多时候，我们不愿与人倾诉自己的忧和愁，除了不愿麻烦别人，更重要的是我们慢慢学会了自我疗愈和自我勉励。</li>\n</ul>\n</blockquote>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;在社会上摸爬滚打久了你会发现，人人都有苦衷，很多时候除了学会自愈，别人帮不到你分毫。</p>\n<p>&emsp;&emsp;认识一个单亲妈妈，她白天要上班，晚上要带娃，半夜三更还要多次起床给孩子换尿布、兑奶粉、盖被子……</p>\n<p>&emsp;&emsp;刚开始的时候，她特别不适应这样超负荷的生活，总是逢人就倒苦水，也总是指责前夫不负责任，甚至一提到自己捉襟见肘的生活，眼泪就止不住地往下掉。</p>\n<p>&emsp;&emsp;后来，她渐渐找到了平衡的方法：累的时候就少说闲话、少想杂事，节省体力和精力；困的时候就见缝插针地闭目养神；心里感觉苦了，就给嘴里放块糖，不断给自己打气说，好日子还在后头呢。</p>\n<p>&emsp;&emsp;如今的她，心态越来越好，情绪越来越稳定，脸上也总是挂着灿烂的笑容。</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>&emsp;&emsp;每个人都会有沮丧的时刻，别人可以给你一时的安慰和鼓励，但它们毕竟都是有限的，最终解决问题还是要靠自己。</p>\n<blockquote>\n<ul>\n<li>每个人的生活，无论酸甜苦辣，都要每个人自己去品尝。每个人的道路，无论顺遂还是曲折，都要每个人自己去行走。</li>\n</ul>\n</blockquote>\n<p>&emsp;&emsp;你要找到适合自己的减压方式，既不能让自己安于舒适，又不能把弦绷得太紧。如此，才能在生活的千锤万击中找到平衡点。</p>\n<p>&emsp;&emsp;记得有人曾说：每一个强大的人，可能都曾咬着牙度过过一段没人帮忙、没人支持、没人嘘寒问暖的日子。过去了，这就是你的成人礼；过不去，求饶了，这就是你的无底洞。</p>\n<p>&emsp;&emsp;我们都曾渴望在受伤时、难过时、孤独无依时，得到他人的回应、理解和陪伴，我们都曾害怕面对一切艰难险阻，直到生活给了我们一道道坎，才教会了我们如何在挫折和痛苦中变得更加强大。</p>\n<blockquote>\n<ul>\n<li>我们并非生来就是强者，我们并非没有软肋，我们并非无懈可击，但我们终将学会，自己去面对所有的难。</li>\n</ul>\n</blockquote>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"3. JavaSE-流程控制结构","url":"http://yoursite.com/2016/08/12/3. JavaSE-流程控制结构/","content":"<h1 id=\"3-1顺序结构\"><a href=\"#3-1顺序结构\" class=\"headerlink\" title=\"3.1顺序结构\"></a>3.1顺序结构</h1><p>说明：程序从上往下执行<br>Java中定义成员变量时采用合法的前向引用。如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">        int num1 = 12;</span><br><span class=\"line\">        int num2 = num1 + 2; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>错误形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">       int num2 = num1 + 2； </span><br><span class=\"line\">       int num1 = 12; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-2分支结构\"><a href=\"#3-2分支结构\" class=\"headerlink\" title=\"3.2分支结构\"></a>3.2分支结构</h1><h2 id=\"3-2-1-if结构\"><a href=\"#3-2-1-if结构\" class=\"headerlink\" title=\"3.2.1  if结构\"></a>3.2.1  if结构</h2><p>1、单分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件表达式)&#123; </span><br><span class=\"line\">\t执行代码块；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结构图：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603234239.png\" alt></p>\n<p>2、双分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\"></span><br><span class=\"line\">if(条件表达式)&#123;</span><br><span class=\"line\">\t执行代码块1; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">\t执行代码块2; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结构图：</p>\n<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190603234539.png\" alt></p>\n<p>3、多重分支<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(条件表达式1)&#123; </span><br><span class=\"line\">\t执行代码块1; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      else if (条件表达式2)&#123; </span><br><span class=\"line\">\t执行代码块2; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       ……</span><br><span class=\"line\">       else&#123;</span><br><span class=\"line\">\t执行代码块n; </span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure></p>\n<p>结构图：</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5ceb7e25ee3eb98283.jpg\" alt=\"结构图\"></p>\n<h2 id=\"3-2-2-switch结构\"><a href=\"#3-2-2-switch结构\" class=\"headerlink\" title=\"3.2.2  switch结构\"></a>3.2.2  switch结构</h2><p>1、语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(表达式)&#123;</span><br><span class=\"line\">case 常量1:</span><br><span class=\"line\">\t语句1;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\">case 常量2:</span><br><span class=\"line\">\t语句2;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\">… …</span><br><span class=\"line\">case 常量N:</span><br><span class=\"line\">\t语句N;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\">default:</span><br><span class=\"line\">\t语句;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、规则</p>\n<blockquote>\n<p>①变量的类型 只能是int、byte、short、char、String（jdk1.7）、枚举（jdk1.5）<br>②case后的常量值不能重复<br>③case后不可以是变量<br>④break可以省略，但可能影响效果<br>⑤default可以省略，位置也可以提前，但可能影响效果</p>\n</blockquote>\n<p>3、执行顺序</p>\n<blockquote>\n<p>先得出switch括号中变量的值，然后依次判断各个case，如果有匹配的，则执行对应的代码块，直到遇见break为止；如果都不匹配，则执行default中的代码块n，直到遇见break为止</p>\n</blockquote>\n<h1 id=\"3-3-循环结构\"><a href=\"#3-3-循环结构\" class=\"headerlink\" title=\"3.3 循环结构\"></a>3.3 循环结构</h1><h2 id=\"3-3-1-说明\"><a href=\"#3-3-1-说明\" class=\"headerlink\" title=\"3.3.1  说明\"></a>3.3.1  说明</h2><p><strong>在满足某个特定条件的基础上，反复执行某段代码的结构</strong></p>\n<h2 id=\"3-3-2-四要素\"><a href=\"#3-3-2-四要素\" class=\"headerlink\" title=\"3.3.2 四要素\"></a>3.3.2 四要素</h2><pre><code>1、循环变量初始化\n2、循环条件\n3、循环操作\n4、循环变量更新\n</code></pre><h2 id=\"3-3-3-好处\"><a href=\"#3-3-3-好处\" class=\"headerlink\" title=\"3.3.3 好处\"></a>3.3.3 好处</h2><pre><code>1、提高代码的简洁性\n2、提高代码的维护性和扩展性\n</code></pre><h2 id=\"3-3-4-分类\"><a href=\"#3-3-4-分类\" class=\"headerlink\" title=\"3.3.4 分类\"></a>3.3.4 分类</h2><pre><code>while\ndo while\nfor\njdk5.0之后，多了增强for循环（foreach）\n</code></pre><h2 id=\"3-3-5-落地步骤\"><a href=\"#3-3-5-落地步骤\" class=\"headerlink\" title=\"3.3.5 落地步骤\"></a>3.3.5 落地步骤</h2><ul>\n<li>题型一：知道次数</li>\n</ul>\n<p>优先考虑用for<br>1、先搭框架<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int i=1;i&lt;=次数;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、分析循环操作<br>3、检测循环是否具备四要素</p>\n<ul>\n<li>题型二：不知道次数</li>\n</ul>\n<p>1、先搭框架<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while()&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2、分析循环操作和循环条件<br>3、检测循环是否具备四要素</p>\n<h2 id=\"3-3-6三种循环结构的详细介绍\"><a href=\"#3-3-6三种循环结构的详细介绍\" class=\"headerlink\" title=\"3.3.6三种循环结构的详细介绍\"></a>3.3.6三种循环结构的详细介绍</h2><p>1、while<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环变量初始化 ①</span><br><span class=\"line\"></span><br><span class=\"line\">while(循环条件)&#123; ②</span><br><span class=\"line\"></span><br><span class=\"line\">\t循环操作 ③</span><br><span class=\"line\">\t循环变量更新 ④</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行顺序：①②③④②③④….直到②不成立为止</p>\n<p>2、do while</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环变量初始化 ①</span><br><span class=\"line\">do&#123;</span><br><span class=\"line\">\t循环操作 ③</span><br><span class=\"line\">\t循环变量更新 ④</span><br><span class=\"line\">&#125;while(循环条件); ②</span><br></pre></td></tr></table></figure>\n<p>执行顺序：①③④②③④②③④…直到②不成立为止</p>\n<p>3、for<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t①          ②\t\t④</span><br><span class=\"line\">for(循环变量初始化;循环条件;循环变量更新)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t循环操作③</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行顺序：①②③④②③④….直到②不成立为止</p>\n<h2 id=\"3-3-7-三种循环结构大pk\"><a href=\"#3-3-7-三种循环结构大pk\" class=\"headerlink\" title=\"3.3.7 三种循环结构大pk\"></a>3.3.7 三种循环结构大pk</h2><ul>\n<li><p>相同点：<br>  1、都能解决任何类型的循环题目<br>  2、都具备循环四要素</p>\n</li>\n<li><p>不同点：</p>\n<p>  1、语法不同<br>  2、执行顺序不同    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while和for 先判断后执行</span><br><span class=\"line\">do while   先执行后判断</span><br></pre></td></tr></table></figure>\n<p>  3、执行效果不同<br>  如果第一次条件成立，<code>while、do while、for</code> 执行效果相同<br>  如果第一次条件不成立，<code>while、for</code> 执行0次；<code>do while</code>执行至少一次！<br>  4、执行效率不同<br>  <code>do while</code> 效率最高<br>  5、应用场景不同<br>  知道次数，优先考虑用for<br>  不知道次数，</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先判断：while</span><br><span class=\"line\">先执行：do while</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-8-嵌套循环\"><a href=\"#3-3-8-嵌套循环\" class=\"headerlink\" title=\"3.3.8 嵌套循环\"></a>3.3.8 嵌套循环</h2><p>说明：一个循环结构中又嵌套了另一个完整的循环结构<br>注意：如外层循环，执行m次；内层循环，执行n次。 内层循环的循环体最终执行 m*n次<br>经典案例：九九乘法表</p>\n<p><img src=\"https://i.loli.net/2019/05/27/5ceb7e260b1a827777.jpg\" alt></p>\n<h1 id=\"3-4-跳转结构\"><a href=\"#3-4-跳转结构\" class=\"headerlink\" title=\"3.4 跳转结构\"></a>3.4 跳转结构</h1><h2 id=\"3-4-1-break\"><a href=\"#3-4-1-break\" class=\"headerlink\" title=\"3.4.1 break\"></a>3.4.1 break</h2><p>说明：一般用在switch或循环中，跳出所在的switch或循环结构。<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(循环条件)&#123;</span><br><span class=\"line\">   if(条件)&#123;</span><br><span class=\"line\">     break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>特点：<br><strong>只能跳出所在的switch或一层循环，如果想跳出外层循环，需要添加label标签使用。</strong></p>\n<h2 id=\"3-4-2-continue\"><a href=\"#3-4-2-continue\" class=\"headerlink\" title=\"3.4.2 continue\"></a>3.4.2 continue</h2><p>说明：只能用于循环中，结束本次循环，继续下一次循环<br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(循环条件)&#123;</span><br><span class=\"line\">\tif(条件)&#123;</span><br><span class=\"line\">\t\tcontinue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>特点：<br><strong>continue如果不搭配标签，默认起作用的就是所在的一层循环。如果搭配标签，则可以跳出标签指定的循环</strong></p>\n<h2 id=\"3-4-1-return\"><a href=\"#3-4-1-return\" class=\"headerlink\" title=\"3.4.1 return\"></a>3.4.1 return</h2><p>说明：跳出所在的方法</p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"2. JavaSE-变量与运算符","url":"http://yoursite.com/2016/08/04/2. JavaSE-变量与运算符/","content":"<h1 id=\"重点-变量-amp-常见数据类型概览\"><a href=\"#重点-变量-amp-常见数据类型概览\" class=\"headerlink\" title=\"重点:变量&amp;常见数据类型概览\"></a>重点:变量&amp;常见数据类型概览</h1><p>变量的理解  </p>\n<pre><code>概念：内存中一块数据存储空间的表示。  \n</code></pre><p>变量三要素</p>\n<pre><code>数据类型\n变量名\n变量值\n</code></pre><p>变量使用步骤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式1：三步法（声明-赋值-使用）</span><br><span class=\"line\">        //步骤1：声明变量</span><br><span class=\"line\">        int age;//(内存帮我们开辟一个int大小的房间，房间名叫age)</span><br><span class=\"line\">        //步骤2：为变量赋值</span><br><span class=\"line\">        age = 18;//(将18放到名叫age的房间中)</span><br><span class=\"line\">        //步骤3：使用变量</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">        格式2：两步法（声明/赋值-使用）</span><br><span class=\"line\">        //步骤1：声明变量并赋值</span><br><span class=\"line\">        int age = 18;//(内存帮我们开辟一个int大小的房间，房间名叫age，并将值18放进去)</span><br><span class=\"line\">        //步骤2：使用变量</span><br><span class=\"line\">        System.out.println(age);</span><br></pre></td></tr></table></figure>\n<p>变量的特点</p>\n<pre><code>1、变量必须先声明、赋值后才能使用\n完全遵循：声明-赋值-使用\n2、同一个作用域内，变量不可以重名\n3、变量的值是可以变化的\n4、变量的值是临时存储的，遵循内存的特点：易失性\n</code></pre><p>常见数据类型</p>\n<pre><code>整型：说明：用于存储整数，比如100/99\n    byte字节整型\n    short短整型\n    int整型\n    long长整型\n浮点型：说明：用于存储小数，比如100.9、99.0\n    float单精度浮点型\n    double双精度浮点型\n字符型：说明：用于存储单个字符，比如 &apos;a&apos; 、&apos;男&apos;  、&apos;1&apos;\n    char 字符型\n布尔型：说明：用于存储多个字符，比如 &quot;张三丰&quot;  、&quot;a&quot; 、&quot;&quot; 、&quot;1&quot; 基本数据类型（原始数据类型）\n    boolean 布尔型\n</code></pre><p>引用数据类型（复杂数据类型）</p>\n<pre><code>使用class定义的类型：String\n使用interface定义的接口\n数组\n</code></pre><p>基本数据类型之间的转换（除了boolean类型）</p>\n<pre><code>byte-&gt; short-&gt; int-&gt; long-&gt;float-&gt;double\nchar-&gt;int\n自动类型转换：\n规则：小——&gt;大\n强制类型转换：\n规则：大——&gt;小\n</code></pre><p>细节：</p>\n<pre><code>①自动提升原则：表达式的结果类型为 操作数中类型最大的\n②强转符号只针对于最近的变量有效\n③byte和short在进行运算时，当做int类型处理！\n④char类型的值可以是int的常量值，但不可以是int的变量值，需要强转。\n</code></pre><p>命名规则</p>\n<pre><code>只能包含字母、数字、_或$符号，不能是关键字或保留字，不能以数字开头！\n</code></pre><p>命名规范</p>\n<pre><code>要求见名知义，提高阅读性\n变量名和方法名：遵循驼峰命名法，第一个单词全小写，其他单词首字符大写，其他字符小写\n类名和接口名：遵循Pascal命名法，所有单词，首字符大写，其他字符小写。\n</code></pre><h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><h3 id=\"1-1-基本算术运算符\"><a href=\"#1-1-基本算术运算符\" class=\"headerlink\" title=\"1 -1 基本算术运算符\"></a>1 -1 基本算术运算符</h3><pre><code>+ - * / %\n特点：\n①/左右的操作数如果都是整型，则结果取整\n②a%b 相当于 a-(int)a/b*b\n    13.5%3=13.5- 13/3*3=1.5\n    -13%-3= -13 - (-13)/3*3 = -1\n③属于二元操作符，运算顺序：从左往右 \n算术表达式的结果肯定是数值型\n</code></pre><h3 id=\"1-2-自增、自减算术运算符\"><a href=\"#1-2-自增、自减算术运算符\" class=\"headerlink\" title=\"1-2 自增、自减算术运算符\"></a>1-2 自增、自减算术运算符</h3><pre><code>++ --\n特点：\n①属于一元操作符\ni++;\n--i;\n++i\ni--;\nint j = i++;\n②既可以作为独立语句使用，又可以作为表达式使用\n如果作为独立语句使用，则i++;等价于++i;等价于i=i+1;\n如果作为表达式使用，则  ★\n        int j= i++; 先赋值后自增\n        int j= ++i; 先自增后赋值\n③自增、自减运算符，编译器做了内部的优化，会进行自动的类型转换，而且效率也提高了\nbyte b = 1;\nb++;//不会报编译错误！\n</code></pre><h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><h3 id=\"1、摘要\"><a href=\"#1、摘要\" class=\"headerlink\" title=\"1、摘要\"></a>1、摘要</h3><pre><code>&gt;  &lt;   &gt;= &lt;= ==  !=\n</code></pre><h3 id=\"2、特点\"><a href=\"#2、特点\" class=\"headerlink\" title=\"2、特点\"></a>2、特点</h3><pre><code>①属于二元操作符\n②关系表达式的结果类型肯定是 boolean类型\n③关系表达式一般当作条件放在if结构或循环结构中\n</code></pre><h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><h3 id=\"1、引入\"><a href=\"#1、引入\" class=\"headerlink\" title=\"1、引入\"></a>1、引入</h3><pre><code>需求：如果令狐冲 java成绩&gt;90,则岳灵珊就和他在一起\n    if(javaScore&gt;90){\n    }\n进阶：如果令狐冲 java成绩&gt;90并且music&gt;85并且 dance==100 或 html&gt;70 则岳灵珊就和他在一起\n    if(java&gt;90&amp;&amp;music&gt;85&amp;&amp;dance==100||html&gt;70){}\n作用：为了连接多个关系表达式的，最终的结果依然是boolean类型\n</code></pre><h3 id=\"2、摘要\"><a href=\"#2、摘要\" class=\"headerlink\" title=\"2、摘要\"></a>2、摘要</h3><pre><code>        名称          写法              特点\n&amp;&amp;      短路与         条件1 &amp;&amp; 条件2      两个条件都成立，结果为true\n||      短路或         条件1 || 条件2      只要有一个条件成立，结果为true\n！       非               !条件             如果条件本身成立，结果为false\n&amp;       逻辑与         条件1 &amp; 条件2       两个条件都成立，结果为true\n|       逻辑或         条件1 | 条件2       只要有一个条件成立，结果为true\n&amp;&amp;和&amp;的区别：\n&amp;&amp;      如果第一个条件不成立，则不再判断第二个条件，直接结果为false\n&amp;       不管第一个条件是否成立，都要判断第二个条件\n||和|的区别：\n||      如果第一个条件成立，则不再判断第二个条件，直接结果为true\n|       不管第一个条件是否成立，都要判断第二个条件\n</code></pre><h2 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><pre><code>语法：\n条件?表达式1:表达式2\n特点：\n①如果条件成立，结果为表达式1的值，否则为表达式2的值\n②表达式1和表达式2的类型要求一致或兼容\n③如果条件成立，则表达式2根本不用计算；\n如果条件不成立，则表达式1根本不用计算。\n</code></pre><h2 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h2><pre><code>() \n自增、自减 ！\n算术运算符\n    * / %    \n    + -\n关系运算符\n    &gt; &lt; &gt;= &lt;=\n    == !=\n逻辑运算符\n    &amp;&amp; \n    ||\n三元运算符\n赋值运算符\n</code></pre><h1 id=\"2-1-关键字与保留字\"><a href=\"#2-1-关键字与保留字\" class=\"headerlink\" title=\"2-1 关键字与保留字\"></a>2-1 关键字与保留字</h1><p>关键字(keyword)的定义和特点</p>\n<ul>\n<li>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</li>\n<li>特点：关键字中所有字母都为小写</li>\n<li>官方地址：<br><a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcFWDg.png\" alt=\"EcFWDg.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EckYIs.png\" alt=\"EckYIs.png\"></p>\n<p>保留字(reserved word)</p>\n<pre><code>ava保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 \ngoto 、const\n</code></pre><h1 id=\"2-2-标识符-Identifier\"><a href=\"#2-2-标识符-Identifier\" class=\"headerlink\" title=\"2-2 标识符(Identifier)\"></a>2-2 标识符(Identifier)</h1><h2 id=\"标识符：\"><a href=\"#标识符：\" class=\"headerlink\" title=\"标识符：\"></a>标识符：</h2><blockquote>\n<ul>\n<li>Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符</li>\n<li>技巧：凡是自己可以起名字的地方都叫标识符。</li>\n<li>定义合法标识符规则：<br>由26个英文字母大小写，0-9 ，_或 $ 组成 </li>\n<li>数字不可以开头。</li>\n<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>\n<li>Java中严格区分大小写，长度无限制。</li>\n<li>标识符不能包含空格。</li>\n</ul>\n</blockquote>\n<h2 id=\"Java中的名称命名规范\"><a href=\"#Java中的名称命名规范\" class=\"headerlink\" title=\"Java中的名称命名规范\"></a>Java中的名称命名规范</h2><blockquote>\n<ul>\n<li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li>\n<li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li>\n<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个&gt;- 单词开始每个单词首字母大写：xxxYyyZzz</li>\n<li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>注意1：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</li>\n<li>注意2：java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。</li>\n</ul>\n</blockquote>\n<ul>\n<li>更多细节详见《<strong>代码整洁之道.pdf</strong>》<a href=\"https://pan.baidu.com/s/1B_EW3BKPBA03A1fmisA9rg\" target=\"_blank\" rel=\"noopener\">点击下载</a></li>\n</ul>\n<h1 id=\"2-3-变量\"><a href=\"#2-3-变量\" class=\"headerlink\" title=\"2-3 变量\"></a>2-3 变量</h1><h2 id=\"变量的概念：\"><a href=\"#变量的概念：\" class=\"headerlink\" title=\"变量的概念：\"></a>变量的概念：</h2><blockquote>\n<ul>\n<li>内存中的一个存储区域</li>\n<li>该区域的数据可以在同一类型范围内不断变化</li>\n<li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的作用：\"><a href=\"#变量的作用：\" class=\"headerlink\" title=\"变量的作用：\"></a>变量的作用：</h2><blockquote>\n<ul>\n<li>用于在内存中保存数据</li>\n</ul>\n</blockquote>\n<h2 id=\"使用变量注意：\"><a href=\"#使用变量注意：\" class=\"headerlink\" title=\"使用变量注意：\"></a>使用变量注意：</h2><blockquote>\n<ul>\n<li>Java中每个变量必须先声明，后使用</li>\n<li>使用变量名来访问这块区域的数据</li>\n<li>变量的作用域：其定义所在的一对{ }内</li>\n<li>变量只有在其作用域内才有效</li>\n<li>同一个作用域内，不能定义重名的变量</li>\n</ul>\n</blockquote>\n<h2 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h2><blockquote>\n<ul>\n<li>语法：&lt;数据类型&gt;  &lt;变量名称&gt;</li>\n<li>例如：int var;</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的赋值\"><a href=\"#变量的赋值\" class=\"headerlink\" title=\"变量的赋值\"></a>变量的赋值</h2><blockquote>\n<ul>\n<li>语法：&lt;变量名称&gt; =  &lt;值&gt;</li>\n<li>例如：var = 10;</li>\n</ul>\n</blockquote>\n<h2 id=\"声明和赋值变量\"><a href=\"#声明和赋值变量\" class=\"headerlink\" title=\"声明和赋值变量\"></a>声明和赋值变量</h2><blockquote>\n<ul>\n<li>语法： &lt;数据类型&gt;  &lt;变量名&gt;  =  &lt;初始化值&gt;</li>\n<li>例如：int var = 10;</li>\n</ul>\n</blockquote>\n<h2 id=\"变量的分类-按数据类型\"><a href=\"#变量的分类-按数据类型\" class=\"headerlink\" title=\"变量的分类-按数据类型\"></a>变量的分类-按数据类型</h2><pre><code>对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分配了不同大小的内存空间。\n</code></pre><p><a href=\"https://imgchr.com/i/EcAdkd\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/08/EcAdkd.md.png\" alt=\"EcAdkd.md.png\"></a></p>\n<p>补充：变量的分类-按声明的位置的不同  </p>\n<blockquote>\n<p>在方法体外，类体内声明的变量称为<strong>成员变量</strong>。<br>在方法体内部声明的变量称为<strong>局部变量</strong>。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcEnjf.png\" alt=\"EcEnjf.png\"></p>\n<ul>\n<li><strong>注意：二者在初始化值方面的异同</strong>:<blockquote>\n<ul>\n<li><strong>同</strong>：都有生命周期      </li>\n<li><strong>异</strong>：局部变量除形参外，需显式初始化。</li>\n</ul>\n</blockquote>\n<h1 id=\"2-4-基本数据类型\"><a href=\"#2-4-基本数据类型\" class=\"headerlink\" title=\"2-4 基本数据类型\"></a>2-4 基本数据类型</h1><h2 id=\"整数类型-byte、short、int、long\"><a href=\"#整数类型-byte、short、int、long\" class=\"headerlink\" title=\"整数类型:byte、short、int、long\"></a>整数类型:byte、short、int、long</h2><blockquote>\n<p>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。</p>\n<ul>\n<li><strong>java的整型常量默认为 int 型，声明long型常量须后加‘l’或‘L’</strong></li>\n<li><strong>java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long</strong></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcE3Nj.png\" alt=\"EcE3Nj.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class VariableTest &#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">          int number1;</span><br><span class=\"line\">          number1 = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">          int number2;</span><br><span class=\"line\">          number2 = 20;</span><br><span class=\"line\"> </span><br><span class=\"line\">          int number3;</span><br><span class=\"line\">        number3 = number1 + number2;</span><br><span class=\"line\">        System.out.println(&quot;Number3 = &quot; + number3);</span><br><span class=\"line\"></span><br><span class=\"line\">        int number4 = 50;</span><br><span class=\"line\">        int number5 = number4 - number3;</span><br><span class=\"line\">        System.out.println(&quot;Number5 = &quot; + number5);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮点类型-float、double\"><a href=\"#浮点类型-float、double\" class=\"headerlink\" title=\"浮点类型:float、double\"></a>浮点类型:float、double</h2><p>与整数类型类似，Java <strong>浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响</strong>。<br>浮点型常量有两种表示形式：</p>\n<ul>\n<li>十进制数形式：如：5.12       512.0f        .512   (必须有小数点）</li>\n<li>科学计数法形式:如：5.12e2      512E2     100E-2<blockquote>\n<p>float:单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。<br>double:双精度，精度是float的两倍。通常采用此类型。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Java 的浮点型常量默认为double型，声明float型常量，须后加‘f’或‘F’</strong>。</p>\n<h2 id=\"字符类型：char\"><a href=\"#字符类型：char\" class=\"headerlink\" title=\"字符类型：char\"></a>字符类型：char</h2><blockquote>\n<ul>\n<li>char 型数据用来表示通常意义上“<strong>字符</strong>”(2字节)</li>\n<li>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。 </li>\n</ul>\n</blockquote>\n<p>字符型变量的三种表现形式：</p>\n<blockquote>\n<ul>\n<li>字符常量是用单引号(‘ ’)括起来的单个字符。例如：char c1 = ‘a’;   char c2 = ‘中’; char c3 =  ‘9’;</li>\n<li>Java中还允许使用转义字符‘\\’来将其后的字符转变为特殊字符型常量。例如：char c3 = ‘\\n’;  // ‘\\n’表示换行符</li>\n<li>直接使用 Unicode 值来表示字符型常量：‘\\uXXXX’。其中，XXXX代表一个十六进制整数。如：\\u000a 表示 \\n。</li>\n</ul>\n</blockquote>\n<p>char类型是可以进行运算的。因为它都对应有Unicode码。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/08/EcQXqI.png\" alt=\"EcQXqI.png\"></p>\n<h1 id=\"了解：\"><a href=\"#了解：\" class=\"headerlink\" title=\"了解：\"></a>了解：</h1><h2 id=\"ASCII-码\"><a href=\"#ASCII-码\" class=\"headerlink\" title=\"ASCII 码\"></a>ASCII 码</h2><blockquote>\n<ul>\n<li>在计算机内部，所有数据都使用二进制表示。每一个二进制位（bit）有 0 和 1 两种状态，因此 8 个二进制位就可以组合出 256 种状态，这被称为一个字节（byte）。一个字节一共可以用来表示 256 种不同的状态，每一个状态对应一个符号，就是 256 个符号，从 0000000 到 11111111。</li>\n<li>ASCII码：上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</li>\n</ul>\n</blockquote>\n<h3 id=\"ASCII码缺点：\"><a href=\"#ASCII码缺点：\" class=\"headerlink\" title=\"ASCII码缺点：\"></a>ASCII码缺点：</h3><blockquote>\n<ul>\n<li>不能表示所有字符。</li>\n<li>相同的编码表示的字符不一样：比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)<br>了解： Unicode 编码<br>乱码：世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。</li>\n</ul>\n</blockquote>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，使用 Unicode 没有乱码的问题。</p>\n<h3 id=\"Unicode-的缺点：\"><a href=\"#Unicode-的缺点：\" class=\"headerlink\" title=\"Unicode 的缺点：\"></a>Unicode 的缺点：</h3><p>Unicode 只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储;<br>无法区别 Unicode 和ASCII：<br>计算机无法区分三个字节表示一个符号还是分别表示三个符号。<br>另外，我们知道，英文字母只用一个字节表示就够了，<br>如果unicode统一规定，每个符号用三个或四个字节表示，<br>那么每个英文字母前都必然有二到三个字节是0，<br>这对于存储空间来说是极大的浪费。  </p>\n<h2 id=\"UTF-8\"><a href=\"#UTF-8\" class=\"headerlink\" title=\"UTF-8\"></a>UTF-8</h2><blockquote>\n<ul>\n<li>UTF-8 是在互联网上使用最广的一种 Unicode 的实现方式。</li>\n<li>UTF-8 是一种变长的编码方式。它可以使用 1-6 个字节表示一个符号，根据不同的符号而变化字节长度。</li>\n</ul>\n</blockquote>\n<h3 id=\"UTF-8的编码规则：\"><a href=\"#UTF-8的编码规则：\" class=\"headerlink\" title=\"UTF-8的编码规则：\"></a>UTF-8的编码规则：</h3><ul>\n<li>对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）。</li>\n<li>对于多字节的UTF-8编码，如果编码包含 n 个字节，那么第一个字节的前 n 位为1，第一个字节的第 n+1 位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是最高两位为”10”，其余6位用来对字符进行编码。 </li>\n</ul>\n<h1 id=\"布尔类型：boolean\"><a href=\"#布尔类型：boolean\" class=\"headerlink\" title=\"布尔类型：boolean\"></a>布尔类型：boolean</h1><p>boolean 类型用来判断逻辑条件，一般用于程序流程控制：</p>\n<ul>\n<li>if条件控制语句；                 </li>\n<li>while循环控制语句；</li>\n<li>do-while循环控制语句；     </li>\n<li>for循环控制语句； </li>\n</ul>\n<p>boolean类型数据只允许取值true和false，无null。</p>\n<ul>\n<li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li>\n<li>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。———《java虚拟机规范 8版》<h1 id=\"基本数据类型转换\"><a href=\"#基本数据类型转换\" class=\"headerlink\" title=\"基本数据类型转换\"></a>基本数据类型转换</h1>自动类型转换：容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为：<br><img src=\"https://s2.ax1x.com/2019/05/08/Ec34Zn.png\" alt=\"Ec34Zn.png\"><br>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</li>\n<li>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</li>\n<li>boolean类型不能与其它数据类型运算。<br>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。<br>字符串类型：String<br>String不是基本数据类型，属于引用数据类型<br>使用方式与基本数据类型一致。例如：String str = “abcd”;<br>一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = str + “xyz” ;</span><br><span class=\"line\">int n = 100;</span><br><span class=\"line\">str = str + n;</span><br></pre></td></tr></table></figure>\n<h1 id=\"示-例—StringTest类\"><a href=\"#示-例—StringTest类\" class=\"headerlink\" title=\"示 例—StringTest类\"></a>示 例—StringTest类</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StringTest &#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">          int no = 10;</span><br><span class=\"line\">          String str = &quot;abcdef&quot;;</span><br><span class=\"line\">          String str1 = str + “xyz” + no;</span><br><span class=\"line\"></span><br><span class=\"line\">          str1 = str1 + &quot;123&quot;;</span><br><span class=\"line\">          char c = &apos;国&apos;;</span><br><span class=\"line\"> </span><br><span class=\"line\">         double pi = 3.1416;</span><br><span class=\"line\">         str1 = str1 + pi;</span><br><span class=\"line\">         boolean b = false;</span><br><span class=\"line\">         str1 = str1 + b;</span><br><span class=\"line\">         str1 = str1 + c;</span><br><span class=\"line\"></span><br><span class=\"line\">         System.out.println(&quot;str1 = &quot; + str1);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>练习1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = 4;        //判断对错：no</span><br><span class=\"line\">String str2 = 3.5f + “”;             //判断str2对错：yes</span><br><span class=\"line\">System.out.println(str2);        //输出：”3.5”</span><br><span class=\"line\">System.out .println(3+4+“Hello!”);     //输出：7Hello!</span><br><span class=\"line\">System.out.println(“Hello!”+3+4);      //输出：Hello!34</span><br><span class=\"line\">System.out.println(‘a’+1+“Hello!”);    //输出：98Hello!</span><br><span class=\"line\">System.out.println(“Hello”+‘a’+1);     //输出：Helloa1</span><br></pre></td></tr></table></figure>\n<h1 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h1><ul>\n<li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。</li>\n<li>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。<br>如： </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a = “43”; int i = Integer.parseInt(a);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>boolean类型不可以转换为其它的数据类型。<br>练习2<br>判断是否能通过编译</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）short  s = 5;</span><br><span class=\"line\">      s = s-2;                       //判断：no</span><br><span class=\"line\">2） byte b = 3;</span><br><span class=\"line\">       b = b + 4;                  //判断：no</span><br><span class=\"line\">       b = (byte)(b+4);        //判断：yes</span><br><span class=\"line\">3）char c = ‘a’;</span><br><span class=\"line\">      int  i = 5;</span><br><span class=\"line\">      float d = .314F;</span><br><span class=\"line\">      double result = c+i+d;     //判断：yes</span><br><span class=\"line\">4） byte b = 5;</span><br><span class=\"line\">       short s = 3;</span><br><span class=\"line\">       short t = s + b;          //判断：no</span><br></pre></td></tr></table></figure>\n<h1 id=\"进-制\"><a href=\"#进-制\" class=\"headerlink\" title=\"进  制\"></a>进  制</h1><p>==世界上有10种人 ，认识和不认识二进制的。==</p>\n<h2 id=\"关于进制\"><a href=\"#关于进制\" class=\"headerlink\" title=\"关于进制\"></a>关于进制</h2><ul>\n<li>所有数字在计算机底层都以二进制形式存在。<br>对于整数，有四种表示方式：<blockquote>\n<ul>\n<li>二进制(binary)：0,1 ，满2进1.以0b或0B开头。</li>\n<li>十进制(decimal)：0-9 ，满10进1。</li>\n<li>八进制(octal)：0-7 ，满8进1. 以数字0开头表示。</li>\n<li>十六进制(hex)：0-9及A-F，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。<br>如：0x21AF +1= 0X21B0</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/Ec6GgH\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ec6GgH.png\" alt=\"Ec6GgH.png\"></a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/Ec6Ubt.png\" alt=\"Ec6Ubt.png\"></p>\n<h2 id=\"二进制\"><a href=\"#二进制\" class=\"headerlink\" title=\"二进制\"></a>二进制</h2><p><strong>Java整数常量默认是int类型，当用二进制定义整数时，其第32位是符号位；当是long类型时，二进制默认占64位，第64位是符号位</strong></p>\n<h2 id=\"二进制的整数有如下三种形式：\"><a href=\"#二进制的整数有如下三种形式：\" class=\"headerlink\" title=\"二进制的整数有如下三种形式：\"></a>二进制的整数有如下三种形式：</h2><ul>\n<li>原码：直接将一个数值换成二进制数。最高位是符号位</li>\n<li>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。</li>\n<li>负数的补码：其反码加1。</li>\n</ul>\n<h2 id=\"计算机以二进制补码的形式保存所有的整数。\"><a href=\"#计算机以二进制补码的形式保存所有的整数。\" class=\"headerlink\" title=\"计算机以二进制补码的形式保存所有的整数。\"></a>计算机以二进制补码的形式保存所有的整数。</h2><ul>\n<li>正数的原码、反码、补码都相同</li>\n<li>负数的补码是其反码+1</li>\n</ul>\n<p>使用原码、反码、补码表示形式的原因</p>\n<blockquote>\n<p>计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。</p>\n</blockquote>\n<p><a href=\"https://imgchr.com/i/Ec6xPO\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ec6xPO.md.png\" alt=\"Ec6xPO.md.png\"></a></p>\n<h2 id=\"二进制-gt-十进制\"><a href=\"#二进制-gt-十进制\" class=\"headerlink\" title=\"二进制-&gt;十进制\"></a>二进制-&gt;十进制</h2><p><a href=\"https://imgchr.com/i/EccPsA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EccPsA.md.png\" alt=\"EccPsA.md.png\"></a><br>在计算机底层，都是以补码的方式存储数值的。<br><strong>对于正数来说：原码、反码、补码是相同的，三码合一</strong></p>\n<p><a href=\"https://imgchr.com/i/EccKMj\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EccKMj.md.png\" alt=\"EccKMj.md.png\"></a></p>\n<p><a href=\"https://imgchr.com/i/EcczT0\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/EcczT0.md.png\" alt=\"EcczT0.md.png\"></a></p>\n<h2 id=\"进制间转化\"><a href=\"#进制间转化\" class=\"headerlink\" title=\"进制间转化\"></a>进制间转化</h2><ul>\n<li>十进制  二进制互转</li>\n</ul>\n<blockquote>\n<p>   二进制转成十进制  乘以2的幂数<br>   十进制转成二进制  除以2取余数</p>\n</blockquote>\n<ul>\n<li>二进制  八进制互转</li>\n<li>二进制   十六进制互转</li>\n<li>十进制 八进制互转</li>\n<li>十进制 十六进制互转</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcgeTx.png\" alt=\"EcgeTx.png\"></p>\n<p><a href=\"https://imgchr.com/i/Ecgl1e\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/09/Ecgl1e.md.png\" alt=\"Ecgl1e.md.png\"></a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcgJ0I.png\" alt=\"EcgJ0I.png\"></p>\n<h1 id=\"2-4-运算符\"><a href=\"#2-4-运算符\" class=\"headerlink\" title=\"2-4 运算符\"></a>2-4 运算符</h1><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p>\n<h2 id=\"算术运算符-1\"><a href=\"#算术运算符-1\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/EcgTBR.png\" alt=\"EcgTBR.png\"><br><strong>如果对负数取模，可以把模数负号忽略不记，如：5%-2=1。 但被模数是负数则不可忽略。此外，取模运算的结果不一定总是整数。</strong><br>对于除号“/”，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。 例如：int x=3510;x=x/1000*1000;  x的结果是？<br>“+”除字符串相加功能外，还能把非字符串转换成字符串.例如：System.out.println(“5+5=”+5+5); //打印结果是？ 5+5=55 ? </p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><strong>符号：=</strong></p>\n<ul>\n<li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li>\n<li>支持连续赋值。</li>\n</ul>\n<p>扩展赋值运算符： +=, -=, *=, /=, %=</p>\n<h2 id=\"比较运算符（关系运算符）\"><a href=\"#比较运算符（关系运算符）\" class=\"headerlink\" title=\"比较运算符（关系运算符）\"></a>比较运算符（关系运算符）</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/Ec288U.png\" alt=\"Ec288U.png\"></p>\n<ul>\n<li>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</li>\n<li>比较运算符“==”不能误写成“=” 。<h2 id=\"逻辑运算符-1\"><a href=\"#逻辑运算符-1\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2>&amp;—逻辑与  　　　 | —逻辑或 　　　 ！—逻辑非<br>&amp;&amp; —短路与　　　 || —短路或 　　 ^ —逻辑异或<br><img src=\"https://s2.ax1x.com/2019/05/09/EcRkZR.png\" alt=\"EcRkZR.png\"><br>逻辑运算符用于连接布尔型表达式，在Java中不可以写成3&lt;x&lt;6，应该写成x&gt;3 &amp; x&lt;6 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class  Test  &#123;</span><br><span class=\"line\">        public static void main (String []  args)  &#123;</span><br><span class=\"line\">           boolean x=true;</span><br><span class=\"line\">           boolean y=false;</span><br><span class=\"line\">           short z=42;</span><br><span class=\"line\">      //if(y == true)</span><br><span class=\"line\">             if((z++==42)&amp;&amp;(y=true))z++;</span><br><span class=\"line\">             if((x=false) || (++z==45))  z++;</span><br><span class=\"line\"></span><br><span class=\"line\">           System. out.println(“z=”+z);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">        //结果: z=46</span><br></pre></td></tr></table></figure>\n<h3 id=\"“-amp-”和“-amp-amp-”的区别：\"><a href=\"#“-amp-”和“-amp-amp-”的区别：\" class=\"headerlink\" title=\"“&amp;”和“&amp;&amp;”的区别：\"></a>“&amp;”和“&amp;&amp;”的区别：</h3><ul>\n<li>单&amp;时，左边无论真假，右边都进行运算；</li>\n<li>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</li>\n</ul>\n<blockquote>\n<p>“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。</p>\n</blockquote>\n<blockquote>\n<p>异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。<br>      理解：<strong>异或，追求的是“异”!</strong></p>\n</blockquote>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p><img src=\"https://s2.ax1x.com/2019/05/09/EcRmRO.png\" alt=\"EcRmRO.png\"><br><strong>位运算是直接对整数的二进制进行的运算</strong><br><img src=\"https://s2.ax1x.com/2019/05/09/EcRaQg.png\" alt=\"EcRaQg.png\"></p>\n<h2 id=\"三元运算符-1\"><a href=\"#三元运算符-1\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><p>格式:</p>\n<ul>\n<li>(条件表达式)?表达式1：表达式2；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(条件表达式)为true，运算后的结果是表达式1；</span><br><span class=\"line\">(条件表达式)为false，运算后的结果是表达式2；</span><br></pre></td></tr></table></figure>\n<ul>\n<li>表达式1和表达式2为同种类型</li>\n<li>三元运算符与if-else的联系与区别：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1）三元运算符可简化if-else语句</span><br><span class=\"line\">2）三元运算符要求必须返回一个结果。</span><br><span class=\"line\">3）if后的代码块可有多个语句</span><br></pre></td></tr></table></figure>\n<h2 id=\"运算符的优先级\"><a href=\"#运算符的优先级\" class=\"headerlink\" title=\"运算符的优先级\"></a>运算符的优先级</h2><h3 id=\"变量与运算符\"><a href=\"#变量与运算符\" class=\"headerlink\" title=\"变量与运算符\"></a>变量与运算符</h3><p>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。<br>如下表，上一行运算符总优先于下一行。<br>只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/09/EcW1cF.png\" alt=\"EcW1cF.png\"></p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"感情到最后，拼的是人品","url":"http://yoursite.com/2016/07/28/鸡汤-感情到最后，拼的是人品/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609001517.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;工作几年后，一位老朋友来我所在的城市出差。多年不见，我特意驱车两个小时赶去叙旧。</p>\n<p>&emsp;&emsp;见面时，发现他还带了其他4个人一起。一见到我，他简单寒暄后，热情地向同桌的人介绍我是“东道主”。最后，当然是我付的钱，但在这之前，他什么也不曾向我提过。</p>\n<p>&emsp;&emsp;他们都喝了酒，所以饭后他开口希望我找车把他们送回酒店……忙了一晚上，隔天连个谢谢都没有，我也只能当是吃了哑巴亏，想想就算了。</p>\n<p>&emsp;&emsp;没想到一年后见到另外一个老朋友，告诉我说：“他说你特别小气，招待得不好……”我当时如鲠在喉。下一个动作，便拉黑了之前那个朋友。</p>\n<p>&emsp;&emsp;大概每一个人都会有这样的遭遇：遇见形形色色的人和事后才发现，原来在这个世界上，每个人的人品是参差不齐的。而你们的感情也会随着你一次次看清他的人品后，一点点靠近或疏远。</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;并不是所有的人性都经不起试探、所有的感情都经不起推敲，只是有些人只把利益放在第一位。时间识人，落难识心。总有一天，有人会看清那些人的真面目，寒了心，最后果断离开。</p>\n<p>&emsp;&emsp;比如张叔，是个老实人，儿女常年不在家，常常一个人孤孤单单。前阵子，他很高兴地跟我说认识了一个朋友。</p>\n<p>&emsp;&emsp;可后来我再见到他时，他满脸沮丧。他告诉我，那个朋友骗他买了上万的保健品，后来网上一搜，都是三无产品。想着当初他们畅谈心事，默契合拍，没想到对方竟是这样的人。</p>\n<p>&emsp;&emsp;“罢了罢了，怪我看错人。”张叔说道。他的表情里除了愤怒，更多的是沮丧和失望。</p>\n<p>&emsp;&emsp;人一旦向利益妥协，便条件反射地将身边的“朋友关系”物化成可利用的东西。冲身边人“下手”，是毁掉一段感情最迅速的方式。这种信任一旦被利用，友谊从此就不再单纯。</p>\n<p>&emsp;&emsp;人和人之间开始相互提防，最后不欢而散。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;隔壁有个姥姥，刚和老伴李叔过完结婚50周年纪念日。我经常和她聊起她的婚姻生活，有一次我问她：“当年，为什么嫁了李叔呢？”</p>\n<p>&emsp;&emsp;她先嫌弃一番：“确实也没啥好的。没啥大本事，穷了一辈子。年轻时候长得也不行，更别提现在了……”姥姥接着说：“但他心地好啊。第一次见他时是大冬天，非常冷，他裹着件破袄子。相亲完，我都想回去直接拒绝的，但是我看到他把路边一只冻得半死的小狗拎起来就裹进自己的袄子里，我想心地这么善良的人不会差。”</p>\n<p>&emsp;&emsp;事实证明，她的想法是对的。他们的婚姻风风雨雨五十载，虽然也有争吵，但是李叔人品端正、心地善良，从不曾做过什么让她痛苦、伤害她的事。两个人相濡以沫，一辈子就这么过来了。</p>\n<p>&emsp;&emsp;有人说，激情是暂时的，人品是永恒的。当激情慢慢淡去，两个人的关系是靠善良来维系的。好好看看他如何对待身边的人，或许那就是你将来的生活状态。</p>\n<p>&emsp;&emsp;感情到最后，拼的是人品。有句很经典的话说：认可一个人，始于颜值，陷于才华，忠于人品。多少人走着走着，就因为对方的人品不行，散了。</p>\n<blockquote>\n<ul>\n<li>你再看看那些拥有很多老朋友、收获很多信任的人，绝大多数都是人品过硬的人。所以，一定要做个有底线的好人。凭一颗良心行走，纵然一生平凡，但也喜乐自在。</li>\n</ul>\n</blockquote>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"1. JavaSE-语言概述","url":"http://yoursite.com/2016/07/25/1. JavaSE-语言概述/","content":"<h1 id=\"1-1-软件开发介绍\"><a href=\"#1-1-软件开发介绍\" class=\"headerlink\" title=\"1.1 软件开发介绍\"></a>1.1 软件开发介绍</h1><h2 id=\"软件开发\"><a href=\"#软件开发\" class=\"headerlink\" title=\"软件开发\"></a>软件开发</h2><p>软件，即一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分。  </p>\n<h2 id=\"人机交互方式\"><a href=\"#人机交互方式\" class=\"headerlink\" title=\"人机交互方式\"></a>人机交互方式</h2><p>图形化界面(Graphical User Interface GUI)这种方式简单直观，使用者易于接受，容易上手操作。<br>命令行方式(Command Line Interface CLI)：需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。<br>==Pascal之父Nicklaus Wirth： “Algorithms+Data Structures=Programs”==</p>\n<h2 id=\"常用的DOS命令\"><a href=\"#常用的DOS命令\" class=\"headerlink\" title=\"常用的DOS命令\"></a>常用的DOS命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir :    列出当前目录下的文件以及文件夹</span><br><span class=\"line\">md :   创建目录</span><br><span class=\"line\">rd :     删除目录</span><br><span class=\"line\">cd :    进入指定目录</span><br><span class=\"line\">cd.. :  退回到上一级目录</span><br><span class=\"line\">cd\\:    退回到根目录</span><br><span class=\"line\">del :    删除文件</span><br><span class=\"line\">exit :   退出 dos 命令行</span><br><span class=\"line\">补充：echo javase&gt;1.doc</span><br><span class=\"line\">常用快捷键</span><br><span class=\"line\">←   →：移动光标</span><br><span class=\"line\">↑   ↓：调阅历史操作命令</span><br><span class=\"line\">Delete和Backspace：删除字符</span><br></pre></td></tr></table></figure>\n<h1 id=\"1-2-计算机编程语言介绍\"><a href=\"#1-2-计算机编程语言介绍\" class=\"headerlink\" title=\"1-2 计算机编程语言介绍\"></a>1-2 计算机编程语言介绍</h1><h2 id=\"什么是计算机语言\"><a href=\"#什么是计算机语言\" class=\"headerlink\" title=\"什么是计算机语言\"></a>什么是计算机语言</h2><ul>\n<li>语言：是人与人之间用于沟通的一种方式。例如：中国人与中国人用普通话沟通。而中国人要和英国人交流，就要学习英语。</li>\n<li><p>计算机语言：人与计算机交流的方式。<br>   如果人要与计算机交流，那么就要学习计算机语言。<br>   计算机语言有很多种。如：C ,C++ ,Java ,PHP ,  Kotlin，Python，Scala等。  </p>\n</li>\n<li><p>第一代语言<br>机器语言。指令以二进制代码形式存在。</p>\n</li>\n<li>第二代语言<br>汇编语言。使用助记符表示一条机器指令。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDJj1J.png\" alt=\"EDJj1J.png\"></p>\n<ul>\n<li>第三代语言：高级语言</li>\n</ul>\n<blockquote>\n<p>C、Pascal、Fortran面向过程的语言<br>C++面向过程/面向对象<br>Java跨平台的纯面向对象的语言<br>.NET跨语言的平台<br>Python、Scala…  </p>\n</blockquote>\n<h2 id=\"1-3-Java语言概述\"><a href=\"#1-3-Java语言概述\" class=\"headerlink\" title=\"1-3 Java语言概述\"></a>1-3 Java语言概述</h2><ul>\n<li>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一门高级编程语言。</li>\n<li>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中。</li>\n<li>随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言<br>   <strong>后台开发：Java、PHP、Python、Go、Node.js</strong><h3 id=\"Java语言概述-Java简史\"><a href=\"#Java语言概述-Java简史\" class=\"headerlink\" title=\"Java语言概述:Java简史\"></a>Java语言概述:Java简史</h3><blockquote>\n<p>1991年 Green项目，开发语言最初命名为Oak (橡树)<br>1994年，开发组意识到Oak 非常适合于互联网<br>1996年，发布JDK 1.0，约8.3万个网页应用Java技术来制作<br>1997年，发布JDK 1.1，JavaOne会议召开，创当时全球同类会议规模之最<br>1998年，发布JDK 1.2，同年发布企业平台J2EE<br>1999年，Java分成J2SE、J2EE和J2ME，JSP/Servlet技术诞生<br>2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，更名为JDK 5.0<br>2005年，J2SE -&gt; JavaSE，J2EE -&gt; JavaEE，J2ME -&gt; JavaME<br>2009年，Oracle公司收购SUN，交易价格74亿美元<br>2011年，发布JDK 7.0<br>2014年，发布JDK 8.0，是继JDK 5.0以来变化最大的版本<br>2017年，发布JDK 9.0，最大限度实现模块化<br>2018年3月，发布JDK 10.0，版本号也称为18.3<br>2018年9月，发布JDK 11.0，版本号也称为18.9     </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Java技术体系平台\"><a href=\"#Java技术体系平台\" class=\"headerlink\" title=\"Java技术体系平台\"></a>Java技术体系平台</h3><p><img src=\"https://s2.ax1x.com/2019/05/06/EDYdEV.png\" alt=\"EDYdEV.png\"></p>\n<h1 id=\"1-3-Java在各领域的应用\"><a href=\"#1-3-Java在各领域的应用\" class=\"headerlink\" title=\"1-3 Java在各领域的应用\"></a>1-3 Java在各领域的应用</h1><p>从Java的应用领域来分，Java语言的应用方向主要表现在以下几个方面：</p>\n<ul>\n<li>企业级应用：主要指复杂的大企业的软件系统、各种类型的网站。Java的安全机制以及它的跨平台的优势，使它在分布式系统领域开发中有广泛应用。应用领域包括金融、电信、交通、电子商务等。</li>\n<li>Android平台应用：Android应用程序使用Java语言编写。Android开发水平的高低很大程度上取决于Java语言核心能力是否扎实。</li>\n<li>大数据平台开发：各类框架有Hadoop，spark，storm，flink等，就这类技术生态圈来讲，还有各种中间件如flume，kafka，sqoop等等 ，这些框架以及工具大多数是用Java编写而成，但提供诸如Java，scala，Python，R等各种语言API供编程。</li>\n<li>移动领域应用：主要表现在消费和嵌入式领域，是指在各种小型设备上的应用，包括手机、PDA、机顶盒、汽车通信设备等。<h3 id=\"Java语言的诞生\"><a href=\"#Java语言的诞生\" class=\"headerlink\" title=\"Java语言的诞生\"></a>Java语言的诞生</h3>java之父James Gosling团队在开发”Green”项目时，发现C缺少垃圾回收系统，还有可移植的安全性、分布程序设计和多线程功能。最后，他们想要一种易于移植到各种设备上的平台。<br><img src=\"https://s2.ax1x.com/2019/05/06/EDaaM4.png\" alt=\"EDaaM4.png\"><br>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。比如Java语言的变量声明，操作符形式，参数传递，流程控制等方面和C语言、C++语言完全相同。但同时，Java是一个纯粹的面向对象的程序设计语言，它继承了C++语言面向对象技术的核心。Java舍弃了C语言中容易引起错误的指针（以引用取代）、运算符重载（operator overloading）、多重继承（以接口取代）等特性，增加了垃圾回收器功能用于回收不再被引用的对象所占据的内存空间。<br>JDK1.5又引入了泛型编程（Generic Programming）、类型安全的枚举、不定长参数和自动装/拆箱<h2 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h2></li>\n<li>Java语言是易学的。Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用Java。</li>\n<li>Java语言是强制面向对象的。Java语言提供类、接口和继承等原语，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。</li>\n<li>Java语言是分布式的。Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</li>\n<li>Java语言是健壮的。Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。</li>\n<li>Java语言是安全的。Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。如：安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查。</li>\n<li>Java语言是体系结构中立的。Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。</li>\n<li>Java语言是解释型的。如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统的解释器中运行。</li>\n<li>Java是性能略高的。与那些解释型的高级脚本语言相比，Java的性能还是较优的。</li>\n<li>Java语言是原生支持多线程的。在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。<h1 id=\"1-4-Java程序运行机制及运行过程\"><a href=\"#1-4-Java程序运行机制及运行过程\" class=\"headerlink\" title=\"1-4 Java程序运行机制及运行过程\"></a>1-4 Java程序运行机制及运行过程</h1><h2 id=\"Java语言的特点\"><a href=\"#Java语言的特点\" class=\"headerlink\" title=\"Java语言的特点\"></a>Java语言的特点</h2></li>\n<li>特点一：面向对象<br>两个基本概念：类、对象<br>三大特性：封装、继承、多态  </li>\n<li>特点二：健壮性<br>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制</li>\n<li>特点三：跨平台性<br>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”<br>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java Virtual Machine) 即可。由JVM来负责Java程序在该系统中的运行。</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/EDaHW8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDaHW8.md.png\" alt=\"EDaHW8.md.png\"></a></p>\n<h2 id=\"Java两种核心机制\"><a href=\"#Java两种核心机制\" class=\"headerlink\" title=\"Java两种核心机制\"></a>Java两种核心机制</h2><ul>\n<li>Java虚拟机  (Java Virtal Machine)<br>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。<br>对于不同的平台，有不同的虚拟机。<br>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行<br>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”  </li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDaves.png\" alt=\"EDaves.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdpF0.png\" alt=\"EDdpF0.png\"></p>\n<ul>\n<li>垃圾收集机制  (Garbage Collection)<br>不再使用的内存空间应回收—— 垃圾回收。</li>\n</ul>\n<blockquote>\n<ul>\n<li>在C/C++等语言中，由程序员负责回收无用内存。</li>\n<li>Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。<br>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</li>\n</ul>\n</blockquote>\n<p><strong>Java程序还会出现内存泄漏和内存溢出问题吗？</strong>==Yes!==</p>\n<h1 id=\"1-5-Java语言的环境搭建\"><a href=\"#1-5-Java语言的环境搭建\" class=\"headerlink\" title=\"1-5 Java语言的环境搭建\"></a>1-5 Java语言的环境搭建</h1><h2 id=\"明确什么是JDK-JRE\"><a href=\"#明确什么是JDK-JRE\" class=\"headerlink\" title=\"明确什么是JDK, JRE\"></a>明确什么是JDK, JRE</h2><p><img src=\"https://s2.ax1x.com/2019/05/06/EDdVm9.png\" alt=\"EDdVm9.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdnFx.png\" alt=\"EDdnFx.png\"></p>\n<p>==简单而言，使用JDK的开发工具完成的java程序，交给JRE去运行。==</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDd16e.png\" alt=\"EDd16e.png\"></p>\n<ul>\n<li>JDK = JRE + 开发工具集（例如Javac编译工具等）</li>\n<li>JRE = JVM + Java SE标准类库<h2 id=\"下载-JDK\"><a href=\"#下载-JDK\" class=\"headerlink\" title=\"下载 JDK\"></a>下载 JDK</h2>官方网址：</li>\n<li><a href=\"http://www.oracle.com\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com</a></li>\n<li><a href=\"http://java.sun.com\" target=\"_blank\" rel=\"noopener\">http://java.sun.com</a></li>\n</ul>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><ul>\n<li>傻瓜式安装，下一步即可。</li>\n<li>建议：安装路径不要有中文或者空格等特殊符号。</li>\n<li>如果操作系统是64位的，软件尽量选择支持64位的（除非软件本身不区分）。</li>\n<li>当提示安装 JRE 时，正常在JDK安装时已经装过了，但是为了后续使用Eclipse等开发工具不报错，建议也根据提示安装JRE。</li>\n<li>安装 JDK</li>\n</ul>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>在dos命令行中敲入javac，出现错误提示：</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdaff.png\" alt=\"EDdaff.png\"></p>\n<p>错误原因：当前执行的程序在当前目录下如果不存在，windows系统会在系统中已有的一个名为path的环境变量指定的目录中查找。如果仍未找到，会出现以上的错误提示。所以进入到  jdk安装路径\\bin目录下，执行javac，会看到javac参数提示信息。</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDdqtx.png\" alt=\"EDdqtx.png\"></p>\n<h2 id=\"配置环境变量-path\"><a href=\"#配置环境变量-path\" class=\"headerlink\" title=\"配置环境变量 path\"></a>配置环境变量 path</h2><ul>\n<li>path：windows系统执行命令时要搜寻的路径。<br>每次执行 java 的工具都要进入到bin目录下，是非常麻烦的。可不可以在任何目录下都可以执行java的工具呢？<br>根据windows系统在查找可执行程序的原理，可以将java工具所在路径定义到 path 环境变量中，让系统帮我们去找运行执行的程序。<br><strong>配置方法</strong>：</li>\n<li>我的电脑–属性–高级系统设置–环境变量</li>\n<li>编辑 path 环境变量，在变量值开始处加上java工具所在目录，后面用 “ ; ”和其他值分隔开即可。</li>\n<li>打开DOS命令行，任意目录下敲入javac。如果出现javac 的参数信息，配置成功。</li>\n</ul>\n<p>注：  具体操作流程，参看JDK8下载_安装_配置(点击跳转)</p>\n<p><a href=\"https://imgchr.com/i/EDwOVs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s2.ax1x.com/2019/05/06/EDwOVs.md.png\" alt=\"EDwOVs.md.png\"></a></p>\n<p>验证是否成功：javac   java</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0S2T.png\" alt=\"ED0S2T.png\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0CMF.png\" alt=\"ED0CMF.png\"></p>\n<p>#1-6 开发体验— HelloWorld</p>\n<ul>\n<li>步骤：<br>1.将 Java 代码编写到扩展名为 .java 的文件中。<br>2.通过 javac 命令对该 java 文件进行编译。<br>通过 java 命令对生成的 class 文件进行运行  </li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0Dds.png\" alt=\"ED0Dds.png\"></p>\n<ul>\n<li>步骤一：编写<br>选择最简单的编辑器：记事本。<br>敲入代码    class Test{  }<br>将文件保存成Test.java，这个文件是存放java代码的文件，称为源文件。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED06J0.png\" alt=\"ED06J0.png\"></p>\n<h3 id=\"第一个Java程序\"><a href=\"#第一个Java程序\" class=\"headerlink\" title=\"第一个Java程序\"></a>第一个Java程序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">      public static void main(String[] args) &#123;</span><br><span class=\"line\">             System.out.println(“Hello World!”);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"步骤二：编译\"><a href=\"#步骤二：编译\" class=\"headerlink\" title=\"步骤二：编译\"></a>步骤二：编译</h3><p><img src=\"https://s2.ax1x.com/2019/05/06/ED0fL4.png\" alt=\"ED0fL4.png\"></p>\n<ul>\n<li>有了java源文件，通过编译器将其编译成JVM可以识别的字节码文件。</li>\n<li>在该源文件目录下，通过javac编译工具对Test.java文件进行编译。</li>\n<li>如果程序没有错误，没有任何提示，但在当前目录下会出现一个Test.class文件，该文件称为字节码文件，也是可以执行的java的程序。<h3 id=\"步骤三：运行\"><a href=\"#步骤三：运行\" class=\"headerlink\" title=\"步骤三：运行\"></a>步骤三：运行</h3></li>\n<li>有了可执行的java程序(Test.class字节码文件)</li>\n<li>通过运行工具java.exe对字节码文件进行执行。</li>\n<li>出现提示：缺少一个名称为main的方法。</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/ED0LQO.png\" alt=\"ED0LQO.png\"></p>\n<ul>\n<li>因为一个程序的执行需要一个起始点或者入口，所以在Test类中的加入public static void main(String[] args){  }</li>\n<li>对修改后的Test.java源文件需要重新编译，生成新的class文件后，再进行执行。</li>\n<li>发现没有编译失败，但也没有任何效果，因为并没有告诉JVM要帮我们做什么事情，也就是没有可以具体执行的语句。</li>\n<li>想要和JVM来个互动，只要在main方法中加入一句System.out.println(“Hello World”);因为程序进行改动，所以再重新编译，运行即可。<h1 id=\"1-7-常见问题及解决方法\"><a href=\"#1-7-常见问题及解决方法\" class=\"headerlink\" title=\"1-7 常见问题及解决方法\"></a>1-7 常见问题及解决方法</h1></li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBuYq.png\" alt=\"EDBuYq.png\"></p>\n<p>Ø源文件名不存在或者写错<br>Ø当前路径错误<br>Ø后缀名隐藏问题</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBJ0J.png\" alt=\"EDBJ0J.png\"></p>\n<p>Ø类文件名写错，尤其文件名与类名不一致时，要小心<br>Ø类文件不在当前路径下，或者不在classpath指定路径下</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBgAA.png\" alt=\"EDBgAA.png\"></p>\n<p>Ø声明为public的类应与文件名一致，否知编译失败</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDBh1f.png\" alt=\"EDBh1f.png\"></p>\n<p>Ø编译失败，注意错误出现的行数，再到源代码中指定位置改错</p>\n<h2 id=\"小总结：\"><a href=\"#小总结：\" class=\"headerlink\" title=\"小总结：\"></a>小总结：</h2><p>学习编程最容易犯的错是语法错误。Java要求你必须按照语法规则编写代码。如果你的程序违反了语法规则，例如：忘记了分号、大括号、引号，或者拼错了单词，java编译器都会报语法错误。尝试着去看懂编译器会报告的错误信息。</p>\n<h1 id=\"1-8-注释-Comment\"><a href=\"#1-8-注释-Comment\" class=\"headerlink\" title=\"1-8 注释(Comment)\"></a>1-8 注释(Comment)</h1><p>用于注解说明解释程序的文字就是注释。<br>Java中的注释类型：</p>\n<ul>\n<li>单行注释    格式： //注释文字</li>\n<li>多行注释    格式：   /<em>  注释文字 </em>/</li>\n<li><p>文档注释 (java特有)</p>\n</li>\n<li><p>对于单行和多行注释，被注释的文字，不会被JVM（java虚拟机）解释执行。</p>\n</li>\n<li>多行注释里面不允许有多行注释嵌套。</li>\n<li>格式：/**  <pre><code>@author  指定java程序的作者  \n@version  指定源文件的版本                 \n       */\n</code></pre></li>\n</ul>\n<p>注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。<br>提高了代码的阅读性；调试程序的重要方法。<br>注释是一个程序员必须要具有的良好编程习惯。<br>将自己的思想通过注释先整理出来，再用代码去体现</p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDnDe.png\" alt=\"EDDnDe.png\"></p>\n<h2 id=\"小结第一个程序\"><a href=\"#小结第一个程序\" class=\"headerlink\" title=\"小结第一个程序\"></a>小结第一个程序</h2><ul>\n<li>Java源文件以“java”为扩展名。源文件的基本组成部分是类（class），如本例中的HelloWorld类。</li>\n<li>Java应用程序的执行入口是main()方法。它有固定的书写格式：<br> public static void main(String[] args)  {…}</li>\n<li>Java语言严格区分大小写。</li>\n<li>Java方法由一条条语句构成，每个语句以“;”结束。</li>\n<li>大括号都是成对出现的，缺一不可。</li>\n<li>一个源文件中最多只能有一个public类。其它类的个数不限，如果源文件包含一个public类，则文件名必须按该类名命名。<h1 id=\"1-9-Java-API文档\"><a href=\"#1-9-Java-API文档\" class=\"headerlink\" title=\"1-9 Java API文档\"></a>1-9 Java API文档</h1>API （Application Programming Interface,应用程序编程接口）是 Java 提供的基本编程接口。<br>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的API文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。<br>下载API：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>Additional Resources-Java SE 8 Documentation下载。  <h1 id=\"1-10-良好的编程风格\"><a href=\"#1-10-良好的编程风格\" class=\"headerlink\" title=\"1.10 良好的编程风格\"></a>1.10 良好的编程风格</h1><h2 id=\"正确的注释和注释风格\"><a href=\"#正确的注释和注释风格\" class=\"headerlink\" title=\"正确的注释和注释风格\"></a>正确的注释和注释风格</h2></li>\n<li>使用文档注释来注释整个类或整个方法。</li>\n<li>如果注释方法中的某一个步骤，使用单行或多行注释。<br>正确的缩进和空白</li>\n<li>使用一次tab操作，实现缩进</li>\n<li>运算符两边习惯性各加一个空格。比如：2 + 4 * 5。<br>块的风格</li>\n<li>Java API 源代码选择了行尾风格</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">行尾风格</span><br><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        System.out.println(&quot;Block Style!&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">次行风格</span><br><span class=\"line\">public class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(&quot;Block Style!&quot;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"选择合适的文本编辑器或-IDE-开发\"><a href=\"#选择合适的文本编辑器或-IDE-开发\" class=\"headerlink\" title=\"选择合适的文本编辑器或 IDE 开发\"></a>选择合适的文本编辑器或 IDE 开发</h1><h2 id=\"JBuilder\"><a href=\"#JBuilder\" class=\"headerlink\" title=\"JBuilder\"></a>JBuilder</h2><p>JBuilder是Borland公司开发的针对java的开发工具，使用JBuilder将可以快速，有效的开发各类java应用。 Jbuilder支持各种应用服务器。Jbuilder与Inprise Application Server紧密集成，同时支持WebLogic Server，支持EJB 1.1和EJB 2.0，可以快速开发J2EE的电子商务应用。支持远程调试和多线程调试，调试器支持各种JDK版本<br><a href=\"https://edn.embarcadero.com/cn/jbuilder\" target=\"_blank\" rel=\"noopener\">https://edn.embarcadero.com/cn/jbuilder</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDDCq.png\" alt=\"EDDDCq.png\"></p>\n<h2 id=\"NetBeans\"><a href=\"#NetBeans\" class=\"headerlink\" title=\"NetBeans\"></a>NetBeans</h2><p>NetBeans是一款用Java编写的开源IDE。既可用于Java开发，也支持其他语言，特别是PHP、C/C ++，和HTML5。NetBeans开发环境提供了丰富的产品文档和培训资源以及大量的第三方插件。<br><a href=\"https://netbeans.org/features/index.html\" target=\"_blank\" rel=\"noopener\">https://netbeans.org/features/index.html</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDqqe.png\" alt=\"EDDqqe.png\"></p>\n<h2 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h2><p>Eclipse应该是大多数Java程序员使用的第一个IDE。众所周知的、最流行、也最受欢迎的Java开发工具。优点很多：免费、更新快、代码智能化、ANT构建等，拥有众多插件，完全免费、有中文版、上手比较快。缺点也非常明显，安装插件麻烦、插件对版本要求比较严格。</p>\n<p><a href=\"https://eclipse.org/\" target=\"_blank\" rel=\"noopener\">https://eclipse.org/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDDxPI.png\" alt=\"EDDxPI.png\"></p>\n<h2 id=\"MyEclipse\"><a href=\"#MyEclipse\" class=\"headerlink\" title=\"MyEclipse\"></a>MyEclipse</h2><p>MyEclipse也是一款功能强大的J2EE集成开发环境，由Genuitec公司发布，提供免费版和收费版。但免费版，只能满足基本开发需求<br><a href=\"https://www.myeclipsecn.com/\" target=\"_blank\" rel=\"noopener\">https://www.myeclipsecn.com/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDrPsS.png\" alt=\"EDrPsS.png\"></p>\n<p>ØIntelliJ IDEA<br>IntelliJ IDEA被认为是目前Java开发效率最快的IDE工具。是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格。它整合了开发过程中实用的众多功能，智能提示错误，强大的调试工具，Ant，JavaEE支持，CVS整合，最大程度的加快开发的速度。简单而又功能强大。与其他的一些繁冗而复杂的IDE工具有鲜明的对比。<br><a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/idea/</a></p>\n<p><img src=\"https://s2.ax1x.com/2019/05/06/EDrAaj.png\" alt=\"EDrAaj.png\"></p>\n","categories":["JavaSE基础"],"tags":["Java SE"]},{"title":"不要只从别人嘴里去认识一个人","url":"http://yoursite.com/2016/06/17/鸡汤-不要只从别人嘴里去认识一个人/","content":"<p><img src=\"https://raw.githubusercontent.com/SomnambulistOfChina/photo_GitHub/master/photo/20190609005035.gif\" alt></p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>&emsp;&emsp;你是不是也经常这样？新认识一个人或者对某人感兴趣，总会忍不住先去向别人打听他的信息，询问他的性格、喜好、过往……</p>\n<p>&emsp;&emsp;我们总是习惯从别人嘴里去认识一个人，这当然有参考的价值。只是，不要只从别人嘴里去认识一个人。</p>\n<p>&emsp;&emsp;朋友小娴讲过她的一段经历。她曾经和公司的一个男孩互有好感，男孩经常主动约小娴吃饭。当两人关系想进一步时，有朋友告诉小娴：“听说他蛮花心的，在和你走得很近的时候，他经常和一个女孩交往密切。”</p>\n<p>&emsp;&emsp;小娴虽然不太愿意相信，可心里却忍不住计较了起来。碰巧的是，有次她无意中看见有个女生在楼下等男孩下班。</p>\n<p>&emsp;&emsp;在那之后，小娴就对男孩避而远之，爱理不理。男孩感受到了小娴的疏远，以为小娴不喜欢他，就再也没主动联系过。两人还没来得及开始的故事，就此草草收场。</p>\n<p>&emsp;&emsp;后来公司聚餐，有人忍不住问男孩楼下等他的女孩是谁。那一刻，小娴才知道——女孩是男孩的妹妹。</p>\n<p>&emsp;&emsp;小娴怎么也没想到这么狗血的剧情竟然会发生在自己身上，她既气恼别人的风言风语，但更气恼自己有误会不去问清楚，反而信以为真。</p>\n<p>&emsp;&emsp;生活中，有多少关系因为一句“我听说他怎么样”而告终。信任一个人很难，而误会一个人实在太简单了。</p>\n<blockquote>\n<ul>\n<li>所以，别只从别人嘴里去认识一个人。用心用时间去了解一个人，比任何传言都可靠。</li>\n</ul>\n</blockquote>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>&emsp;&emsp;同样的，只从别人嘴里了解一件事，往往也很难真正看清事情的全貌。</p>\n<p>&emsp;&emsp;我们都听过盲人摸象的故事，每个人看待一件事的角度不一样，每个人眼中的事实也就不一样。正如诗里说的：“横看成岭侧成峰，远近高低各不同。”</p>\n<p>&emsp;&emsp;生活中有些事情并不是非黑即白、非对即错。任何时候都要保持一份清醒，别随波逐流，别盲目轻信。</p>\n<p>&emsp;&emsp;而面对选择时，我们也经常忐忑不安，总想从别人那里得到一个答案：选专业，会问身边的哥哥姐姐哪个专业好；换工作，会问做过这一行的人的心得体会；感情面对困惑，会问一些过来人原因……</p>\n<p>&emsp;&emsp;我们总想快一点知道一所学校好不好、一份工作值不值得做、一个人值不值得爱。</p>\n<blockquote>\n<ul>\n<li>慎重一点、多参考别人意见是没错，但太在意别人的答案也很难过好自己的人生。</li>\n</ul>\n</blockquote>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>&emsp;&emsp;我们每个人都有自己的人生经历，然后根据自己的经历给出一些答案，这些答案或多或少都带有主观色彩。别人的答案，未必就完全契合你。</p>\n<p>&emsp;&emsp;适合别人的选择未必适合你，别人眼里的好事不一定对你来说就是好事，别人眼中的坏事也不一定就对你有害。</p>\n<p>&emsp;&emsp;这个世界上，最了解你的人不是别人而是你自己；这个世界上，最适合你的路终究是自己一步步走出来的。</p>\n<p>&emsp;&emsp;愿你从今天起，不再只活在别人的眼里和嘴里。别只从别人嘴里去认识一个人，别只从别人嘴里去了解一件事，别只从别人嘴里去要一个答案。</p>\n<blockquote>\n<ul>\n<li>听从你心，爱你所爱，行你所行。酸甜苦辣，自己品了，才知道真正的味道。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>愿你，不慌张，不迷茫，笑着向前，越走越甜。</li>\n</ul>\n</blockquote>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"微笑面对","url":"http://yoursite.com/2016/05/06/微笑面对/","content":"<p>生活中难免遇到许多我们无法预测的事<br>有的人选择逃避<br>有的人选择面对<br>二种选择都充满苦涩<br>请把苦涩与泪水留给夜里的自己<br>他催促我们成长</p>\n<hr>\n<p>第一篇博客不谈工作</p>\n<p>date: 2016-05-06 21:32:20</p>\n<hr>\n","categories":["心情瞬间"],"tags":["人生感悟"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]